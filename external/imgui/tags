!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FIELD_DESCRIPTION!ObjectiveC	category	/category attached to the class/
!_TAG_FIELD_DESCRIPTION!ObjectiveC	protocols	/protocols that the class (or category) confirms to/
!_TAG_FIELD_DESCRIPTION!XML	uri	/uri associated with name prefix/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!CMake	D,option	/options specified with -D/
!_TAG_KIND_DESCRIPTION!CMake	f,function	/functions/
!_TAG_KIND_DESCRIPTION!CMake	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!CMake	p,project	/projects/
!_TAG_KIND_DESCRIPTION!CMake	t,target	/targets/
!_TAG_KIND_DESCRIPTION!CMake	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!DosBatch	l,label	/labels/
!_TAG_KIND_DESCRIPTION!DosBatch	v,variable	/variables/
!_TAG_KIND_DESCRIPTION!Gdbinit	d,definition	/definitions/
!_TAG_KIND_DESCRIPTION!Gdbinit	t,toplevelVariable	/toplevel variables/
!_TAG_KIND_DESCRIPTION!HTML	C,stylesheet	/stylesheets/
!_TAG_KIND_DESCRIPTION!HTML	I,id	/identifiers/
!_TAG_KIND_DESCRIPTION!HTML	J,script	/scripts/
!_TAG_KIND_DESCRIPTION!HTML	a,anchor	/named anchors/
!_TAG_KIND_DESCRIPTION!HTML	c,class	/classes/
!_TAG_KIND_DESCRIPTION!HTML	h,heading1	/H1 headings/
!_TAG_KIND_DESCRIPTION!HTML	i,heading2	/H2 headings/
!_TAG_KIND_DESCRIPTION!HTML	j,heading3	/H3 headings/
!_TAG_KIND_DESCRIPTION!HTML	t,title	/titles/
!_TAG_KIND_DESCRIPTION!Kotlin	C,constant	/constants/
!_TAG_KIND_DESCRIPTION!Kotlin	T,typealias	/typealiases/
!_TAG_KIND_DESCRIPTION!Kotlin	c,class	/classes/
!_TAG_KIND_DESCRIPTION!Kotlin	i,interface	/interfaces/
!_TAG_KIND_DESCRIPTION!Kotlin	m,method	/methods/
!_TAG_KIND_DESCRIPTION!Kotlin	o,object	/objects/
!_TAG_KIND_DESCRIPTION!Kotlin	p,package	/packages/
!_TAG_KIND_DESCRIPTION!Kotlin	v,variable	/variables/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_KIND_DESCRIPTION!ObjectiveC	C,category	/categories/
!_TAG_KIND_DESCRIPTION!ObjectiveC	E,field	/Object field/
!_TAG_KIND_DESCRIPTION!ObjectiveC	I,implementation	/class implementation/
!_TAG_KIND_DESCRIPTION!ObjectiveC	M,macro	/A preprocessor macro/
!_TAG_KIND_DESCRIPTION!ObjectiveC	P,protocol	/Protocol/
!_TAG_KIND_DESCRIPTION!ObjectiveC	c,class	/Class' method/
!_TAG_KIND_DESCRIPTION!ObjectiveC	e,enum	/An enumeration/
!_TAG_KIND_DESCRIPTION!ObjectiveC	f,function	/A function/
!_TAG_KIND_DESCRIPTION!ObjectiveC	i,interface	/class interface/
!_TAG_KIND_DESCRIPTION!ObjectiveC	m,method	/Object's method/
!_TAG_KIND_DESCRIPTION!ObjectiveC	p,property	/A property/
!_TAG_KIND_DESCRIPTION!ObjectiveC	s,struct	/A type structure/
!_TAG_KIND_DESCRIPTION!ObjectiveC	t,typedef	/A type alias/
!_TAG_KIND_DESCRIPTION!ObjectiveC	v,var	/Global variable/
!_TAG_KIND_DESCRIPTION!PlistXML	k,key	/keys/
!_TAG_KIND_DESCRIPTION!Sh	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!Sh	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Sh	h,heredoc	/label for here document/
!_TAG_KIND_DESCRIPTION!Sh	s,script	/script files/
!_TAG_KIND_DESCRIPTION!XML	i,id	/id attributes/
!_TAG_KIND_DESCRIPTION!XML	n,nsprefix	/namespace prefixes/
!_TAG_KIND_DESCRIPTION!XML	r,root	/root elements/
!_TAG_KIND_DESCRIPTION!Yaml	a,anchor	/anchors/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	0.0	/current.age/
!_TAG_PARSER_VERSION!CMake	0.0	/current.age/
!_TAG_PARSER_VERSION!DosBatch	0.0	/current.age/
!_TAG_PARSER_VERSION!Gdbinit	0.0	/current.age/
!_TAG_PARSER_VERSION!HTML	0.0	/current.age/
!_TAG_PARSER_VERSION!Kotlin	0.0	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	0.0	/current.age/
!_TAG_PARSER_VERSION!ObjectiveC	0.0	/current.age/
!_TAG_PARSER_VERSION!PlistXML	0.0	/current.age/
!_TAG_PARSER_VERSION!Sh	0.0	/current.age/
!_TAG_PARSER_VERSION!XML	0.0	/current.age/
!_TAG_PARSER_VERSION!Yaml	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	D:/vids/external/imgui/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/1901123/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!HTML!class	attribute	/assigned as attributes/
!_TAG_ROLE_DESCRIPTION!HTML!script	extFile	/referenced as external files/
!_TAG_ROLE_DESCRIPTION!HTML!stylesheet	extFile	/referenced as external files/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
!_TAG_ROLE_DESCRIPTION!Sh!heredoc	endmarker	/end marker/
!_TAG_ROLE_DESCRIPTION!Sh!script	loaded	/loaded/
!_TAG_ROLE_DESCRIPTION!Yaml!anchor	alias	/alias/
$(EXE)	./examples/example_glfw_metal/Makefile	/^$(EXE): $(OBJS)$/;"	t
$(EXE)	./examples/example_glfw_opengl2/Makefile	/^$(EXE): $(OBJS)$/;"	t
$(EXE)	./examples/example_glfw_opengl3/Makefile	/^$(EXE): $(OBJS)$/;"	t
$(EXE)	./examples/example_glut_opengl2/Makefile	/^$(EXE): $(OBJS)$/;"	t
$(EXE)	./examples/example_null/Makefile	/^$(EXE): $(OBJS)$/;"	t
$(EXE)	./examples/example_sdl2_metal/Makefile	/^$(EXE): $(OBJS)$/;"	t
$(EXE)	./examples/example_sdl2_opengl2/Makefile	/^$(EXE): $(OBJS)$/;"	t
$(EXE)	./examples/example_sdl2_opengl3/Makefile	/^$(EXE): $(OBJS)$/;"	t
$(EXE)	./examples/example_sdl2_sdlrenderer2/Makefile	/^$(EXE): $(OBJS)$/;"	t
$(EXE)	./examples/example_sdl3_opengl3/Makefile	/^$(EXE): $(OBJS)$/;"	t
$(EXE)	./examples/example_sdl3_sdlrenderer3/Makefile	/^$(EXE): $(OBJS)$/;"	t
%.o	./examples/example_glfw_metal/Makefile	/^%.o:$(IMGUI_DIR)\/%.cpp$/;"	t
%.o	./examples/example_glfw_metal/Makefile	/^%.o:$(IMGUI_DIR)\/backends\/%.cpp$/;"	t
%.o	./examples/example_glfw_metal/Makefile	/^%.o:$(IMGUI_DIR)\/backends\/%.mm$/;"	t
%.o	./examples/example_glfw_metal/Makefile	/^%.o:%.cpp$/;"	t
%.o	./examples/example_glfw_metal/Makefile	/^%.o:%.mm$/;"	t
%.o	./examples/example_glfw_opengl2/Makefile	/^%.o:$(IMGUI_DIR)\/%.cpp$/;"	t
%.o	./examples/example_glfw_opengl2/Makefile	/^%.o:$(IMGUI_DIR)\/backends\/%.cpp$/;"	t
%.o	./examples/example_glfw_opengl2/Makefile	/^%.o:%.cpp$/;"	t
%.o	./examples/example_glfw_opengl3/Makefile	/^%.o:$(IMGUI_DIR)\/%.cpp$/;"	t
%.o	./examples/example_glfw_opengl3/Makefile	/^%.o:$(IMGUI_DIR)\/backends\/%.cpp$/;"	t
%.o	./examples/example_glfw_opengl3/Makefile	/^%.o:%.cpp$/;"	t
%.o	./examples/example_glut_opengl2/Makefile	/^%.o:$(IMGUI_DIR)\/%.cpp$/;"	t
%.o	./examples/example_glut_opengl2/Makefile	/^%.o:$(IMGUI_DIR)\/backends\/%.cpp$/;"	t
%.o	./examples/example_glut_opengl2/Makefile	/^%.o:%.cpp$/;"	t
%.o	./examples/example_null/Makefile	/^%.o:$(IMGUI_DIR)\/%.cpp$/;"	t
%.o	./examples/example_null/Makefile	/^%.o:$(IMGUI_DIR)\/backends\/%.cpp$/;"	t
%.o	./examples/example_null/Makefile	/^%.o:$(IMGUI_DIR)\/misc\/freetype\/%.cpp$/;"	t
%.o	./examples/example_null/Makefile	/^%.o:%.cpp$/;"	t
%.o	./examples/example_sdl2_metal/Makefile	/^%.o:$(IMGUI_DIR)\/%.cpp$/;"	t
%.o	./examples/example_sdl2_metal/Makefile	/^%.o:$(IMGUI_DIR)\/backends\/%.cpp$/;"	t
%.o	./examples/example_sdl2_metal/Makefile	/^%.o:$(IMGUI_DIR)\/backends\/%.mm$/;"	t
%.o	./examples/example_sdl2_metal/Makefile	/^%.o:%.cpp$/;"	t
%.o	./examples/example_sdl2_metal/Makefile	/^%.o:%.mm$/;"	t
%.o	./examples/example_sdl2_opengl2/Makefile	/^%.o:$(IMGUI_DIR)\/%.cpp$/;"	t
%.o	./examples/example_sdl2_opengl2/Makefile	/^%.o:$(IMGUI_DIR)\/backends\/%.cpp$/;"	t
%.o	./examples/example_sdl2_opengl2/Makefile	/^%.o:%.cpp$/;"	t
%.o	./examples/example_sdl2_opengl3/Makefile	/^%.o:$(IMGUI_DIR)\/%.cpp$/;"	t
%.o	./examples/example_sdl2_opengl3/Makefile	/^%.o:$(IMGUI_DIR)\/backends\/%.cpp$/;"	t
%.o	./examples/example_sdl2_opengl3/Makefile	/^%.o:%.cpp$/;"	t
%.o	./examples/example_sdl2_sdlrenderer2/Makefile	/^%.o:$(IMGUI_DIR)\/%.cpp$/;"	t
%.o	./examples/example_sdl2_sdlrenderer2/Makefile	/^%.o:$(IMGUI_DIR)\/backends\/%.cpp$/;"	t
%.o	./examples/example_sdl2_sdlrenderer2/Makefile	/^%.o:%.cpp$/;"	t
%.o	./examples/example_sdl3_opengl3/Makefile	/^%.o:$(IMGUI_DIR)\/%.cpp$/;"	t
%.o	./examples/example_sdl3_opengl3/Makefile	/^%.o:$(IMGUI_DIR)\/backends\/%.cpp$/;"	t
%.o	./examples/example_sdl3_opengl3/Makefile	/^%.o:%.cpp$/;"	t
%.o	./examples/example_sdl3_sdlrenderer3/Makefile	/^%.o:$(IMGUI_DIR)\/%.cpp$/;"	t
%.o	./examples/example_sdl3_sdlrenderer3/Makefile	/^%.o:$(IMGUI_DIR)\/backends\/%.cpp$/;"	t
%.o	./examples/example_sdl3_sdlrenderer3/Makefile	/^%.o:%.cpp$/;"	t
'Issues' vs 'Discussions'	./docs/CONTRIBUTING.md	/^## 'Issues' vs 'Discussions'$/;"	s	chapter:Contributing Guidelines
(1) Invalid filename due to use of `\\` or unexpected working directory.	./docs/FONTS.md	/^### (1) Invalid filename due to use of `\\` or unexpected working directory.$/;"	S	section:Troubleshooting
(2) Invalid UTF-8 encoding of your non-ASCII strings.	./docs/FONTS.md	/^### (2) Invalid UTF-8 encoding of your non-ASCII strings.$/;"	S	section:Troubleshooting
(3) Missing glyph ranges.	./docs/FONTS.md	/^### (3) Missing glyph ranges.$/;"	S	section:Troubleshooting
(4) Font atlas texture fails to upload to GPU.	./docs/FONTS.md	/^### (4) Font atlas texture fails to upload to GPU.$/;"	S	section:Troubleshooting
ALLEGRO_HAS_CLIPBOARD	./backends/imgui_impl_allegro5.cpp	/^#define ALLEGRO_HAS_CLIPBOARD /;"	d	file:
ALLEGRO_HAS_DRAW_INDEXED_PRIM	./backends/imgui_impl_allegro5.cpp	/^#define ALLEGRO_HAS_DRAW_INDEXED_PRIM /;"	d	file:
APIENTRY	./backends/imgui_impl_opengl2.cpp	/^#define APIENTRY __stdcall                  \/\/ It is customary to use APIENTRY for OpenGL func/;"	d	file:
APIENTRY	./backends/imgui_impl_opengl3_loader.h	/^#define APIENTRY$/;"	d
APIENTRY	./examples/libs/glfw/include/GLFW/glfw3.h	/^  #define APIENTRY /;"	d
APIENTRYP	./backends/imgui_impl_opengl3_loader.h	/^#define APIENTRYP /;"	d
APPLE_HAS_BUTTON_OPTIONS	./backends/imgui_impl_osx.mm	/^#define APPLE_HAS_BUTTON_OPTIONS (__IPHONE_OS_VERSION_MIN_REQUIRED >= 130000 || __MAC_OS_X_VERSI/;"	M
APPLE_HAS_CONTROLLER	./backends/imgui_impl_osx.mm	/^#define APPLE_HAS_CONTROLLER     (__IPHONE_OS_VERSION_MIN_REQUIRED >= 140000 || __MAC_OS_X_VERSI/;"	M
APPLE_HAS_THUMBSTICKS	./backends/imgui_impl_osx.mm	/^#define APPLE_HAS_THUMBSTICKS    (__IPHONE_OS_VERSION_MIN_REQUIRED >= 120100 || __MAC_OS_X_VERSI/;"	M
APP_USE_VULKAN_DEBUG_REPORT	./examples/example_glfw_vulkan/main.cpp	/^#define APP_USE_VULKAN_DEBUG_REPORT$/;"	d	file:
APP_USE_VULKAN_DEBUG_REPORT	./examples/example_sdl2_vulkan/main.cpp	/^#define APP_USE_VULKAN_DEBUG_REPORT$/;"	d	file:
About Filenames	./docs/FONTS.md	/^## About Filenames$/;"	s
About Gamma Correct Blending	./misc/freetype/README.md	/^### About Gamma Correct Blending$/;"	S	chapter:imgui_freetype
About UTF-8 Encoding	./docs/FONTS.md	/^## About UTF-8 Encoding$/;"	s
AcceptDragDropPayload	./imgui.cpp	/^const ImGuiPayload* ImGui::AcceptDragDropPayload(const char* type, ImGuiDragDropFlags flags)$/;"	f	class:ImGui	typeref:typename:const ImGuiPayload *
ActivateItemByID	./imgui.cpp	/^void ImGui::ActivateItemByID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
Active	./imgui_internal.h	/^    bool                    Active;                             \/\/ Set to true on Begin(), unl/;"	m	struct:ImGuiWindow	typeref:typename:bool
ActiveId	./imgui_internal.h	/^    ImGuiID                 ActiveId;                           \/\/ Active widget$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
ActiveIdAllowOverlap	./imgui_internal.h	/^    bool                    ActiveIdAllowOverlap;               \/\/ Active widget allows anothe/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdClickOffset	./imgui_internal.h	/^    ImVec2                  ActiveIdClickOffset;                \/\/ Clicked offset from upper-l/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
ActiveIdFromShortcut	./imgui_internal.h	/^    bool                    ActiveIdFromShortcut;$/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdHasBeenEditedBefore	./imgui_internal.h	/^    bool                    ActiveIdHasBeenEditedBefore;        \/\/ Was the value associated to/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdHasBeenEditedThisFrame	./imgui_internal.h	/^    bool                    ActiveIdHasBeenEditedThisFrame;$/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdHasBeenPressedBefore	./imgui_internal.h	/^    bool                    ActiveIdHasBeenPressedBefore;       \/\/ Track whether the active id/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdIsAlive	./imgui_internal.h	/^    ImGuiID                 ActiveIdIsAlive;                    \/\/ Active widget has been seen/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
ActiveIdIsJustActivated	./imgui_internal.h	/^    bool                    ActiveIdIsJustActivated;            \/\/ Set at the time of activati/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdMouseButton	./imgui_internal.h	/^    int                     ActiveIdMouseButton : 8;$/;"	m	struct:ImGuiContext	typeref:typename:int:8
ActiveIdNoClearOnFocusLoss	./imgui_internal.h	/^    bool                    ActiveIdNoClearOnFocusLoss;         \/\/ Disable losing active id if/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdPreviousFrame	./imgui_internal.h	/^    ImGuiID                 ActiveIdPreviousFrame;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
ActiveIdPreviousFrameHasBeenEditedBefore	./imgui_internal.h	/^    bool                    ActiveIdPreviousFrameHasBeenEditedBefore;$/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdPreviousFrameIsAlive	./imgui_internal.h	/^    bool                    ActiveIdPreviousFrameIsAlive;$/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdPreviousFrameWindow	./imgui_internal.h	/^    ImGuiWindow*            ActiveIdPreviousFrameWindow;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
ActiveIdSource	./imgui_internal.h	/^    ImGuiInputSource        ActiveIdSource;                     \/\/ Activating source: ImGuiInp/;"	m	struct:ImGuiContext	typeref:typename:ImGuiInputSource
ActiveIdTimer	./imgui_internal.h	/^    float                   ActiveIdTimer;$/;"	m	struct:ImGuiContext	typeref:typename:float
ActiveIdUsingAllKeyboardKeys	./imgui_internal.h	/^    bool                    ActiveIdUsingAllKeyboardKeys;       \/\/ Active widget will want to /;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdUsingNavDirMask	./imgui_internal.h	/^    ImU32                   ActiveIdUsingNavDirMask;            \/\/ Active widget will want to /;"	m	struct:ImGuiContext	typeref:typename:ImU32
ActiveIdWindow	./imgui_internal.h	/^    ImGuiWindow*            ActiveIdWindow;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
ActiveTexture	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLACTIVETEXTUREPROC            ActiveTexture;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLACTIVETEXTUREPROC
AdapterIndexToStorageId	./imgui.h	/^    ImGuiID         (*AdapterIndexToStorageId)(ImGuiSelectionBasicStorage* self, int idx);      /;"	m	struct:ImGuiSelectionBasicStorage	typeref:typename:ImGuiID (*)(ImGuiSelectionBasicStorage * self,int idx)
AdapterSetItemSelected	./imgui.h	/^    void            (*AdapterSetItemSelected)(ImGuiSelectionExternalStorage* self, int idx, bool/;"	m	struct:ImGuiSelectionExternalStorage	typeref:typename:void (*)(ImGuiSelectionExternalStorage * self,int idx,bool selected)
Add	./imgui_internal.h	/^    T*          Add()                               { int idx = FreeIdx; if (idx == Buf.Size) { /;"	f	struct:ImPool	typeref:typename:T *
Add	./imgui_internal.h	/^    void        Add(const ImRect& r)                { if (Min.x > r.Min.x) Min.x = r.Min.x; if (/;"	f	struct:ImRect	typeref:typename:void
Add	./imgui_internal.h	/^    void        Add(const ImVec2& p)                { if (Min.x > p.x)     Min.x = p.x;     if (/;"	f	struct:ImRect	typeref:typename:void
AddBezierCubic	./imgui_draw.cpp	/^void ImDrawList::AddBezierCubic(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVe/;"	f	class:ImDrawList	typeref:typename:void
AddBezierQuadratic	./imgui_draw.cpp	/^void ImDrawList::AddBezierQuadratic(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 /;"	f	class:ImDrawList	typeref:typename:void
AddCallback	./imgui_draw.cpp	/^void ImDrawList::AddCallback(ImDrawCallback callback, void* callback_data)$/;"	f	class:ImDrawList	typeref:typename:void
AddChar	./imgui.h	/^    inline void     AddChar(ImWchar c)      { SetBit(c); }                      \/\/ Add charact/;"	f	struct:ImFontGlyphRangesBuilder	typeref:typename:void
AddCircle	./imgui_draw.cpp	/^void ImDrawList::AddCircle(const ImVec2& center, float radius, ImU32 col, int num_segments, floa/;"	f	class:ImDrawList	typeref:typename:void
AddCircleFilled	./imgui_draw.cpp	/^void ImDrawList::AddCircleFilled(const ImVec2& center, float radius, ImU32 col, int num_segments/;"	f	class:ImDrawList	typeref:typename:void
AddConcavePolyFilled	./imgui_draw.cpp	/^void ImDrawList::AddConcavePolyFilled(const ImVec2* points, const int points_count, ImU32 col)$/;"	f	class:ImDrawList	typeref:typename:void
AddContextHook	./imgui.cpp	/^ImGuiID ImGui::AddContextHook(ImGuiContext* ctx, const ImGuiContextHook* hook)$/;"	f	class:ImGui	typeref:typename:ImGuiID
AddConvexPolyFilled	./imgui_draw.cpp	/^void ImDrawList::AddConvexPolyFilled(const ImVec2* points, const int points_count, ImU32 col)$/;"	f	class:ImDrawList	typeref:typename:void
AddCustomRectFontGlyph	./imgui_draw.cpp	/^int ImFontAtlas::AddCustomRectFontGlyph(ImFont* font, ImWchar id, int width, int height, float a/;"	f	class:ImFontAtlas	typeref:typename:int
AddCustomRectRegular	./imgui_draw.cpp	/^int ImFontAtlas::AddCustomRectRegular(int width, int height)$/;"	f	class:ImFontAtlas	typeref:typename:int
AddDrawCmd	./imgui_draw.cpp	/^void ImDrawList::AddDrawCmd()$/;"	f	class:ImDrawList	typeref:typename:void
AddDrawList	./imgui_draw.cpp	/^void ImDrawData::AddDrawList(ImDrawList* draw_list)$/;"	f	class:ImDrawData	typeref:typename:void
AddDrawListToDrawDataEx	./imgui_draw.cpp	/^void ImGui::AddDrawListToDrawDataEx(ImDrawData* draw_data, ImVector<ImDrawList*>* out_list, ImDr/;"	f	class:ImGui	typeref:typename:void
AddEllipse	./imgui_draw.cpp	/^void ImDrawList::AddEllipse(const ImVec2& center, const ImVec2& radius, ImU32 col, float rot, in/;"	f	class:ImDrawList	typeref:typename:void
AddEllipseFilled	./imgui_draw.cpp	/^void ImDrawList::AddEllipseFilled(const ImVec2& center, const ImVec2& radius, ImU32 col, float r/;"	f	class:ImDrawList	typeref:typename:void
AddFocusEvent	./imgui.cpp	/^void ImGuiIO::AddFocusEvent(bool focused)$/;"	f	class:ImGuiIO	typeref:typename:void
AddFont	./imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFont(const ImFontConfig* font_cfg)$/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontDefault	./imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontDefault(const ImFontConfig* font_cfg_template)$/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontFromFileTTF	./imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromFileTTF(const char* filename, float size_pixels, const ImFontCon/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontFromMemoryCompressedBase85TTF	./imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromMemoryCompressedBase85TTF(const char* compressed_ttf_data_base85/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontFromMemoryCompressedTTF	./imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromMemoryCompressedTTF(const void* compressed_ttf_data, int compres/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontFromMemoryTTF	./imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromMemoryTTF(void* font_data, int font_data_size, float size_pixels/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddGlyph	./imgui_draw.cpp	/^void ImFont::AddGlyph(const ImFontConfig* cfg, ImWchar codepoint, float x0, float y0, float x1, /;"	f	class:ImFont	typeref:typename:void
AddImage	./imgui_draw.cpp	/^void ImDrawList::AddImage(ImTextureID user_texture_id, const ImVec2& p_min, const ImVec2& p_max,/;"	f	class:ImDrawList	typeref:typename:void
AddImageQuad	./imgui_draw.cpp	/^void ImDrawList::AddImageQuad(ImTextureID user_texture_id, const ImVec2& p1, const ImVec2& p2, c/;"	f	class:ImDrawList	typeref:typename:void
AddImageRounded	./imgui_draw.cpp	/^void ImDrawList::AddImageRounded(ImTextureID user_texture_id, const ImVec2& p_min, const ImVec2&/;"	f	class:ImDrawList	typeref:typename:void
AddInputCharacter	./imgui.cpp	/^void ImGuiIO::AddInputCharacter(unsigned int c)$/;"	f	class:ImGuiIO	typeref:typename:void
AddInputCharacterUTF16	./imgui.cpp	/^void ImGuiIO::AddInputCharacterUTF16(ImWchar16 c)$/;"	f	class:ImGuiIO	typeref:typename:void
AddInputCharactersUTF8	./imgui.cpp	/^void ImGuiIO::AddInputCharactersUTF8(const char* utf8_chars)$/;"	f	class:ImGuiIO	typeref:typename:void
AddItems	./imgui_demo.cpp	/^    void AddItems(int count)$/;"	f	struct:ExampleAssetsBrowser	typeref:typename:void	file:
AddKeyAnalogEvent	./imgui.cpp	/^void ImGuiIO::AddKeyAnalogEvent(ImGuiKey key, bool down, float analog_value)$/;"	f	class:ImGuiIO	typeref:typename:void
AddKeyEvent	./imgui.cpp	/^void ImGuiIO::AddKeyEvent(ImGuiKey key, bool down)$/;"	f	class:ImGuiIO	typeref:typename:void
AddLine	./imgui_draw.cpp	/^void ImDrawList::AddLine(const ImVec2& p1, const ImVec2& p2, ImU32 col, float thickness)$/;"	f	class:ImDrawList	typeref:typename:void
AddLog	./imgui_demo.cpp	/^    void    AddLog(const char* fmt, ...) IM_FMTARGS(2)$/;"	f	struct:ExampleAppConsole	typeref:typename:void	file:
AddLog	./imgui_demo.cpp	/^    void    AddLog(const char* fmt, ...) IM_FMTARGS(2)$/;"	f	struct:ExampleAppLog	typeref:typename:void	file:
AddMouseButtonEvent	./imgui.cpp	/^void ImGuiIO::AddMouseButtonEvent(int mouse_button, bool down)$/;"	f	class:ImGuiIO	typeref:typename:void
AddMousePosEvent	./imgui.cpp	/^void ImGuiIO::AddMousePosEvent(float x, float y)$/;"	f	class:ImGuiIO	typeref:typename:void
AddMouseSourceEvent	./imgui.cpp	/^void ImGuiIO::AddMouseSourceEvent(ImGuiMouseSource source)$/;"	f	class:ImGuiIO	typeref:typename:void
AddMouseWheelEvent	./imgui.cpp	/^void ImGuiIO::AddMouseWheelEvent(float wheel_x, float wheel_y)$/;"	f	class:ImGuiIO	typeref:typename:void
AddNgon	./imgui_draw.cpp	/^void ImDrawList::AddNgon(const ImVec2& center, float radius, ImU32 col, int num_segments, float /;"	f	class:ImDrawList	typeref:typename:void
AddNgonFilled	./imgui_draw.cpp	/^void ImDrawList::AddNgonFilled(const ImVec2& center, float radius, ImU32 col, int num_segments)$/;"	f	class:ImDrawList	typeref:typename:void
AddPolyline	./imgui_draw.cpp	/^void ImDrawList::AddPolyline(const ImVec2* points, const int points_count, ImU32 col, ImDrawFlag/;"	f	class:ImDrawList	typeref:typename:void
AddQuad	./imgui_draw.cpp	/^void ImDrawList::AddQuad(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4,/;"	f	class:ImDrawList	typeref:typename:void
AddQuadFilled	./imgui_draw.cpp	/^void ImDrawList::AddQuadFilled(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec/;"	f	class:ImDrawList	typeref:typename:void
AddRanges	./imgui_draw.cpp	/^void ImFontGlyphRangesBuilder::AddRanges(const ImWchar* ranges)$/;"	f	class:ImFontGlyphRangesBuilder	typeref:typename:void
AddRect	./imgui_draw.cpp	/^void ImDrawList::AddRect(const ImVec2& p_min, const ImVec2& p_max, ImU32 col, float rounding, Im/;"	f	class:ImDrawList	typeref:typename:void
AddRectFilled	./imgui_draw.cpp	/^void ImDrawList::AddRectFilled(const ImVec2& p_min, const ImVec2& p_max, ImU32 col, float roundi/;"	f	class:ImDrawList	typeref:typename:void
AddRectFilledMultiColor	./imgui_draw.cpp	/^void ImDrawList::AddRectFilledMultiColor(const ImVec2& p_min, const ImVec2& p_max, ImU32 col_upr/;"	f	class:ImDrawList	typeref:typename:void
AddRemapChar	./imgui_draw.cpp	/^void ImFont::AddRemapChar(ImWchar dst, ImWchar src, bool overwrite_dst)$/;"	f	class:ImFont	typeref:typename:void
AddRootWindowToDrawData	./imgui.cpp	/^static inline void AddRootWindowToDrawData(ImGuiWindow* window)$/;"	f	typeref:typename:void	file:
AddSettingsHandler	./imgui.cpp	/^void ImGui::AddSettingsHandler(const ImGuiSettingsHandler* handler)$/;"	f	class:ImGui	typeref:typename:void
AddText	./imgui_draw.cpp	/^void ImDrawList::AddText(const ImFont* font, float font_size, const ImVec2& pos, ImU32 col, cons/;"	f	class:ImDrawList	typeref:typename:void
AddText	./imgui_draw.cpp	/^void ImDrawList::AddText(const ImVec2& pos, ImU32 col, const char* text_begin, const char* text_/;"	f	class:ImDrawList	typeref:typename:void
AddText	./imgui_draw.cpp	/^void ImFontGlyphRangesBuilder::AddText(const char* text, const char* text_end)$/;"	f	class:ImFontGlyphRangesBuilder	typeref:typename:void
AddTriangle	./imgui_draw.cpp	/^void ImDrawList::AddTriangle(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 col, fl/;"	f	class:ImDrawList	typeref:typename:void
AddTriangleFilled	./imgui_draw.cpp	/^void ImDrawList::AddTriangleFilled(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 c/;"	f	class:ImDrawList	typeref:typename:void
AddWindowToDrawData	./imgui.cpp	/^static void AddWindowToDrawData(ImGuiWindow* window, int layer)$/;"	f	typeref:typename:void	file:
AddWindowToSortBuffer	./imgui.cpp	/^static void AddWindowToSortBuffer(ImVector<ImGuiWindow*>* out_sorted_windows, ImGuiWindow* windo/;"	f	typeref:typename:void	file:
AddedByTestEngine	./imgui_internal.h	/^    bool                            AddedByTestEngine;$/;"	m	struct:ImGuiInputEvent	typeref:typename:bool
AdvanceX	./imgui.h	/^    float           AdvanceX;           \/\/ Distance to next character (= data from font + ImFo/;"	m	struct:ImFontGlyph	typeref:typename:float
AdvanceX	./misc/freetype/imgui_freetype.cpp	/^        float       AdvanceX;           \/\/ The distance from the origin to the origin of the n/;"	m	struct:__anon21d590df0111::GlyphInfo	typeref:typename:float	file:
AlignBufferSize	./backends/imgui_impl_vulkan.cpp	/^static inline VkDeviceSize AlignBufferSize(VkDeviceSize size, VkDeviceSize alignment)$/;"	f	typeref:typename:VkDeviceSize	file:
AlignTextToFramePadding	./imgui_widgets.cpp	/^void ImGui::AlignTextToFramePadding()$/;"	f	class:ImGui	typeref:typename:void
AliveCount	./imgui_internal.h	/^    ImPoolIdx       AliveCount; \/\/ Number of active\/alive items (for display purpose)$/;"	m	struct:ImPool	typeref:typename:ImPoolIdx
AllocCount	./imgui_internal.h	/^    ImS16       AllocCount;$/;"	m	struct:ImGuiDebugAllocEntry	typeref:typename:ImS16
Allocator	./backends/imgui_impl_vulkan.h	/^    const VkAllocationCallbacks*    Allocator;$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:const VkAllocationCallbacks *
AllowBoxSelect	./imgui_demo.cpp	/^    bool            AllowBoxSelect = true;$/;"	m	struct:ExampleAssetsBrowser	typeref:typename:bool	file:
AllowDragUnselected	./imgui_demo.cpp	/^    bool            AllowDragUnselected = false;$/;"	m	struct:ExampleAssetsBrowser	typeref:typename:bool	file:
AllowSorting	./imgui_demo.cpp	/^    bool            AllowSorting = true;$/;"	m	struct:ExampleAssetsBrowser	typeref:typename:bool	file:
Alpha	./imgui.h	/^    float       Alpha;                      \/\/ Global alpha applies to everything in Dear ImGu/;"	m	struct:ImGuiStyle	typeref:typename:float
AnalogValue	./imgui.h	/^    float       AnalogValue;        \/\/ 0.0f..1.0f for gamepad values$/;"	m	struct:ImGuiKeyData	typeref:typename:float
AnalogValue	./imgui_internal.h	/^struct ImGuiInputEventKey           { ImGuiKey Key; bool Down; float AnalogValue; };$/;"	m	struct:ImGuiInputEventKey	typeref:typename:float
AngleMax12	./imgui.cpp	/^    int     AngleMin12, AngleMax12;$/;"	m	struct:ImGuiResizeGripDef	typeref:typename:int	file:
AngleMin12	./imgui.cpp	/^    int     AngleMin12, AngleMax12;$/;"	m	struct:ImGuiResizeGripDef	typeref:typename:int	file:
AngledHeadersCount	./imgui_internal.h	/^    ImGuiTableColumnIdx         AngledHeadersCount;         \/\/ Count columns with angled heade/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
AngledHeadersExtraWidth	./imgui_internal.h	/^    float                       AngledHeadersExtraWidth;    \/\/ Used in EndTable()$/;"	m	struct:ImGuiTableTempData	typeref:typename:float
AngledHeadersHeight	./imgui_internal.h	/^    float                       AngledHeadersHeight;        \/\/ Set by TableAngledHeadersRow(),/;"	m	struct:ImGuiTable	typeref:typename:float
AngledHeadersRequests	./imgui_internal.h	/^    ImVector<ImGuiTableHeaderData> AngledHeadersRequests;   \/\/ Used in TableAngledHeadersRow()$/;"	m	struct:ImGuiTableTempData	typeref:typename:ImVector<ImGuiTableHeaderData>
AngledHeadersSlope	./imgui_internal.h	/^    float                       AngledHeadersSlope;         \/\/ Set by TableAngledHeadersRow(),/;"	m	struct:ImGuiTable	typeref:typename:float
AntiAliasedFill	./imgui.h	/^    bool        AntiAliasedFill;            \/\/ Enable anti-aliased edges around filled shapes /;"	m	struct:ImGuiStyle	typeref:typename:bool
AntiAliasedLines	./imgui.h	/^    bool        AntiAliasedLines;           \/\/ Enable anti-aliased lines\/borders. Disable if /;"	m	struct:ImGuiStyle	typeref:typename:bool
AntiAliasedLinesUseTex	./imgui.h	/^    bool        AntiAliasedLinesUseTex;     \/\/ Enable anti-aliased lines\/borders using textur/;"	m	struct:ImGuiStyle	typeref:typename:bool
AppAcceptingEvents	./imgui.h	/^    bool        AppAcceptingEvents;                 \/\/ Only modify via SetAppAcceptingEvents()$/;"	m	struct:ImGuiIO	typeref:typename:bool
AppDelegate	./examples/example_apple_metal/main.mm	/^@implementation AppDelegate$/;"	I
AppDelegate	./examples/example_apple_metal/main.mm	/^@interface AppDelegate : NSObject <NSApplicationDelegate>$/;"	i	protocols:NSApplicationDelegate
AppDelegate	./examples/example_apple_metal/main.mm	/^@interface AppDelegate : UIResponder <UIApplicationDelegate>$/;"	i	protocols:UIApplicationDelegate
AppDelegate	./examples/example_apple_opengl2/main.mm	/^@implementation AppDelegate$/;"	I
AppDelegate	./examples/example_apple_opengl2/main.mm	/^@interface AppDelegate : NSObject <NSApplicationDelegate>$/;"	i	protocols:NSApplicationDelegate
AppFocusLost	./imgui.h	/^    bool        AppFocusLost;                       \/\/ Only modify via AddFocusEvent()$/;"	m	struct:ImGuiIO	typeref:typename:bool
AppFocused	./imgui_internal.h	/^        ImGuiInputEventAppFocused   AppFocused;     \/\/ if Type == ImGuiInputEventType_Focus$/;"	m	union:ImGuiInputEvent::__anon869d752f020a	typeref:typename:ImGuiInputEventAppFocused
AppView	./examples/example_apple_opengl2/main.mm	/^@implementation AppView$/;"	I
AppView	./examples/example_apple_opengl2/main.mm	/^@interface AppView : NSOpenGLView$/;"	i
AppViewController	./examples/example_apple_metal/main.mm	/^@implementation AppViewController$/;"	I
AppViewController	./examples/example_apple_metal/main.mm	/^@interface AppViewController () <MTKViewDelegate>$/;"	i	category:MTKViewDelegate
AppViewController	./examples/example_apple_metal/main.mm	/^@interface AppViewController : NSViewController<NSWindowDelegate>$/;"	i	protocols:NSWindowDelegate
AppViewController	./examples/example_apple_metal/main.mm	/^@interface AppViewController : UIViewController$/;"	i
Appearing	./imgui_internal.h	/^    bool                    Appearing;                          \/\/ Set during the frame where /;"	m	struct:ImGuiWindow	typeref:typename:bool
ApplyAllFn	./imgui_internal.h	/^    void        (*ApplyAllFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler);                /;"	m	struct:ImGuiSettingsHandler	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler)
ApplyDeletionPostLoop	./imgui_demo.cpp	/^    void ApplyDeletionPostLoop(ImGuiMultiSelectIO* ms_io, ImVector<ITEM_TYPE>& items, int item_c/;"	f	struct:ExampleSelectionWithDeletion	typeref:typename:void	file:
ApplyDeletionPreLoop	./imgui_demo.cpp	/^    int ApplyDeletionPreLoop(ImGuiMultiSelectIO* ms_io, int items_count)$/;"	f	struct:ExampleSelectionWithDeletion	typeref:typename:int	file:
ApplyHoverFlagsForTooltip	./imgui.cpp	/^static ImGuiHoveredFlags ApplyHoverFlagsForTooltip(ImGuiHoveredFlags user_flags, ImGuiHoveredFla/;"	f	typeref:typename:ImGuiHoveredFlags	file:
ApplyRequests	./imgui_widgets.cpp	/^void ImGuiSelectionBasicStorage::ApplyRequests(ImGuiMultiSelectIO* ms_io)$/;"	f	class:ImGuiSelectionBasicStorage	typeref:typename:void
ApplyRequests	./imgui_widgets.cpp	/^void ImGuiSelectionExternalStorage::ApplyRequests(ImGuiMultiSelectIO* ms_io)$/;"	f	class:ImGuiSelectionExternalStorage	typeref:typename:void
ApplySelectionRequests	./imgui_demo.cpp	/^                static void ApplySelectionRequests(ImGuiMultiSelectIO* ms_io, ExampleTreeNode* t/;"	f	struct:ShowDemoWindowMultiSelect::ExampleTreeFuncs	typeref:typename:void	file:
ApplySelectionRequests	./imgui_demo.cpp	/^    void ApplySelectionRequests(ImGuiMultiSelectIO* ms_io, int side)$/;"	f	struct:ExampleDualListBox	typeref:typename:void	file:
ApplyWindowSettings	./imgui.cpp	/^static void ApplyWindowSettings(ImGuiWindow* window, ImGuiWindowSettings* settings)$/;"	f	typeref:typename:void	file:
ArcFastRadiusCutoff	./imgui_internal.h	/^    float           ArcFastRadiusCutoff;                        \/\/ Cutoff radius after which a/;"	m	struct:ImDrawListSharedData	typeref:typename:float
ArcFastVtx	./imgui_internal.h	/^    ImVec2          ArcFastVtx[IM_DRAWLIST_ARCFAST_TABLE_SIZE]; \/\/ Sample points on the quarte/;"	m	struct:ImDrawListSharedData	typeref:typename:ImVec2[]
ArrowButton	./imgui_widgets.cpp	/^bool ImGui::ArrowButton(const char* str_id, ImGuiDir dir)$/;"	f	class:ImGui	typeref:typename:bool
ArrowButtonEx	./imgui_widgets.cpp	/^bool ImGui::ArrowButtonEx(const char* str_id, ImGuiDir dir, ImVec2 size, ImGuiButtonFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
Ascender	./misc/freetype/imgui_freetype.cpp	/^        float       Ascender;           \/\/ The pixel extents above the baseline in pixels (typ/;"	m	struct:__anon21d590df0111::FontInfo	typeref:typename:float	file:
Ascent	./imgui.h	/^    float                       Ascent, Descent;    \/\/ 4+4   \/\/ out \/\/            \/\/ Asc/;"	m	struct:ImFont	typeref:typename:float
AspectRatio	./imgui_demo.cpp	/^        static void AspectRatio(ImGuiSizeCallbackData* data)$/;"	f	struct:ShowExampleAppConstrainedResize::CustomConstraints	typeref:typename:void	file:
AttachShader	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLATTACHSHADERPROC             AttachShader;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLATTACHSHADERPROC
AttribLocationProjMtx	./backends/imgui_impl_opengl3.cpp	/^    GLint           AttribLocationProjMtx;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLint	file:
AttribLocationTex	./backends/imgui_impl_opengl3.cpp	/^    GLint           AttribLocationTex;       \/\/ Uniforms location$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLint	file:
AttribLocationVtxColor	./backends/imgui_impl_opengl3.cpp	/^    GLuint          AttribLocationVtxColor;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLuint	file:
AttribLocationVtxPos	./backends/imgui_impl_opengl3.cpp	/^    GLuint          AttribLocationVtxPos;    \/\/ Vertex attributes location$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLuint	file:
AttribLocationVtxUV	./backends/imgui_impl_opengl3.cpp	/^    GLuint          AttribLocationVtxUV;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLuint	file:
AutoFitFramesX	./imgui_internal.h	/^    ImS8                    AutoFitFramesX, AutoFitFramesY;$/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
AutoFitFramesY	./imgui_internal.h	/^    ImS8                    AutoFitFramesX, AutoFitFramesY;$/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
AutoFitOnlyGrows	./imgui_internal.h	/^    bool                    AutoFitOnlyGrows;$/;"	m	struct:ImGuiWindow	typeref:typename:bool
AutoFitQueue	./imgui_internal.h	/^    ImU8                    AutoFitQueue;                   \/\/ Queue of 8 values for the next /;"	m	struct:ImGuiTableColumn	typeref:typename:ImU8
AutoFitSingleColumn	./imgui_internal.h	/^    ImGuiTableColumnIdx         AutoFitSingleColumn;        \/\/ Index of single column requesti/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
AutoPosLastDirection	./imgui_internal.h	/^    ImGuiDir                AutoPosLastDirection;$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiDir
AutoScroll	./imgui_demo.cpp	/^    bool                  AutoScroll;$/;"	m	struct:ExampleAppConsole	typeref:typename:bool	file:
AutoScroll	./imgui_demo.cpp	/^    bool                AutoScroll;  \/\/ Keep scrolling if already at the bottom.$/;"	m	struct:ExampleAppLog	typeref:typename:bool	file:
BACKUP_DX10_STATE	./backends/imgui_impl_dx10.cpp	/^    struct BACKUP_DX10_STATE$/;"	s	function:ImGui_ImplDX10_RenderDrawData	file:
BACKUP_DX11_STATE	./backends/imgui_impl_dx11.cpp	/^    struct BACKUP_DX11_STATE$/;"	s	function:ImGui_ImplDX11_RenderDrawData	file:
Backbuffer	./backends/imgui_impl_vulkan.h	/^    VkImage             Backbuffer;$/;"	m	struct:ImGui_ImplVulkanH_Frame	typeref:typename:VkImage
BackbufferView	./backends/imgui_impl_vulkan.h	/^    VkImageView         BackbufferView;$/;"	m	struct:ImGui_ImplVulkanH_Frame	typeref:typename:VkImageView
BackendFlags	./imgui.h	/^    ImGuiBackendFlags  BackendFlags;            \/\/ = 0              \/\/ See ImGuiBackendFlags/;"	m	struct:ImGuiIO	typeref:typename:ImGuiBackendFlags
BackendLanguageUserData	./imgui.h	/^    void*       BackendLanguageUserData;        \/\/ = NULL           \/\/ User data for non C++/;"	m	struct:ImGuiIO	typeref:typename:void *
BackendPlatformName	./imgui.h	/^    const char* BackendPlatformName;            \/\/ = NULL$/;"	m	struct:ImGuiIO	typeref:typename:const char *
BackendPlatformUserData	./imgui.h	/^    void*       BackendPlatformUserData;        \/\/ = NULL           \/\/ User data for platfor/;"	m	struct:ImGuiIO	typeref:typename:void *
BackendRendererName	./imgui.h	/^    const char* BackendRendererName;            \/\/ = NULL$/;"	m	struct:ImGuiIO	typeref:typename:const char *
BackendRendererUserData	./imgui.h	/^    void*       BackendRendererUserData;        \/\/ = NULL           \/\/ User data for rendere/;"	m	struct:ImGuiIO	typeref:typename:void *
BackendUsingLegacyKeyArrays	./imgui.h	/^    ImS8        BackendUsingLegacyKeyArrays;        \/\/ -1: unknown, 0: using AddKeyEvent(), 1:/;"	m	struct:ImGuiIO	typeref:typename:ImS8
BackendUsingLegacyNavInputArray	./imgui.h	/^    bool        BackendUsingLegacyNavInputArray;    \/\/ 0: using AddKeyAnalogEvent(), 1: writin/;"	m	struct:ImGuiIO	typeref:typename:bool
Backends for third-party frameworks, graphics API or other languages	./docs/BACKENDS.md	/^### Backends for third-party frameworks, graphics API or other languages$/;"	S	section:Dear ImGui: Backends
BackupActiveIdIsAlive	./imgui_internal.h	/^    ImGuiID     BackupActiveIdIsAlive;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImGuiID
BackupActiveIdPreviousFrameIsAlive	./imgui_internal.h	/^    bool        BackupActiveIdPreviousFrameIsAlive;$/;"	m	struct:ImGuiGroupData	typeref:typename:bool
BackupCurrLineSize	./imgui_internal.h	/^    ImVec2      BackupCurrLineSize;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec2
BackupCurrLineTextBaseOffset	./imgui_internal.h	/^    float       BackupCurrLineTextBaseOffset;$/;"	m	struct:ImGuiGroupData	typeref:typename:float
BackupCursorMaxPos	./imgui_internal.h	/^    ImVec2                  BackupCursorMaxPos;$/;"	m	struct:ImGuiMultiSelectTempData	typeref:typename:ImVec2
BackupCursorMaxPos	./imgui_internal.h	/^    ImVec2          BackupCursorMaxPos;$/;"	m	struct:ImGuiComboPreviewData	typeref:typename:ImVec2
BackupCursorMaxPos	./imgui_internal.h	/^    ImVec2      BackupCursorMaxPos;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec2
BackupCursorPos	./imgui_internal.h	/^    ImVec2              BackupCursorPos;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImVec2
BackupCursorPos	./imgui_internal.h	/^    ImVec2          BackupCursorPos;$/;"	m	struct:ImGuiComboPreviewData	typeref:typename:ImVec2
BackupCursorPos	./imgui_internal.h	/^    ImVec2      BackupCursorPos;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec2
BackupCursorPosPrevLine	./imgui_internal.h	/^    ImVec2          BackupCursorPosPrevLine;$/;"	m	struct:ImGuiComboPreviewData	typeref:typename:ImVec2
BackupCursorPosPrevLine	./imgui_internal.h	/^    ImVec2      BackupCursorPosPrevLine;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec2
BackupFloat	./imgui_internal.h	/^    union           { int BackupInt[2]; float BackupFloat[2]; };$/;"	m	union:ImGuiStyleMod::__anon869d752f010a	typeref:typename:float[2]
BackupGroupOffset	./imgui_internal.h	/^    ImVec1      BackupGroupOffset;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec1
BackupHoveredIdIsAlive	./imgui_internal.h	/^    bool        BackupHoveredIdIsAlive;$/;"	m	struct:ImGuiGroupData	typeref:typename:bool
BackupIndent	./imgui_internal.h	/^    ImVec1      BackupIndent;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec1
BackupInt	./imgui_internal.h	/^    union           { int BackupInt[2]; float BackupFloat[2]; };$/;"	m	union:ImGuiStyleMod::__anon869d752f010a	typeref:typename:int[2]
BackupIsSameLine	./imgui_internal.h	/^    bool        BackupIsSameLine;$/;"	m	struct:ImGuiGroupData	typeref:typename:bool
BackupLayout	./imgui_internal.h	/^    ImGuiLayoutType BackupLayout;$/;"	m	struct:ImGuiComboPreviewData	typeref:typename:ImGuiLayoutType
BackupPrevLineTextBaseOffset	./imgui_internal.h	/^    float           BackupPrevLineTextBaseOffset;$/;"	m	struct:ImGuiComboPreviewData	typeref:typename:float
BackupSDLRendererState	./backends/imgui_impl_sdlrenderer2.cpp	/^    struct BackupSDLRendererState$/;"	s	function:ImGui_ImplSDLRenderer2_RenderDrawData	file:
BackupSDLRendererState	./backends/imgui_impl_sdlrenderer3.cpp	/^    struct BackupSDLRendererState$/;"	s	function:ImGui_ImplSDLRenderer3_RenderDrawData	file:
BackupValue	./imgui_internal.h	/^    ImVec4          BackupValue;$/;"	m	struct:ImGuiColorMod	typeref:typename:ImVec4
BarRect	./imgui_internal.h	/^    ImRect              BarRect;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImRect
BasePtr	./imgui_internal.h	/^    char*   BasePtr;$/;"	m	struct:ImSpanAllocator	typeref:typename:char *
Begin	./imgui.cpp	/^bool ImGui::Begin(const char* name, bool* p_open, ImGuiWindowFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
Begin	./imgui.cpp	/^void ImGuiListClipper::Begin(int items_count, float items_height)$/;"	f	class:ImGuiListClipper	typeref:typename:void
BeginBoxSelect	./imgui_widgets.cpp	/^bool ImGui::BeginBoxSelect(const ImRect& scope_rect, ImGuiWindow* window, ImGuiID box_select_id,/;"	f	class:ImGui	typeref:typename:bool
BeginChild	./imgui.cpp	/^bool ImGui::BeginChild(ImGuiID id, const ImVec2& size_arg, ImGuiChildFlags child_flags, ImGuiWin/;"	f	class:ImGui	typeref:typename:bool
BeginChild	./imgui.cpp	/^bool ImGui::BeginChild(const char* str_id, const ImVec2& size_arg, ImGuiChildFlags child_flags, /;"	f	class:ImGui	typeref:typename:bool
BeginChildEx	./imgui.cpp	/^bool ImGui::BeginChildEx(const char* name, ImGuiID id, const ImVec2& size_arg, ImGuiChildFlags c/;"	f	class:ImGui	typeref:typename:bool
BeginChildFrame	./imgui.h	/^    static inline bool  BeginChildFrame(ImGuiID id, const ImVec2& size, ImGuiWindowFlags window_/;"	f	namespace:ImGui	typeref:typename:bool
BeginColumns	./imgui_tables.cpp	/^void ImGui::BeginColumns(const char* str_id, int columns_count, ImGuiOldColumnFlags flags)$/;"	f	class:ImGui	typeref:typename:void
BeginCombo	./imgui_widgets.cpp	/^bool ImGui::BeginCombo(const char* label, const char* preview_value, ImGuiComboFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginComboDepth	./imgui_internal.h	/^    int                     BeginComboDepth;$/;"	m	struct:ImGuiContext	typeref:typename:int
BeginComboPopup	./imgui_widgets.cpp	/^bool ImGui::BeginComboPopup(ImGuiID popup_id, const ImRect& bb, ImGuiComboFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginComboPreview	./imgui_widgets.cpp	/^bool ImGui::BeginComboPreview()$/;"	f	class:ImGui	typeref:typename:bool
BeginCount	./imgui_internal.h	/^    ImS8                BeginCount;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImS8
BeginCount	./imgui_internal.h	/^    short                   BeginCount;                         \/\/ Number of Begin() during th/;"	m	struct:ImGuiWindow	typeref:typename:short
BeginCountPreviousFrame	./imgui_internal.h	/^    short                   BeginCountPreviousFrame;            \/\/ Number of Begin() during th/;"	m	struct:ImGuiWindow	typeref:typename:short
BeginDisabled	./imgui.cpp	/^void ImGui::BeginDisabled(bool disabled)$/;"	f	class:ImGui	typeref:typename:void
BeginDisabledOverrideReenable	./imgui.cpp	/^void ImGui::BeginDisabledOverrideReenable()$/;"	f	class:ImGui	typeref:typename:void
BeginDragDropSource	./imgui.cpp	/^bool ImGui::BeginDragDropSource(ImGuiDragDropFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginDragDropTarget	./imgui.cpp	/^bool ImGui::BeginDragDropTarget()$/;"	f	class:ImGui	typeref:typename:bool
BeginDragDropTargetCustom	./imgui.cpp	/^bool ImGui::BeginDragDropTargetCustom(const ImRect& bb, ImGuiID id)$/;"	f	class:ImGui	typeref:typename:bool
BeginGroup	./imgui.cpp	/^void ImGui::BeginGroup()$/;"	f	class:ImGui	typeref:typename:void
BeginItemTooltip	./imgui.cpp	/^bool ImGui::BeginItemTooltip()$/;"	f	class:ImGui	typeref:typename:bool
BeginListBox	./imgui_widgets.cpp	/^bool ImGui::BeginListBox(const char* label, const ImVec2& size_arg)$/;"	f	class:ImGui	typeref:typename:bool
BeginMainMenuBar	./imgui_widgets.cpp	/^bool ImGui::BeginMainMenuBar()$/;"	f	class:ImGui	typeref:typename:bool
BeginMenu	./imgui_widgets.cpp	/^bool ImGui::BeginMenu(const char* label, bool enabled)$/;"	f	class:ImGui	typeref:typename:bool
BeginMenuBar	./imgui_widgets.cpp	/^bool ImGui::BeginMenuBar()$/;"	f	class:ImGui	typeref:typename:bool
BeginMenuDepth	./imgui_internal.h	/^    int                     BeginMenuDepth;$/;"	m	struct:ImGuiContext	typeref:typename:int
BeginMenuEx	./imgui_widgets.cpp	/^bool ImGui::BeginMenuEx(const char* label, const char* icon, bool enabled)$/;"	f	class:ImGui	typeref:typename:bool
BeginMultiSelect	./imgui_widgets.cpp	/^ImGuiMultiSelectIO* ImGui::BeginMultiSelect(ImGuiMultiSelectFlags flags, int selection_size, int/;"	f	class:ImGui	typeref:typename:ImGuiMultiSelectIO *
BeginOrder	./imgui_internal.h	/^    ImS16               BeginOrder;             \/\/ BeginTabItem() order, used to re-order tabs/;"	m	struct:ImGuiTabItem	typeref:typename:ImS16
BeginOrderWithinContext	./imgui_internal.h	/^    short                   BeginOrderWithinContext;            \/\/ Begin() order within entire/;"	m	struct:ImGuiWindow	typeref:typename:short
BeginOrderWithinParent	./imgui_internal.h	/^    short                   BeginOrderWithinParent;             \/\/ Begin() order within immedi/;"	m	struct:ImGuiWindow	typeref:typename:short
BeginPopup	./imgui.cpp	/^bool ImGui::BeginPopup(const char* str_id, ImGuiWindowFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupContextItem	./imgui.cpp	/^bool ImGui::BeginPopupContextItem(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupContextVoid	./imgui.cpp	/^bool ImGui::BeginPopupContextVoid(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupContextWindow	./imgui.cpp	/^bool ImGui::BeginPopupContextWindow(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupEx	./imgui.cpp	/^bool ImGui::BeginPopupEx(ImGuiID id, ImGuiWindowFlags extra_window_flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupModal	./imgui.cpp	/^bool ImGui::BeginPopupModal(const char* name, bool* p_open, ImGuiWindowFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupStack	./imgui_internal.h	/^    ImVector<ImGuiPopupData>        BeginPopupStack;            \/\/ Which level of BeginPopup()/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiPopupData>
BeginTabBar	./imgui_widgets.cpp	/^bool    ImGui::BeginTabBar(const char* str_id, ImGuiTabBarFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginTabBarEx	./imgui_widgets.cpp	/^bool    ImGui::BeginTabBarEx(ImGuiTabBar* tab_bar, const ImRect& tab_bar_bb, ImGuiTabBarFlags fl/;"	f	class:ImGui	typeref:typename:bool
BeginTabItem	./imgui_widgets.cpp	/^bool    ImGui::BeginTabItem(const char* label, bool* p_open, ImGuiTabItemFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginTable	./imgui_tables.cpp	/^bool    ImGui::BeginTable(const char* str_id, int columns_count, ImGuiTableFlags flags, const Im/;"	f	class:ImGui	typeref:typename:bool
BeginTableEx	./imgui_tables.cpp	/^bool    ImGui::BeginTableEx(const char* name, ImGuiID id, int columns_count, ImGuiTableFlags fla/;"	f	class:ImGui	typeref:typename:bool
BeginTooltip	./imgui.cpp	/^bool ImGui::BeginTooltip()$/;"	f	class:ImGui	typeref:typename:bool
BeginTooltipEx	./imgui.cpp	/^bool ImGui::BeginTooltipEx(ImGuiTooltipFlags tooltip_flags, ImGuiWindowFlags extra_window_flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginTooltipHidden	./imgui.cpp	/^bool ImGui::BeginTooltipHidden()$/;"	f	class:ImGui	typeref:typename:bool
BeginViewportSideBar	./imgui_widgets.cpp	/^bool ImGui::BeginViewportSideBar(const char* name, ImGuiViewport* viewport_p, ImGuiDir dir, floa/;"	f	class:ImGui	typeref:typename:bool
Bg0ClipRectForDrawCmd	./imgui_internal.h	/^    ImRect                      Bg0ClipRectForDrawCmd;      \/\/ Actual ImDrawCmd clip rect for /;"	m	struct:ImGuiTable	typeref:typename:ImRect
Bg2ClipRectForDrawCmd	./imgui_internal.h	/^    ImRect                      Bg2ClipRectForDrawCmd;      \/\/ Actual ImDrawCmd clip rect for /;"	m	struct:ImGuiTable	typeref:typename:ImRect
Bg2DrawChannelCurrent	./imgui_internal.h	/^    ImGuiTableDrawChannelIdx    Bg2DrawChannelCurrent;      \/\/ For Selectable() and other widg/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableDrawChannelIdx
Bg2DrawChannelUnfrozen	./imgui_internal.h	/^    ImGuiTableDrawChannelIdx    Bg2DrawChannelUnfrozen;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableDrawChannelIdx
BgAlphaVal	./imgui_internal.h	/^    float                       BgAlphaVal;             \/\/ Override background alpha$/;"	m	struct:ImGuiNextWindowData	typeref:typename:float
BgClipRect	./imgui_internal.h	/^    ImRect                      BgClipRect;                 \/\/ We use this to cpu-clip cell ba/;"	m	struct:ImGuiTable	typeref:typename:ImRect
BgColor	./imgui_internal.h	/^    ImU32                       BgColor;    \/\/ Actual color$/;"	m	struct:ImGuiTableCellData	typeref:typename:ImU32
BgColor0	./imgui_internal.h	/^    ImU32                       BgColor0;$/;"	m	struct:ImGuiTableHeaderData	typeref:typename:ImU32
BgColor1	./imgui_internal.h	/^    ImU32                       BgColor1;$/;"	m	struct:ImGuiTableHeaderData	typeref:typename:ImU32
BgFgDrawLists	./imgui_internal.h	/^    ImDrawList*         BgFgDrawLists[2];       \/\/ Convenience background (0) and foreground (/;"	m	struct:ImGuiViewportP	typeref:typename:ImDrawList * [2]
BgFgDrawListsLastFrame	./imgui_internal.h	/^    int                 BgFgDrawListsLastFrame[2]; \/\/ Last frame number the background (0) and/;"	m	struct:ImGuiViewportP	typeref:typename:int[2]
BindBuffer	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLBINDBUFFERPROC               BindBuffer;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLBINDBUFFERPROC
BindSampler	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLBINDSAMPLERPROC              BindSampler;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLBINDSAMPLERPROC
BindTexture	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLBINDTEXTUREPROC              BindTexture;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLBINDTEXTUREPROC
BindVertexArray	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLBINDVERTEXARRAYPROC          BindVertexArray;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLBINDVERTEXARRAYPROC
BitmapData	./misc/freetype/imgui_freetype.cpp	/^    unsigned int*       BitmapData;         \/\/ Point within one of the dst_tmp_bitmap_buffers[/;"	m	struct:ImFontBuildSrcGlyphFT	typeref:typename:unsigned int *	file:
BlendEquation	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLBLENDEQUATIONPROC            BlendEquation;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLBLENDEQUATIONPROC
BlendEquationSeparate	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLBLENDEQUATIONSEPARATEPROC    BlendEquationSeparate;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLBLENDEQUATIONSEPARATEPROC
BlendFactor	./backends/imgui_impl_dx10.cpp	/^        FLOAT                       BlendFactor[4];$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:FLOAT[4]	file:
BlendFactor	./backends/imgui_impl_dx11.cpp	/^        FLOAT                       BlendFactor[4];$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:FLOAT[4]	file:
BlendFuncSeparate	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLBLENDFUNCSEPARATEPROC        BlendFuncSeparate;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLBLENDFUNCSEPARATEPROC
BlendState	./backends/imgui_impl_dx10.cpp	/^        ID3D10BlendState*           BlendState;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:ID3D10BlendState *	file:
BlendState	./backends/imgui_impl_dx11.cpp	/^        ID3D11BlendState*           BlendState;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11BlendState *	file:
BlitGlyph	./misc/freetype/imgui_freetype.cpp	/^    void FreeTypeFont::BlitGlyph(const FT_Bitmap* ft_bitmap, uint32_t* dst, uint32_t dst_pitch, /;"	f	class:__anon21d590df0111::FreeTypeFont	typeref:typename:void
BorderColorLight	./imgui_internal.h	/^    ImU32                       BorderColorLight;$/;"	m	struct:ImGuiTable	typeref:typename:ImU32
BorderColorStrong	./imgui_internal.h	/^    ImU32                       BorderColorStrong;$/;"	m	struct:ImGuiTable	typeref:typename:ImU32
BorderX1	./imgui_internal.h	/^    float                       BorderX1;$/;"	m	struct:ImGuiTable	typeref:typename:float
BorderX2	./imgui_internal.h	/^    float                       BorderX2;$/;"	m	struct:ImGuiTable	typeref:typename:float
BoxSelectActivateDrag	./imgui_widgets.cpp	/^static void BoxSelectActivateDrag(ImGuiBoxSelectState* bs, ImGuiWindow* window)$/;"	f	typeref:typename:void	file:
BoxSelectDeactivateDrag	./imgui_widgets.cpp	/^static void BoxSelectDeactivateDrag(ImGuiBoxSelectState* bs)$/;"	f	typeref:typename:void	file:
BoxSelectId	./imgui_internal.h	/^    ImGuiID                 BoxSelectId;$/;"	m	struct:ImGuiMultiSelectTempData	typeref:typename:ImGuiID
BoxSelectPreStartDrag	./imgui_widgets.cpp	/^static void BoxSelectPreStartDrag(ImGuiID id, ImGuiSelectionUserData clicked_item)$/;"	f	typeref:typename:void	file:
BoxSelectRectCurr	./imgui_internal.h	/^    ImRect                  BoxSelectRectCurr;$/;"	m	struct:ImGuiBoxSelectState	typeref:typename:ImRect
BoxSelectRectPrev	./imgui_internal.h	/^    ImRect                  BoxSelectRectPrev;  \/\/ Selection rectangle in absolute coordinates/;"	m	struct:ImGuiBoxSelectState	typeref:typename:ImRect
BoxSelectScrollWithMouseDrag	./imgui_widgets.cpp	/^static void BoxSelectScrollWithMouseDrag(ImGuiBoxSelectState* bs, ImGuiWindow* window, const ImR/;"	f	typeref:typename:void	file:
BoxSelectState	./imgui_internal.h	/^    ImGuiBoxSelectState             BoxSelectState;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiBoxSelectState
BringWindowToDisplayBack	./imgui.cpp	/^void ImGui::BringWindowToDisplayBack(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
BringWindowToDisplayBehind	./imgui.cpp	/^void ImGui::BringWindowToDisplayBehind(ImGuiWindow* window, ImGuiWindow* behind_window)$/;"	f	class:ImGui	typeref:typename:void
BringWindowToDisplayFront	./imgui.cpp	/^void ImGui::BringWindowToDisplayFront(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
BringWindowToFocusFront	./imgui.cpp	/^void ImGui::BringWindowToFocusFront(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
Buf	./imgui.h	/^    ImVector<char>      Buf;$/;"	m	struct:ImGuiTextBuffer	typeref:typename:ImVector<char>
Buf	./imgui.h	/^    char*               Buf;            \/\/ Text buffer                          \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:char *
Buf	./imgui_demo.cpp	/^    ImGuiTextBuffer     Buf;$/;"	m	struct:ExampleAppLog	typeref:typename:ImGuiTextBuffer	file:
Buf	./imgui_internal.h	/^    ImVector<T>     Buf;        \/\/ Contiguous data$/;"	m	struct:ImPool	typeref:typename:ImVector<T>
Buf	./imgui_internal.h	/^    ImVector<char>  Buf;$/;"	m	struct:ImChunkStream	typeref:typename:ImVector<char>
BufCapacityA	./imgui_internal.h	/^    int                     BufCapacityA;           \/\/ end-user buffer capacity$/;"	m	struct:ImGuiInputTextState	typeref:typename:int
BufDirty	./imgui.h	/^    bool                BufDirty;       \/\/ Set if you modify Buf\/BufTextLen!    \/\/ Write   /;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:bool
BufIndices	./backends/imgui_impl_allegro5.cpp	/^    ImVector<int>               BufIndices;$/;"	m	struct:ImGui_ImplAllegro5_Data	typeref:typename:ImVector<int>	file:
BufSize	./imgui.h	/^    int                 BufSize;        \/\/ Buffer size (in bytes) = capacity+1  \/\/ Read-only/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
BufTextLen	./imgui.h	/^    int                 BufTextLen;     \/\/ Text length (in bytes)               \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
BufVertices	./backends/imgui_impl_allegro5.cpp	/^    ImVector<ImDrawVertAllegro> BufVertices;$/;"	m	struct:ImGui_ImplAllegro5_Data	typeref:typename:ImVector<ImDrawVertAllegro>	file:
BufferData	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLBUFFERDATAPROC               BufferData;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLBUFFERDATAPROC
BufferMemoryAlignment	./backends/imgui_impl_vulkan.cpp	/^    VkDeviceSize                BufferMemoryAlignment;$/;"	m	struct:ImGui_ImplVulkan_Data	typeref:typename:VkDeviceSize	file:
BufferSubData	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLBUFFERSUBDATAPROC            BufferSubData;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLBUFFERSUBDATAPROC
Build	./imgui.cpp	/^void ImGuiTextFilter::Build()$/;"	f	class:ImGuiTextFilter	typeref:typename:void
Build	./imgui_draw.cpp	/^bool    ImFontAtlas::Build()$/;"	f	class:ImFontAtlas	typeref:typename:bool
BuildEars	./imgui_draw.cpp	/^void ImTriangulator::BuildEars()$/;"	f	class:ImTriangulator	typeref:typename:void
BuildLookupTable	./imgui_draw.cpp	/^void ImFont::BuildLookupTable()$/;"	f	class:ImFont	typeref:typename:void
BuildNodes	./imgui_draw.cpp	/^void ImTriangulator::BuildNodes(const ImVec2* points, int points_count)$/;"	f	class:ImTriangulator	typeref:typename:void
BuildRanges	./imgui_draw.cpp	/^void ImFontGlyphRangesBuilder::BuildRanges(ImVector<ImWchar>* out_ranges)$/;"	f	class:ImFontGlyphRangesBuilder	typeref:typename:void
BuildReflexes	./imgui_draw.cpp	/^void ImTriangulator::BuildReflexes()$/;"	f	class:ImTriangulator	typeref:typename:void
BuildSortByKey	./imgui.cpp	/^void ImGuiStorage::BuildSortByKey()$/;"	f	class:ImGuiStorage	typeref:typename:void
BuildWorkOffsetMax	./imgui_internal.h	/^    ImVec2              BuildWorkOffsetMax;     \/\/ Work Area: Offset being built during curren/;"	m	struct:ImGuiViewportP	typeref:typename:ImVec2
BuildWorkOffsetMin	./imgui_internal.h	/^    ImVec2              BuildWorkOffsetMin;     \/\/ Work Area: Offset being built during curren/;"	m	struct:ImGuiViewportP	typeref:typename:ImVec2
Bullet	./imgui_widgets.cpp	/^void ImGui::Bullet()$/;"	f	class:ImGui	typeref:typename:void
BulletText	./imgui_widgets.cpp	/^void ImGui::BulletText(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
BulletTextV	./imgui_widgets.cpp	/^void ImGui::BulletTextV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
Button	./imgui_internal.h	/^struct ImGuiInputEventMouseButton   { int Button; bool Down; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMouseButton	typeref:typename:int
Button	./imgui_widgets.cpp	/^bool ImGui::Button(const char* label, const ImVec2& size_arg)$/;"	f	class:ImGui	typeref:typename:bool
ButtonBehavior	./imgui_widgets.cpp	/^bool ImGui::ButtonBehavior(const ImRect& bb, ImGuiID id, bool* out_hovered, bool* out_held, ImGu/;"	f	class:ImGui	typeref:typename:bool
ButtonEx	./imgui_widgets.cpp	/^bool ImGui::ButtonEx(const char* label, const ImVec2& size_arg, ImGuiButtonFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
ButtonTextAlign	./imgui.h	/^    ImVec2      ButtonTextAlign;            \/\/ Alignment of button text when button is larger /;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
CALLBACK	./examples/libs/glfw/include/GLFW/glfw3.h	/^ #define CALLBACK /;"	d
CFBundleDevelopmentRegion	./examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>CFBundleDevelopmentRegion<\/key>$/;"	k
CFBundleDevelopmentRegion	./examples/example_apple_metal/macOS/Info-macOS.plist	/^	<key>CFBundleDevelopmentRegion<\/key>$/;"	k
CFBundleExecutable	./examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>CFBundleExecutable<\/key>$/;"	k
CFBundleExecutable	./examples/example_apple_metal/macOS/Info-macOS.plist	/^	<key>CFBundleExecutable<\/key>$/;"	k
CFBundleIconFile	./examples/example_apple_metal/macOS/Info-macOS.plist	/^	<key>CFBundleIconFile<\/key>$/;"	k
CFBundleIdentifier	./examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>CFBundleIdentifier<\/key>$/;"	k
CFBundleIdentifier	./examples/example_apple_metal/macOS/Info-macOS.plist	/^	<key>CFBundleIdentifier<\/key>$/;"	k
CFBundleInfoDictionaryVersion	./examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>CFBundleInfoDictionaryVersion<\/key>$/;"	k
CFBundleInfoDictionaryVersion	./examples/example_apple_metal/macOS/Info-macOS.plist	/^	<key>CFBundleInfoDictionaryVersion<\/key>$/;"	k
CFBundleName	./examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>CFBundleName<\/key>$/;"	k
CFBundleName	./examples/example_apple_metal/macOS/Info-macOS.plist	/^	<key>CFBundleName<\/key>$/;"	k
CFBundlePackageType	./examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>CFBundlePackageType<\/key>$/;"	k
CFBundlePackageType	./examples/example_apple_metal/macOS/Info-macOS.plist	/^	<key>CFBundlePackageType<\/key>$/;"	k
CFBundleShortVersionString	./examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>CFBundleShortVersionString<\/key>$/;"	k
CFBundleShortVersionString	./examples/example_apple_metal/macOS/Info-macOS.plist	/^	<key>CFBundleShortVersionString<\/key>$/;"	k
CFBundleVersion	./examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>CFBundleVersion<\/key>$/;"	k
CFBundleVersion	./examples/example_apple_metal/macOS/Info-macOS.plist	/^	<key>CFBundleVersion<\/key>$/;"	k
CFLAGS	./examples/example_glfw_metal/Makefile	/^CFLAGS = $(CXXFLAGS)$/;"	m
CFLAGS	./examples/example_glfw_opengl2/Makefile	/^	CFLAGS = $(CXXFLAGS)$/;"	m
CFLAGS	./examples/example_glfw_opengl3/Makefile	/^	CFLAGS = $(CXXFLAGS)$/;"	m
CFLAGS	./examples/example_glut_opengl2/Makefile	/^	CFLAGS = $(CXXFLAGS)$/;"	m
CFLAGS	./examples/example_null/Makefile	/^	CFLAGS = $(CXXFLAGS)$/;"	m
CFLAGS	./examples/example_sdl2_metal/Makefile	/^CFLAGS = $(CXXFLAGS)$/;"	m
CFLAGS	./examples/example_sdl2_opengl2/Makefile	/^	CFLAGS = $(CXXFLAGS)$/;"	m
CFLAGS	./examples/example_sdl2_opengl3/Makefile	/^	CFLAGS = $(CXXFLAGS)$/;"	m
CFLAGS	./examples/example_sdl2_opengl3/Makefile	/^    CFLAGS = $(CXXFLAGS)$/;"	m
CFLAGS	./examples/example_sdl2_sdlrenderer2/Makefile	/^	CFLAGS = $(CXXFLAGS)$/;"	m
CFLAGS	./examples/example_sdl3_opengl3/Makefile	/^	CFLAGS = $(CXXFLAGS)$/;"	m
CFLAGS	./examples/example_sdl3_opengl3/Makefile	/^    CFLAGS = $(CXXFLAGS)$/;"	m
CFLAGS	./examples/example_sdl3_sdlrenderer3/Makefile	/^	CFLAGS = $(CXXFLAGS)$/;"	m
CFLAGS	./examples/example_sdl3_sdlrenderer3/Makefile	/^    CFLAGS = $(CXXFLAGS)$/;"	m
CMAKE_BUILD_TYPE	./examples/example_glfw_vulkan/CMakeLists.txt	/^  set(CMAKE_BUILD_TYPE Debug CACHE STRING "" FORCE)$/;"	v
CMAKE_BUILD_TYPE	./examples/example_glfw_wgpu/CMakeLists.txt	/^  set(CMAKE_BUILD_TYPE Debug CACHE STRING "" FORCE)$/;"	v
CMAKE_CXX_EXTENSIONS	./examples/example_android_opengl3/CMakeLists.txt	/^set(CMAKE_CXX_EXTENSIONS OFF)$/;"	v
CMAKE_CXX_FLAGS	./examples/example_glfw_vulkan/CMakeLists.txt	/^set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DVK_PROTOTYPES")$/;"	v
CMAKE_CXX_STANDARD	./examples/example_android_opengl3/CMakeLists.txt	/^set(CMAKE_CXX_STANDARD 11)$/;"	v
CMAKE_CXX_STANDARD	./examples/example_glfw_vulkan/CMakeLists.txt	/^set(CMAKE_CXX_STANDARD 11)$/;"	v
CMAKE_CXX_STANDARD	./examples/example_glfw_wgpu/CMakeLists.txt	/^set(CMAKE_CXX_STANDARD 17) # Dawn requires C++17$/;"	v
CMAKE_CXX_STANDARD_REQUIRED	./examples/example_android_opengl3/CMakeLists.txt	/^set(CMAKE_CXX_STANDARD_REQUIRED ON)$/;"	v
CMAKE_C_FLAGS	./examples/example_glfw_vulkan/CMakeLists.txt	/^set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DVK_PROTOTYPES")$/;"	v
CMAKE_SHARED_LINKER_FLAGS	./examples/example_android_opengl3/CMakeLists.txt	/^set(CMAKE_SHARED_LINKER_FLAGS$/;"	v
COLUMNS_HIT_RECT_HALF_THICKNESS	./imgui_tables.cpp	/^static const float COLUMNS_HIT_RECT_HALF_THICKNESS = 4.0f;$/;"	v	typeref:typename:const float	file:
CT_Button	./imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_Button	./imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_FillButton	./imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_FillButton	./imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_FillButton	./imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_FillButton };$/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_InputText	./imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_LongText	./imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_Selectable	./imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_SelectableSpanRow	./imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_ShortText	./imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_ShowWidth	./imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_SmallButton	./imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_Text	./imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_Text	./imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_FillButton };$/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CUSTOMVERTEX	./backends/imgui_impl_dx9.cpp	/^struct CUSTOMVERTEX$/;"	s	file:
CXXFLAGS	./examples/example_glfw_metal/Makefile	/^CXXFLAGS = -std=c++11 -I$(IMGUI_DIR) -I$(IMGUI_DIR)\/backends -I\/usr\/local\/include -I\/opt\/h/;"	m
CXXFLAGS	./examples/example_glfw_opengl2/Makefile	/^CXXFLAGS = -std=c++11 -I$(IMGUI_DIR) -I$(IMGUI_DIR)\/backends$/;"	m
CXXFLAGS	./examples/example_glfw_opengl3/Makefile	/^CXXFLAGS = -std=c++11 -I$(IMGUI_DIR) -I$(IMGUI_DIR)\/backends$/;"	m
CXXFLAGS	./examples/example_glut_opengl2/Makefile	/^CXXFLAGS = -std=c++11 -I$(IMGUI_DIR) -I$(IMGUI_DIR)\/backends$/;"	m
CXXFLAGS	./examples/example_sdl2_metal/Makefile	/^CXXFLAGS = -std=c++11 -I$(IMGUI_DIR) -I$(IMGUI_DIR)\/backends -I\/usr\/local\/include$/;"	m
CXXFLAGS	./examples/example_sdl2_opengl2/Makefile	/^CXXFLAGS = -std=c++11 -I$(IMGUI_DIR) -I$(IMGUI_DIR)\/backends$/;"	m
CXXFLAGS	./examples/example_sdl2_opengl3/Makefile	/^CXXFLAGS = -std=c++11 -I$(IMGUI_DIR) -I$(IMGUI_DIR)\/backends$/;"	m
CXXFLAGS	./examples/example_sdl2_sdlrenderer2/Makefile	/^CXXFLAGS = -std=c++11 -I$(IMGUI_DIR) -I$(IMGUI_DIR)\/backends$/;"	m
CXXFLAGS	./examples/example_sdl3_opengl3/Makefile	/^CXXFLAGS = -std=c++11 -I$(IMGUI_DIR) -I$(IMGUI_DIR)\/backends$/;"	m
CXXFLAGS	./examples/example_sdl3_sdlrenderer3/Makefile	/^CXXFLAGS = -std=c++11 -I$(IMGUI_DIR) -I$(IMGUI_DIR)\/backends$/;"	m
CalcCustomRectUV	./imgui_draw.cpp	/^void ImFontAtlas::CalcCustomRectUV(const ImFontAtlasCustomRect* rect, ImVec2* out_uv_min, ImVec2/;"	f	class:ImFontAtlas	typeref:typename:void
CalcDelayFromHoveredFlags	./imgui.cpp	/^static inline float CalcDelayFromHoveredFlags(ImGuiHoveredFlags flags)$/;"	f	typeref:typename:float	file:
CalcFontSize	./imgui_internal.h	/^    float       CalcFontSize() const    { ImGuiContext& g = *Ctx; float scale = g.FontBaseSize */;"	f	struct:ImGuiWindow	typeref:typename:float
CalcItemSize	./imgui.cpp	/^ImVec2 ImGui::CalcItemSize(ImVec2 size, float default_w, float default_h)$/;"	f	class:ImGui	typeref:typename:ImVec2
CalcItemWidth	./imgui.cpp	/^float ImGui::CalcItemWidth()$/;"	f	class:ImGui	typeref:typename:float
CalcMaxPopupHeightFromItemCount	./imgui_widgets.cpp	/^static float CalcMaxPopupHeightFromItemCount(int items_count)$/;"	f	typeref:typename:float	file:
CalcNextScrollFromScrollTargetAndClamp	./imgui.cpp	/^static ImVec2 CalcNextScrollFromScrollTargetAndClamp(ImGuiWindow* window)$/;"	f	typeref:typename:ImVec2	file:
CalcNextTotalWidth	./imgui_widgets.cpp	/^void ImGuiMenuColumns::CalcNextTotalWidth(bool update_offsets)$/;"	f	class:ImGuiMenuColumns	typeref:typename:void
CalcResizePosSizeFromAnyCorner	./imgui.cpp	/^static void CalcResizePosSizeFromAnyCorner(ImGuiWindow* window, const ImVec2& corner_target, con/;"	f	typeref:typename:void	file:
CalcRoutingScore	./imgui.cpp	/^static int CalcRoutingScore(ImGuiID focus_scope_id, ImGuiID owner_id, ImGuiInputFlags flags)$/;"	f	typeref:typename:int	file:
CalcScopeRect	./imgui_widgets.cpp	/^static ImRect CalcScopeRect(ImGuiMultiSelectTempData* ms, ImGuiWindow* window)$/;"	f	typeref:typename:ImRect	file:
CalcScrollEdgeSnap	./imgui.cpp	/^static float CalcScrollEdgeSnap(float target, float snap_min, float snap_max, float snap_thresho/;"	f	typeref:typename:float	file:
CalcTextSize	./imgui.cpp	/^ImVec2 ImGui::CalcTextSize(const char* text, const char* text_end, bool hide_text_after_double_h/;"	f	class:ImGui	typeref:typename:ImVec2
CalcTextSizeA	./imgui_draw.cpp	/^ImVec2 ImFont::CalcTextSizeA(float size, float max_width, float wrap_width, const char* text_beg/;"	f	class:ImFont	typeref:typename:ImVec2
CalcTypematicRepeatAmount	./imgui.cpp	/^int ImGui::CalcTypematicRepeatAmount(float t0, float t1, float repeat_delay, float repeat_rate)$/;"	f	class:ImGui	typeref:typename:int
CalcWindowAutoFitSize	./imgui.cpp	/^static ImVec2 CalcWindowAutoFitSize(ImGuiWindow* window, const ImVec2& size_contents)$/;"	f	typeref:typename:ImVec2	file:
CalcWindowContentSizes	./imgui.cpp	/^static void CalcWindowContentSizes(ImGuiWindow* window, ImVec2* content_size_current, ImVec2* co/;"	f	typeref:typename:void	file:
CalcWindowMinSize	./imgui.cpp	/^static inline ImVec2 CalcWindowMinSize(ImGuiWindow* window)$/;"	f	typeref:typename:ImVec2	file:
CalcWindowNextAutoFitSize	./imgui.cpp	/^ImVec2 ImGui::CalcWindowNextAutoFitSize(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImVec2
CalcWindowSizeAfterConstraint	./imgui.cpp	/^static ImVec2 CalcWindowSizeAfterConstraint(ImGuiWindow* window, const ImVec2& size_desired)$/;"	f	typeref:typename:ImVec2	file:
CalcWordWrapNextLineStartA	./imgui_draw.cpp	/^static inline const char* CalcWordWrapNextLineStartA(const char* text, const char* text_end)$/;"	f	typeref:typename:const char *	file:
CalcWordWrapPositionA	./imgui_draw.cpp	/^const char* ImFont::CalcWordWrapPositionA(float scale, const char* text, const char* text_end, f/;"	f	class:ImFont	typeref:typename:const char *
CalcWorkRectPos	./imgui_internal.h	/^    ImVec2  CalcWorkRectPos(const ImVec2& off_min) const                            { return ImV/;"	f	struct:ImGuiViewportP	typeref:typename:ImVec2
CalcWorkRectSize	./imgui_internal.h	/^    ImVec2  CalcWorkRectSize(const ImVec2& off_min, const ImVec2& off_max) const    { return ImV/;"	f	struct:ImGuiViewportP	typeref:typename:ImVec2
CalcWrapWidthForPos	./imgui.cpp	/^float ImGui::CalcWrapWidthForPos(const ImVec2& pos, float wrap_pos_x)$/;"	f	class:ImGui	typeref:typename:float
CallContextHooks	./imgui.cpp	/^void ImGui::CallContextHooks(ImGuiContext* ctx, ImGuiContextHookType hook_type)$/;"	f	class:ImGui	typeref:typename:void
Callback	./imgui_internal.h	/^    ImGuiContextHookCallback    Callback;$/;"	m	struct:ImGuiContextHook	typeref:typename:ImGuiContextHookCallback
CallbacksChainForAllWindows	./backends/imgui_impl_glfw.cpp	/^    bool                    CallbacksChainForAllWindows;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:bool	file:
CannotSkipItemsQueue	./imgui_internal.h	/^    ImU8                    CannotSkipItemsQueue;           \/\/ Queue of 8 values for the next /;"	m	struct:ImGuiTableColumn	typeref:typename:ImU8
CanvasSelector	./backends/imgui_impl_glfw.cpp	/^    const char*             CanvasSelector;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:const char *	file:
Capacity	./imgui.h	/^    int                 Capacity;$/;"	m	struct:ImVector	typeref:typename:int
CellPadding	./imgui.h	/^    ImVec2      CellPadding;                \/\/ Padding within a table cell. Cellpadding.x is l/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
CellPaddingX	./imgui_internal.h	/^    float                       CellPaddingX;               \/\/ Padding from each borders. Lock/;"	m	struct:ImGuiTable	typeref:typename:float
CellSpacingX1	./imgui_internal.h	/^    float                       CellSpacingX1;              \/\/ Spacing between non-bordered ce/;"	m	struct:ImGuiTable	typeref:typename:float
CellSpacingX2	./imgui_internal.h	/^    float                       CellSpacingX2;$/;"	m	struct:ImGuiTable	typeref:typename:float
ChainCallback	./misc/cpp/imgui_stdlib.cpp	/^    ImGuiInputTextCallback  ChainCallback;$/;"	m	struct:InputTextCallback_UserData	typeref:typename:ImGuiInputTextCallback	file:
ChainCallbackUserData	./misc/cpp/imgui_stdlib.cpp	/^    void*                   ChainCallbackUserData;$/;"	m	struct:InputTextCallback_UserData	typeref:typename:void *	file:
ChannelsCount	./imgui_tables.cpp	/^        int             ChannelsCount = 0;$/;"	m	struct:ImGui::TableMergeDrawChannels::MergeGroup	typeref:typename:int	file:
ChannelsMask	./imgui_tables.cpp	/^        ImBitArrayPtr   ChannelsMask = NULL;$/;"	m	struct:ImGui::TableMergeDrawChannels::MergeGroup	typeref:typename:ImBitArrayPtr	file:
ChannelsMerge	./imgui.h	/^    inline void     ChannelsMerge()             { _Splitter.Merge(this); }$/;"	f	struct:ImDrawList	typeref:typename:void
ChannelsSetCurrent	./imgui.h	/^    inline void     ChannelsSetCurrent(int n)   { _Splitter.SetCurrentChannel(this, n); }$/;"	f	struct:ImDrawList	typeref:typename:void
ChannelsSplit	./imgui.h	/^    inline void     ChannelsSplit(int count)    { _Splitter.Split(this, count); }$/;"	f	struct:ImDrawList	typeref:typename:void
Char	./imgui_internal.h	/^struct ImGuiInputEventText          { unsigned int Char; };$/;"	m	struct:ImGuiInputEventText	typeref:typename:unsigned int
CheckProgram	./backends/imgui_impl_opengl3.cpp	/^static bool CheckProgram(GLuint handle, const char* desc)$/;"	f	typeref:typename:bool	file:
CheckShader	./backends/imgui_impl_opengl3.cpp	/^static bool CheckShader(GLuint handle, const char* desc)$/;"	f	typeref:typename:bool	file:
CheckVkResultFn	./backends/imgui_impl_vulkan.h	/^    void                            (*CheckVkResultFn)(VkResult err);$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:void (*)(VkResult err)
Checkbox	./imgui_widgets.cpp	/^bool ImGui::Checkbox(const char* label, bool* v)$/;"	f	class:ImGui	typeref:typename:bool
CheckboxFlags	./imgui_widgets.cpp	/^bool ImGui::CheckboxFlags(const char* label, ImS64* flags, ImS64 flags_value)$/;"	f	class:ImGui	typeref:typename:bool
CheckboxFlags	./imgui_widgets.cpp	/^bool ImGui::CheckboxFlags(const char* label, ImU64* flags, ImU64 flags_value)$/;"	f	class:ImGui	typeref:typename:bool
CheckboxFlags	./imgui_widgets.cpp	/^bool ImGui::CheckboxFlags(const char* label, int* flags, int flags_value)$/;"	f	class:ImGui	typeref:typename:bool
CheckboxFlags	./imgui_widgets.cpp	/^bool ImGui::CheckboxFlags(const char* label, unsigned int* flags, unsigned int flags_value)$/;"	f	class:ImGui	typeref:typename:bool
CheckboxFlagsT	./imgui_widgets.cpp	/^bool ImGui::CheckboxFlagsT(const char* label, T* flags, T flags_value)$/;"	f	class:ImGui	typeref:typename:bool
ChildBorderSize	./imgui.h	/^    float       ChildBorderSize;            \/\/ Thickness of border around child windows. Gener/;"	m	struct:ImGuiStyle	typeref:typename:float
ChildCount	./imgui_demo.cpp	/^                int             ChildCount;$/;"	m	struct:ShowDemoWindowTables::MyTreeNode	typeref:typename:int	file:
ChildFlags	./imgui_internal.h	/^    ImGuiChildFlags             ChildFlags;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiChildFlags
ChildFlags	./imgui_internal.h	/^    ImGuiChildFlags         ChildFlags;                         \/\/ Set when window is a child /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiChildFlags
ChildId	./imgui_internal.h	/^    ImGuiID                 ChildId;                            \/\/ ID of corresponding item in/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
ChildIdx	./imgui_demo.cpp	/^                int             ChildIdx;$/;"	m	struct:ShowDemoWindowTables::MyTreeNode	typeref:typename:int	file:
ChildRounding	./imgui.h	/^    float       ChildRounding;              \/\/ Radius of child window corners rounding. Set to/;"	m	struct:ImGuiStyle	typeref:typename:float
ChildWindowComparer	./imgui.cpp	/^static int IMGUI_CDECL ChildWindowComparer(const void* lhs, const void* rhs)$/;"	f	typeref:typename:int IMGUI_CDECL	file:
ChildWindows	./imgui_internal.h	/^    ImVector<ImGuiWindow*>  ChildWindows;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVector<ImGuiWindow * >
Childs	./imgui_demo.cpp	/^    ImVector<ExampleTreeNode*>  Childs;$/;"	m	struct:ExampleTreeNode	typeref:typename:ImVector<ExampleTreeNode * >	file:
CircleSegmentCounts	./imgui_internal.h	/^    ImU8            CircleSegmentCounts[64];    \/\/ Precomputed segment count for given radius /;"	m	struct:ImDrawListSharedData	typeref:typename:ImU8[64]
CircleSegmentMaxError	./imgui_internal.h	/^    float           CircleSegmentMaxError;      \/\/ Number of circle segments to use per pixel /;"	m	struct:ImDrawListSharedData	typeref:typename:float
CircleTessellationMaxError	./imgui.h	/^    float       CircleTessellationMaxError; \/\/ Maximum error (in pixels) allowed when using Ad/;"	m	struct:ImGuiStyle	typeref:typename:float
ClampWindowPos	./imgui.cpp	/^static inline void ClampWindowPos(ImGuiWindow* window, const ImRect& visibility_rect)$/;"	f	typeref:typename:void	file:
CleanupDeviceD3D	./examples/example_sdl2_directx11/main.cpp	/^void CleanupDeviceD3D()$/;"	f	typeref:typename:void
CleanupDeviceD3D	./examples/example_win32_directx10/main.cpp	/^void CleanupDeviceD3D()$/;"	f	typeref:typename:void
CleanupDeviceD3D	./examples/example_win32_directx11/main.cpp	/^void CleanupDeviceD3D()$/;"	f	typeref:typename:void
CleanupDeviceD3D	./examples/example_win32_directx12/main.cpp	/^void CleanupDeviceD3D()$/;"	f	typeref:typename:void
CleanupDeviceD3D	./examples/example_win32_directx9/main.cpp	/^void CleanupDeviceD3D()$/;"	f	typeref:typename:void
CleanupDeviceWGL	./examples/example_win32_opengl3/main.cpp	/^void CleanupDeviceWGL(HWND hWnd, WGL_WindowData* data)$/;"	f	typeref:typename:void
CleanupRenderTarget	./examples/example_sdl2_directx11/main.cpp	/^void CleanupRenderTarget()$/;"	f	typeref:typename:void
CleanupRenderTarget	./examples/example_win32_directx10/main.cpp	/^void CleanupRenderTarget()$/;"	f	typeref:typename:void
CleanupRenderTarget	./examples/example_win32_directx11/main.cpp	/^void CleanupRenderTarget()$/;"	f	typeref:typename:void
CleanupRenderTarget	./examples/example_win32_directx12/main.cpp	/^void CleanupRenderTarget()$/;"	f	typeref:typename:void
CleanupVulkan	./examples/example_glfw_vulkan/main.cpp	/^static void CleanupVulkan()$/;"	f	typeref:typename:void	file:
CleanupVulkan	./examples/example_sdl2_vulkan/main.cpp	/^static void CleanupVulkan()$/;"	f	typeref:typename:void	file:
CleanupVulkanWindow	./examples/example_glfw_vulkan/main.cpp	/^static void CleanupVulkanWindow()$/;"	f	typeref:typename:void	file:
CleanupVulkanWindow	./examples/example_sdl2_vulkan/main.cpp	/^static void CleanupVulkanWindow()$/;"	f	typeref:typename:void	file:
Clear	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLCLEARPROC                    Clear;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLCLEARPROC
Clear	./imgui.h	/^    inline void                 Clear() { _Current = 0; _Count = 1; } \/\/ Do not clear Channels/;"	f	struct:ImDrawListSplitter	typeref:typename:void
Clear	./imgui.h	/^    inline void     Clear()                 { int size_in_bytes = (IM_UNICODE_CODEPOINT_MAX + 1)/;"	f	struct:ImFontGlyphRangesBuilder	typeref:typename:void
Clear	./imgui.h	/^    void                Clear()          { InputBuf[0] = 0; Build(); }$/;"	f	struct:ImGuiTextFilter	typeref:typename:void
Clear	./imgui.h	/^    void                Clear() { Data.clear(); }$/;"	f	struct:ImGuiStorage	typeref:typename:void
Clear	./imgui.h	/^    void Clear()    { SourceId = SourceParentId = 0; Data = NULL; DataSize = 0; memset(DataType,/;"	f	struct:ImGuiPayload	typeref:typename:void
Clear	./imgui_demo.cpp	/^    void    Clear()$/;"	f	struct:ExampleAppLog	typeref:typename:void	file:
Clear	./imgui_draw.cpp	/^void    ImFontAtlas::Clear()$/;"	f	class:ImFontAtlas	typeref:typename:void
Clear	./imgui_draw.cpp	/^void ImDrawData::Clear()$/;"	f	class:ImDrawData	typeref:typename:void
Clear	./imgui_internal.h	/^    void            Clear()                     { Storage.clear(); }$/;"	f	struct:ImBitVector	typeref:typename:void
Clear	./imgui_internal.h	/^    void            Clear()  { SearchBuffer[0] = 0; SingleCharModeLock = false; } \/\/ We preser/;"	f	struct:ImGuiTypingSelectState	typeref:typename:void
Clear	./imgui_internal.h	/^    void        Clear()                             { for (int n = 0; n < Map.Data.Size; n++) { /;"	f	struct:ImPool	typeref:typename:void
Clear	./imgui_internal.h	/^    void Clear()                    { for (int n = 0; n < IM_ARRAYSIZE(Index); n++) Index[n] = -/;"	f	struct:ImGuiKeyRoutingTable	typeref:typename:void
Clear	./imgui_internal.h	/^    void Clear()            { size_t io_sz = sizeof(IO); ClearIO(); memset((void*)(&IO + 1), 0, /;"	f	struct:ImGuiMultiSelectTempData	typeref:typename:void
Clear	./imgui_internal.h	/^    void Clear()        { Window = NULL; ID = FocusScopeId = 0; InFlags = 0; SelectionUserData =/;"	f	struct:ImGuiNavItemData	typeref:typename:void
Clear	./imgui_widgets.cpp	/^void ImGuiSelectionBasicStorage::Clear()$/;"	f	class:ImGuiSelectionBasicStorage	typeref:typename:void
ClearActiveID	./imgui.cpp	/^void ImGui::ClearActiveID()$/;"	f	class:ImGui	typeref:typename:void
ClearAllBits	./imgui_internal.h	/^    void            ClearAllBits()              { memset(Storage, 0, sizeof(Storage)); }$/;"	f	struct:ImBitArray	typeref:typename:void
ClearAllFn	./imgui_internal.h	/^    void        (*ClearAllFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler);                /;"	m	struct:ImGuiSettingsHandler	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler)
ClearBit	./imgui_internal.h	/^    void            ClearBit(int n)             { IM_ASSERT(n < (Storage.Size << 5)); ImBitArray/;"	f	struct:ImBitVector	typeref:typename:void
ClearBit	./imgui_internal.h	/^    void            ClearBit(int n)             { n += OFFSET; IM_ASSERT(n >= 0 && n < BITCOUNT)/;"	f	struct:ImBitArray	typeref:typename:void
ClearColor	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLCLEARCOLORPROC               ClearColor;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLCLEARCOLORPROC
ClearDragDrop	./imgui.cpp	/^void ImGui::ClearDragDrop()$/;"	f	class:ImGui	typeref:typename:void
ClearEnable	./backends/imgui_impl_vulkan.h	/^    bool                ClearEnable;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:bool
ClearEventsQueue	./imgui.cpp	/^void ImGuiIO::ClearEventsQueue()$/;"	f	class:ImGuiIO	typeref:typename:void
ClearFlags	./imgui_internal.h	/^    inline void ClearFlags()    { Flags = ImGuiNextItemDataFlags_None; ItemFlags = ImGuiItemFlag/;"	f	struct:ImGuiNextItemData	typeref:typename:void
ClearFlags	./imgui_internal.h	/^    inline void ClearFlags()    { Flags = ImGuiNextWindowDataFlags_None; }$/;"	f	struct:ImGuiNextWindowData	typeref:typename:void
ClearFonts	./imgui_draw.cpp	/^void    ImFontAtlas::ClearFonts()$/;"	f	class:ImFontAtlas	typeref:typename:void
ClearFreeMemory	./imgui_draw.cpp	/^void ImDrawListSplitter::ClearFreeMemory()$/;"	f	class:ImDrawListSplitter	typeref:typename:void
ClearFreeMemory	./imgui_internal.h	/^    void        ClearFreeMemory()           { TextW.clear(); TextA.clear(); InitialTextA.clear()/;"	f	struct:ImGuiInputTextState	typeref:typename:void
ClearFreeMemory	./imgui_internal.h	/^    void    ClearFreeMemory()           { ID = 0; TextA.clear(); }$/;"	f	struct:ImGuiInputTextDeactivatedState	typeref:typename:void
ClearIO	./imgui_internal.h	/^    void ClearIO()          { IO.Requests.resize(0); IO.RangeSrcItem = IO.NavIdItem = ImGuiSelec/;"	f	struct:ImGuiMultiSelectTempData	typeref:typename:void
ClearIniSettings	./imgui.cpp	/^void ImGui::ClearIniSettings()$/;"	f	class:ImGui	typeref:typename:void
ClearInputCharacters	./imgui.cpp	/^void ImGuiIO::ClearInputCharacters()$/;"	f	class:ImGuiIO	typeref:typename:void
ClearInputData	./imgui_draw.cpp	/^void    ImFontAtlas::ClearInputData()$/;"	f	class:ImFontAtlas	typeref:typename:void
ClearInputKeys	./imgui.cpp	/^void ImGuiIO::ClearInputKeys()$/;"	f	class:ImGuiIO	typeref:typename:void
ClearInputMouse	./imgui.cpp	/^void ImGuiIO::ClearInputMouse()$/;"	f	class:ImGuiIO	typeref:typename:void
ClearItems	./imgui_demo.cpp	/^    void ClearItems()$/;"	f	struct:ExampleAssetsBrowser	typeref:typename:void	file:
ClearLog	./imgui_demo.cpp	/^    void    ClearLog()$/;"	f	struct:ExampleAppConsole	typeref:typename:void	file:
ClearOutputData	./imgui_draw.cpp	/^void    ImFont::ClearOutputData()$/;"	f	class:ImFont	typeref:typename:void
ClearSelection	./imgui.h	/^    void                ClearSelection()        { SelectionStart = SelectionEnd = BufTextLen; }$/;"	f	struct:ImGuiInputTextCallbackData	typeref:typename:void
ClearSelection	./imgui_internal.h	/^    void        ClearSelection()            { Stb.select_start = Stb.select_end = Stb.cursor; }$/;"	f	struct:ImGuiInputTextState	typeref:typename:void
ClearTexData	./imgui_draw.cpp	/^void    ImFontAtlas::ClearTexData()$/;"	f	class:ImFontAtlas	typeref:typename:void
ClearText	./imgui_internal.h	/^    void        ClearText()                 { CurLenW = CurLenA = 0; TextW[0] = 0; TextA[0] = 0;/;"	f	struct:ImGuiInputTextState	typeref:typename:void
ClearValue	./backends/imgui_impl_vulkan.h	/^    VkClearValue        ClearValue;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:VkClearValue
ClearWindowSettings	./imgui.cpp	/^void ImGui::ClearWindowSettings(const char* name)$/;"	f	class:ImGui	typeref:typename:void
ClientApi	./backends/imgui_impl_glfw.cpp	/^    GlfwClientApi           ClientApi;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GlfwClientApi	file:
ClipEnabled	./backends/imgui_impl_sdlrenderer2.cpp	/^        bool        ClipEnabled;$/;"	m	struct:ImGui_ImplSDLRenderer2_RenderDrawData::BackupSDLRendererState	typeref:typename:bool	file:
ClipEnabled	./backends/imgui_impl_sdlrenderer3.cpp	/^        bool        ClipEnabled;$/;"	m	struct:ImGui_ImplSDLRenderer3_RenderDrawData::BackupSDLRendererState	typeref:typename:bool	file:
ClipRect	./backends/imgui_impl_sdlrenderer2.cpp	/^        SDL_Rect    ClipRect;$/;"	m	struct:ImGui_ImplSDLRenderer2_RenderDrawData::BackupSDLRendererState	typeref:typename:SDL_Rect	file:
ClipRect	./backends/imgui_impl_sdlrenderer3.cpp	/^        SDL_Rect    ClipRect;$/;"	m	struct:ImGui_ImplSDLRenderer3_RenderDrawData::BackupSDLRendererState	typeref:typename:SDL_Rect	file:
ClipRect	./imgui.h	/^    ImVec4          ClipRect;           \/\/ 4*4  \/\/ Clipping rectangle (x1, y1, x2, y2). Subt/;"	m	struct:ImDrawCmd	typeref:typename:ImVec4
ClipRect	./imgui.h	/^    ImVec4          ClipRect;$/;"	m	struct:ImDrawCmdHeader	typeref:typename:ImVec4
ClipRect	./imgui_internal.h	/^    ImRect                  ClipRect;                           \/\/ Current clipping\/scissorin/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
ClipRect	./imgui_internal.h	/^    ImRect                  ClipRect;                       \/\/ Clipping rectangle for the colu/;"	m	struct:ImGuiTableColumn	typeref:typename:ImRect
ClipRect	./imgui_internal.h	/^    ImRect                  ClipRect;           \/\/ Clip rectangle at the time of submitting it/;"	m	struct:ImGuiLastItemData	typeref:typename:ImRect
ClipRect	./imgui_internal.h	/^    ImRect              ClipRect;$/;"	m	struct:ImGuiOldColumnData	typeref:typename:ImRect
ClipRect	./imgui_tables.cpp	/^        ImRect          ClipRect;$/;"	m	struct:ImGui::TableMergeDrawChannels::MergeGroup	typeref:typename:ImRect	file:
ClipRectFullscreen	./imgui_internal.h	/^    ImVec4          ClipRectFullscreen;         \/\/ Value for PushClipRectFullscreen()$/;"	m	struct:ImDrawListSharedData	typeref:typename:ImVec4
ClipWith	./imgui_internal.h	/^    void        ClipWith(const ImRect& r)           { Min = ImMax(Min, r.Min); Max = ImMin(Max, /;"	f	struct:ImRect	typeref:typename:void
ClipWithFull	./imgui_internal.h	/^    void        ClipWithFull(const ImRect& r)       { Min = ImClamp(Min, r.Min, r.Max); Max = Im/;"	f	struct:ImRect	typeref:typename:void
ClipboardHandlerData	./imgui_internal.h	/^    ImVector<char>          ClipboardHandlerData;               \/\/ If no custom clipboard hand/;"	m	struct:ImGuiContext	typeref:typename:ImVector<char>
ClipboardTextData	./backends/imgui_impl_allegro5.cpp	/^    char*                       ClipboardTextData;$/;"	m	struct:ImGui_ImplAllegro5_Data	typeref:typename:char *	file:
ClipboardTextData	./backends/imgui_impl_sdl2.cpp	/^    char*                   ClipboardTextData;$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:char *	file:
ClipboardTextData	./backends/imgui_impl_sdl3.cpp	/^    char*                   ClipboardTextData;$/;"	m	struct:ImGui_ImplSDL3_Data	typeref:typename:char *	file:
ClipboardUserData	./imgui.h	/^    void*       ClipboardUserData;$/;"	m	struct:ImGuiIO	typeref:typename:void *
ClipperTempData	./imgui_internal.h	/^    ImVector<ImGuiListClipperData>  ClipperTempData;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiListClipperData>
ClipperTempDataStacked	./imgui_internal.h	/^    int                             ClipperTempDataStacked;$/;"	m	struct:ImGuiContext	typeref:typename:int
CloneOutput	./imgui_draw.cpp	/^ImDrawList* ImDrawList::CloneOutput() const$/;"	f	class:ImDrawList	typeref:typename:ImDrawList *
CloseButton	./imgui_widgets.cpp	/^bool ImGui::CloseButton(ImGuiID id, const ImVec2& pos)$/;"	f	class:ImGui	typeref:typename:bool
CloseCurrentPopup	./imgui.cpp	/^void ImGui::CloseCurrentPopup()$/;"	f	class:ImGui	typeref:typename:void
CloseFont	./misc/freetype/imgui_freetype.cpp	/^    void FreeTypeFont::CloseFont()$/;"	f	class:__anon21d590df0111::FreeTypeFont	typeref:typename:void
ClosePopupToLevel	./imgui.cpp	/^void ImGui::ClosePopupToLevel(int remaining, bool restore_focus_to_window_under_popup)$/;"	f	class:ImGui	typeref:typename:void
ClosePopupsExceptModals	./imgui.cpp	/^void ImGui::ClosePopupsExceptModals()$/;"	f	class:ImGui	typeref:typename:void
ClosePopupsOverWindow	./imgui.cpp	/^void ImGui::ClosePopupsOverWindow(ImGuiWindow* ref_window, bool restore_focus_to_window_under_po/;"	f	class:ImGui	typeref:typename:void
CloseQueue	./imgui_demo.cpp	/^    ImVector<MyDocument*>   CloseQueue;$/;"	m	struct:ExampleAppDocuments	typeref:typename:ImVector<MyDocument * >	file:
CmdBuffer	./imgui.h	/^    ImVector<ImDrawCmd>     CmdBuffer;          \/\/ Draw commands. Typically 1 command = 1 GPU /;"	m	struct:ImDrawList	typeref:typename:ImVector<ImDrawCmd>
CmdLists	./imgui.h	/^    ImVector<ImDrawList*> CmdLists;         \/\/ Array of ImDrawList* to render. The ImDrawLists/;"	m	struct:ImDrawData	typeref:typename:ImVector<ImDrawList * >
CmdListsCount	./imgui.h	/^    int                 CmdListsCount;      \/\/ Number of ImDrawList* to render (should always /;"	m	struct:ImDrawData	typeref:typename:int
Codepoint	./imgui.h	/^    unsigned int    Codepoint : 30;     \/\/ 0x0000..0x10FFFF$/;"	m	struct:ImFontGlyph	typeref:typename:unsigned int:30
Codepoint	./misc/freetype/imgui_freetype.cpp	/^    uint32_t            Codepoint;$/;"	m	struct:ImFontBuildSrcGlyphFT	typeref:typename:uint32_t	file:
Col	./imgui.cpp	/^    struct KeyLayoutData { int Row, Col; const char* Label; ImGuiKey Key; };$/;"	m	struct:ImGui::DebugRenderKeyboardPreview::KeyLayoutData	typeref:typename:int	file:
Col	./imgui_internal.h	/^    ImGuiCol        Col;$/;"	m	struct:ImGuiColorMod	typeref:typename:ImGuiCol
CollapseButton	./imgui_widgets.cpp	/^bool ImGui::CollapseButton(ImGuiID id, const ImVec2& pos)$/;"	f	class:ImGui	typeref:typename:bool
Collapsed	./imgui_internal.h	/^    bool                    Collapsed;                          \/\/ Set when collapsing window /;"	m	struct:ImGuiWindow	typeref:typename:bool
Collapsed	./imgui_internal.h	/^    bool        Collapsed;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:bool
CollapsedCond	./imgui_internal.h	/^    ImGuiCond                   CollapsedCond;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiCond
CollapsedVal	./imgui_internal.h	/^    bool                        CollapsedVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:bool
CollapsingHeader	./imgui_widgets.cpp	/^bool ImGui::CollapsingHeader(const char* label, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
CollapsingHeader	./imgui_widgets.cpp	/^bool ImGui::CollapsingHeader(const char* label, bool* p_visible, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
Color	./imgui_demo.cpp	/^    ImVec4      Color;      \/\/ An arbitrary variable associated to the document$/;"	m	struct:MyDocument	typeref:typename:ImVec4	file:
ColorBuffer	./backends/imgui_impl_sdlrenderer3.cpp	/^    ImVector<SDL_FColor>    ColorBuffer;$/;"	m	struct:ImGui_ImplSDLRenderer3_Data	typeref:typename:ImVector<SDL_FColor>	file:
ColorButton	./imgui_widgets.cpp	/^bool ImGui::ColorButton(const char* desc_id, const ImVec4& col, ImGuiColorEditFlags flags, const/;"	f	class:ImGui	typeref:typename:bool
ColorButtonPosition	./imgui.h	/^    ImGuiDir    ColorButtonPosition;        \/\/ Side of the color button in the ColorEdit4 widg/;"	m	struct:ImGuiStyle	typeref:typename:ImGuiDir
ColorConvertFloat4ToU32	./imgui.cpp	/^ImU32 ImGui::ColorConvertFloat4ToU32(const ImVec4& in)$/;"	f	class:ImGui	typeref:typename:ImU32
ColorConvertHSVtoRGB	./imgui.cpp	/^void ImGui::ColorConvertHSVtoRGB(float h, float s, float v, float& out_r, float& out_g, float& o/;"	f	class:ImGui	typeref:typename:void
ColorConvertRGBtoHSV	./imgui.cpp	/^void ImGui::ColorConvertRGBtoHSV(float r, float g, float b, float& out_h, float& out_s, float& o/;"	f	class:ImGui	typeref:typename:void
ColorConvertU32ToFloat4	./imgui.cpp	/^ImVec4 ImGui::ColorConvertU32ToFloat4(ImU32 in)$/;"	f	class:ImGui	typeref:typename:ImVec4
ColorEdit3	./imgui_widgets.cpp	/^bool ImGui::ColorEdit3(const char* label, float col[3], ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
ColorEdit4	./imgui_widgets.cpp	/^bool ImGui::ColorEdit4(const char* label, float col[4], ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
ColorEditCurrentID	./imgui_internal.h	/^    ImGuiID                 ColorEditCurrentID;                 \/\/ Set temporarily while insid/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
ColorEditOptions	./imgui_internal.h	/^    ImGuiColorEditFlags     ColorEditOptions;                   \/\/ Store user options for colo/;"	m	struct:ImGuiContext	typeref:typename:ImGuiColorEditFlags
ColorEditOptionsPopup	./imgui_widgets.cpp	/^void ImGui::ColorEditOptionsPopup(const float* col, ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:void
ColorEditRestoreH	./imgui_widgets.cpp	/^static void ColorEditRestoreH(const float* col, float* H)$/;"	f	typeref:typename:void	file:
ColorEditRestoreHS	./imgui_widgets.cpp	/^static void ColorEditRestoreHS(const float* col, float* H, float* S, float* V)$/;"	f	typeref:typename:void	file:
ColorEditSavedColor	./imgui_internal.h	/^    ImU32                   ColorEditSavedColor;                \/\/ RGB value with alpha set to/;"	m	struct:ImGuiContext	typeref:typename:ImU32
ColorEditSavedHue	./imgui_internal.h	/^    float                   ColorEditSavedHue;                  \/\/ Backup of last Hue associat/;"	m	struct:ImGuiContext	typeref:typename:float
ColorEditSavedID	./imgui_internal.h	/^    ImGuiID                 ColorEditSavedID;                   \/\/ ID we are saving\/restoring/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
ColorEditSavedSat	./imgui_internal.h	/^    float                   ColorEditSavedSat;                  \/\/ Backup of last Saturation a/;"	m	struct:ImGuiContext	typeref:typename:float
ColorPicker3	./imgui_widgets.cpp	/^bool ImGui::ColorPicker3(const char* label, float col[3], ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
ColorPicker4	./imgui_widgets.cpp	/^bool ImGui::ColorPicker4(const char* label, float col[4], ImGuiColorEditFlags flags, const float/;"	f	class:ImGui	typeref:typename:bool
ColorPickerOptionsPopup	./imgui_widgets.cpp	/^void ImGui::ColorPickerOptionsPopup(const float* ref_col, ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:void
ColorPickerRef	./imgui_internal.h	/^    ImVec4                  ColorPickerRef;                     \/\/ Initial\/reference color at/;"	m	struct:ImGuiContext	typeref:typename:ImVec4
ColorStack	./imgui_internal.h	/^    ImVector<ImGuiColorMod>         ColorStack;                 \/\/ Stack for PushStyleColor()\//;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiColorMod>
ColorTooltip	./imgui_widgets.cpp	/^void ImGui::ColorTooltip(const char* text, const float* col, ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:void
Colored	./imgui.h	/^    unsigned int    Colored : 1;        \/\/ Flag to indicate glyph is colored and should genera/;"	m	struct:ImFontGlyph	typeref:typename:unsigned int:1
Colorful glyphs/emojis	./misc/freetype/README.md	/^### Colorful glyphs\/emojis$/;"	S	chapter:imgui_freetype
Colors	./imgui.h	/^    ImVec4      Colors[ImGuiCol_COUNT];$/;"	m	struct:ImGuiStyle	typeref:typename:ImVec4[]
Column	./imgui_internal.h	/^    ImGuiTableColumnIdx         Column;     \/\/ Column number$/;"	m	struct:ImGuiTableCellData	typeref:typename:ImGuiTableColumnIdx
ColumnIndex	./imgui.h	/^    ImS16                       ColumnIndex;        \/\/ Index of the column$/;"	m	struct:ImGuiTableColumnSortSpecs	typeref:typename:ImS16
ColumnUserID	./imgui.h	/^    ImGuiID                     ColumnUserID;       \/\/ User id of the column (if specified by /;"	m	struct:ImGuiTableColumnSortSpecs	typeref:typename:ImGuiID
Columns	./imgui_internal.h	/^    ImSpan<ImGuiTableColumn>    Columns;                    \/\/ Point within RawData[]$/;"	m	struct:ImGuiTable	typeref:typename:ImSpan<ImGuiTableColumn>
Columns	./imgui_internal.h	/^    ImVector<ImGuiOldColumnData> Columns;$/;"	m	struct:ImGuiOldColumns	typeref:typename:ImVector<ImGuiOldColumnData>
Columns	./imgui_tables.cpp	/^void ImGui::Columns(int columns_count, const char* id, bool border)$/;"	f	class:ImGui	typeref:typename:void
ColumnsAutoFitWidth	./imgui_internal.h	/^    float                       ColumnsAutoFitWidth;        \/\/ Sum of ideal column width in or/;"	m	struct:ImGuiTable	typeref:typename:float
ColumnsCount	./imgui_internal.h	/^    ImGuiTableColumnIdx         ColumnsCount;$/;"	m	struct:ImGuiTableSettings	typeref:typename:ImGuiTableColumnIdx
ColumnsCount	./imgui_internal.h	/^    int                         ColumnsCount;               \/\/ Number of columns declared in B/;"	m	struct:ImGuiTable	typeref:typename:int
ColumnsCountMax	./imgui_internal.h	/^    ImGuiTableColumnIdx         ColumnsCountMax;        \/\/ Maximum number of columns this sett/;"	m	struct:ImGuiTableSettings	typeref:typename:ImGuiTableColumnIdx
ColumnsEnabledCount	./imgui_internal.h	/^    ImGuiTableColumnIdx         ColumnsEnabledCount;        \/\/ Number of enabled columns (<= C/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
ColumnsEnabledFixedCount	./imgui_internal.h	/^    ImGuiTableColumnIdx         ColumnsEnabledFixedCount;   \/\/ Number of enabled columns using/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
ColumnsGivenWidth	./imgui_internal.h	/^    float                       ColumnsGivenWidth;          \/\/ Sum of current column width$/;"	m	struct:ImGuiTable	typeref:typename:float
ColumnsMinSpacing	./imgui.h	/^    float       ColumnsMinSpacing;          \/\/ Minimum horizontal spacing between two columns./;"	m	struct:ImGuiStyle	typeref:typename:float
ColumnsNames	./imgui_internal.h	/^    ImGuiTextBuffer             ColumnsNames;               \/\/ Contiguous buffer holding colum/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTextBuffer
ColumnsOffset	./imgui_internal.h	/^    ImVec1                  ColumnsOffset;          \/\/ Offset to the current column (if Column/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec1
ColumnsStorage	./imgui_internal.h	/^    ImVector<ImGuiOldColumns> ColumnsStorage;$/;"	m	struct:ImGuiWindow	typeref:typename:ImVector<ImGuiOldColumns>
ColumnsStretchSumWeights	./imgui_internal.h	/^    float                       ColumnsStretchSumWeights;   \/\/ Sum of weight of all enabled st/;"	m	struct:ImGuiTable	typeref:typename:float
Combo	./imgui_widgets.cpp	/^bool ImGui::Combo(const char* label, int* current_item, bool (*old_getter)(void*, int, const cha/;"	f	class:ImGui	typeref:typename:bool
Combo	./imgui_widgets.cpp	/^bool ImGui::Combo(const char* label, int* current_item, const char* (*getter)(void* user_data, i/;"	f	class:ImGui	typeref:typename:bool
Combo	./imgui_widgets.cpp	/^bool ImGui::Combo(const char* label, int* current_item, const char* const items[], int items_cou/;"	f	class:ImGui	typeref:typename:bool
Combo	./imgui_widgets.cpp	/^bool ImGui::Combo(const char* label, int* current_item, const char* items_separated_by_zeros, in/;"	f	class:ImGui	typeref:typename:bool
ComboPreviewData	./imgui_internal.h	/^    ImGuiComboPreviewData   ComboPreviewData;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiComboPreviewData
CommandAllocator	./examples/example_win32_directx12/main.cpp	/^    ID3D12CommandAllocator* CommandAllocator;$/;"	m	struct:FrameContext	typeref:typename:ID3D12CommandAllocator *	file:
CommandBuffer	./backends/imgui_impl_vulkan.h	/^    VkCommandBuffer     CommandBuffer;$/;"	m	struct:ImGui_ImplVulkanH_Frame	typeref:typename:VkCommandBuffer
CommandPool	./backends/imgui_impl_vulkan.h	/^    VkCommandPool       CommandPool;$/;"	m	struct:ImGui_ImplVulkanH_Frame	typeref:typename:VkCommandPool
Commands	./imgui_demo.cpp	/^    ImVector<const char*> Commands;$/;"	m	struct:ExampleAppConsole	typeref:typename:ImVector<const char * >	file:
CommonBindGroup	./backends/imgui_impl_wgpu.cpp	/^    WGPUBindGroup       CommonBindGroup = nullptr;      \/\/ Resources bind-group to bind the co/;"	m	struct:RenderResources	typeref:typename:WGPUBindGroup	file:
CompareItemsByValue	./imgui_demo.cpp	/^    static int IMGUI_CDECL CompareItemsByValue(const void* lhs, const void* rhs)$/;"	f	struct:ExampleDualListBox	typeref:typename:int IMGUI_CDECL	file:
CompareWithContextState	./imgui.cpp	/^void ImGuiStackSizes::CompareWithContextState(ImGuiContext* ctx)$/;"	f	class:ImGuiStackSizes	typeref:typename:void
CompareWithSortSpecs	./imgui_demo.cpp	/^    static int IMGUI_CDECL CompareWithSortSpecs(const void* lhs, const void* rhs)$/;"	f	struct:ExampleAsset	typeref:typename:int IMGUI_CDECL	file:
CompareWithSortSpecs	./imgui_demo.cpp	/^    static int IMGUI_CDECL CompareWithSortSpecs(const void* lhs, const void* rhs)$/;"	f	struct:__anon38b7fb720511::MyItem	typeref:typename:int IMGUI_CDECL	file:
Comparison	./misc/freetype/README.md	/^### Comparison$/;"	S	chapter:imgui_freetype
CompileShader	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLCOMPILESHADERPROC            CompileShader;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLCOMPILESHADERPROC
ConfigData	./imgui.h	/^    ImVector<ImFontConfig>      ConfigData;         \/\/ Configuration data$/;"	m	struct:ImFontAtlas	typeref:typename:ImVector<ImFontConfig>
ConfigData	./imgui.h	/^    const ImFontConfig*         ConfigData;         \/\/ 4-8   \/\/ in  \/\/            \/\/ Poi/;"	m	struct:ImFont	typeref:typename:const ImFontConfig *
ConfigDataCount	./imgui.h	/^    short                       ConfigDataCount;    \/\/ 2     \/\/ in  \/\/ ~ 1        \/\/ Num/;"	m	struct:ImFont	typeref:typename:short
ConfigDebugBeginReturnValueLoop	./imgui.h	/^    bool        ConfigDebugBeginReturnValueLoop;\/\/ = false          \/\/ Some calls to Begin()/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigDebugBeginReturnValueOnce	./imgui.h	/^    bool        ConfigDebugBeginReturnValueOnce;\/\/ = false          \/\/ First-time calls to B/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigDebugIgnoreFocusLoss	./imgui.h	/^    bool        ConfigDebugIgnoreFocusLoss;     \/\/ = false          \/\/ Ignore io.AddFocusEve/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigDebugIniSettings	./imgui.h	/^    bool        ConfigDebugIniSettings;         \/\/ = false          \/\/ Save .ini data with e/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigDebugIsDebuggerPresent	./imgui.h	/^    bool        ConfigDebugIsDebuggerPresent;   \/\/ = false          \/\/ Enable various tools /;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigDragClickToInputText	./imgui.h	/^    bool        ConfigDragClickToInputText;     \/\/ = false          \/\/ [BETA] Enable turning/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigFlags	./imgui.h	/^    ImGuiConfigFlags   ConfigFlags;             \/\/ = 0              \/\/ See ImGuiConfigFlags_/;"	m	struct:ImGuiIO	typeref:typename:ImGuiConfigFlags
ConfigInputTextCursorBlink	./imgui.h	/^    bool        ConfigInputTextCursorBlink;     \/\/ = true           \/\/ Enable blinking curso/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigInputTextEnterKeepActive	./imgui.h	/^    bool        ConfigInputTextEnterKeepActive; \/\/ = false          \/\/ [BETA] Pressing Enter/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigInputTrickleEventQueue	./imgui.h	/^    bool        ConfigInputTrickleEventQueue;   \/\/ = true           \/\/ Enable input queue tr/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigMacOSXBehaviors	./imgui.h	/^    bool        ConfigMacOSXBehaviors;          \/\/ = defined(__APPLE__) \/\/ Swap Cmd<>Ctrl ke/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigMemoryCompactTimer	./imgui.h	/^    float       ConfigMemoryCompactTimer;       \/\/ = 60.0f          \/\/ Timer (in seconds) to/;"	m	struct:ImGuiIO	typeref:typename:float
ConfigNavSwapGamepadButtons	./imgui.h	/^    bool        ConfigNavSwapGamepadButtons;    \/\/ = false          \/\/ Swap Activate<>Cancel/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigNavWindowingKeyNext	./imgui_internal.h	/^    ImGuiKeyChord           ConfigNavWindowingKeyNext;          \/\/ = ImGuiMod_Ctrl | ImGuiKey_/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKeyChord
ConfigNavWindowingKeyPrev	./imgui_internal.h	/^    ImGuiKeyChord           ConfigNavWindowingKeyPrev;          \/\/ = ImGuiMod_Ctrl | ImGuiMod_/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKeyChord
ConfigWindowsMoveFromTitleBarOnly	./imgui.h	/^    bool        ConfigWindowsMoveFromTitleBarOnly; \/\/ = false       \/\/ Enable allowing to mo/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigWindowsResizeFromEdges	./imgui.h	/^    bool        ConfigWindowsResizeFromEdges;   \/\/ = true           \/\/ Enable resizing of wi/;"	m	struct:ImGuiIO	typeref:typename:bool
Configuration	./examples/example_allegro5/README.md	/^# Configuration$/;"	c
ContainerAtlas	./imgui.h	/^    ImFontAtlas*                ContainerAtlas;     \/\/ 4-8   \/\/ out \/\/            \/\/ Wha/;"	m	struct:ImFont	typeref:typename:ImFontAtlas *
Contains	./imgui_internal.h	/^    bool        Contains(const ImRect& r) const     { return r.Min.x >= Min.x && r.Min.y >= Min./;"	f	struct:ImRect	typeref:typename:bool
Contains	./imgui_internal.h	/^    bool        Contains(const ImVec2& p) const     { return p.x     >= Min.x && p.y     >= Min./;"	f	struct:ImRect	typeref:typename:bool
Contains	./imgui_internal.h	/^    bool        Contains(const T* p) const          { return (p >= Buf.Data && p < Buf.Data + Bu/;"	f	struct:ImPool	typeref:typename:bool
Contains	./imgui_widgets.cpp	/^bool ImGuiSelectionBasicStorage::Contains(ImGuiID id) const$/;"	f	class:ImGuiSelectionBasicStorage	typeref:typename:bool
ContainsWithPad	./imgui_internal.h	/^    bool        ContainsWithPad(const ImVec2& p, const ImVec2& pad) const { return p.x >= Min.x /;"	f	struct:ImRect	typeref:typename:bool
ContentMaxXFrozen	./imgui_internal.h	/^    float                   ContentMaxXFrozen;              \/\/ Contents maximum position for f/;"	m	struct:ImGuiTableColumn	typeref:typename:float
ContentMaxXHeadersIdeal	./imgui_internal.h	/^    float                   ContentMaxXHeadersIdeal;$/;"	m	struct:ImGuiTableColumn	typeref:typename:float
ContentMaxXHeadersUsed	./imgui_internal.h	/^    float                   ContentMaxXHeadersUsed;         \/\/ Contents maximum position for h/;"	m	struct:ImGuiTableColumn	typeref:typename:float
ContentMaxXUnfrozen	./imgui_internal.h	/^    float                   ContentMaxXUnfrozen;$/;"	m	struct:ImGuiTableColumn	typeref:typename:float
ContentRegionRect	./imgui_internal.h	/^    ImRect                  ContentRegionRect;                  \/\/ FIXME: This is currently co/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
ContentSize	./imgui_internal.h	/^    ImVec2                  ContentSize;                        \/\/ Size of contents\/scrollabl/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ContentSizeExplicit	./imgui_internal.h	/^    ImVec2                  ContentSizeExplicit;                \/\/ Size of contents\/scrollabl/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ContentSizeIdeal	./imgui_internal.h	/^    ImVec2                  ContentSizeIdeal;$/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ContentSizeVal	./imgui_internal.h	/^    ImVec2                      ContentSizeVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
ContentWidth	./imgui_internal.h	/^    float               ContentWidth;           \/\/ Width of label, stored during BeginTabItem(/;"	m	struct:ImGuiTabItem	typeref:typename:float
ContentsType	./imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	g	function:ShowDemoWindowTables	file:
ContentsType	./imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	g	function:ShowDemoWindowTables	file:
ContentsType	./imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_FillButton };$/;"	g	function:ShowDemoWindowTables	file:
ContextName	./imgui_internal.h	/^    char                    ContextName[16];                    \/\/ Storage for a context name /;"	m	struct:ImGuiContext	typeref:typename:char[16]
ContextPopupColumn	./imgui_internal.h	/^    ImGuiTableColumnIdx         ContextPopupColumn;         \/\/ Column right-clicked on, of -1 /;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
Contributing Guidelines	./docs/CONTRIBUTING.md	/^# Contributing Guidelines$/;"	c
ConvertSingleModFlagToKey	./imgui_internal.h	/^    inline ImGuiKey         ConvertSingleModFlagToKey(ImGuiKey key)$/;"	f	namespace:ImGui	typeref:typename:ImGuiKey
CopyToClipboardLastTime	./imgui_internal.h	/^    float                   CopyToClipboardLastTime;$/;"	m	struct:ImGuiIDStackTool	typeref:typename:float
CopyToClipboardOnCtrlC	./imgui_internal.h	/^    bool                    CopyToClipboardOnCtrlC;$/;"	m	struct:ImGuiIDStackTool	typeref:typename:bool
Copyright / Contributor License Agreement	./docs/CONTRIBUTING.md	/^## Copyright \/ Contributor License Agreement$/;"	s	chapter:Contributing Guidelines
CornerPosN	./imgui.cpp	/^    ImVec2  CornerPosN;$/;"	m	struct:ImGuiResizeGripDef	typeref:typename:ImVec2	file:
Count	./backends/imgui_impl_vulkan.cpp	/^    uint32_t            Count;$/;"	m	struct:ImGui_ImplVulkan_WindowRenderBuffers	typeref:typename:uint32_t	file:
Count	./imgui_internal.h	/^    ImU32           Count;      \/\/ 1+$/;"	m	struct:ImGuiDataVarInfo	typeref:typename:ImU32
Count	./imgui_internal.h	/^    int                 Count;$/;"	m	struct:ImGuiOldColumns	typeref:typename:int
CountGrep	./imgui.h	/^    int                     CountGrep;$/;"	m	struct:ImGuiTextFilter	typeref:typename:int
Create	./imgui_internal.h	/^    void            Create(int sz)              { Storage.resize((sz + 31) >> 5); memset(Storage/;"	f	struct:ImBitVector	typeref:typename:void
CreateContext	./imgui.cpp	/^ImGuiContext* ImGui::CreateContext(ImFontAtlas* shared_font_atlas)$/;"	f	class:ImGui	typeref:typename:ImGuiContext *
CreateDeviceD3D	./examples/example_sdl2_directx11/main.cpp	/^bool CreateDeviceD3D(HWND hWnd)$/;"	f	typeref:typename:bool
CreateDeviceD3D	./examples/example_win32_directx10/main.cpp	/^bool CreateDeviceD3D(HWND hWnd)$/;"	f	typeref:typename:bool
CreateDeviceD3D	./examples/example_win32_directx11/main.cpp	/^bool CreateDeviceD3D(HWND hWnd)$/;"	f	typeref:typename:bool
CreateDeviceD3D	./examples/example_win32_directx12/main.cpp	/^bool CreateDeviceD3D(HWND hWnd)$/;"	f	typeref:typename:bool
CreateDeviceD3D	./examples/example_win32_directx9/main.cpp	/^bool CreateDeviceD3D(HWND hWnd)$/;"	f	typeref:typename:bool
CreateDeviceWGL	./examples/example_win32_opengl3/main.cpp	/^bool CreateDeviceWGL(HWND hWnd, WGL_WindowData* data)$/;"	f	typeref:typename:bool
CreateNewWindow	./imgui.cpp	/^static ImGuiWindow* CreateNewWindow(const char* name, ImGuiWindowFlags flags)$/;"	f	typeref:typename:ImGuiWindow *	file:
CreateNewWindowSettings	./imgui.cpp	/^ImGuiWindowSettings* ImGui::CreateNewWindowSettings(const char* name)$/;"	f	class:ImGui	typeref:typename:ImGuiWindowSettings *
CreateOrResizeBuffer	./backends/imgui_impl_vulkan.cpp	/^static void CreateOrResizeBuffer(VkBuffer& buffer, VkDeviceMemory& buffer_memory, VkDeviceSize& /;"	f	typeref:typename:void	file:
CreateProgram	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLCREATEPROGRAMPROC            CreateProgram;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLCREATEPROGRAMPROC
CreateRenderTarget	./examples/example_sdl2_directx11/main.cpp	/^void CreateRenderTarget()$/;"	f	typeref:typename:void
CreateRenderTarget	./examples/example_win32_directx10/main.cpp	/^void CreateRenderTarget()$/;"	f	typeref:typename:void
CreateRenderTarget	./examples/example_win32_directx11/main.cpp	/^void CreateRenderTarget()$/;"	f	typeref:typename:void
CreateRenderTarget	./examples/example_win32_directx12/main.cpp	/^void CreateRenderTarget()$/;"	f	typeref:typename:void
CreateShader	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLCREATESHADERPROC             CreateShader;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLCREATESHADERPROC
CreateSwapChain	./examples/example_glfw_wgpu/main.cpp	/^static void CreateSwapChain(int width, int height)$/;"	f	typeref:typename:void	file:
Credits	./docs/README.md	/^Credits$/;"	s	chapter:Dear ImGui
Credits/Licenses For Fonts Included In Repository	./docs/FONTS.md	/^## Credits\/Licenses For Fonts Included In Repository$/;"	s
Ctx	./imgui.h	/^    ImGuiContext*       Ctx;            \/\/ Parent UI context$/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:ImGuiContext *
Ctx	./imgui.h	/^    ImGuiContext*   Ctx;                \/\/ Parent UI context$/;"	m	struct:ImGuiListClipper	typeref:typename:ImGuiContext *
Ctx	./imgui.h	/^    ImGuiContext* Ctx;                              \/\/ Parent UI context (needs to be set expl/;"	m	struct:ImGuiIO	typeref:typename:ImGuiContext *
Ctx	./imgui_internal.h	/^    ImGuiContext*           Ctx;                                \/\/ Parent UI context (needs to/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiContext *
Ctx	./imgui_internal.h	/^    ImGuiContext*           Ctx;                    \/\/ parent UI context (needs to be set expl/;"	m	struct:ImGuiInputTextState	typeref:typename:ImGuiContext *
CurLenA	./imgui_internal.h	/^    int                     CurLenW, CurLenA;       \/\/ we need to maintain our buffer length i/;"	m	struct:ImGuiInputTextState	typeref:typename:int
CurLenW	./imgui_internal.h	/^    int                     CurLenW, CurLenA;       \/\/ we need to maintain our buffer length i/;"	m	struct:ImGuiInputTextState	typeref:typename:int
CurrFrameVisible	./imgui_internal.h	/^    int                 CurrFrameVisible;$/;"	m	struct:ImGuiTabBar	typeref:typename:int
CurrIdx	./imgui_internal.h	/^    int     CurrIdx;$/;"	m	struct:ImSpanAllocator	typeref:typename:int
CurrLineSize	./imgui_internal.h	/^    ImVec2                  CurrLineSize;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CurrLineTextBaseOffset	./imgui_internal.h	/^    float                   CurrLineTextBaseOffset; \/\/ Baseline offset (0.0f by default on a n/;"	m	struct:ImGuiWindowTempData	typeref:typename:float
CurrOff	./imgui_internal.h	/^    int     CurrOff;$/;"	m	struct:ImSpanAllocator	typeref:typename:int
CurrTabsContentsHeight	./imgui_internal.h	/^    float               CurrTabsContentsHeight;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
Current	./imgui_internal.h	/^    int                 Current;$/;"	m	struct:ImGuiOldColumns	typeref:typename:int
CurrentColumn	./imgui_internal.h	/^    int                         CurrentColumn;$/;"	m	struct:ImGuiTable	typeref:typename:int
CurrentColumns	./imgui_internal.h	/^    ImGuiOldColumns*        CurrentColumns;         \/\/ Current columns set$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiOldColumns *
CurrentDpiScale	./imgui_internal.h	/^    float                   CurrentDpiScale;                    \/\/ Current window\/viewport Dp/;"	m	struct:ImGuiContext	typeref:typename:float
CurrentFocusScopeId	./imgui_internal.h	/^    ImGuiID                 CurrentFocusScopeId;                \/\/ Value for currently appendi/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
CurrentItemFlags	./imgui_internal.h	/^    ImGuiItemFlags          CurrentItemFlags;                   \/\/ Value for currently appendi/;"	m	struct:ImGuiContext	typeref:typename:ImGuiItemFlags
CurrentMultiSelect	./imgui_internal.h	/^    ImGuiMultiSelectTempData*       CurrentMultiSelect;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiMultiSelectTempData *
CurrentRow	./imgui_internal.h	/^    int                         CurrentRow;$/;"	m	struct:ImGuiTable	typeref:typename:int
CurrentSize	./imgui.h	/^    ImVec2  CurrentSize;    \/\/ Read-only.   Current window size.$/;"	m	struct:ImGuiSizeCallbackData	typeref:typename:ImVec2
CurrentTabBar	./imgui_internal.h	/^    ImGuiTabBar*                    CurrentTabBar;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTabBar *
CurrentTabBarStack	./imgui_internal.h	/^    ImVector<ImGuiPtrOrIndex>       CurrentTabBarStack;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiPtrOrIndex>
CurrentTable	./imgui_internal.h	/^    ImGuiTable*                     CurrentTable;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTable *
CurrentTableIdx	./imgui_internal.h	/^    int                     CurrentTableIdx;        \/\/ Current table index (into g.Tables)$/;"	m	struct:ImGuiWindowTempData	typeref:typename:int
CurrentWindow	./imgui_internal.h	/^    ImGuiWindow*            CurrentWindow;                      \/\/ Window being drawn into$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
CurrentWindowStack	./imgui_internal.h	/^    ImVector<ImGuiWindowStackData> CurrentWindowStack;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiWindowStackData>
CursorAnim	./imgui_internal.h	/^    float                   CursorAnim;             \/\/ timer for cursor blink, reset on every /;"	m	struct:ImGuiInputTextState	typeref:typename:float
CursorAnimReset	./imgui_internal.h	/^    void        CursorAnimReset()           { CursorAnim = -0.30f; }                            /;"	f	struct:ImGuiInputTextState	typeref:typename:void
CursorClamp	./imgui_internal.h	/^    void        CursorClamp()               { Stb.cursor = ImMin(Stb.cursor, CurLenW); Stb.selec/;"	f	struct:ImGuiInputTextState	typeref:typename:void
CursorFollow	./imgui_internal.h	/^    bool                    CursorFollow;           \/\/ set when we want scrolling to follow th/;"	m	struct:ImGuiInputTextState	typeref:typename:bool
CursorMaxPos	./imgui_internal.h	/^    ImVec2                  CursorMaxPos;           \/\/ Used to implicitly calculate ContentSiz/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CursorPos	./imgui.h	/^    int                 CursorPos;      \/\/                                      \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
CursorPos	./imgui_internal.h	/^    ImVec2                  CursorPos;              \/\/ Current emitting position, in absolute /;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CursorPosPrevLine	./imgui_internal.h	/^    ImVec2                  CursorPosPrevLine;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CursorStartPos	./imgui_internal.h	/^    ImVec2                  CursorStartPos;         \/\/ Initial position after Begin(), general/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CursorStartPosLossyness	./imgui_internal.h	/^    ImVec2                  CursorStartPosLossyness;\/\/ Record the loss of precision of CursorS/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CurveTessellationTol	./imgui.h	/^    float       CurveTessellationTol;       \/\/ Tessellation tolerance when using PathBezierCur/;"	m	struct:ImGuiStyle	typeref:typename:float
CurveTessellationTol	./imgui_internal.h	/^    float           CurveTessellationTol;       \/\/ Tessellation tolerance when using PathBezie/;"	m	struct:ImDrawListSharedData	typeref:typename:float
CustomConstraints	./imgui_demo.cpp	/^    struct CustomConstraints$/;"	s	function:ShowExampleAppConstrainedResize	file:
CustomRects	./imgui.h	/^    ImVector<ImFontAtlasCustomRect> CustomRects;    \/\/ Rectangles for packing custom texture d/;"	m	struct:ImFontAtlas	typeref:typename:ImVector<ImFontAtlasCustomRect>
D3DFVF_CUSTOMVERTEX	./backends/imgui_impl_dx9.cpp	/^#define D3DFVF_CUSTOMVERTEX /;"	d	file:
DAWN_BUILD_SAMPLES	./examples/example_glfw_wgpu/CMakeLists.txt	/^  option(DAWN_BUILD_SAMPLES "Enables building Dawn's samples" OFF)$/;"	D
DAWN_FETCH_DEPENDENCIES	./examples/example_glfw_wgpu/CMakeLists.txt	/^  option(DAWN_FETCH_DEPENDENCIES "Use fetch_dawn_dependencies.py as an alternative to using depo/;"	D
DAWN_FETCH_DEPENDENCIES	./examples/example_glfw_wgpu/CMakeLists.txt	/^  set(DAWN_FETCH_DEPENDENCIES ON)$/;"	v
DBT_DEVNODES_CHANGED	./backends/imgui_impl_win32.cpp	/^#define DBT_DEVNODES_CHANGED /;"	d	file:
DC	./imgui_internal.h	/^    ImGuiWindowTempData     DC;                                 \/\/ Temporary per-window data, /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindowTempData
DEBUG_LOCATE_ITEM_COLOR	./imgui.cpp	/^static const ImU32 DEBUG_LOCATE_ITEM_COLOR = IM_COL32(0, 255, 0, 255);  \/\/ Green$/;"	v	typeref:typename:const ImU32	file:
DE_MULTIPLY	./misc/freetype/imgui_freetype.cpp	/^                #define DE_MULTIPLY(/;"	d	file:
DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE	./backends/imgui_impl_win32.cpp	/^#define DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE /;"	d	file:
DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2	./backends/imgui_impl_win32.cpp	/^#define DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2 /;"	d	file:
DRAGDROP_HOLD_TO_OPEN_TIMER	./imgui_widgets.cpp	/^static const float          DRAGDROP_HOLD_TO_OPEN_TIMER = 0.70f;    \/\/ Time for drag-hold to a/;"	v	typeref:typename:const float	file:
DRAG_MOUSE_THRESHOLD_FACTOR	./imgui_widgets.cpp	/^static const float          DRAG_MOUSE_THRESHOLD_FACTOR = 0.50f;    \/\/ Multiplier for the defa/;"	v	typeref:typename:const float	file:
DRAW_VERT_IMGUI_TO_ALLEGRO	./backends/imgui_impl_allegro5.cpp	/^#define DRAW_VERT_IMGUI_TO_ALLEGRO(/;"	d	file:
DX12_ENABLE_DEBUG_LAYER	./examples/example_win32_directx12/main.cpp	/^#define DX12_ENABLE_DEBUG_LAYER$/;"	d	file:
Data	./imgui.h	/^    ImVector<ImGuiStoragePair>      Data;$/;"	m	struct:ImGuiStorage	typeref:typename:ImVector<ImGuiStoragePair>
Data	./imgui.h	/^    T*                  Data;$/;"	m	struct:ImVector	typeref:typename:T *
Data	./imgui.h	/^    void*           Data;               \/\/ Data (copied and owned by dear imgui)$/;"	m	struct:ImGuiPayload	typeref:typename:void *
Data	./imgui_draw.cpp	/^    ImTriangulatorNode**    Data = NULL;$/;"	m	struct:ImTriangulatorNodeSpan	typeref:typename:ImTriangulatorNode **	file:
Data	./imgui_internal.h	/^    ImU8        Data[8];        \/\/ Opaque storage to fit any data up to ImGuiDataType_COUNT$/;"	m	struct:ImGuiDataTypeStorage	typeref:typename:ImU8[8]
Data	./imgui_internal.h	/^    T*                  Data;$/;"	m	struct:ImSpan	typeref:typename:T *
DataCount	./imgui_demo.cpp	/^    int             DataCount;  \/\/ Member count (1 when scalar)$/;"	m	struct:ExampleMemberInfo	typeref:typename:int	file:
DataEnd	./imgui_internal.h	/^    T*                  DataEnd;$/;"	m	struct:ImSpan	typeref:typename:T *
DataFrameCount	./imgui.h	/^    int             DataFrameCount;     \/\/ Data timestamp$/;"	m	struct:ImGuiPayload	typeref:typename:int
DataMyBool	./imgui_demo.cpp	/^    bool                        DataMyBool = true;$/;"	m	struct:ExampleTreeNode	typeref:typename:bool	file:
DataMyInt	./imgui_demo.cpp	/^    int                         DataMyInt = 128;$/;"	m	struct:ExampleTreeNode	typeref:typename:int	file:
DataMyVec2	./imgui_demo.cpp	/^    ImVec2                      DataMyVec2 = ImVec2(0.0f, 3.141592f);$/;"	m	struct:ExampleTreeNode	typeref:typename:ImVec2	file:
DataSize	./imgui.h	/^    int             DataSize;           \/\/ Data size$/;"	m	struct:ImGuiPayload	typeref:typename:int
DataType	./imgui.h	/^    char            DataType[32 + 1];   \/\/ Data type tag (short user-supplied string, 32 chara/;"	m	struct:ImGuiPayload	typeref:typename:char[]
DataType	./imgui_demo.cpp	/^    ImGuiDataType   DataType;   \/\/ Member type$/;"	m	struct:ExampleMemberInfo	typeref:typename:ImGuiDataType	file:
DataType	./imgui_internal.h	/^    ImGuiDataType           DataType : 8;$/;"	m	struct:ImGuiStackLevelInfo	typeref:typename:ImGuiDataType:8
DataTypeApplyFromText	./imgui_widgets.cpp	/^bool ImGui::DataTypeApplyFromText(const char* buf, ImGuiDataType data_type, void* p_data, const /;"	f	class:ImGui	typeref:typename:bool
DataTypeApplyOp	./imgui_widgets.cpp	/^void ImGui::DataTypeApplyOp(ImGuiDataType data_type, int op, void* output, const void* arg1, con/;"	f	class:ImGui	typeref:typename:void
DataTypeClamp	./imgui_widgets.cpp	/^bool ImGui::DataTypeClamp(ImGuiDataType data_type, void* p_data, const void* p_min, const void* /;"	f	class:ImGui	typeref:typename:bool
DataTypeClampT	./imgui_widgets.cpp	/^static bool DataTypeClampT(T* v, const T* v_min, const T* v_max)$/;"	f	typeref:typename:bool	file:
DataTypeCompare	./imgui_widgets.cpp	/^int ImGui::DataTypeCompare(ImGuiDataType data_type, const void* arg_1, const void* arg_2)$/;"	f	class:ImGui	typeref:typename:int
DataTypeCompareT	./imgui_widgets.cpp	/^static int DataTypeCompareT(const T* lhs, const T* rhs)$/;"	f	typeref:typename:int	file:
DataTypeFormatString	./imgui_widgets.cpp	/^int ImGui::DataTypeFormatString(char* buf, int buf_size, ImGuiDataType data_type, const void* p_/;"	f	class:ImGui	typeref:typename:int
DataTypeGetInfo	./imgui_widgets.cpp	/^const ImGuiDataTypeInfo* ImGui::DataTypeGetInfo(ImGuiDataType data_type)$/;"	f	class:ImGui	typeref:typename:const ImGuiDataTypeInfo *
DataTypeZeroValue	./imgui_internal.h	/^    ImGuiDataTypeStorage    DataTypeZeroValue;                  \/\/ 0 for all data types$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDataTypeStorage
DeIndexAllBuffers	./imgui_draw.cpp	/^void ImDrawData::DeIndexAllBuffers()$/;"	f	class:ImDrawData	typeref:typename:void
Dear ImGui	./docs/README.md	/^Dear ImGui$/;"	c
Dear ImGui Emscripten example	./examples/libs/emscripten/shell_minimal.html	/^    <title>Dear ImGui Emscripten example<\/title>$/;"	j
Dear ImGui Emscripten+GLFW+WebGPU example	./examples/example_glfw_wgpu/web/index.html	/^    <title>Dear ImGui Emscripten+GLFW+WebGPU example<\/title>$/;"	j
Dear ImGui: Backends	./docs/BACKENDS.md	/^## Dear ImGui: Backends$/;"	s
Dear ImGui: Examples	./docs/EXAMPLES.md	/^## Dear ImGui: Examples$/;"	s
Dear ImGui: Using Fonts	./docs/FONTS.md	/^## Dear ImGui: Using Fonts$/;"	s
Debug Tools	./docs/FONTS.md	/^## Debug Tools$/;"	s
DebugAllocHook	./imgui.cpp	/^void ImGui::DebugAllocHook(ImGuiDebugAllocInfo* info, int frame_count, void* ptr, size_t size)$/;"	f	class:ImGui	typeref:typename:void
DebugAllocInfo	./imgui_internal.h	/^    ImGuiDebugAllocInfo     DebugAllocInfo;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDebugAllocInfo
DebugBeginReturnValueCullDepth	./imgui_internal.h	/^    ImS8                    DebugBeginReturnValueCullDepth;     \/\/ Cycle between 0..9 then wra/;"	m	struct:ImGuiContext	typeref:typename:ImS8
DebugBreakButton	./imgui.cpp	/^bool ImGui::DebugBreakButton(const char* label, const char* description_of_location)$/;"	f	class:ImGui	typeref:typename:bool
DebugBreakButtonTooltip	./imgui.cpp	/^void ImGui::DebugBreakButtonTooltip(bool keyboard_only, const char* description_of_location)$/;"	f	class:ImGui	typeref:typename:void
DebugBreakClearData	./imgui.cpp	/^void ImGui::DebugBreakClearData()$/;"	f	class:ImGui	typeref:typename:void
DebugBreakInLocateId	./imgui_internal.h	/^    bool                    DebugBreakInLocateId;               \/\/ Debug break in ItemAdd() ca/;"	m	struct:ImGuiContext	typeref:typename:bool
DebugBreakInShortcutRouting	./imgui_internal.h	/^    ImGuiKeyChord           DebugBreakInShortcutRouting;        \/\/ Set to break in SetShortcut/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKeyChord
DebugBreakInTable	./imgui_internal.h	/^    ImGuiID                         DebugBreakInTable;          \/\/ Set to break in BeginTable(/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DebugBreakInWindow	./imgui_internal.h	/^    ImGuiID                 DebugBreakInWindow;                 \/\/ Set to break in Begin() cal/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DebugBreakKeyChord	./imgui_internal.h	/^    ImGuiKeyChord           DebugBreakKeyChord;                 \/\/ = ImGuiKey_Pause$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKeyChord
DebugCheckVersionAndDataLayout	./imgui.cpp	/^bool ImGui::DebugCheckVersionAndDataLayout(const char* version, size_t sz_io, size_t sz_style, s/;"	f	class:ImGui	typeref:typename:bool
DebugDrawCursorPos	./imgui.cpp	/^void ImGui::DebugDrawCursorPos(ImU32 col)$/;"	f	class:ImGui	typeref:typename:void
DebugDrawItemRect	./imgui.cpp	/^void ImGui::DebugDrawItemRect(ImU32 col)$/;"	f	class:ImGui	typeref:typename:void
DebugDrawLineExtents	./imgui.cpp	/^void ImGui::DebugDrawLineExtents(ImU32 col)$/;"	f	class:ImGui	typeref:typename:void
DebugFlashStyleColor	./imgui.cpp	/^void ImGui::DebugFlashStyleColor(ImGuiCol idx)$/;"	f	class:ImGui	typeref:typename:void
DebugFlashStyleColorBackup	./imgui_internal.h	/^    ImVec4                  DebugFlashStyleColorBackup;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec4
DebugFlashStyleColorIdx	./imgui_internal.h	/^    ImGuiCol                        DebugFlashStyleColorIdx;    \/\/ (Keep close to ColorStack t/;"	m	struct:ImGuiContext	typeref:typename:ImGuiCol
DebugFlashStyleColorStop	./imgui.cpp	/^static void DebugFlashStyleColorStop()$/;"	f	typeref:typename:void	file:
DebugFlashStyleColorTime	./imgui_internal.h	/^    float                   DebugFlashStyleColorTime;$/;"	m	struct:ImGuiContext	typeref:typename:float
DebugHookIdInfo	./imgui.cpp	/^void ImGui::DebugHookIdInfo(ImGuiID id, ImGuiDataType data_type, const void* data_id, const void/;"	f	class:ImGui	typeref:typename:void
DebugHookIdInfo	./imgui.cpp	/^void ImGui::DebugHookIdInfo(ImGuiID, ImGuiDataType, const void*, const void*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugHookIdInfo	./imgui_internal.h	/^    ImGuiID                 DebugHookIdInfo;                    \/\/ Will call core hooks: Debug/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DebugIDStackTool	./imgui_internal.h	/^    ImGuiIDStackTool        DebugIDStackTool;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiIDStackTool
DebugItemPickerActive	./imgui_internal.h	/^    bool                    DebugItemPickerActive;              \/\/ Item picker is active (star/;"	m	struct:ImGuiContext	typeref:typename:bool
DebugItemPickerBreakId	./imgui_internal.h	/^    ImGuiID                 DebugItemPickerBreakId;             \/\/ Will call IM_DEBUG_BREAK() /;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DebugItemPickerMouseButton	./imgui_internal.h	/^    ImU8                    DebugItemPickerMouseButton;$/;"	m	struct:ImGuiContext	typeref:typename:ImU8
DebugLocateFrames	./imgui_internal.h	/^    ImU8                    DebugLocateFrames;                  \/\/ For DebugLocateItemOnHover(/;"	m	struct:ImGuiContext	typeref:typename:ImU8
DebugLocateId	./imgui_internal.h	/^    ImGuiID                 DebugLocateId;                      \/\/ Storage for DebugLocateItem/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DebugLocateItem	./imgui.cpp	/^void ImGui::DebugLocateItem(ImGuiID target_id)$/;"	f	class:ImGui	typeref:typename:void
DebugLocateItemOnHover	./imgui.cpp	/^void ImGui::DebugLocateItemOnHover(ImGuiID target_id)$/;"	f	class:ImGui	typeref:typename:void
DebugLocateItemResolveWithLastItem	./imgui.cpp	/^void ImGui::DebugLocateItemResolveWithLastItem()$/;"	f	class:ImGui	typeref:typename:void
DebugLog	./imgui.cpp	/^void ImGui::DebugLog(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
DebugLogAutoDisableFlags	./imgui_internal.h	/^    ImGuiDebugLogFlags      DebugLogAutoDisableFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDebugLogFlags
DebugLogAutoDisableFrames	./imgui_internal.h	/^    ImU8                    DebugLogAutoDisableFrames;$/;"	m	struct:ImGuiContext	typeref:typename:ImU8
DebugLogBuf	./imgui_internal.h	/^    ImGuiTextBuffer         DebugLogBuf;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTextBuffer
DebugLogFlags	./imgui_internal.h	/^    ImGuiDebugLogFlags      DebugLogFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDebugLogFlags
DebugLogIndex	./imgui_internal.h	/^    ImGuiTextIndex          DebugLogIndex;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTextIndex
DebugLogMultiSelectRequests	./imgui_widgets.cpp	/^static void DebugLogMultiSelectRequests(const char* function, const ImGuiMultiSelectIO* io)$/;"	f	typeref:typename:void	file:
DebugLogV	./imgui.cpp	/^void ImGui::DebugLogV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
DebugMetricsConfig	./imgui_internal.h	/^    ImGuiMetricsConfig      DebugMetricsConfig;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiMetricsConfig
DebugNodeColumns	./imgui.cpp	/^void ImGui::DebugNodeColumns(ImGuiOldColumns* columns)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeColumns	./imgui.cpp	/^void ImGui::DebugNodeColumns(ImGuiOldColumns*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeDrawCmdShowMeshAndBoundingBox	./imgui.cpp	/^void ImGui::DebugNodeDrawCmdShowMeshAndBoundingBox(ImDrawList* out_draw_list, const ImDrawList* /;"	f	class:ImGui	typeref:typename:void
DebugNodeDrawCmdShowMeshAndBoundingBox	./imgui.cpp	/^void ImGui::DebugNodeDrawCmdShowMeshAndBoundingBox(ImDrawList*, const ImDrawList*, const ImDrawC/;"	f	class:ImGui	typeref:typename:void
DebugNodeDrawList	./imgui.cpp	/^void ImGui::DebugNodeDrawList(ImGuiWindow* window, ImGuiViewportP* viewport, const ImDrawList* d/;"	f	class:ImGui	typeref:typename:void
DebugNodeDrawList	./imgui.cpp	/^void ImGui::DebugNodeDrawList(ImGuiWindow*, ImGuiViewportP*, const ImDrawList*, const char*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeFont	./imgui.cpp	/^void ImGui::DebugNodeFont(ImFont* font)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeFont	./imgui.cpp	/^void ImGui::DebugNodeFont(ImFont*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeFontGlyph	./imgui.cpp	/^void ImGui::DebugNodeFontGlyph(ImFont*, const ImFontGlyph* glyph)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeInputTextState	./imgui_widgets.cpp	/^void ImGui::DebugNodeInputTextState(ImGuiInputTextState* state)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeMultiSelectState	./imgui_widgets.cpp	/^void ImGui::DebugNodeMultiSelectState(ImGuiMultiSelectState* storage)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeStorage	./imgui.cpp	/^void ImGui::DebugNodeStorage(ImGuiStorage* storage, const char* label)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeStorage	./imgui.cpp	/^void ImGui::DebugNodeStorage(ImGuiStorage*, const char*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTabBar	./imgui.cpp	/^void ImGui::DebugNodeTabBar(ImGuiTabBar* tab_bar, const char* label)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTabBar	./imgui.cpp	/^void ImGui::DebugNodeTabBar(ImGuiTabBar*, const char*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTable	./imgui_tables.cpp	/^void ImGui::DebugNodeTable(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTable	./imgui_tables.cpp	/^void ImGui::DebugNodeTable(ImGuiTable*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTableGetSizingPolicyDesc	./imgui_tables.cpp	/^static const char* DebugNodeTableGetSizingPolicyDesc(ImGuiTableFlags sizing_policy)$/;"	f	typeref:typename:const char *	file:
DebugNodeTableSettings	./imgui_tables.cpp	/^void ImGui::DebugNodeTableSettings(ImGuiTableSettings* settings)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTableSettings	./imgui_tables.cpp	/^void ImGui::DebugNodeTableSettings(ImGuiTableSettings*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTypingSelectState	./imgui_widgets.cpp	/^void ImGui::DebugNodeTypingSelectState(ImGuiTypingSelectState* data)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeViewport	./imgui.cpp	/^void ImGui::DebugNodeViewport(ImGuiViewportP* viewport)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeViewport	./imgui.cpp	/^void ImGui::DebugNodeViewport(ImGuiViewportP*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindow	./imgui.cpp	/^void ImGui::DebugNodeWindow(ImGuiWindow* window, const char* label)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindow	./imgui.cpp	/^void ImGui::DebugNodeWindow(ImGuiWindow*, const char*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindowSettings	./imgui.cpp	/^void ImGui::DebugNodeWindowSettings(ImGuiWindowSettings* settings)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindowSettings	./imgui.cpp	/^void ImGui::DebugNodeWindowSettings(ImGuiWindowSettings*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindowsList	./imgui.cpp	/^void ImGui::DebugNodeWindowsList(ImVector<ImGuiWindow*>* windows, const char* label)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindowsList	./imgui.cpp	/^void ImGui::DebugNodeWindowsList(ImVector<ImGuiWindow*>*, const char*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindowsListByBeginStackParent	./imgui.cpp	/^void ImGui::DebugNodeWindowsListByBeginStackParent(ImGuiWindow** windows, int windows_size, ImGu/;"	f	class:ImGui	typeref:typename:void
DebugPrintInputEvent	./imgui.cpp	/^static void DebugPrintInputEvent(const char* prefix, const ImGuiInputEvent* e)$/;"	f	typeref:typename:void	file:
DebugRenderKeyboardPreview	./imgui.cpp	/^void ImGui::DebugRenderKeyboardPreview(ImDrawList* draw_list)$/;"	f	class:ImGui	typeref:typename:void
DebugRenderViewportThumbnail	./imgui.cpp	/^void ImGui::DebugRenderViewportThumbnail(ImDrawList* draw_list, ImGuiViewportP* viewport, const /;"	f	class:ImGui	typeref:typename:void
DebugShowGroupRects	./imgui_internal.h	/^    bool                    DebugShowGroupRects;$/;"	m	struct:ImGuiContext	typeref:typename:bool
DebugStartItemPicker	./imgui.cpp	/^void ImGui::DebugStartItemPicker() {}$/;"	f	class:ImGui	typeref:typename:void
DebugStartItemPicker	./imgui.cpp	/^void ImGui::DebugStartItemPicker()$/;"	f	class:ImGui	typeref:typename:void
DebugTextEncoding	./imgui.cpp	/^void ImGui::DebugTextEncoding(const char* str)$/;"	f	class:ImGui	typeref:typename:void
DebugTextUnformattedWithLocateItem	./imgui.cpp	/^void ImGui::DebugTextUnformattedWithLocateItem(const char* line_begin, const char* line_end)$/;"	f	class:ImGui	typeref:typename:void
DeclColumns	./imgui_widgets.cpp	/^float ImGuiMenuColumns::DeclColumns(float w_icon, float w_label, float w_shortcut, float w_mark)$/;"	f	class:ImGuiMenuColumns	typeref:typename:float
DeclColumnsCount	./imgui_internal.h	/^    ImGuiTableColumnIdx         DeclColumnsCount;           \/\/ Count calls to TableSetupColumn/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
DecoInnerSizeX1	./imgui_internal.h	/^    float                   DecoInnerSizeX1, DecoInnerSizeY1;   \/\/ Applied AFTER\/OVER InnerRe/;"	m	struct:ImGuiWindow	typeref:typename:float
DecoInnerSizeY1	./imgui_internal.h	/^    float                   DecoInnerSizeX1, DecoInnerSizeY1;   \/\/ Applied AFTER\/OVER InnerRe/;"	m	struct:ImGuiWindow	typeref:typename:float
DecoOuterSizeX1	./imgui_internal.h	/^    float                   DecoOuterSizeX1, DecoOuterSizeY1;   \/\/ Left\/Up offsets. Sum of no/;"	m	struct:ImGuiWindow	typeref:typename:float
DecoOuterSizeX2	./imgui_internal.h	/^    float                   DecoOuterSizeX2, DecoOuterSizeY2;   \/\/ Right\/Down offsets (X2 gen/;"	m	struct:ImGuiWindow	typeref:typename:float
DecoOuterSizeY1	./imgui_internal.h	/^    float                   DecoOuterSizeX1, DecoOuterSizeY1;   \/\/ Left\/Up offsets. Sum of no/;"	m	struct:ImGuiWindow	typeref:typename:float
DecoOuterSizeY2	./imgui_internal.h	/^    float                   DecoOuterSizeX2, DecoOuterSizeY2;   \/\/ Right\/Down offsets (X2 gen/;"	m	struct:ImGuiWindow	typeref:typename:float
Decode85	./imgui_draw.cpp	/^static void         Decode85(const unsigned char* src, unsigned char* dst)$/;"	f	typeref:typename:void	file:
Decode85Byte	./imgui_draw.cpp	/^static unsigned int Decode85Byte(char c)                                    { return c >= '\\\\'/;"	f	typeref:typename:unsigned int	file:
DeleteBuffers	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLDELETEBUFFERSPROC            DeleteBuffers;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLDELETEBUFFERSPROC
DeleteChars	./imgui_widgets.cpp	/^void ImGuiInputTextCallbackData::DeleteChars(int pos, int bytes_count)$/;"	f	class:ImGuiInputTextCallbackData	typeref:typename:void
DeleteProgram	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLDELETEPROGRAMPROC            DeleteProgram;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLDELETEPROGRAMPROC
DeleteShader	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLDELETESHADERPROC             DeleteShader;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLDELETESHADERPROC
DeleteTextures	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLDELETETEXTURESPROC           DeleteTextures;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLDELETETEXTURESPROC
DeleteVertexArrays	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLDELETEVERTEXARRAYSPROC       DeleteVertexArrays;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLDELETEVERTEXARRAYSPROC
Delivery	./imgui.h	/^    bool            Delivery;           \/\/ Set when AcceptDragDropPayload() was called and mou/;"	m	struct:ImGuiPayload	typeref:typename:bool
DeltaTime	./imgui.h	/^    float       DeltaTime;                      \/\/ = 1.0f\/60.0f     \/\/ Time elapsed since l/;"	m	struct:ImGuiIO	typeref:typename:float
Demo	./docs/README.md	/^### Demo$/;"	S	chapter:Dear ImGui
DemoTree	./imgui_demo.cpp	/^    ExampleTreeNode* DemoTree = NULL;$/;"	m	struct:ImGuiDemoWindowData	typeref:typename:ExampleTreeNode *	file:
DepthStencilFormat	./backends/imgui_impl_wgpu.h	/^    WGPUTextureFormat       DepthStencilFormat = WGPUTextureFormat_Undefined;$/;"	m	struct:ImGui_ImplWGPU_InitInfo	typeref:typename:WGPUTextureFormat
DepthStencilState	./backends/imgui_impl_dx10.cpp	/^        ID3D10DepthStencilState*    DepthStencilState;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:ID3D10DepthStencilState *	file:
DepthStencilState	./backends/imgui_impl_dx11.cpp	/^        ID3D11DepthStencilState*    DepthStencilState;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11DepthStencilState *	file:
Desc	./imgui_internal.h	/^    char                    Desc[57];                   \/\/ Arbitrarily sized buffer to hold a /;"	m	struct:ImGuiStackLevelInfo	typeref:typename:char[57]
Descender	./misc/freetype/imgui_freetype.cpp	/^        float       Descender;          \/\/ The extents below the baseline in pixels (typically/;"	m	struct:__anon21d590df0111::FontInfo	typeref:typename:float	file:
Descent	./imgui.h	/^    float                       Ascent, Descent;    \/\/ 4+4   \/\/ out \/\/            \/\/ Asc/;"	m	struct:ImFont	typeref:typename:float
DescriptorPool	./backends/imgui_impl_vulkan.h	/^    VkDescriptorPool                DescriptorPool;               \/\/ See requirements in note /;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:VkDescriptorPool
DescriptorSetLayout	./backends/imgui_impl_vulkan.cpp	/^    VkDescriptorSetLayout       DescriptorSetLayout;$/;"	m	struct:ImGui_ImplVulkan_Data	typeref:typename:VkDescriptorSetLayout	file:
DesiredSize	./imgui.h	/^    ImVec2  DesiredSize;    \/\/ Read-write.  Desired size, based on user's mouse position. Writ/;"	m	struct:ImGuiSizeCallbackData	typeref:typename:ImVec2
DestroyContext	./imgui.cpp	/^void ImGui::DestroyContext(ImGuiContext* ctx)$/;"	f	class:ImGui	typeref:typename:void
DetachShader	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLDETACHSHADERPROC             DetachShader;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLDETACHSHADERPROC
Device	./backends/imgui_impl_vulkan.h	/^    VkDevice                        Device;$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:VkDevice
Device	./backends/imgui_impl_wgpu.h	/^    WGPUDevice              Device;$/;"	m	struct:ImGui_ImplWGPU_InitInfo	typeref:typename:WGPUDevice
DimBgRatio	./imgui_internal.h	/^    float                   DimBgRatio;                         \/\/ 0.0..1.0 animation when fad/;"	m	struct:ImGuiContext	typeref:typename:float
Dirty	./imgui_demo.cpp	/^    bool        Dirty;      \/\/ Set when the document has been modified$/;"	m	struct:MyDocument	typeref:typename:bool	file:
DirtyLookupTables	./imgui.h	/^    bool                        DirtyLookupTables;  \/\/ 1     \/\/ out \/\/$/;"	m	struct:ImFont	typeref:typename:bool
Disable	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLDISABLEPROC                  Disable;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLDISABLEPROC
DisableDefaultContextMenu	./imgui_internal.h	/^    bool                        DisableDefaultContextMenu;  \/\/ Disable default context menu co/;"	m	struct:ImGuiTable	typeref:typename:bool
DisableInputsFrames	./imgui_internal.h	/^    ImS8                    DisableInputsFrames;                \/\/ Disable window interactions/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
DisableVertexAttribArray	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLDISABLEVERTEXATTRIBARRAYPROC DisableVertexAttribArray;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLDISABLEVERTEXATTRIBARRAYPROC
DisabledAlpha	./imgui.h	/^    float       DisabledAlpha;              \/\/ Additional alpha multiplier applied by BeginDis/;"	m	struct:ImGuiStyle	typeref:typename:float
DisabledAlphaBackup	./imgui_internal.h	/^    float                   DisabledAlphaBackup;                \/\/ Backup for style.Alpha for /;"	m	struct:ImGuiContext	typeref:typename:float
DisabledOverrideReenable	./imgui_internal.h	/^    bool                DisabledOverrideReenable;   \/\/ Non-child window override disabled flag$/;"	m	struct:ImGuiWindowStackData	typeref:typename:bool
DisabledStackSize	./imgui_internal.h	/^    short                   DisabledStackSize;$/;"	m	struct:ImGuiContext	typeref:typename:short
Display	./backends/imgui_impl_allegro5.cpp	/^    ALLEGRO_DISPLAY*            Display;$/;"	m	struct:ImGui_ImplAllegro5_Data	typeref:typename:ALLEGRO_DISPLAY *	file:
DisplayDocContents	./imgui_demo.cpp	/^    void DisplayDocContents(MyDocument* doc)$/;"	f	struct:ExampleAppDocuments	typeref:typename:void	file:
DisplayDocContextMenu	./imgui_demo.cpp	/^    void DisplayDocContextMenu(MyDocument* doc)$/;"	f	struct:ExampleAppDocuments	typeref:typename:void	file:
DisplayEnd	./imgui.h	/^    int             DisplayEnd;         \/\/ End of items to display (exclusive)$/;"	m	struct:ImGuiListClipper	typeref:typename:int
DisplayFramebufferScale	./imgui.h	/^    ImVec2      DisplayFramebufferScale;        \/\/ = (1, 1)         \/\/ For retina display or/;"	m	struct:ImGuiIO	typeref:typename:ImVec2
DisplayNode	./imgui_demo.cpp	/^                static void DisplayNode(const MyTreeNode* node, const MyTreeNode* all_nodes)$/;"	f	struct:ShowDemoWindowTables::MyTreeNode	typeref:typename:void	file:
DisplayOrder	./imgui_internal.h	/^    ImGuiTableColumnIdx     DisplayOrder;                   \/\/ Index within Table's IndexToDis/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableColumnIdx
DisplayOrder	./imgui_internal.h	/^    ImGuiTableColumnIdx     DisplayOrder;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImGuiTableColumnIdx
DisplayOrderToIndex	./imgui_internal.h	/^    ImSpan<ImGuiTableColumnIdx> DisplayOrderToIndex;        \/\/ Point within RawData[]. Store d/;"	m	struct:ImGuiTable	typeref:typename:ImSpan<ImGuiTableColumnIdx>
DisplayPos	./imgui.h	/^    ImVec2              DisplayPos;         \/\/ Top-left position of the viewport to render (==/;"	m	struct:ImDrawData	typeref:typename:ImVec2
DisplayRect	./imgui_internal.h	/^    ImRect                  DisplayRect;        \/\/ Display rectangle. ONLY VALID IF (StatusFla/;"	m	struct:ImGuiLastItemData	typeref:typename:ImRect
DisplaySafeAreaPadding	./imgui.h	/^    ImVec2      DisplaySafeAreaPadding;     \/\/ Apply to every windows, menus, popups, tooltips/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
DisplaySize	./imgui.h	/^    ImVec2              DisplaySize;        \/\/ Size of the viewport to render (== GetMainViewp/;"	m	struct:ImDrawData	typeref:typename:ImVec2
DisplaySize	./imgui.h	/^    ImVec2      DisplaySize;                    \/\/ <unset>          \/\/ Main display size, in/;"	m	struct:ImGuiIO	typeref:typename:ImVec2
DisplayStart	./imgui.h	/^    int             DisplayStart;       \/\/ First item to display, updated by each call to Step/;"	m	struct:ImGuiListClipper	typeref:typename:int
DisplayWindowPadding	./imgui.h	/^    ImVec2      DisplayWindowPadding;       \/\/ Apply to regular windows: amount which we enfor/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
DistAxial	./imgui_internal.h	/^    float               DistAxial;      \/\/      Move    \/\/ Best candidate axial distance to /;"	m	struct:ImGuiNavItemData	typeref:typename:float
DistBox	./imgui_internal.h	/^    float               DistBox;        \/\/      Move    \/\/ Best candidate box distance to cu/;"	m	struct:ImGuiNavItemData	typeref:typename:float
DistCenter	./imgui_internal.h	/^    float               DistCenter;     \/\/      Move    \/\/ Best candidate center distance to/;"	m	struct:ImGuiNavItemData	typeref:typename:float
DoForceClose	./imgui_demo.cpp	/^    void DoForceClose() { Open = false; Dirty = false; }$/;"	f	struct:MyDocument	typeref:typename:void	file:
DoOpen	./imgui_demo.cpp	/^    void DoOpen()       { Open = true; }$/;"	f	struct:MyDocument	typeref:typename:void	file:
DoSave	./imgui_demo.cpp	/^    void DoSave()       { Dirty = false; }$/;"	f	struct:MyDocument	typeref:typename:void	file:
Documents	./imgui_demo.cpp	/^    ImVector<MyDocument>    Documents;$/;"	m	struct:ExampleAppDocuments	typeref:typename:ImVector<MyDocument>	file:
Down	./imgui.h	/^    bool        Down;               \/\/ True for if key is down$/;"	m	struct:ImGuiKeyData	typeref:typename:bool
Down	./imgui_internal.h	/^struct ImGuiInputEventKey           { ImGuiKey Key; bool Down; float AnalogValue; };$/;"	m	struct:ImGuiInputEventKey	typeref:typename:bool
Down	./imgui_internal.h	/^struct ImGuiInputEventMouseButton   { int Button; bool Down; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMouseButton	typeref:typename:bool
DownDuration	./imgui.h	/^    float       DownDuration;       \/\/ Duration the key has been down (<0.0f: not pressed, 0.0/;"	m	struct:ImGuiKeyData	typeref:typename:float
DownDurationPrev	./imgui.h	/^    float       DownDurationPrev;   \/\/ Last frame duration the key has been down$/;"	m	struct:ImGuiKeyData	typeref:typename:float
DragBehavior	./imgui_widgets.cpp	/^bool ImGui::DragBehavior(ImGuiID id, ImGuiDataType data_type, void* p_v, float v_speed, const vo/;"	f	class:ImGui	typeref:typename:bool
DragBehaviorT	./imgui_widgets.cpp	/^bool ImGui::DragBehaviorT(ImGuiDataType data_type, TYPE* v, float v_speed, const TYPE v_min, con/;"	f	class:ImGui	typeref:typename:bool
DragCurrentAccum	./imgui_internal.h	/^    float                   DragCurrentAccum;                   \/\/ Accumulator for dragging mo/;"	m	struct:ImGuiContext	typeref:typename:float
DragCurrentAccumDirty	./imgui_internal.h	/^    bool                    DragCurrentAccumDirty;$/;"	m	struct:ImGuiContext	typeref:typename:bool
DragDropAcceptFlags	./imgui_internal.h	/^    ImGuiDragDropFlags      DragDropAcceptFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDragDropFlags
DragDropAcceptFrameCount	./imgui_internal.h	/^    int                     DragDropAcceptFrameCount;           \/\/ Last time a target expresse/;"	m	struct:ImGuiContext	typeref:typename:int
DragDropAcceptIdCurr	./imgui_internal.h	/^    ImGuiID                 DragDropAcceptIdCurr;               \/\/ Target item id (set at the /;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DragDropAcceptIdCurrRectSurface	./imgui_internal.h	/^    float                   DragDropAcceptIdCurrRectSurface;    \/\/ Target item surface (we res/;"	m	struct:ImGuiContext	typeref:typename:float
DragDropAcceptIdPrev	./imgui_internal.h	/^    ImGuiID                 DragDropAcceptIdPrev;               \/\/ Target item id from previou/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DragDropActive	./imgui_internal.h	/^    bool                    DragDropActive;$/;"	m	struct:ImGuiContext	typeref:typename:bool
DragDropHoldJustPressedId	./imgui_internal.h	/^    ImGuiID                 DragDropHoldJustPressedId;          \/\/ Set when holding a payload /;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DragDropMouseButton	./imgui_internal.h	/^    int                     DragDropMouseButton;$/;"	m	struct:ImGuiContext	typeref:typename:int
DragDropPayload	./imgui_internal.h	/^    ImGuiPayload            DragDropPayload;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiPayload
DragDropPayloadBufHeap	./imgui_internal.h	/^    ImVector<unsigned char> DragDropPayloadBufHeap;             \/\/ We don't expose the ImVecto/;"	m	struct:ImGuiContext	typeref:typename:ImVector<unsigned char>
DragDropPayloadBufLocal	./imgui_internal.h	/^    unsigned char           DragDropPayloadBufLocal[16];        \/\/ Local buffer for small payl/;"	m	struct:ImGuiContext	typeref:typename:unsigned char[16]
DragDropSourceFlags	./imgui_internal.h	/^    ImGuiDragDropFlags      DragDropSourceFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDragDropFlags
DragDropSourceFrameCount	./imgui_internal.h	/^    int                     DragDropSourceFrameCount;$/;"	m	struct:ImGuiContext	typeref:typename:int
DragDropTargetClipRect	./imgui_internal.h	/^    ImRect                  DragDropTargetClipRect;             \/\/ Store ClipRect at the time /;"	m	struct:ImGuiContext	typeref:typename:ImRect
DragDropTargetId	./imgui_internal.h	/^    ImGuiID                 DragDropTargetId;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DragDropTargetRect	./imgui_internal.h	/^    ImRect                  DragDropTargetRect;                 \/\/ Store rectangle of current /;"	m	struct:ImGuiContext	typeref:typename:ImRect
DragDropWithinSource	./imgui_internal.h	/^    bool                    DragDropWithinSource;               \/\/ Set when within a BeginDrag/;"	m	struct:ImGuiContext	typeref:typename:bool
DragDropWithinTarget	./imgui_internal.h	/^    bool                    DragDropWithinTarget;               \/\/ Set when within a BeginDrag/;"	m	struct:ImGuiContext	typeref:typename:bool
DragFloat	./imgui_widgets.cpp	/^bool ImGui::DragFloat(const char* label, float* v, float v_speed, float v_min, float v_max, cons/;"	f	class:ImGui	typeref:typename:bool
DragFloat2	./imgui_widgets.cpp	/^bool ImGui::DragFloat2(const char* label, float v[2], float v_speed, float v_min, float v_max, c/;"	f	class:ImGui	typeref:typename:bool
DragFloat3	./imgui_widgets.cpp	/^bool ImGui::DragFloat3(const char* label, float v[3], float v_speed, float v_min, float v_max, c/;"	f	class:ImGui	typeref:typename:bool
DragFloat4	./imgui_widgets.cpp	/^bool ImGui::DragFloat4(const char* label, float v[4], float v_speed, float v_min, float v_max, c/;"	f	class:ImGui	typeref:typename:bool
DragFloatRange2	./imgui_widgets.cpp	/^bool ImGui::DragFloatRange2(const char* label, float* v_current_min, float* v_current_max, float/;"	f	class:ImGui	typeref:typename:bool
DragInt	./imgui_widgets.cpp	/^bool ImGui::DragInt(const char* label, int* v, float v_speed, int v_min, int v_max, const char* /;"	f	class:ImGui	typeref:typename:bool
DragInt2	./imgui_widgets.cpp	/^bool ImGui::DragInt2(const char* label, int v[2], float v_speed, int v_min, int v_max, const cha/;"	f	class:ImGui	typeref:typename:bool
DragInt3	./imgui_widgets.cpp	/^bool ImGui::DragInt3(const char* label, int v[3], float v_speed, int v_min, int v_max, const cha/;"	f	class:ImGui	typeref:typename:bool
DragInt4	./imgui_widgets.cpp	/^bool ImGui::DragInt4(const char* label, int v[4], float v_speed, int v_min, int v_max, const cha/;"	f	class:ImGui	typeref:typename:bool
DragIntRange2	./imgui_widgets.cpp	/^bool ImGui::DragIntRange2(const char* label, int* v_current_min, int* v_current_max, float v_spe/;"	f	class:ImGui	typeref:typename:bool
DragScalar	./imgui_widgets.cpp	/^bool ImGui::DragScalar(const char* label, ImGuiDataType data_type, void* p_data, float v_speed, /;"	f	class:ImGui	typeref:typename:bool
DragScalarN	./imgui_widgets.cpp	/^bool ImGui::DragScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components/;"	f	class:ImGui	typeref:typename:bool
DragSpeedDefaultRatio	./imgui_internal.h	/^    float                   DragSpeedDefaultRatio;              \/\/ If speed == 0.0f, uses (max/;"	m	struct:ImGuiContext	typeref:typename:float
Draw	./imgui.cpp	/^bool ImGuiTextFilter::Draw(const char* label, float width)$/;"	f	class:ImGuiTextFilter	typeref:typename:bool
Draw	./imgui_demo.cpp	/^    void    Draw(const char* title, bool* p_open = NULL)$/;"	f	struct:ExampleAppLog	typeref:typename:void	file:
Draw	./imgui_demo.cpp	/^    void    Draw(const char* title, bool* p_open)$/;"	f	struct:ExampleAppConsole	typeref:typename:void	file:
Draw	./imgui_demo.cpp	/^    void Draw(ExampleTreeNode* root_node)$/;"	f	struct:ExampleAppPropertyEditor	typeref:typename:void	file:
Draw	./imgui_demo.cpp	/^    void Draw(const char* title, bool* p_open)$/;"	f	struct:ExampleAssetsBrowser	typeref:typename:void	file:
DrawChannelCurrent	./imgui_internal.h	/^    ImGuiTableDrawChannelIdx DrawChannelCurrent;            \/\/ Index within DrawSplitter.Chann/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableDrawChannelIdx
DrawChannelFrozen	./imgui_internal.h	/^    ImGuiTableDrawChannelIdx DrawChannelFrozen;             \/\/ Draw channels for frozen rows (/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableDrawChannelIdx
DrawChannelUnfrozen	./imgui_internal.h	/^    ImGuiTableDrawChannelIdx DrawChannelUnfrozen;           \/\/ Draw channels for unfrozen rows$/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableDrawChannelIdx
DrawChannelsTempMergeBuffer	./imgui_internal.h	/^    ImVector<ImDrawChannel>         DrawChannelsTempMergeBuffer;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImDrawChannel>
DrawDataBuilder	./imgui_internal.h	/^    ImDrawDataBuilder   DrawDataBuilder;        \/\/ Temporary data while building final ImDrawD/;"	m	struct:ImGuiViewportP	typeref:typename:ImDrawDataBuilder
DrawDataP	./imgui_internal.h	/^    ImDrawData          DrawDataP;$/;"	m	struct:ImGuiViewportP	typeref:typename:ImDrawData
DrawElements	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLDRAWELEMENTSPROC             DrawElements;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLDRAWELEMENTSPROC
DrawElementsBaseVertex	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLDRAWELEMENTSBASEVERTEXPROC   DrawElementsBaseVertex;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLDRAWELEMENTSBASEVERTEXPROC
DrawList	./imgui_internal.h	/^    ImDrawList*             DrawList;                           \/\/ == &DrawListInst (for backw/;"	m	struct:ImGuiWindow	typeref:typename:ImDrawList *
DrawListInst	./imgui_internal.h	/^    ImDrawList              DrawListInst;$/;"	m	struct:ImGuiWindow	typeref:typename:ImDrawList
DrawListSharedData	./imgui_internal.h	/^    ImDrawListSharedData    DrawListSharedData;$/;"	m	struct:ImGuiContext	typeref:typename:ImDrawListSharedData
DrawNode	./imgui_demo.cpp	/^                static void DrawNode(ExampleTreeNode* node, ImGuiSelectionBasicStorage* selectio/;"	f	struct:ShowDemoWindowMultiSelect::ExampleTreeFuncs	typeref:typename:void	file:
DrawSplitter	./imgui_internal.h	/^    ImDrawListSplitter          DrawSplitter;$/;"	m	struct:ImGuiTableTempData	typeref:typename:ImDrawListSplitter
DrawSplitter	./imgui_internal.h	/^    ImDrawListSplitter*         DrawSplitter;               \/\/ Shortcut to TempData->DrawSplit/;"	m	struct:ImGuiTable	typeref:typename:ImDrawListSplitter *
DrawTreeNode	./imgui_demo.cpp	/^    void DrawTreeNode(ExampleTreeNode* node)$/;"	f	struct:ExampleAppPropertyEditor	typeref:typename:void	file:
DstFont	./imgui.h	/^    ImFont*         DstFont;$/;"	m	struct:ImFontConfig	typeref:typename:ImFont *
DstIndex	./imgui_draw.cpp	/^    int                 DstIndex;           \/\/ Index into atlas->Fonts[] and dst_tmp_array[]$/;"	m	struct:ImFontBuildSrcData	typeref:typename:int	file:
DstIndex	./misc/freetype/imgui_freetype.cpp	/^    int                 DstIndex;           \/\/ Index into atlas->Fonts[] and dst_tmp_array[]$/;"	m	struct:ImFontBuildSrcDataFT	typeref:typename:int	file:
Dummy	./imgui_widgets.cpp	/^void ImGui::Dummy(const ImVec2& size)$/;"	f	class:ImGui	typeref:typename:void
DummyDrawChannel	./imgui_internal.h	/^    ImGuiTableDrawChannelIdx    DummyDrawChannel;           \/\/ Redirect non-visible columns he/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableDrawChannelIdx
ECHO_MESSAGE	./examples/example_glfw_opengl2/Makefile	/^	ECHO_MESSAGE = "Linux"$/;"	m
ECHO_MESSAGE	./examples/example_glfw_opengl2/Makefile	/^	ECHO_MESSAGE = "Mac OS X"$/;"	m
ECHO_MESSAGE	./examples/example_glfw_opengl2/Makefile	/^	ECHO_MESSAGE = "MinGW"$/;"	m
ECHO_MESSAGE	./examples/example_glfw_opengl3/Makefile	/^	ECHO_MESSAGE = "Linux"$/;"	m
ECHO_MESSAGE	./examples/example_glfw_opengl3/Makefile	/^	ECHO_MESSAGE = "Mac OS X"$/;"	m
ECHO_MESSAGE	./examples/example_glfw_opengl3/Makefile	/^	ECHO_MESSAGE = "MinGW"$/;"	m
ECHO_MESSAGE	./examples/example_glut_opengl2/Makefile	/^	ECHO_MESSAGE = "Linux"$/;"	m
ECHO_MESSAGE	./examples/example_glut_opengl2/Makefile	/^	ECHO_MESSAGE = "Mac OS X"$/;"	m
ECHO_MESSAGE	./examples/example_glut_opengl2/Makefile	/^	ECHO_MESSAGE = "MinGW"$/;"	m
ECHO_MESSAGE	./examples/example_null/Makefile	/^	ECHO_MESSAGE = "Linux"$/;"	m
ECHO_MESSAGE	./examples/example_null/Makefile	/^	ECHO_MESSAGE = "Mac OS X"$/;"	m
ECHO_MESSAGE	./examples/example_null/Makefile	/^	ECHO_MESSAGE = "MinGW"$/;"	m
ECHO_MESSAGE	./examples/example_sdl2_opengl2/Makefile	/^	ECHO_MESSAGE = "Linux"$/;"	m
ECHO_MESSAGE	./examples/example_sdl2_opengl2/Makefile	/^	ECHO_MESSAGE = "Mac OS X"$/;"	m
ECHO_MESSAGE	./examples/example_sdl2_opengl2/Makefile	/^	ECHO_MESSAGE = "MinGW"$/;"	m
ECHO_MESSAGE	./examples/example_sdl2_opengl3/Makefile	/^	ECHO_MESSAGE = "Linux"$/;"	m
ECHO_MESSAGE	./examples/example_sdl2_opengl3/Makefile	/^	ECHO_MESSAGE = "Mac OS X"$/;"	m
ECHO_MESSAGE	./examples/example_sdl2_opengl3/Makefile	/^    ECHO_MESSAGE = "MinGW"$/;"	m
ECHO_MESSAGE	./examples/example_sdl2_sdlrenderer2/Makefile	/^	ECHO_MESSAGE = "Linux"$/;"	m
ECHO_MESSAGE	./examples/example_sdl2_sdlrenderer2/Makefile	/^	ECHO_MESSAGE = "Mac OS X"$/;"	m
ECHO_MESSAGE	./examples/example_sdl2_sdlrenderer2/Makefile	/^	ECHO_MESSAGE = "MinGW"$/;"	m
ECHO_MESSAGE	./examples/example_sdl3_opengl3/Makefile	/^	ECHO_MESSAGE = "Linux"$/;"	m
ECHO_MESSAGE	./examples/example_sdl3_opengl3/Makefile	/^	ECHO_MESSAGE = "Mac OS X"$/;"	m
ECHO_MESSAGE	./examples/example_sdl3_opengl3/Makefile	/^    ECHO_MESSAGE = "MinGW"$/;"	m
ECHO_MESSAGE	./examples/example_sdl3_sdlrenderer3/Makefile	/^	ECHO_MESSAGE = "Linux"$/;"	m
ECHO_MESSAGE	./examples/example_sdl3_sdlrenderer3/Makefile	/^	ECHO_MESSAGE = "Mac OS X"$/;"	m
ECHO_MESSAGE	./examples/example_sdl3_sdlrenderer3/Makefile	/^    ECHO_MESSAGE = "MinGW"$/;"	m
EMSCRIPTEN_MAINLOOP_BEGIN	./examples/libs/emscripten/emscripten_mainloop_stub.h	/^#define EMSCRIPTEN_MAINLOOP_BEGIN /;"	d
EMSCRIPTEN_MAINLOOP_BEGIN	./examples/libs/emscripten/emscripten_mainloop_stub.h	/^#define EMSCRIPTEN_MAINLOOP_BEGIN$/;"	d
EMSCRIPTEN_MAINLOOP_END	./examples/libs/emscripten/emscripten_mainloop_stub.h	/^#define EMSCRIPTEN_MAINLOOP_END /;"	d
EMSCRIPTEN_MAINLOOP_END	./examples/libs/emscripten/emscripten_mainloop_stub.h	/^#define EMSCRIPTEN_MAINLOOP_END$/;"	d
EMSCRIPTEN_USE_EMBEDDED_GLFW3	./backends/imgui_impl_glfw.cpp	/^#define EMSCRIPTEN_USE_EMBEDDED_GLFW3$/;"	d	file:
EXE	./examples/example_glfw_metal/Makefile	/^EXE = example_glfw_metal$/;"	m
EXE	./examples/example_glfw_opengl2/Makefile	/^EXE = example_glfw_opengl2$/;"	m
EXE	./examples/example_glfw_opengl3/Makefile	/^EXE = example_glfw_opengl3$/;"	m
EXE	./examples/example_glut_opengl2/Makefile	/^EXE = example_glut_opengl2$/;"	m
EXE	./examples/example_null/Makefile	/^EXE = example_null$/;"	m
EXE	./examples/example_sdl2_metal/Makefile	/^EXE = example_sdl2_metal$/;"	m
EXE	./examples/example_sdl2_opengl2/Makefile	/^EXE = example_sdl2_opengl2$/;"	m
EXE	./examples/example_sdl2_opengl3/Makefile	/^EXE = example_sdl2_opengl3$/;"	m
EXE	./examples/example_sdl2_sdlrenderer2/Makefile	/^EXE = example_sdl2_sdlrenderer2$/;"	m
EXE	./examples/example_sdl3_opengl3/Makefile	/^EXE = example_sdl3_opengl3$/;"	m
EXE	./examples/example_sdl3_sdlrenderer3/Makefile	/^EXE = example_sdl3_sdlrenderer3$/;"	m
EditTableColumnsFlags	./imgui_demo.cpp	/^static void EditTableColumnsFlags(ImGuiTableColumnFlags* p_flags)$/;"	f	typeref:typename:void	file:
EditTableSizingFlags	./imgui_demo.cpp	/^static void EditTableSizingFlags(ImGuiTableFlags* p_flags)$/;"	f	typeref:typename:void	file:
Edited	./imgui_internal.h	/^    bool                    Edited;                 \/\/ edited this frame$/;"	m	struct:ImGuiInputTextState	typeref:typename:bool
ElemCount	./imgui.h	/^    unsigned int    ElemCount;          \/\/ 4    \/\/ Number of indices (multiple of 3) to be r/;"	m	struct:ImDrawCmd	typeref:typename:unsigned int
Element	./imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	g	function:ShowDemoWindowWidgets	file:
Element_Air	./imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	e	enum:ShowDemoWindowWidgets::Element	file:
Element_COUNT	./imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	e	enum:ShowDemoWindowWidgets::Element	file:
Element_Earth	./imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	e	enum:ShowDemoWindowWidgets::Element	file:
Element_Fire	./imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	e	enum:ShowDemoWindowWidgets::Element	file:
Element_Water	./imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	e	enum:ShowDemoWindowWidgets::Element	file:
ElementsHandle	./backends/imgui_impl_opengl3.cpp	/^    unsigned int    VboHandle, ElementsHandle;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:unsigned int	file:
EllipsisChar	./imgui.h	/^    ImWchar                     EllipsisChar;       \/\/ 2     \/\/ out \/\/ = '...'\/'.'\/\/ Ch/;"	m	struct:ImFont	typeref:typename:ImWchar
EllipsisChar	./imgui.h	/^    ImWchar         EllipsisChar;           \/\/ -1       \/\/ Explicitly specify unicode codepo/;"	m	struct:ImFontConfig	typeref:typename:ImWchar
EllipsisCharCount	./imgui.h	/^    short                       EllipsisCharCount;  \/\/ 1     \/\/ out \/\/ 1 or 3$/;"	m	struct:ImFont	typeref:typename:short
EllipsisCharStep	./imgui.h	/^    float                       EllipsisCharStep;   \/\/ 4     \/\/ out               \/\/ Step /;"	m	struct:ImFont	typeref:typename:float
EllipsisWidth	./imgui.h	/^    float                       EllipsisWidth;      \/\/ 4     \/\/ out               \/\/ Width$/;"	m	struct:ImFont	typeref:typename:float
EmitItem	./imgui_internal.h	/^    bool        EmitItem;$/;"	m	struct:ImGuiGroupData	typeref:typename:bool
EmptyString	./imgui.cpp	/^char ImGuiTextBuffer::EmptyString[1] = { 0 };$/;"	m	class:ImGuiTextBuffer	typeref:typename:char[1]
EmptyString	./imgui.h	/^    IMGUI_API static char EmptyString[1];$/;"	m	struct:ImGuiTextBuffer	typeref:typename:IMGUI_API char[1]
Emscripten	./examples/example_sdl2_opengl3/README.md	/^## Emscripten$/;"	s	chapter:How to Build
Emscripten	./examples/example_sdl3_opengl3/README.md	/^## Emscripten$/;"	s	chapter:How to Build
Enable	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLENABLEPROC                   Enable;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLENABLEPROC
EnableVertexAttribArray	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLENABLEVERTEXATTRIBARRAYPROC  EnableVertexAttribArray;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLENABLEVERTEXATTRIBARRAYPROC
Enabled	./backends/imgui_impl_opengl3.cpp	/^    GLint   Enabled, Size, Type, Normalized, Stride;$/;"	m	struct:ImGui_ImplOpenGL3_VtxAttribState	typeref:typename:GLint	file:
EnabledMaskByDisplayOrder	./imgui_internal.h	/^    ImBitArrayPtr               EnabledMaskByDisplayOrder;  \/\/ Column DisplayOrder -> IsEnable/;"	m	struct:ImGuiTable	typeref:typename:ImBitArrayPtr
EnabledMaskByIndex	./imgui_internal.h	/^    ImBitArrayPtr               EnabledMaskByIndex;         \/\/ Column Index -> IsEnabled map (/;"	m	struct:ImGuiTable	typeref:typename:ImBitArrayPtr
Encode85Byte	./misc/fonts/binary_to_compressed_c.cpp	/^char Encode85Byte(unsigned int x)$/;"	f	typeref:typename:char
End	./imgui.cpp	/^void ImGui::End()$/;"	f	class:ImGui	typeref:typename:void
End	./imgui.cpp	/^void ImGuiListClipper::End()$/;"	f	class:ImGuiListClipper	typeref:typename:void
EndBoxSelect	./imgui_widgets.cpp	/^void ImGui::EndBoxSelect(const ImRect& scope_rect, ImGuiMultiSelectFlags ms_flags)$/;"	f	class:ImGui	typeref:typename:void
EndChild	./imgui.cpp	/^void ImGui::EndChild()$/;"	f	class:ImGui	typeref:typename:void
EndChildFrame	./imgui.h	/^    static inline void  EndChildFrame()                                                         /;"	f	namespace:ImGui	typeref:typename:void
EndColumns	./imgui_tables.cpp	/^void ImGui::EndColumns()$/;"	f	class:ImGui	typeref:typename:void
EndCombo	./imgui_widgets.cpp	/^void ImGui::EndCombo()$/;"	f	class:ImGui	typeref:typename:void
EndComboPreview	./imgui_widgets.cpp	/^void ImGui::EndComboPreview()$/;"	f	class:ImGui	typeref:typename:void
EndDisabled	./imgui.cpp	/^void ImGui::EndDisabled()$/;"	f	class:ImGui	typeref:typename:void
EndDisabledOverrideReenable	./imgui.cpp	/^void ImGui::EndDisabledOverrideReenable()$/;"	f	class:ImGui	typeref:typename:void
EndDragDropSource	./imgui.cpp	/^void ImGui::EndDragDropSource()$/;"	f	class:ImGui	typeref:typename:void
EndDragDropTarget	./imgui.cpp	/^void ImGui::EndDragDropTarget()$/;"	f	class:ImGui	typeref:typename:void
EndFrame	./imgui.cpp	/^void ImGui::EndFrame()$/;"	f	class:ImGui	typeref:typename:void
EndGroup	./imgui.cpp	/^void ImGui::EndGroup()$/;"	f	class:ImGui	typeref:typename:void
EndListBox	./imgui_widgets.cpp	/^void ImGui::EndListBox()$/;"	f	class:ImGui	typeref:typename:void
EndMainMenuBar	./imgui_widgets.cpp	/^void ImGui::EndMainMenuBar()$/;"	f	class:ImGui	typeref:typename:void
EndMenu	./imgui_widgets.cpp	/^void ImGui::EndMenu()$/;"	f	class:ImGui	typeref:typename:void
EndMenuBar	./imgui_widgets.cpp	/^void ImGui::EndMenuBar()$/;"	f	class:ImGui	typeref:typename:void
EndMultiSelect	./imgui_widgets.cpp	/^ImGuiMultiSelectIO* ImGui::EndMultiSelect()$/;"	f	class:ImGui	typeref:typename:ImGuiMultiSelectIO *
EndOffset	./imgui_internal.h	/^    int             EndOffset = 0;                          \/\/ Because we don't own text buffe/;"	m	struct:ImGuiTextIndex	typeref:typename:int
EndPopup	./imgui.cpp	/^void ImGui::EndPopup()$/;"	f	class:ImGui	typeref:typename:void
EndPosRel	./imgui_internal.h	/^    ImVec2                  EndPosRel;          \/\/ End position in window-contents relative sp/;"	m	struct:ImGuiBoxSelectState	typeref:typename:ImVec2
EndTabBar	./imgui_widgets.cpp	/^void    ImGui::EndTabBar()$/;"	f	class:ImGui	typeref:typename:void
EndTabItem	./imgui_widgets.cpp	/^void    ImGui::EndTabItem()$/;"	f	class:ImGui	typeref:typename:void
EndTable	./imgui_tables.cpp	/^void    ImGui::EndTable()$/;"	f	class:ImGui	typeref:typename:void
EndTooltip	./imgui.cpp	/^void ImGui::EndTooltip()$/;"	f	class:ImGui	typeref:typename:void
Entries	./imgui_internal.h	/^    ImVector<ImGuiKeyRoutingData>   Entries;$/;"	m	struct:ImGuiKeyRoutingTable	typeref:typename:ImVector<ImGuiKeyRoutingData>
EntriesNext	./imgui_internal.h	/^    ImVector<ImGuiKeyRoutingData>   EntriesNext;                    \/\/ Double-buffer to avoid /;"	m	struct:ImGuiKeyRoutingTable	typeref:typename:ImVector<ImGuiKeyRoutingData>
EnumDesc	./imgui_demo.cpp	/^    struct EnumDesc { ImGuiTableFlags Value; const char* Name; const char* Tooltip; };$/;"	s	function:EditTableSizingFlags	file:
ErrorCheckEndFrameRecover	./imgui.cpp	/^void    ImGui::ErrorCheckEndFrameRecover(ImGuiErrorLogCallback log_callback, void* user_data)$/;"	f	class:ImGui	typeref:typename:void
ErrorCheckEndFrameSanityChecks	./imgui.cpp	/^static void ImGui::ErrorCheckEndFrameSanityChecks()$/;"	f	class:ImGui	typeref:typename:void	file:
ErrorCheckEndWindowRecover	./imgui.cpp	/^void    ImGui::ErrorCheckEndWindowRecover(ImGuiErrorLogCallback log_callback, void* user_data)$/;"	f	class:ImGui	typeref:typename:void
ErrorCheckNewFrameSanityChecks	./imgui.cpp	/^static void ImGui::ErrorCheckNewFrameSanityChecks()$/;"	f	class:ImGui	typeref:typename:void	file:
ErrorCheckUsingSetCursorPosToExtendParentBoundaries	./imgui.cpp	/^void ImGui::ErrorCheckUsingSetCursorPosToExtendParentBoundaries()$/;"	f	class:ImGui	typeref:typename:void
EstimateScratchBufferSize	./imgui_draw.cpp	/^    static int EstimateScratchBufferSize(int points_count)  { return sizeof(ImTriangulatorNode) /;"	f	struct:ImTriangulator	typeref:typename:int	file:
EstimateTriangleCount	./imgui_draw.cpp	/^    static int EstimateTriangleCount(int points_count)      { return (points_count < 3) ? 0 : po/;"	f	struct:ImTriangulator	typeref:typename:int	file:
EventChar	./imgui.h	/^    ImWchar             EventChar;      \/\/ Character input                      \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:ImWchar
EventFlag	./imgui.h	/^    ImGuiInputTextFlags EventFlag;      \/\/ One ImGuiInputTextFlags_Callback*    \/\/ Read-only$/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:ImGuiInputTextFlags
EventId	./imgui_internal.h	/^    ImU32                           EventId;        \/\/ Unique, sequential increasing integer t/;"	m	struct:ImGuiInputEvent	typeref:typename:ImU32
EventKey	./imgui.h	/^    ImGuiKey            EventKey;       \/\/ Key pressed (Up\/Down\/TAB)            \/\/ Read-on/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:ImGuiKey
ExampleAppConsole	./imgui_demo.cpp	/^    ExampleAppConsole()$/;"	f	struct:ExampleAppConsole	file:
ExampleAppConsole	./imgui_demo.cpp	/^struct ExampleAppConsole$/;"	s	file:
ExampleAppDocuments	./imgui_demo.cpp	/^    ExampleAppDocuments()$/;"	f	struct:ExampleAppDocuments	file:
ExampleAppDocuments	./imgui_demo.cpp	/^struct ExampleAppDocuments$/;"	s	file:
ExampleAppLog	./imgui_demo.cpp	/^    ExampleAppLog()$/;"	f	struct:ExampleAppLog	file:
ExampleAppLog	./imgui_demo.cpp	/^struct ExampleAppLog$/;"	s	file:
ExampleAppPropertyEditor	./imgui_demo.cpp	/^struct ExampleAppPropertyEditor$/;"	s	file:
ExampleAsset	./imgui_demo.cpp	/^    ExampleAsset(ImGuiID id, int type) { ID = id; Type = type; }$/;"	f	struct:ExampleAsset	file:
ExampleAsset	./imgui_demo.cpp	/^struct ExampleAsset$/;"	s	file:
ExampleAssetsBrowser	./imgui_demo.cpp	/^    ExampleAssetsBrowser()$/;"	f	struct:ExampleAssetsBrowser	file:
ExampleAssetsBrowser	./imgui_demo.cpp	/^struct ExampleAssetsBrowser$/;"	s	file:
ExampleDualListBox	./imgui_demo.cpp	/^struct ExampleDualListBox$/;"	s	file:
ExampleMemberInfo	./imgui_demo.cpp	/^struct ExampleMemberInfo$/;"	s	file:
ExampleNames	./imgui_demo.cpp	/^static const char* ExampleNames[] =$/;"	v	typeref:typename:const char * []	file:
ExampleSelectionWithDeletion	./imgui_demo.cpp	/^struct ExampleSelectionWithDeletion : ImGuiSelectionBasicStorage$/;"	s	file:
ExampleTreeFuncs	./imgui_demo.cpp	/^            struct ExampleTreeFuncs$/;"	s	function:ShowDemoWindowMultiSelect	file:
ExampleTreeNode	./imgui_demo.cpp	/^struct ExampleTreeNode$/;"	s	file:
ExampleTreeNodeMemberInfos	./imgui_demo.cpp	/^static const ExampleMemberInfo ExampleTreeNodeMemberInfos[]$/;"	v	typeref:typename:const ExampleMemberInfo[]	file:
ExampleTree_CreateDemoTree	./imgui_demo.cpp	/^static ExampleTreeNode* ExampleTree_CreateDemoTree()$/;"	f	typeref:typename:ExampleTreeNode *	file:
ExampleTree_CreateNode	./imgui_demo.cpp	/^static ExampleTreeNode* ExampleTree_CreateNode(const char* name, int uid, ExampleTreeNode* paren/;"	f	typeref:typename:ExampleTreeNode *	file:
Examples Applications	./docs/EXAMPLES.md	/^### Examples Applications$/;"	S	section:Dear ImGui: Examples
ExecCommand	./imgui_demo.cpp	/^    void    ExecCommand(const char* command_line)$/;"	f	struct:ExampleAppConsole	typeref:typename:void	file:
Expand	./imgui_internal.h	/^    void        Expand(const ImVec2& amount)        { Min.x -= amount.x; Min.y -= amount.y; Max./;"	f	struct:ImRect	typeref:typename:void
Expand	./imgui_internal.h	/^    void        Expand(const float amount)          { Min.x -= amount;   Min.y -= amount;   Max./;"	f	struct:ImRect	typeref:typename:void
FAQ (Frequently Asked Questions)	./docs/FAQ.md	/^# FAQ (Frequently Asked Questions)$/;"	c
FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA	./imgui_draw.cpp	/^static const ImVec2 FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA[ImGuiMouseCursor_COUNT][3] =$/;"	v	typeref:typename:const ImVec2[][3]	file:
FONT_ATLAS_DEFAULT_TEX_DATA_H	./imgui_draw.cpp	/^const int FONT_ATLAS_DEFAULT_TEX_DATA_H = 27;$/;"	v	typeref:typename:const int
FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS	./imgui_draw.cpp	/^static const char FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS[FONT_ATLAS_DEFAULT_TEX_DATA_W * FONT_ATLAS_/;"	v	typeref:typename:const char[]	file:
FONT_ATLAS_DEFAULT_TEX_DATA_W	./imgui_draw.cpp	/^const int FONT_ATLAS_DEFAULT_TEX_DATA_W = 122; \/\/ Actual texture will be 2 times that + 1 spac/;"	v	typeref:typename:const int
FT_CEIL	./misc/freetype/imgui_freetype.cpp	/^    #define FT_CEIL(/;"	d	file:
Face	./misc/freetype/imgui_freetype.cpp	/^        FT_Face         Face;$/;"	m	struct:__anon21d590df0111::FreeTypeFont	typeref:typename:FT_Face	file:
FallbackAdvanceX	./imgui.h	/^    float                       FallbackAdvanceX;   \/\/ 4     \/\/ out \/\/ = FallbackGlyph->Ad/;"	m	struct:ImFont	typeref:typename:float
FallbackChar	./imgui.h	/^    ImWchar                     FallbackChar;       \/\/ 2     \/\/ out \/\/ = FFFD\/'?' \/\/ Ch/;"	m	struct:ImFont	typeref:typename:ImWchar
FallbackGlyph	./imgui.h	/^    const ImFontGlyph*          FallbackGlyph;      \/\/ 4-8   \/\/ out \/\/ = FindGlyph(FontFal/;"	m	struct:ImFont	typeref:typename:const ImFontGlyph *
Fence	./backends/imgui_impl_vulkan.h	/^    VkFence             Fence;$/;"	m	struct:ImGui_ImplVulkanH_Frame	typeref:typename:VkFence
FenceValue	./examples/example_win32_directx12/main.cpp	/^    UINT64                  FenceValue;$/;"	m	struct:FrameContext	typeref:typename:UINT64	file:
Filter	./imgui_demo.cpp	/^    ImGuiTextFilter       Filter;$/;"	m	struct:ExampleAppConsole	typeref:typename:ImGuiTextFilter	file:
Filter	./imgui_demo.cpp	/^    ImGuiTextFilter     Filter;$/;"	m	struct:ExampleAppLog	typeref:typename:ImGuiTextFilter	file:
Filter	./imgui_demo.cpp	/^    ImGuiTextFilter     Filter;$/;"	m	struct:ExampleAppPropertyEditor	typeref:typename:ImGuiTextFilter	file:
FilterCasingSwap	./imgui_demo.cpp	/^                static int FilterCasingSwap(ImGuiInputTextCallbackData* data)$/;"	f	struct:ShowDemoWindowWidgets::TextFilters	typeref:typename:int	file:
FilterImGuiLetters	./imgui_demo.cpp	/^                static int FilterImGuiLetters(ImGuiInputTextCallbackData* data)$/;"	f	struct:ShowDemoWindowWidgets::TextFilters	typeref:typename:int	file:
Filters	./imgui.h	/^    ImVector<ImGuiTextRange>Filters;$/;"	m	struct:ImGuiTextFilter	typeref:typename:ImVector<ImGuiTextRange>
FindBestWheelingWindow	./imgui.cpp	/^static ImGuiWindow* FindBestWheelingWindow(const ImVec2& wheel)$/;"	f	typeref:typename:ImGuiWindow *	file:
FindBestWindowPosForPopup	./imgui.cpp	/^ImVec2 ImGui::FindBestWindowPosForPopup(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImVec2
FindBestWindowPosForPopupEx	./imgui.cpp	/^ImVec2 ImGui::FindBestWindowPosForPopupEx(const ImVec2& ref_pos, const ImVec2& size, ImGuiDir* l/;"	f	class:ImGui	typeref:typename:ImVec2
FindBlockingModal	./imgui.cpp	/^ImGuiWindow* ImGui::FindBlockingModal(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
FindBottomMostVisibleWindowWithinBeginStack	./imgui.cpp	/^ImGuiWindow* ImGui::FindBottomMostVisibleWindowWithinBeginStack(ImGuiWindow* parent_window)$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
FindFirstExistingGlyph	./imgui_draw.cpp	/^static ImWchar FindFirstExistingGlyph(ImFont* font, const ImWchar* candidate_chars, int candidat/;"	f	typeref:typename:ImWchar	file:
FindGlyph	./imgui_draw.cpp	/^const ImFontGlyph* ImFont::FindGlyph(ImWchar c) const$/;"	f	class:ImFont	typeref:typename:const ImFontGlyph *
FindGlyphNoFallback	./imgui_draw.cpp	/^const ImFontGlyph* ImFont::FindGlyphNoFallback(ImWchar c) const$/;"	f	class:ImFont	typeref:typename:const ImFontGlyph *
FindHoveredWindowEx	./imgui.cpp	/^void ImGui::FindHoveredWindowEx(const ImVec2& pos, bool find_first_and_in_any_viewport, ImGuiWin/;"	f	class:ImGui	typeref:typename:void
FindLatestInputEvent	./imgui.cpp	/^static ImGuiInputEvent* FindLatestInputEvent(ImGuiContext* ctx, ImGuiInputEventType type, int ar/;"	f	typeref:typename:ImGuiInputEvent *	file:
FindOrCreateColumns	./imgui_tables.cpp	/^ImGuiOldColumns* ImGui::FindOrCreateColumns(ImGuiWindow* window, ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiOldColumns *
FindRenderedTextEnd	./imgui.cpp	/^const char* ImGui::FindRenderedTextEnd(const char* text, const char* text_end)$/;"	f	class:ImGui	typeref:typename:const char *
FindSettingsHandler	./imgui.cpp	/^ImGuiSettingsHandler* ImGui::FindSettingsHandler(const char* type_name)$/;"	f	class:ImGui	typeref:typename:ImGuiSettingsHandler *
FindWindowByID	./imgui.cpp	/^ImGuiWindow* ImGui::FindWindowByID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
FindWindowByName	./imgui.cpp	/^ImGuiWindow* ImGui::FindWindowByName(const char* name)$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
FindWindowDisplayIndex	./imgui.cpp	/^int ImGui::FindWindowDisplayIndex(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:int
FindWindowFocusIndex	./imgui.cpp	/^static int ImGui::FindWindowFocusIndex(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:int	file:
FindWindowNavFocusable	./imgui.cpp	/^static ImGuiWindow* FindWindowNavFocusable(int i_start, int i_stop, int dir) \/\/ FIXME-OPT O(N)$/;"	f	typeref:typename:ImGuiWindow *	file:
FindWindowSettingsByID	./imgui.cpp	/^ImGuiWindowSettings* ImGui::FindWindowSettingsByID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiWindowSettings *
FindWindowSettingsByWindow	./imgui.cpp	/^ImGuiWindowSettings* ImGui::FindWindowSettingsByWindow(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImGuiWindowSettings *
FixRectCornerFlags	./imgui_draw.cpp	/^static inline ImDrawFlags FixRectCornerFlags(ImDrawFlags flags)$/;"	f	typeref:typename:ImDrawFlags	file:
FixupKeyChord	./imgui.cpp	/^ImGuiKeyChord ImGui::FixupKeyChord(ImGuiKeyChord key_chord)$/;"	f	class:ImGui	typeref:typename:ImGuiKeyChord
Flags	./imgui.h	/^    ImDrawListFlags         Flags;              \/\/ Flags, you may poke into these to adjust an/;"	m	struct:ImDrawList	typeref:typename:ImDrawListFlags
Flags	./imgui.h	/^    ImFontAtlasFlags            Flags;              \/\/ Build flags (see ImFontAtlasFlags_)$/;"	m	struct:ImFontAtlas	typeref:typename:ImFontAtlasFlags
Flags	./imgui.h	/^    ImGuiInputTextFlags Flags;          \/\/ What user passed to InputText()      \/\/ Read-only$/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:ImGuiInputTextFlags
Flags	./imgui.h	/^    ImGuiViewportFlags  Flags;                  \/\/ See ImGuiViewportFlags_$/;"	m	struct:ImGuiViewport	typeref:typename:ImGuiViewportFlags
Flags	./imgui_internal.h	/^    ImGuiInputTextFlags     Flags;                  \/\/ copy of InputText() flags. may be used /;"	m	struct:ImGuiInputTextState	typeref:typename:ImGuiInputTextFlags
Flags	./imgui_internal.h	/^    ImGuiMultiSelectFlags   Flags;$/;"	m	struct:ImGuiMultiSelectTempData	typeref:typename:ImGuiMultiSelectFlags
Flags	./imgui_internal.h	/^    ImGuiNextItemDataFlags      Flags;$/;"	m	struct:ImGuiNextItemData	typeref:typename:ImGuiNextItemDataFlags
Flags	./imgui_internal.h	/^    ImGuiNextWindowDataFlags    Flags;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiNextWindowDataFlags
Flags	./imgui_internal.h	/^    ImGuiOldColumnFlags Flags;                  \/\/ Not exposed$/;"	m	struct:ImGuiOldColumnData	typeref:typename:ImGuiOldColumnFlags
Flags	./imgui_internal.h	/^    ImGuiOldColumnFlags Flags;$/;"	m	struct:ImGuiOldColumns	typeref:typename:ImGuiOldColumnFlags
Flags	./imgui_internal.h	/^    ImGuiTabBarFlags    Flags;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiTabBarFlags
Flags	./imgui_internal.h	/^    ImGuiTabItemFlags   Flags;$/;"	m	struct:ImGuiTabItem	typeref:typename:ImGuiTabItemFlags
Flags	./imgui_internal.h	/^    ImGuiTableColumnFlags   Flags;                          \/\/ Flags after some patching (not /;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableColumnFlags
Flags	./imgui_internal.h	/^    ImGuiTableFlags             Flags;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableFlags
Flags	./imgui_internal.h	/^    ImGuiTypingSelectFlags  Flags;              \/\/ Flags passed to GetTypingSelectRequest()$/;"	m	struct:ImGuiTypingSelectRequest	typeref:typename:ImGuiTypingSelectFlags
Flags	./imgui_internal.h	/^    ImGuiWindowFlags        Flags;                              \/\/ See enum ImGuiWindowFlags_$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindowFlags
FlattenDrawDataIntoSingleLayer	./imgui.cpp	/^static void FlattenDrawDataIntoSingleLayer(ImDrawDataBuilder* builder)$/;"	f	typeref:typename:void	file:
FlipNodeList	./imgui_draw.cpp	/^void ImTriangulator::FlipNodeList()$/;"	f	class:ImTriangulator	typeref:typename:void
Floor	./imgui_internal.h	/^    void        Floor()                             { Min.x = IM_TRUNC(Min.x); Min.y = IM_TRUNC(/;"	f	struct:ImRect	typeref:typename:void
Flush	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLFLUSHPROC                    Flush;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLFLUSHPROC
FocusItem	./imgui.cpp	/^void ImGui::FocusItem()$/;"	f	class:ImGui	typeref:typename:void
FocusOrder	./imgui_internal.h	/^    short                   FocusOrder;                         \/\/ Order within WindowsFocusOr/;"	m	struct:ImGuiWindow	typeref:typename:short
FocusScope	./imgui_internal.h	/^    ImGuiID         FocusScope;$/;"	m	struct:ImGuiTypingSelectState	typeref:typename:ImGuiID
FocusScopeId	./imgui_internal.h	/^    ImGuiID                     FocusScopeId;       \/\/ Set by SetNextItemSelectionUserData()$/;"	m	struct:ImGuiNextItemData	typeref:typename:ImGuiID
FocusScopeId	./imgui_internal.h	/^    ImGuiID                 FocusScopeId;       \/\/ Copied from g.CurrentFocusScopeId (unless a/;"	m	struct:ImGuiMultiSelectTempData	typeref:typename:ImGuiID
FocusScopeId	./imgui_internal.h	/^    ImGuiID             FocusScopeId;   \/\/ Init,Move    \/\/ Best candidate focus scope ID$/;"	m	struct:ImGuiNavItemData	typeref:typename:ImGuiID
FocusScopeStack	./imgui_internal.h	/^    ImVector<ImGuiFocusScopeData>   FocusScopeStack;            \/\/ Stack for PushFocusScope()\//;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiFocusScopeData>
FocusTopMostWindowUnderOne	./imgui.cpp	/^void ImGui::FocusTopMostWindowUnderOne(ImGuiWindow* under_this_window, ImGuiWindow* ignore_windo/;"	f	class:ImGui	typeref:typename:void
FocusWindow	./imgui.cpp	/^void ImGui::FocusWindow(ImGuiWindow* window, ImGuiFocusRequestFlags flags)$/;"	f	class:ImGui	typeref:typename:void
Focused	./imgui_internal.h	/^struct ImGuiInputEventAppFocused    { bool Focused; };$/;"	m	struct:ImGuiInputEventAppFocused	typeref:typename:bool
Font	./imgui.h	/^    ImFont*         Font;           \/\/ Input    \/\/ For custom font glyphs only: target font$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:ImFont *
Font	./imgui_internal.h	/^    ImFont*                 Font;                               \/\/ (Shortcut) == FontStack.emp/;"	m	struct:ImGuiContext	typeref:typename:ImFont *
Font	./imgui_internal.h	/^    ImFont*         Font;                       \/\/ Current\/default font (optional, for simpli/;"	m	struct:ImDrawListSharedData	typeref:typename:ImFont *
Font	./misc/freetype/imgui_freetype.cpp	/^    FreeTypeFont        Font;$/;"	m	struct:ImFontBuildSrcDataFT	typeref:typename:FreeTypeFont	file:
Font Links	./docs/FONTS.md	/^## Font Links$/;"	s
FontAllowUserScaling	./imgui.h	/^    bool        FontAllowUserScaling;           \/\/ = false          \/\/ Allow user scaling te/;"	m	struct:ImGuiIO	typeref:typename:bool
FontAtlasOwnedByContext	./imgui_internal.h	/^    bool                    FontAtlasOwnedByContext;            \/\/ IO.Fonts-> is owned by the /;"	m	struct:ImGuiContext	typeref:typename:bool
FontBaseSize	./imgui_internal.h	/^    float                   FontBaseSize;                       \/\/ (Shortcut) == IO.FontGlobal/;"	m	struct:ImGuiContext	typeref:typename:float
FontBuilderFlags	./imgui.h	/^    unsigned int                FontBuilderFlags;   \/\/ Shared flags (for all fonts) for custom/;"	m	struct:ImFontAtlas	typeref:typename:unsigned int
FontBuilderFlags	./imgui.h	/^    unsigned int    FontBuilderFlags;       \/\/ 0        \/\/ Settings for custom font builder./;"	m	struct:ImFontConfig	typeref:typename:unsigned int
FontBuilderIO	./imgui.h	/^    const ImFontBuilderIO*      FontBuilderIO;      \/\/ Opaque interface to a font builder (def/;"	m	struct:ImFontAtlas	typeref:typename:const ImFontBuilderIO *
FontBuilder_Build	./imgui_internal.h	/^    bool    (*FontBuilder_Build)(ImFontAtlas* atlas);$/;"	m	struct:ImFontBuilderIO	typeref:typename:bool (*)(ImFontAtlas * atlas)
FontCommandBuffer	./backends/imgui_impl_vulkan.cpp	/^    VkCommandBuffer             FontCommandBuffer;$/;"	m	struct:ImGui_ImplVulkan_Data	typeref:typename:VkCommandBuffer	file:
FontCommandPool	./backends/imgui_impl_vulkan.cpp	/^    VkCommandPool               FontCommandPool;$/;"	m	struct:ImGui_ImplVulkan_Data	typeref:typename:VkCommandPool	file:
FontData	./imgui.h	/^    void*           FontData;               \/\/          \/\/ TTF\/OTF data$/;"	m	struct:ImFontConfig	typeref:typename:void *
FontDataOwnedByAtlas	./imgui.h	/^    bool            FontDataOwnedByAtlas;   \/\/ true     \/\/ TTF\/OTF data ownership taken by /;"	m	struct:ImFontConfig	typeref:typename:bool
FontDataSize	./imgui.h	/^    int             FontDataSize;           \/\/          \/\/ TTF\/OTF data size$/;"	m	struct:ImFontConfig	typeref:typename:int
FontDefault	./imgui.h	/^    ImFont*     FontDefault;                    \/\/ = NULL           \/\/ Font to use on NewFra/;"	m	struct:ImGuiIO	typeref:typename:ImFont *
FontDescriptorSet	./backends/imgui_impl_vulkan.cpp	/^    VkDescriptorSet             FontDescriptorSet;$/;"	m	struct:ImGui_ImplVulkan_Data	typeref:typename:VkDescriptorSet	file:
FontGlobalScale	./imgui.h	/^    float       FontGlobalScale;                \/\/ = 1.0f           \/\/ Global scale all font/;"	m	struct:ImGuiIO	typeref:typename:float
FontImage	./backends/imgui_impl_vulkan.cpp	/^    VkImage                     FontImage;$/;"	m	struct:ImGui_ImplVulkan_Data	typeref:typename:VkImage	file:
FontInfo	./imgui_draw.cpp	/^    stbtt_fontinfo      FontInfo;$/;"	m	struct:ImFontBuildSrcData	typeref:typename:stbtt_fontinfo	file:
FontInfo	./misc/freetype/imgui_freetype.cpp	/^    struct FontInfo$/;"	s	namespace:__anon21d590df0111	file:
FontMemory	./backends/imgui_impl_vulkan.cpp	/^    VkDeviceMemory              FontMemory;$/;"	m	struct:ImGui_ImplVulkan_Data	typeref:typename:VkDeviceMemory	file:
FontNo	./imgui.h	/^    int             FontNo;                 \/\/ 0        \/\/ Index of font within TTF\/OTF fil/;"	m	struct:ImFontConfig	typeref:typename:int
FontSampler	./backends/imgui_impl_vulkan.cpp	/^    VkSampler                   FontSampler;$/;"	m	struct:ImGui_ImplVulkan_Data	typeref:typename:VkSampler	file:
FontScale	./imgui_internal.h	/^    float                   FontScale;                          \/\/ == FontSize \/ Font->FontSi/;"	m	struct:ImGuiContext	typeref:typename:float
FontScale	./imgui_internal.h	/^    float           FontScale;                  \/\/ Current\/default font scale (== FontSize \//;"	m	struct:ImDrawListSharedData	typeref:typename:float
FontSize	./imgui.h	/^    float                       FontSize;           \/\/ 4     \/\/ in  \/\/            \/\/ Hei/;"	m	struct:ImFont	typeref:typename:float
FontSize	./imgui_internal.h	/^    float                   FontSize;                           \/\/ (Shortcut) == FontBaseSize /;"	m	struct:ImGuiContext	typeref:typename:float
FontSize	./imgui_internal.h	/^    float           FontSize;                   \/\/ Current\/default font size (optional, for s/;"	m	struct:ImDrawListSharedData	typeref:typename:float
FontStack	./imgui_internal.h	/^    ImVector<ImFont*>               FontStack;                  \/\/ Stack for PushFont()\/PopFo/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImFont * >
FontTexture	./backends/imgui_impl_dx9.cpp	/^    LPDIRECT3DTEXTURE9          FontTexture;$/;"	m	struct:ImGui_ImplDX9_Data	typeref:typename:LPDIRECT3DTEXTURE9	file:
FontTexture	./backends/imgui_impl_opengl2.cpp	/^    GLuint       FontTexture;$/;"	m	struct:ImGui_ImplOpenGL2_Data	typeref:typename:GLuint	file:
FontTexture	./backends/imgui_impl_opengl3.cpp	/^    GLuint          FontTexture;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLuint	file:
FontTexture	./backends/imgui_impl_sdlrenderer2.cpp	/^    SDL_Texture*    FontTexture;$/;"	m	struct:ImGui_ImplSDLRenderer2_Data	typeref:typename:SDL_Texture *	file:
FontTexture	./backends/imgui_impl_sdlrenderer3.cpp	/^    SDL_Texture*            FontTexture;$/;"	m	struct:ImGui_ImplSDLRenderer3_Data	typeref:typename:SDL_Texture *	file:
FontTexture	./backends/imgui_impl_wgpu.cpp	/^    WGPUTexture         FontTexture = nullptr;          \/\/ Font texture$/;"	m	struct:RenderResources	typeref:typename:WGPUTexture	file:
FontTextureView	./backends/imgui_impl_wgpu.cpp	/^    WGPUTextureView     FontTextureView = nullptr;      \/\/ Texture view for font texture$/;"	m	struct:RenderResources	typeref:typename:WGPUTextureView	file:
FontView	./backends/imgui_impl_vulkan.cpp	/^    VkImageView                 FontView;$/;"	m	struct:ImGui_ImplVulkan_Data	typeref:typename:VkImageView	file:
FontWindowScale	./imgui_internal.h	/^    float                   FontWindowScale;                    \/\/ User scale multiplier per-w/;"	m	struct:ImGuiWindow	typeref:typename:float
Fonts	./imgui.h	/^    ImFontAtlas*Fonts;                          \/\/ <auto>           \/\/ Font atlas: load, ras/;"	m	struct:ImGuiIO	typeref:typename:ImFontAtlas *
Fonts	./imgui.h	/^    ImVector<ImFont*>           Fonts;              \/\/ Hold all the fonts returned by AddFont*/;"	m	struct:ImFontAtlas	typeref:typename:ImVector<ImFont * >
Fonts Loading Instructions	./docs/FONTS.md	/^## Fonts Loading Instructions$/;"	s
ForceDisplayRangeByIndices	./imgui.h	/^    inline void ForceDisplayRangeByIndices(int item_begin, int item_end) { IncludeItemsByIndex(i/;"	f	struct:ImGuiListClipper	typeref:typename:void
FormatTextureIDForDebugDisplay	./imgui.cpp	/^static void FormatTextureIDForDebugDisplay(char* buf, int buf_size, ImTextureID tex_id)$/;"	f	typeref:typename:void	file:
FrameBorderSize	./imgui.h	/^    float       FrameBorderSize;            \/\/ Thickness of border around frames. Generally se/;"	m	struct:ImGuiStyle	typeref:typename:float
FrameContext	./examples/example_win32_directx12/main.cpp	/^struct FrameContext$/;"	s	file:
FrameCount	./imgui_internal.h	/^    int                     FrameCount;$/;"	m	struct:ImGuiContext	typeref:typename:int
FrameCount	./imgui_internal.h	/^    int         FrameCount;$/;"	m	struct:ImGuiDebugAllocEntry	typeref:typename:int
FrameCountEnded	./imgui_internal.h	/^    int                     FrameCountEnded;$/;"	m	struct:ImGuiContext	typeref:typename:int
FrameCountRendered	./imgui_internal.h	/^    int                     FrameCountRendered;$/;"	m	struct:ImGuiContext	typeref:typename:int
FrameIndex	./backends/imgui_impl_vulkan.h	/^    uint32_t            FrameIndex;             \/\/ Current frame being rendered to (0 <= Frame/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:uint32_t
FramePadding	./imgui.h	/^    ImVec2      FramePadding;               \/\/ Padding within a framed rectangle (used by most/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
FramePadding	./imgui_internal.h	/^    ImVec2              FramePadding;           \/\/ style.FramePadding locked at the time of Be/;"	m	struct:ImGuiTabBar	typeref:typename:ImVec2
FramePresent	./examples/example_glfw_vulkan/main.cpp	/^static void FramePresent(ImGui_ImplVulkanH_Window* wd)$/;"	f	typeref:typename:void	file:
FramePresent	./examples/example_sdl2_vulkan/main.cpp	/^static void FramePresent(ImGui_ImplVulkanH_Window* wd)$/;"	f	typeref:typename:void	file:
FrameRender	./examples/example_glfw_vulkan/main.cpp	/^static void FrameRender(ImGui_ImplVulkanH_Window* wd, ImDrawData* draw_data)$/;"	f	typeref:typename:void	file:
FrameRender	./examples/example_sdl2_vulkan/main.cpp	/^static void FrameRender(ImGui_ImplVulkanH_Window* wd, ImDrawData* draw_data)$/;"	f	typeref:typename:void	file:
FrameRenderBuffers	./backends/imgui_impl_vulkan.cpp	/^    ImGui_ImplVulkan_FrameRenderBuffers* FrameRenderBuffers;$/;"	m	struct:ImGui_ImplVulkan_WindowRenderBuffers	typeref:typename:ImGui_ImplVulkan_FrameRenderBuffers *	file:
FrameResources	./backends/imgui_impl_wgpu.cpp	/^struct FrameResources$/;"	s	file:
FrameRounding	./imgui.h	/^    float       FrameRounding;              \/\/ Radius of frame corners rounding. Set to 0.0f t/;"	m	struct:ImGuiStyle	typeref:typename:float
FrameSemaphores	./backends/imgui_impl_vulkan.h	/^    ImGui_ImplVulkanH_FrameSemaphores*  FrameSemaphores;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:ImGui_ImplVulkanH_FrameSemaphores *
Framebuffer	./backends/imgui_impl_vulkan.h	/^    VkFramebuffer       Framebuffer;$/;"	m	struct:ImGui_ImplVulkanH_Frame	typeref:typename:VkFramebuffer
FramebufferDescriptor	./backends/imgui_impl_metal.mm	/^@implementation FramebufferDescriptor$/;"	I
FramebufferDescriptor	./backends/imgui_impl_metal.mm	/^@interface FramebufferDescriptor : NSObject<NSCopying>$/;"	i	protocols:NSCopying
FramebufferScale	./imgui.h	/^    ImVec2              FramebufferScale;   \/\/ Amount of pixels for each unit of DisplaySize. /;"	m	struct:ImDrawData	typeref:typename:ImVec2
Framerate	./imgui.h	/^    float       Framerate;                          \/\/ Estimate of application framerate (roll/;"	m	struct:ImGuiIO	typeref:typename:float
FramerateSecPerFrame	./imgui_internal.h	/^    float                   FramerateSecPerFrame[60];           \/\/ Calculate estimate of frame/;"	m	struct:ImGuiContext	typeref:typename:float[60]
FramerateSecPerFrameAccum	./imgui_internal.h	/^    float                   FramerateSecPerFrameAccum;$/;"	m	struct:ImGuiContext	typeref:typename:float
FramerateSecPerFrameCount	./imgui_internal.h	/^    int                     FramerateSecPerFrameCount;$/;"	m	struct:ImGuiContext	typeref:typename:int
FramerateSecPerFrameIdx	./imgui_internal.h	/^    int                     FramerateSecPerFrameIdx;$/;"	m	struct:ImGuiContext	typeref:typename:int
Frames	./backends/imgui_impl_vulkan.h	/^    ImGui_ImplVulkanH_Frame*            Frames;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:ImGui_ImplVulkanH_Frame *
FreeCount	./imgui_internal.h	/^    ImS16       FreeCount;$/;"	m	struct:ImGuiDebugAllocEntry	typeref:typename:ImS16
FreeIdx	./imgui_internal.h	/^    ImPoolIdx       FreeIdx;    \/\/ Next free idx to use$/;"	m	struct:ImPool	typeref:typename:ImPoolIdx
FreeTypeFont	./misc/freetype/imgui_freetype.cpp	/^    struct FreeTypeFont$/;"	s	namespace:__anon21d590df0111	file:
FreeType_Alloc	./misc/freetype/imgui_freetype.cpp	/^static void* FreeType_Alloc(FT_Memory \/*memory*\/, long size)$/;"	f	typeref:typename:void *	file:
FreeType_Free	./misc/freetype/imgui_freetype.cpp	/^static void FreeType_Free(FT_Memory \/*memory*\/, void* block)$/;"	f	typeref:typename:void	file:
FreeType_Realloc	./misc/freetype/imgui_freetype.cpp	/^static void* FreeType_Realloc(FT_Memory \/*memory*\/, long cur_size, long new_size, void* block)$/;"	f	typeref:typename:void *	file:
FreeWrapper	./imgui.cpp	/^static void    FreeWrapper(void* ptr, void* user_data)        { IM_UNUSED(user_data); IM_UNUSED(/;"	f	typeref:typename:void	file:
FreeWrapper	./imgui.cpp	/^static void    FreeWrapper(void* ptr, void* user_data)        { IM_UNUSED(user_data); free(ptr);/;"	f	typeref:typename:void	file:
FreezeColumnsCount	./imgui_internal.h	/^    ImGuiTableColumnIdx         FreezeColumnsCount;         \/\/ Actual frozen columns count (==/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
FreezeColumnsRequest	./imgui_internal.h	/^    ImGuiTableColumnIdx         FreezeColumnsRequest;       \/\/ Requested frozen columns count$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
FreezeRowsCount	./imgui_internal.h	/^    ImGuiTableColumnIdx         FreezeRowsCount;            \/\/ Actual frozen row count (== Fre/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
FreezeRowsRequest	./imgui_internal.h	/^    ImGuiTableColumnIdx         FreezeRowsRequest;          \/\/ Requested frozen rows count$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
FromIndices	./imgui_internal.h	/^    static ImGuiListClipperRange    FromIndices(int min, int max)                               /;"	f	struct:ImGuiListClipperRange	typeref:typename:ImGuiListClipperRange
FromPositions	./imgui_internal.h	/^    static ImGuiListClipperRange    FromPositions(float y1, float y2, int off_min, int off_max) /;"	f	struct:ImGuiListClipperRange	typeref:typename:ImGuiListClipperRange
Func	./imgui.cpp	/^            struct Func { static int IMGUI_CDECL WindowComparerByBeginOrder(const void* lhs, con/;"	s	function:ImGui::ShowMetricsWindow	file:
Funcs	./imgui.cpp	/^    struct Funcs$/;"	s	function:ImGui::ShowMetricsWindow	file:
Funcs	./imgui_demo.cpp	/^            struct Funcs$/;"	s	function:ShowDemoWindowWidgets	file:
Funcs	./imgui_demo.cpp	/^        struct Funcs$/;"	s	function:ShowDemoWindowWidgets	file:
GCrc32LookupTable	./imgui.cpp	/^static const ImU32 GCrc32LookupTable[256] =$/;"	v	typeref:typename:const ImU32[256]	file:
GDataTypeInfo	./imgui_widgets.cpp	/^static const ImGuiDataTypeInfo GDataTypeInfo[] =$/;"	v	typeref:typename:const ImGuiDataTypeInfo[]	file:
GImAllocatorAllocFunc	./imgui.cpp	/^static ImGuiMemAllocFunc    GImAllocatorAllocFunc = MallocWrapper;$/;"	v	typeref:typename:ImGuiMemAllocFunc	file:
GImAllocatorFreeFunc	./imgui.cpp	/^static ImGuiMemFreeFunc     GImAllocatorFreeFunc = FreeWrapper;$/;"	v	typeref:typename:ImGuiMemFreeFunc	file:
GImAllocatorUserData	./imgui.cpp	/^static void*                GImAllocatorUserData = NULL;$/;"	v	typeref:typename:void *	file:
GImGui	./imgui.cpp	/^ImGuiContext*   GImGui = NULL;$/;"	v	typeref:typename:ImGuiContext *
GImGuiDemoMarkerCallback	./imgui_demo.cpp	/^ImGuiDemoMarkerCallback             GImGuiDemoMarkerCallback = NULL;$/;"	v	typeref:typename:ImGuiDemoMarkerCallback
GImGuiDemoMarkerCallbackUserData	./imgui_demo.cpp	/^void*                               GImGuiDemoMarkerCallbackUserData = NULL;$/;"	v	typeref:typename:void *
GImGuiFreeTypeAllocFunc	./misc/freetype/imgui_freetype.cpp	/^static void* (*GImGuiFreeTypeAllocFunc)(size_t size, void* user_data) = ImGuiFreeTypeDefaultAllo/;"	v	typeref:typename:void * (*)(size_t size,void * user_data)	file:
GImGuiFreeTypeAllocatorUserData	./misc/freetype/imgui_freetype.cpp	/^static void* GImGuiFreeTypeAllocatorUserData = nullptr;$/;"	v	typeref:typename:void *	file:
GImGuiFreeTypeFreeFunc	./misc/freetype/imgui_freetype.cpp	/^static void  (*GImGuiFreeTypeFreeFunc)(void* ptr, void* user_data) = ImGuiFreeTypeDefaultFreeFun/;"	v	typeref:typename:void (*)(void * ptr,void * user_data)	file:
GKeyNames	./imgui.cpp	/^static const char* const GKeyNames[] =$/;"	v	typeref:typename:const char * const[]	file:
GL3WGetProcAddressProc	./backends/imgui_impl_opengl3_loader.h	/^typedef GL3WglProc (*GL3WGetProcAddressProc)(const char *proc);$/;"	t	typeref:typename:GL3WglProc (*)(const char * proc)
GL3W_API	./backends/imgui_impl_opengl3_loader.h	/^#define GL3W_API$/;"	d
GL3W_ARRAY_SIZE	./backends/imgui_impl_opengl3_loader.h	/^#define GL3W_ARRAY_SIZE(/;"	d
GL3W_ERROR_INIT	./backends/imgui_impl_opengl3_loader.h	/^#define GL3W_ERROR_INIT /;"	d
GL3W_ERROR_LIBRARY_OPEN	./backends/imgui_impl_opengl3_loader.h	/^#define GL3W_ERROR_LIBRARY_OPEN /;"	d
GL3W_ERROR_OPENGL_VERSION	./backends/imgui_impl_opengl3_loader.h	/^#define GL3W_ERROR_OPENGL_VERSION /;"	d
GL3W_OK	./backends/imgui_impl_opengl3_loader.h	/^#define GL3W_OK /;"	d
GL3WglGetProcAddr	./backends/imgui_impl_opengl3_loader.h	/^typedef PROC(__stdcall* GL3WglGetProcAddr)(LPCSTR);$/;"	t	typeref:typename:PROC (__stdcall *)(LPCSTR)
GL3WglProc	./backends/imgui_impl_opengl3_loader.h	/^typedef void (*GL3WglProc)(void);$/;"	t	typeref:typename:void (*)(void)
GLAPI	./backends/imgui_impl_opengl3_loader.h	/^#define GLAPI /;"	d
GLDEBUGPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRY  *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsize/;"	t	typeref:typename:void (APIENTRY *)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar * message,const void * userParam)
GLDEBUGPROCARB	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRY  *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLs/;"	t	typeref:typename:void (APIENTRY *)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar * message,const void * userParam)
GLFWAPI	./examples/libs/glfw/include/GLFW/glfw3.h	/^ #define GLFWAPI /;"	d
GLFW_ACCUM_ALPHA_BITS	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_ACCUM_ALPHA_BITS /;"	d
GLFW_ACCUM_BLUE_BITS	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_ACCUM_BLUE_BITS /;"	d
GLFW_ACCUM_GREEN_BITS	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_ACCUM_GREEN_BITS /;"	d
GLFW_ACCUM_RED_BITS	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_ACCUM_RED_BITS /;"	d
GLFW_ALPHA_BITS	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_ALPHA_BITS /;"	d
GLFW_ANY_RELEASE_BEHAVIOR	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_ANY_RELEASE_BEHAVIOR /;"	d
GLFW_API_UNAVAILABLE	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_API_UNAVAILABLE /;"	d
GLFW_ARROW_CURSOR	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_ARROW_CURSOR /;"	d
GLFW_AUTO_ICONIFY	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_AUTO_ICONIFY /;"	d
GLFW_AUX_BUFFERS	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_AUX_BUFFERS /;"	d
GLFW_BLUE_BITS	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_BLUE_BITS /;"	d
GLFW_BUILD_DOCS	./examples/example_glfw_vulkan/CMakeLists.txt	/^option(GLFW_BUILD_DOCS "Build the GLFW documentation" OFF)$/;"	D
GLFW_BUILD_EXAMPLES	./examples/example_glfw_vulkan/CMakeLists.txt	/^option(GLFW_BUILD_EXAMPLES "Build the GLFW example programs" OFF)$/;"	D
GLFW_BUILD_TESTS	./examples/example_glfw_vulkan/CMakeLists.txt	/^option(GLFW_BUILD_TESTS "Build the GLFW test programs" OFF)$/;"	D
GLFW_CALLBACK_DEFINED	./examples/libs/glfw/include/GLFW/glfw3.h	/^ #define GLFW_CALLBACK_DEFINED$/;"	d
GLFW_CLIENT_API	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CLIENT_API /;"	d
GLFW_CONNECTED	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CONNECTED /;"	d
GLFW_CONTEXT_NO_ERROR	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CONTEXT_NO_ERROR /;"	d
GLFW_CONTEXT_RELEASE_BEHAVIOR	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CONTEXT_RELEASE_BEHAVIOR /;"	d
GLFW_CONTEXT_REVISION	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CONTEXT_REVISION /;"	d
GLFW_CONTEXT_ROBUSTNESS	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CONTEXT_ROBUSTNESS /;"	d
GLFW_CONTEXT_VERSION_MAJOR	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CONTEXT_VERSION_MAJOR /;"	d
GLFW_CONTEXT_VERSION_MINOR	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CONTEXT_VERSION_MINOR /;"	d
GLFW_CROSSHAIR_CURSOR	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CROSSHAIR_CURSOR /;"	d
GLFW_CURSOR	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CURSOR /;"	d
GLFW_CURSOR_DISABLED	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CURSOR_DISABLED /;"	d
GLFW_CURSOR_HIDDEN	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CURSOR_HIDDEN /;"	d
GLFW_CURSOR_NORMAL	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CURSOR_NORMAL /;"	d
GLFW_DECORATED	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_DECORATED /;"	d
GLFW_DEPTH_BITS	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_DEPTH_BITS /;"	d
GLFW_DIR	./examples/example_glfw_vulkan/CMakeLists.txt	/^set(GLFW_DIR ..\/..\/..\/glfw) # Set this to point to an up-to-date GLFW repo$/;"	v
GLFW_DISCONNECTED	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_DISCONNECTED /;"	d
GLFW_DOCUMENT_INTERNALS	./examples/example_glfw_vulkan/CMakeLists.txt	/^option(GLFW_DOCUMENT_INTERNALS "Include internals in documentation" OFF)$/;"	D
GLFW_DONT_CARE	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_DONT_CARE /;"	d
GLFW_DOUBLEBUFFER	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_DOUBLEBUFFER /;"	d
GLFW_EXPOSE_NATIVE_COCOA	./backends/imgui_impl_glfw.cpp	/^#define GLFW_EXPOSE_NATIVE_COCOA$/;"	d	file:
GLFW_EXPOSE_NATIVE_COCOA	./examples/example_glfw_metal/main.mm	/^#define GLFW_EXPOSE_NATIVE_COCOA$/;"	M
GLFW_EXPOSE_NATIVE_WIN32	./backends/imgui_impl_glfw.cpp	/^#define GLFW_EXPOSE_NATIVE_WIN32$/;"	d	file:
GLFW_FALSE	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_FALSE /;"	d
GLFW_FLOATING	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_FLOATING /;"	d
GLFW_FOCUSED	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_FOCUSED /;"	d
GLFW_FORMAT_UNAVAILABLE	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_FORMAT_UNAVAILABLE /;"	d
GLFW_GREEN_BITS	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_GREEN_BITS /;"	d
GLFW_HAND_CURSOR	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_HAND_CURSOR /;"	d
GLFW_HAS_GAMEPAD_API	./backends/imgui_impl_glfw.cpp	/^#define GLFW_HAS_GAMEPAD_API /;"	d	file:
GLFW_HAS_GETERROR	./backends/imgui_impl_glfw.cpp	/^#define GLFW_HAS_GETERROR /;"	d	file:
GLFW_HAS_GETKEYNAME	./backends/imgui_impl_glfw.cpp	/^#define GLFW_HAS_GETKEYNAME /;"	d	file:
GLFW_HAS_NEW_CURSORS	./backends/imgui_impl_glfw.cpp	/^#define GLFW_HAS_NEW_CURSORS /;"	d	file:
GLFW_HRESIZE_CURSOR	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_HRESIZE_CURSOR /;"	d
GLFW_IBEAM_CURSOR	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_IBEAM_CURSOR /;"	d
GLFW_ICONIFIED	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_ICONIFIED /;"	d
GLFW_INCLUDE_NONE	./examples/example_glfw_metal/main.mm	/^#define GLFW_INCLUDE_NONE$/;"	M
GLFW_INCLUDE_NONE	./examples/example_glfw_vulkan/main.cpp	/^#define GLFW_INCLUDE_NONE$/;"	d	file:
GLFW_INCLUDE_VULKAN	./examples/example_glfw_vulkan/main.cpp	/^#define GLFW_INCLUDE_VULKAN$/;"	d	file:
GLFW_INSTALL	./examples/example_glfw_vulkan/CMakeLists.txt	/^option(GLFW_INSTALL "Generate installation target" OFF)$/;"	D
GLFW_INVALID_ENUM	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_INVALID_ENUM /;"	d
GLFW_INVALID_VALUE	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_INVALID_VALUE /;"	d
GLFW_JOYSTICK_1	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_1 /;"	d
GLFW_JOYSTICK_10	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_10 /;"	d
GLFW_JOYSTICK_11	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_11 /;"	d
GLFW_JOYSTICK_12	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_12 /;"	d
GLFW_JOYSTICK_13	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_13 /;"	d
GLFW_JOYSTICK_14	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_14 /;"	d
GLFW_JOYSTICK_15	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_15 /;"	d
GLFW_JOYSTICK_16	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_16 /;"	d
GLFW_JOYSTICK_2	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_2 /;"	d
GLFW_JOYSTICK_3	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_3 /;"	d
GLFW_JOYSTICK_4	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_4 /;"	d
GLFW_JOYSTICK_5	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_5 /;"	d
GLFW_JOYSTICK_6	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_6 /;"	d
GLFW_JOYSTICK_7	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_7 /;"	d
GLFW_JOYSTICK_8	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_8 /;"	d
GLFW_JOYSTICK_9	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_9 /;"	d
GLFW_JOYSTICK_LAST	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_LAST /;"	d
GLFW_KEY_0	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_0 /;"	d
GLFW_KEY_1	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_1 /;"	d
GLFW_KEY_2	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_2 /;"	d
GLFW_KEY_3	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_3 /;"	d
GLFW_KEY_4	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_4 /;"	d
GLFW_KEY_5	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_5 /;"	d
GLFW_KEY_6	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_6 /;"	d
GLFW_KEY_7	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_7 /;"	d
GLFW_KEY_8	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_8 /;"	d
GLFW_KEY_9	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_9 /;"	d
GLFW_KEY_A	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_A /;"	d
GLFW_KEY_APOSTROPHE	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_APOSTROPHE /;"	d
GLFW_KEY_B	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_B /;"	d
GLFW_KEY_BACKSLASH	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_BACKSLASH /;"	d
GLFW_KEY_BACKSPACE	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_BACKSPACE /;"	d
GLFW_KEY_C	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_C /;"	d
GLFW_KEY_CAPS_LOCK	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_CAPS_LOCK /;"	d
GLFW_KEY_COMMA	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_COMMA /;"	d
GLFW_KEY_D	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_D /;"	d
GLFW_KEY_DELETE	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_DELETE /;"	d
GLFW_KEY_DOWN	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_DOWN /;"	d
GLFW_KEY_E	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_E /;"	d
GLFW_KEY_END	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_END /;"	d
GLFW_KEY_ENTER	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_ENTER /;"	d
GLFW_KEY_EQUAL	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_EQUAL /;"	d
GLFW_KEY_ESCAPE	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_ESCAPE /;"	d
GLFW_KEY_F	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F /;"	d
GLFW_KEY_F1	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F1 /;"	d
GLFW_KEY_F10	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F10 /;"	d
GLFW_KEY_F11	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F11 /;"	d
GLFW_KEY_F12	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F12 /;"	d
GLFW_KEY_F13	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F13 /;"	d
GLFW_KEY_F14	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F14 /;"	d
GLFW_KEY_F15	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F15 /;"	d
GLFW_KEY_F16	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F16 /;"	d
GLFW_KEY_F17	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F17 /;"	d
GLFW_KEY_F18	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F18 /;"	d
GLFW_KEY_F19	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F19 /;"	d
GLFW_KEY_F2	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F2 /;"	d
GLFW_KEY_F20	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F20 /;"	d
GLFW_KEY_F21	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F21 /;"	d
GLFW_KEY_F22	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F22 /;"	d
GLFW_KEY_F23	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F23 /;"	d
GLFW_KEY_F24	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F24 /;"	d
GLFW_KEY_F25	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F25 /;"	d
GLFW_KEY_F3	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F3 /;"	d
GLFW_KEY_F4	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F4 /;"	d
GLFW_KEY_F5	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F5 /;"	d
GLFW_KEY_F6	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F6 /;"	d
GLFW_KEY_F7	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F7 /;"	d
GLFW_KEY_F8	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F8 /;"	d
GLFW_KEY_F9	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F9 /;"	d
GLFW_KEY_G	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_G /;"	d
GLFW_KEY_GRAVE_ACCENT	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_GRAVE_ACCENT /;"	d
GLFW_KEY_H	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_H /;"	d
GLFW_KEY_HOME	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_HOME /;"	d
GLFW_KEY_I	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_I /;"	d
GLFW_KEY_INSERT	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_INSERT /;"	d
GLFW_KEY_J	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_J /;"	d
GLFW_KEY_K	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_K /;"	d
GLFW_KEY_KP_0	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_0 /;"	d
GLFW_KEY_KP_1	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_1 /;"	d
GLFW_KEY_KP_2	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_2 /;"	d
GLFW_KEY_KP_3	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_3 /;"	d
GLFW_KEY_KP_4	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_4 /;"	d
GLFW_KEY_KP_5	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_5 /;"	d
GLFW_KEY_KP_6	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_6 /;"	d
GLFW_KEY_KP_7	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_7 /;"	d
GLFW_KEY_KP_8	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_8 /;"	d
GLFW_KEY_KP_9	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_9 /;"	d
GLFW_KEY_KP_ADD	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_ADD /;"	d
GLFW_KEY_KP_DECIMAL	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_DECIMAL /;"	d
GLFW_KEY_KP_DIVIDE	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_DIVIDE /;"	d
GLFW_KEY_KP_ENTER	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_ENTER /;"	d
GLFW_KEY_KP_EQUAL	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_EQUAL /;"	d
GLFW_KEY_KP_MULTIPLY	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_MULTIPLY /;"	d
GLFW_KEY_KP_SUBTRACT	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_SUBTRACT /;"	d
GLFW_KEY_L	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_L /;"	d
GLFW_KEY_LAST	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_LAST /;"	d
GLFW_KEY_LEFT	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_LEFT /;"	d
GLFW_KEY_LEFT_ALT	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_LEFT_ALT /;"	d
GLFW_KEY_LEFT_BRACKET	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_LEFT_BRACKET /;"	d
GLFW_KEY_LEFT_CONTROL	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_LEFT_CONTROL /;"	d
GLFW_KEY_LEFT_SHIFT	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_LEFT_SHIFT /;"	d
GLFW_KEY_LEFT_SUPER	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_LEFT_SUPER /;"	d
GLFW_KEY_M	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_M /;"	d
GLFW_KEY_MENU	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_MENU /;"	d
GLFW_KEY_MINUS	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_MINUS /;"	d
GLFW_KEY_N	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_N /;"	d
GLFW_KEY_NUM_LOCK	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_NUM_LOCK /;"	d
GLFW_KEY_O	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_O /;"	d
GLFW_KEY_P	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_P /;"	d
GLFW_KEY_PAGE_DOWN	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_PAGE_DOWN /;"	d
GLFW_KEY_PAGE_UP	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_PAGE_UP /;"	d
GLFW_KEY_PAUSE	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_PAUSE /;"	d
GLFW_KEY_PERIOD	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_PERIOD /;"	d
GLFW_KEY_PRINT_SCREEN	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_PRINT_SCREEN /;"	d
GLFW_KEY_Q	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_Q /;"	d
GLFW_KEY_R	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_R /;"	d
GLFW_KEY_RIGHT	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_RIGHT /;"	d
GLFW_KEY_RIGHT_ALT	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_RIGHT_ALT /;"	d
GLFW_KEY_RIGHT_BRACKET	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_RIGHT_BRACKET /;"	d
GLFW_KEY_RIGHT_CONTROL	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_RIGHT_CONTROL /;"	d
GLFW_KEY_RIGHT_SHIFT	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_RIGHT_SHIFT /;"	d
GLFW_KEY_RIGHT_SUPER	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_RIGHT_SUPER /;"	d
GLFW_KEY_S	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_S /;"	d
GLFW_KEY_SCROLL_LOCK	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_SCROLL_LOCK /;"	d
GLFW_KEY_SEMICOLON	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_SEMICOLON /;"	d
GLFW_KEY_SLASH	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_SLASH /;"	d
GLFW_KEY_SPACE	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_SPACE /;"	d
GLFW_KEY_T	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_T /;"	d
GLFW_KEY_TAB	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_TAB /;"	d
GLFW_KEY_U	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_U /;"	d
GLFW_KEY_UNKNOWN	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_UNKNOWN /;"	d
GLFW_KEY_UP	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_UP /;"	d
GLFW_KEY_V	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_V /;"	d
GLFW_KEY_W	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_W /;"	d
GLFW_KEY_WORLD_1	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_WORLD_1 /;"	d
GLFW_KEY_WORLD_2	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_WORLD_2 /;"	d
GLFW_KEY_X	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_X /;"	d
GLFW_KEY_Y	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_Y /;"	d
GLFW_KEY_Z	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_Z /;"	d
GLFW_LOSE_CONTEXT_ON_RESET	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_LOSE_CONTEXT_ON_RESET /;"	d
GLFW_MAXIMIZED	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MAXIMIZED /;"	d
GLFW_MOD_ALT	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOD_ALT /;"	d
GLFW_MOD_CONTROL	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOD_CONTROL /;"	d
GLFW_MOD_SHIFT	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOD_SHIFT /;"	d
GLFW_MOD_SUPER	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOD_SUPER /;"	d
GLFW_MOUSE_BUTTON_1	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_1 /;"	d
GLFW_MOUSE_BUTTON_2	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_2 /;"	d
GLFW_MOUSE_BUTTON_3	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_3 /;"	d
GLFW_MOUSE_BUTTON_4	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_4 /;"	d
GLFW_MOUSE_BUTTON_5	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_5 /;"	d
GLFW_MOUSE_BUTTON_6	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_6 /;"	d
GLFW_MOUSE_BUTTON_7	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_7 /;"	d
GLFW_MOUSE_BUTTON_8	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_8 /;"	d
GLFW_MOUSE_BUTTON_LAST	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_LAST /;"	d
GLFW_MOUSE_BUTTON_LEFT	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_LEFT /;"	d
GLFW_MOUSE_BUTTON_MIDDLE	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_MIDDLE /;"	d
GLFW_MOUSE_BUTTON_RIGHT	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_RIGHT /;"	d
GLFW_NOT_INITIALIZED	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_NOT_INITIALIZED /;"	d
GLFW_NO_API	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_NO_API /;"	d
GLFW_NO_CURRENT_CONTEXT	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_NO_CURRENT_CONTEXT /;"	d
GLFW_NO_RESET_NOTIFICATION	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_NO_RESET_NOTIFICATION /;"	d
GLFW_NO_ROBUSTNESS	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_NO_ROBUSTNESS /;"	d
GLFW_NO_WINDOW_CONTEXT	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_NO_WINDOW_CONTEXT /;"	d
GLFW_OPENGL_ANY_PROFILE	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_OPENGL_ANY_PROFILE /;"	d
GLFW_OPENGL_API	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_OPENGL_API /;"	d
GLFW_OPENGL_COMPAT_PROFILE	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_OPENGL_COMPAT_PROFILE /;"	d
GLFW_OPENGL_CORE_PROFILE	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_OPENGL_CORE_PROFILE /;"	d
GLFW_OPENGL_DEBUG_CONTEXT	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_OPENGL_DEBUG_CONTEXT /;"	d
GLFW_OPENGL_ES_API	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_OPENGL_ES_API /;"	d
GLFW_OPENGL_FORWARD_COMPAT	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_OPENGL_FORWARD_COMPAT /;"	d
GLFW_OPENGL_PROFILE	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_OPENGL_PROFILE /;"	d
GLFW_OUT_OF_MEMORY	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_OUT_OF_MEMORY /;"	d
GLFW_PLATFORM_ERROR	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_PLATFORM_ERROR /;"	d
GLFW_PRESS	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_PRESS /;"	d
GLFW_RED_BITS	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_RED_BITS /;"	d
GLFW_REFRESH_RATE	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_REFRESH_RATE /;"	d
GLFW_RELEASE	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_RELEASE /;"	d
GLFW_RELEASE_BEHAVIOR_FLUSH	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_RELEASE_BEHAVIOR_FLUSH /;"	d
GLFW_RELEASE_BEHAVIOR_NONE	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_RELEASE_BEHAVIOR_NONE /;"	d
GLFW_REPEAT	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_REPEAT /;"	d
GLFW_RESIZABLE	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_RESIZABLE /;"	d
GLFW_SAMPLES	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_SAMPLES /;"	d
GLFW_SRGB_CAPABLE	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_SRGB_CAPABLE /;"	d
GLFW_STENCIL_BITS	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_STENCIL_BITS /;"	d
GLFW_STEREO	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_STEREO /;"	d
GLFW_STICKY_KEYS	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_STICKY_KEYS /;"	d
GLFW_STICKY_MOUSE_BUTTONS	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_STICKY_MOUSE_BUTTONS /;"	d
GLFW_TRUE	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_TRUE /;"	d
GLFW_VERSION_COMBINED	./backends/imgui_impl_glfw.cpp	/^#define GLFW_VERSION_COMBINED /;"	d	file:
GLFW_VERSION_MAJOR	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_VERSION_MAJOR /;"	d
GLFW_VERSION_MINOR	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_VERSION_MINOR /;"	d
GLFW_VERSION_REVISION	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_VERSION_REVISION /;"	d
GLFW_VERSION_UNAVAILABLE	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_VERSION_UNAVAILABLE /;"	d
GLFW_VISIBLE	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_VISIBLE /;"	d
GLFW_VRESIZE_CURSOR	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_VRESIZE_CURSOR /;"	d
GLFW_WINGDIAPI_DEFINED	./examples/libs/glfw/include/GLFW/glfw3.h	/^ #define GLFW_WINGDIAPI_DEFINED$/;"	d
GLFWcharfun	./examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWcharfun)(GLFWwindow*,unsigned int);$/;"	t	typeref:typename:void (*)(GLFWwindow *,unsigned int)
GLFWcharmodsfun	./examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWcharmodsfun)(GLFWwindow*,unsigned int,int);$/;"	t	typeref:typename:void (*)(GLFWwindow *,unsigned int,int)
GLFWcursor	./examples/libs/glfw/include/GLFW/glfw3.h	/^typedef struct GLFWcursor GLFWcursor;$/;"	t	typeref:struct:GLFWcursor
GLFWcursorenterfun	./examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWcursorenterfun)(GLFWwindow*,int);$/;"	t	typeref:typename:void (*)(GLFWwindow *,int)
GLFWcursorposfun	./examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWcursorposfun)(GLFWwindow*,double,double);$/;"	t	typeref:typename:void (*)(GLFWwindow *,double,double)
GLFWdropfun	./examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWdropfun)(GLFWwindow*,int,const char**);$/;"	t	typeref:typename:void (*)(GLFWwindow *,int,const char **)
GLFWerrorfun	./examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWerrorfun)(int,const char*);$/;"	t	typeref:typename:void (*)(int,const char *)
GLFWframebuffersizefun	./examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWframebuffersizefun)(GLFWwindow*,int,int);$/;"	t	typeref:typename:void (*)(GLFWwindow *,int,int)
GLFWgammaramp	./examples/libs/glfw/include/GLFW/glfw3.h	/^typedef struct GLFWgammaramp$/;"	s
GLFWgammaramp	./examples/libs/glfw/include/GLFW/glfw3.h	/^} GLFWgammaramp;$/;"	t	typeref:struct:GLFWgammaramp
GLFWglproc	./examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (*GLFWglproc)(void);$/;"	t	typeref:typename:void (*)(void)
GLFWimage	./examples/libs/glfw/include/GLFW/glfw3.h	/^typedef struct GLFWimage$/;"	s
GLFWimage	./examples/libs/glfw/include/GLFW/glfw3.h	/^} GLFWimage;$/;"	t	typeref:struct:GLFWimage
GLFWjoystickfun	./examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWjoystickfun)(int,int);$/;"	t	typeref:typename:void (*)(int,int)
GLFWkeyfun	./examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWkeyfun)(GLFWwindow*,int,int,int,int);$/;"	t	typeref:typename:void (*)(GLFWwindow *,int,int,int,int)
GLFWmonitor	./examples/libs/glfw/include/GLFW/glfw3.h	/^typedef struct GLFWmonitor GLFWmonitor;$/;"	t	typeref:struct:GLFWmonitor
GLFWmonitorfun	./examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWmonitorfun)(GLFWmonitor*,int);$/;"	t	typeref:typename:void (*)(GLFWmonitor *,int)
GLFWmousebuttonfun	./examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWmousebuttonfun)(GLFWwindow*,int,int,int);$/;"	t	typeref:typename:void (*)(GLFWwindow *,int,int,int)
GLFWscrollfun	./examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWscrollfun)(GLFWwindow*,double,double);$/;"	t	typeref:typename:void (*)(GLFWwindow *,double,double)
GLFWvidmode	./examples/libs/glfw/include/GLFW/glfw3.h	/^typedef struct GLFWvidmode$/;"	s
GLFWvidmode	./examples/libs/glfw/include/GLFW/glfw3.h	/^} GLFWvidmode;$/;"	t	typeref:struct:GLFWvidmode
GLFWvkproc	./examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (*GLFWvkproc)(void);$/;"	t	typeref:typename:void (*)(void)
GLFWwindow	./examples/libs/glfw/include/GLFW/glfw3.h	/^typedef struct GLFWwindow GLFWwindow;$/;"	t	typeref:struct:GLFWwindow
GLFWwindowclosefun	./examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWwindowclosefun)(GLFWwindow*);$/;"	t	typeref:typename:void (*)(GLFWwindow *)
GLFWwindowfocusfun	./examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWwindowfocusfun)(GLFWwindow*,int);$/;"	t	typeref:typename:void (*)(GLFWwindow *,int)
GLFWwindowiconifyfun	./examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWwindowiconifyfun)(GLFWwindow*,int);$/;"	t	typeref:typename:void (*)(GLFWwindow *,int)
GLFWwindowposfun	./examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWwindowposfun)(GLFWwindow*,int,int);$/;"	t	typeref:typename:void (*)(GLFWwindow *,int,int)
GLFWwindowrefreshfun	./examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWwindowrefreshfun)(GLFWwindow*);$/;"	t	typeref:typename:void (*)(GLFWwindow *)
GLFWwindowsizefun	./examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWwindowsizefun)(GLFWwindow*,int,int);$/;"	t	typeref:typename:void (*)(GLFWwindow *,int,int)
GLVULKANPROCNV	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRY  *GLVULKANPROCNV)(void);$/;"	t	typeref:typename:void (APIENTRY *)(void)
GL_ACTIVE_TEXTURE	./backends/imgui_impl_opengl3_loader.h	/^#define GL_ACTIVE_TEXTURE /;"	d
GL_ARB_clip_control	./backends/imgui_impl_opengl3_loader.h	/^#define GL_ARB_clip_control /;"	d
GL_ARRAY_BUFFER	./backends/imgui_impl_opengl3_loader.h	/^#define GL_ARRAY_BUFFER /;"	d
GL_ARRAY_BUFFER_BINDING	./backends/imgui_impl_opengl3_loader.h	/^#define GL_ARRAY_BUFFER_BINDING /;"	d
GL_BACK	./backends/imgui_impl_opengl3_loader.h	/^#define GL_BACK /;"	d
GL_BLEND	./backends/imgui_impl_opengl3_loader.h	/^#define GL_BLEND /;"	d
GL_BLEND_DST_ALPHA	./backends/imgui_impl_opengl3_loader.h	/^#define GL_BLEND_DST_ALPHA /;"	d
GL_BLEND_DST_RGB	./backends/imgui_impl_opengl3_loader.h	/^#define GL_BLEND_DST_RGB /;"	d
GL_BLEND_EQUATION_ALPHA	./backends/imgui_impl_opengl3_loader.h	/^#define GL_BLEND_EQUATION_ALPHA /;"	d
GL_BLEND_EQUATION_RGB	./backends/imgui_impl_opengl3_loader.h	/^#define GL_BLEND_EQUATION_RGB /;"	d
GL_BLEND_SRC_ALPHA	./backends/imgui_impl_opengl3_loader.h	/^#define GL_BLEND_SRC_ALPHA /;"	d
GL_BLEND_SRC_RGB	./backends/imgui_impl_opengl3_loader.h	/^#define GL_BLEND_SRC_RGB /;"	d
GL_CALL	./backends/imgui_impl_opengl3.cpp	/^#define GL_CALL(/;"	d	file:
GL_CLIP_ORIGIN	./backends/imgui_impl_opengl3_loader.h	/^#define GL_CLIP_ORIGIN /;"	d
GL_COLOR_BUFFER_BIT	./backends/imgui_impl_opengl3_loader.h	/^#define GL_COLOR_BUFFER_BIT /;"	d
GL_COMPILE_STATUS	./backends/imgui_impl_opengl3_loader.h	/^#define GL_COMPILE_STATUS /;"	d
GL_CONTEXT_COMPATIBILITY_PROFILE_BIT	./backends/imgui_impl_opengl3_loader.h	/^#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT /;"	d
GL_CONTEXT_PROFILE_MASK	./backends/imgui_impl_opengl3_loader.h	/^#define GL_CONTEXT_PROFILE_MASK /;"	d
GL_CULL_FACE	./backends/imgui_impl_opengl3_loader.h	/^#define GL_CULL_FACE /;"	d
GL_CURRENT_PROGRAM	./backends/imgui_impl_opengl3_loader.h	/^#define GL_CURRENT_PROGRAM /;"	d
GL_DEPTH_TEST	./backends/imgui_impl_opengl3_loader.h	/^#define GL_DEPTH_TEST /;"	d
GL_ELEMENT_ARRAY_BUFFER	./backends/imgui_impl_opengl3_loader.h	/^#define GL_ELEMENT_ARRAY_BUFFER /;"	d
GL_ELEMENT_ARRAY_BUFFER_BINDING	./backends/imgui_impl_opengl3_loader.h	/^#define GL_ELEMENT_ARRAY_BUFFER_BINDING /;"	d
GL_EXTENSIONS	./backends/imgui_impl_opengl3_loader.h	/^#define GL_EXTENSIONS /;"	d
GL_FALSE	./backends/imgui_impl_opengl3_loader.h	/^#define GL_FALSE /;"	d
GL_FILL	./backends/imgui_impl_opengl3_loader.h	/^#define GL_FILL /;"	d
GL_FLOAT	./backends/imgui_impl_opengl3_loader.h	/^#define GL_FLOAT /;"	d
GL_FRAGMENT_SHADER	./backends/imgui_impl_opengl3_loader.h	/^#define GL_FRAGMENT_SHADER /;"	d
GL_FRAMEBUFFER_SRGB	./backends/imgui_impl_opengl3_loader.h	/^#define GL_FRAMEBUFFER_SRGB /;"	d
GL_FRONT	./backends/imgui_impl_opengl3_loader.h	/^#define GL_FRONT /;"	d
GL_FRONT_AND_BACK	./backends/imgui_impl_opengl3_loader.h	/^#define GL_FRONT_AND_BACK /;"	d
GL_FUNC_ADD	./backends/imgui_impl_opengl3_loader.h	/^#define GL_FUNC_ADD /;"	d
GL_GLEXT_PROTOTYPES	./backends/imgui_impl_opengl3.cpp	/^#define GL_GLEXT_PROTOTYPES$/;"	d	file:
GL_INFO_LOG_LENGTH	./backends/imgui_impl_opengl3_loader.h	/^#define GL_INFO_LOG_LENGTH /;"	d
GL_LINEAR	./backends/imgui_impl_opengl3_loader.h	/^#define GL_LINEAR /;"	d
GL_LINK_STATUS	./backends/imgui_impl_opengl3_loader.h	/^#define GL_LINK_STATUS /;"	d
GL_MAJOR_VERSION	./backends/imgui_impl_opengl3_loader.h	/^#define GL_MAJOR_VERSION /;"	d
GL_MINOR_VERSION	./backends/imgui_impl_opengl3_loader.h	/^#define GL_MINOR_VERSION /;"	d
GL_NUM_EXTENSIONS	./backends/imgui_impl_opengl3_loader.h	/^#define GL_NUM_EXTENSIONS /;"	d
GL_ONE	./backends/imgui_impl_opengl3_loader.h	/^#define GL_ONE /;"	d
GL_ONE_MINUS_SRC_ALPHA	./backends/imgui_impl_opengl3_loader.h	/^#define GL_ONE_MINUS_SRC_ALPHA /;"	d
GL_PACK_ALIGNMENT	./backends/imgui_impl_opengl3_loader.h	/^#define GL_PACK_ALIGNMENT /;"	d
GL_PIXEL_UNPACK_BUFFER	./backends/imgui_impl_opengl3_loader.h	/^#define GL_PIXEL_UNPACK_BUFFER /;"	d
GL_PIXEL_UNPACK_BUFFER_BINDING	./backends/imgui_impl_opengl3_loader.h	/^#define GL_PIXEL_UNPACK_BUFFER_BINDING /;"	d
GL_POLYGON_MODE	./backends/imgui_impl_opengl3_loader.h	/^#define GL_POLYGON_MODE /;"	d
GL_PRIMITIVE_RESTART	./backends/imgui_impl_opengl3_loader.h	/^#define GL_PRIMITIVE_RESTART /;"	d
GL_RENDERER	./backends/imgui_impl_opengl3_loader.h	/^#define GL_RENDERER /;"	d
GL_RGBA	./backends/imgui_impl_opengl3_loader.h	/^#define GL_RGBA /;"	d
GL_SAMPLER_BINDING	./backends/imgui_impl_opengl3_loader.h	/^#define GL_SAMPLER_BINDING /;"	d
GL_SCISSOR_BOX	./backends/imgui_impl_opengl3_loader.h	/^#define GL_SCISSOR_BOX /;"	d
GL_SCISSOR_TEST	./backends/imgui_impl_opengl3_loader.h	/^#define GL_SCISSOR_TEST /;"	d
GL_SILENCE_DEPRECATION	./backends/imgui_impl_glut.cpp	/^#define GL_SILENCE_DEPRECATION$/;"	d	file:
GL_SILENCE_DEPRECATION	./backends/imgui_impl_opengl2.cpp	/^#define GL_SILENCE_DEPRECATION$/;"	d	file:
GL_SILENCE_DEPRECATION	./examples/example_glfw_opengl2/main.cpp	/^#define GL_SILENCE_DEPRECATION$/;"	d	file:
GL_SILENCE_DEPRECATION	./examples/example_glfw_opengl3/main.cpp	/^#define GL_SILENCE_DEPRECATION$/;"	d	file:
GL_SILENCE_DEPRECATION	./examples/example_glut_opengl2/main.cpp	/^#define GL_SILENCE_DEPRECATION$/;"	d	file:
GL_SRC_ALPHA	./backends/imgui_impl_opengl3_loader.h	/^#define GL_SRC_ALPHA /;"	d
GL_STENCIL_TEST	./backends/imgui_impl_opengl3_loader.h	/^#define GL_STENCIL_TEST /;"	d
GL_STREAM_DRAW	./backends/imgui_impl_opengl3_loader.h	/^#define GL_STREAM_DRAW /;"	d
GL_TEXTURE0	./backends/imgui_impl_opengl3_loader.h	/^#define GL_TEXTURE0 /;"	d
GL_TEXTURE_2D	./backends/imgui_impl_opengl3_loader.h	/^#define GL_TEXTURE_2D /;"	d
GL_TEXTURE_BINDING_2D	./backends/imgui_impl_opengl3_loader.h	/^#define GL_TEXTURE_BINDING_2D /;"	d
GL_TEXTURE_MAG_FILTER	./backends/imgui_impl_opengl3_loader.h	/^#define GL_TEXTURE_MAG_FILTER /;"	d
GL_TEXTURE_MIN_FILTER	./backends/imgui_impl_opengl3_loader.h	/^#define GL_TEXTURE_MIN_FILTER /;"	d
GL_TRIANGLES	./backends/imgui_impl_opengl3_loader.h	/^#define GL_TRIANGLES /;"	d
GL_TRUE	./backends/imgui_impl_opengl3_loader.h	/^#define GL_TRUE /;"	d
GL_UNPACK_ROW_LENGTH	./backends/imgui_impl_opengl3_loader.h	/^#define GL_UNPACK_ROW_LENGTH /;"	d
GL_UNSIGNED_BYTE	./backends/imgui_impl_opengl3_loader.h	/^#define GL_UNSIGNED_BYTE /;"	d
GL_UNSIGNED_INT	./backends/imgui_impl_opengl3_loader.h	/^#define GL_UNSIGNED_INT /;"	d
GL_UNSIGNED_SHORT	./backends/imgui_impl_opengl3_loader.h	/^#define GL_UNSIGNED_SHORT /;"	d
GL_UPPER_LEFT	./backends/imgui_impl_opengl3_loader.h	/^#define GL_UPPER_LEFT /;"	d
GL_VENDOR	./backends/imgui_impl_opengl3_loader.h	/^#define GL_VENDOR /;"	d
GL_VERSION	./backends/imgui_impl_opengl3_loader.h	/^#define GL_VERSION /;"	d
GL_VERSION_3_1	./backends/imgui_impl_opengl3_loader.h	/^#define GL_VERSION_3_1 /;"	d
GL_VERSION_3_2	./backends/imgui_impl_opengl3_loader.h	/^#define GL_VERSION_3_2 /;"	d
GL_VERSION_3_3	./backends/imgui_impl_opengl3_loader.h	/^#define GL_VERSION_3_3 /;"	d
GL_VERTEX_ARRAY_BINDING	./backends/imgui_impl_opengl3.cpp	/^#define GL_VERTEX_ARRAY_BINDING GL_VERTEX_ARRAY_BINDING_/;"	d	file:
GL_VERTEX_ARRAY_BINDING	./backends/imgui_impl_opengl3_loader.h	/^#define GL_VERTEX_ARRAY_BINDING /;"	d
GL_VERTEX_ATTRIB_ARRAY_ENABLED	./backends/imgui_impl_opengl3_loader.h	/^#define GL_VERTEX_ATTRIB_ARRAY_ENABLED /;"	d
GL_VERTEX_ATTRIB_ARRAY_NORMALIZED	./backends/imgui_impl_opengl3_loader.h	/^#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED /;"	d
GL_VERTEX_ATTRIB_ARRAY_POINTER	./backends/imgui_impl_opengl3_loader.h	/^#define GL_VERTEX_ATTRIB_ARRAY_POINTER /;"	d
GL_VERTEX_ATTRIB_ARRAY_SIZE	./backends/imgui_impl_opengl3_loader.h	/^#define GL_VERTEX_ATTRIB_ARRAY_SIZE /;"	d
GL_VERTEX_ATTRIB_ARRAY_STRIDE	./backends/imgui_impl_opengl3_loader.h	/^#define GL_VERTEX_ATTRIB_ARRAY_STRIDE /;"	d
GL_VERTEX_ATTRIB_ARRAY_TYPE	./backends/imgui_impl_opengl3_loader.h	/^#define GL_VERTEX_ATTRIB_ARRAY_TYPE /;"	d
GL_VERTEX_SHADER	./backends/imgui_impl_opengl3_loader.h	/^#define GL_VERTEX_SHADER /;"	d
GL_VIEWPORT	./backends/imgui_impl_opengl3_loader.h	/^#define GL_VIEWPORT /;"	d
GLbitfield	./backends/imgui_impl_opengl3_loader.h	/^typedef unsigned int GLbitfield;$/;"	t	typeref:typename:unsigned int
GLboolean	./backends/imgui_impl_opengl3_loader.h	/^typedef unsigned char GLboolean;$/;"	t	typeref:typename:unsigned char
GLbyte	./backends/imgui_impl_opengl3_loader.h	/^typedef khronos_int8_t GLbyte;$/;"	t	typeref:typename:khronos_int8_t
GLchar	./backends/imgui_impl_opengl3_loader.h	/^typedef char GLchar;$/;"	t	typeref:typename:char
GLclampd	./backends/imgui_impl_opengl3_loader.h	/^typedef double GLclampd;$/;"	t	typeref:typename:double
GLclampf	./backends/imgui_impl_opengl3_loader.h	/^typedef khronos_float_t GLclampf;$/;"	t	typeref:typename:khronos_float_t
GLdouble	./backends/imgui_impl_opengl3_loader.h	/^typedef double GLdouble;$/;"	t	typeref:typename:double
GLeglImageOES	./backends/imgui_impl_opengl3_loader.h	/^typedef void *GLeglImageOES;$/;"	t	typeref:typename:void *
GLenum	./backends/imgui_impl_opengl3_loader.h	/^typedef unsigned int GLenum;$/;"	t	typeref:typename:unsigned int
GLfloat	./backends/imgui_impl_opengl3_loader.h	/^typedef khronos_float_t GLfloat;$/;"	t	typeref:typename:khronos_float_t
GLhalf	./backends/imgui_impl_opengl3_loader.h	/^typedef khronos_uint16_t GLhalf;$/;"	t	typeref:typename:khronos_uint16_t
GLint	./backends/imgui_impl_opengl3_loader.h	/^typedef int GLint;$/;"	t	typeref:typename:int
GLint64	./backends/imgui_impl_opengl3_loader.h	/^typedef khronos_int64_t GLint64;$/;"	t	typeref:typename:khronos_int64_t
GLint64EXT	./backends/imgui_impl_opengl3_loader.h	/^typedef khronos_int64_t GLint64EXT;$/;"	t	typeref:typename:khronos_int64_t
GLintptr	./backends/imgui_impl_opengl3_loader.h	/^typedef khronos_intptr_t GLintptr;$/;"	t	typeref:typename:khronos_intptr_t
GLocalizationEntriesEnUS	./imgui.cpp	/^static const ImGuiLocEntry GLocalizationEntriesEnUS[] =$/;"	v	typeref:typename:const ImGuiLocEntry[]	file:
GLshort	./backends/imgui_impl_opengl3_loader.h	/^typedef khronos_int16_t GLshort;$/;"	t	typeref:typename:khronos_int16_t
GLsizei	./backends/imgui_impl_opengl3_loader.h	/^typedef int GLsizei;$/;"	t	typeref:typename:int
GLsizeiptr	./backends/imgui_impl_opengl3_loader.h	/^typedef khronos_ssize_t GLsizeiptr;$/;"	t	typeref:typename:khronos_ssize_t
GLsync	./backends/imgui_impl_opengl3_loader.h	/^typedef struct __GLsync *GLsync;$/;"	t	typeref:struct:__GLsync *
GLubyte	./backends/imgui_impl_opengl3_loader.h	/^typedef khronos_uint8_t GLubyte;$/;"	t	typeref:typename:khronos_uint8_t
GLuint	./backends/imgui_impl_opengl3_loader.h	/^typedef unsigned int GLuint;$/;"	t	typeref:typename:unsigned int
GLuint64	./backends/imgui_impl_opengl3_loader.h	/^typedef khronos_uint64_t GLuint64;$/;"	t	typeref:typename:khronos_uint64_t
GLuint64EXT	./backends/imgui_impl_opengl3_loader.h	/^typedef khronos_uint64_t GLuint64EXT;$/;"	t	typeref:typename:khronos_uint64_t
GLushort	./backends/imgui_impl_opengl3_loader.h	/^typedef khronos_uint16_t GLushort;$/;"	t	typeref:typename:khronos_uint16_t
GLvoid	./backends/imgui_impl_opengl3_loader.h	/^typedef void GLvoid;$/;"	t	typeref:typename:void
GS	./backends/imgui_impl_dx10.cpp	/^        ID3D10GeometryShader*       GS;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:ID3D10GeometryShader *	file:
GS	./backends/imgui_impl_dx11.cpp	/^        ID3D11GeometryShader*       GS;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11GeometryShader *	file:
GSInstances	./backends/imgui_impl_dx11.cpp	/^        ID3D11ClassInstance         *PSInstances[256], *VSInstances[256], *GSInstances[256];   \//;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11ClassInstance * [256]	file:
GSInstancesCount	./backends/imgui_impl_dx11.cpp	/^        UINT                        PSInstancesCount, VSInstancesCount, GSInstancesCount;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:UINT	file:
GStyleVarInfo	./imgui.cpp	/^static const ImGuiDataVarInfo GStyleVarInfo[] =$/;"	v	typeref:typename:const ImGuiDataVarInfo[]	file:
Gallery	./docs/README.md	/^### Gallery$/;"	S	chapter:Dear ImGui
GamepadMode	./backends/imgui_impl_sdl2.cpp	/^    ImGui_ImplSDL2_GamepadMode    GamepadMode;$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:ImGui_ImplSDL2_GamepadMode	file:
GamepadMode	./backends/imgui_impl_sdl3.cpp	/^    ImGui_ImplSDL3_GamepadMode  GamepadMode;$/;"	m	struct:ImGui_ImplSDL3_Data	typeref:typename:ImGui_ImplSDL3_GamepadMode	file:
Gamepads	./backends/imgui_impl_sdl2.cpp	/^    ImVector<SDL_GameController*> Gamepads;$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:ImVector<SDL_GameController * >	file:
Gamepads	./backends/imgui_impl_sdl3.cpp	/^    ImVector<SDL_Gamepad*>      Gamepads;$/;"	m	struct:ImGui_ImplSDL3_Data	typeref:typename:ImVector<SDL_Gamepad * >	file:
Gamma	./backends/imgui_impl_wgpu.cpp	/^    float Gamma;$/;"	m	struct:Uniforms	typeref:typename:float	file:
GcAwakeTransientWindowBuffers	./imgui.cpp	/^void ImGui::GcAwakeTransientWindowBuffers(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
GcCompactAll	./imgui_internal.h	/^    bool                    GcCompactAll;                       \/\/ Request full GC$/;"	m	struct:ImGuiContext	typeref:typename:bool
GcCompactTransientMiscBuffers	./imgui.cpp	/^void ImGui::GcCompactTransientMiscBuffers()$/;"	f	class:ImGui	typeref:typename:void
GcCompactTransientWindowBuffers	./imgui.cpp	/^void ImGui::GcCompactTransientWindowBuffers(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
GenBuffers	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLGENBUFFERSPROC               GenBuffers;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLGENBUFFERSPROC
GenTextures	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLGENTEXTURESPROC              GenTextures;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLGENTEXTURESPROC
GenVertexArrays	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLGENVERTEXARRAYSPROC          GenVertexArrays;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLGENVERTEXARRAYSPROC
GetActiveID	./imgui_internal.h	/^    inline ImGuiID          GetActiveID()   { ImGuiContext& g = *GImGui; return g.ActiveId; }$/;"	f	namespace:ImGui	typeref:typename:ImGuiID
GetAliveCount	./imgui_internal.h	/^    int         GetAliveCount() const               { return AliveCount; }      \/\/ Number of a/;"	f	struct:ImPool	typeref:typename:int
GetAllocatorFunctions	./imgui.cpp	/^void ImGui::GetAllocatorFunctions(ImGuiMemAllocFunc* p_alloc_func, ImGuiMemFreeFunc* p_free_func/;"	f	class:ImGui	typeref:typename:void
GetArea	./imgui_internal.h	/^    float       GetArea() const                     { return (Max.x - Min.x) * (Max.y - Min.y); /;"	f	struct:ImRect	typeref:typename:float
GetArenaSizeInBytes	./imgui_internal.h	/^    inline int   GetArenaSizeInBytes()              { return CurrOff; }$/;"	f	struct:ImSpanAllocator	typeref:typename:int
GetAssetData	./examples/example_android_opengl3/main.cpp	/^static int GetAssetData(const char* filename, void** outData)$/;"	f	typeref:typename:int	file:
GetAttribLocation	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLGETATTRIBLOCATIONPROC        GetAttribLocation;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLGETATTRIBLOCATIONPROC
GetBL	./imgui_internal.h	/^    ImVec2      GetBL() const                       { return ImVec2(Min.x, Max.y); }  \/\/ Botto/;"	f	struct:ImRect	typeref:typename:ImVec2
GetBR	./imgui_internal.h	/^    ImVec2      GetBR() const                       { return Max; }                   \/\/ Botto/;"	f	struct:ImRect	typeref:typename:ImVec2
GetBackgroundDrawList	./imgui.cpp	/^ImDrawList* ImGui::GetBackgroundDrawList()$/;"	f	class:ImGui	typeref:typename:ImDrawList *
GetBackgroundDrawList	./imgui.cpp	/^ImDrawList* ImGui::GetBackgroundDrawList(ImGuiViewport* viewport)$/;"	f	class:ImGui	typeref:typename:ImDrawList *
GetBit	./imgui.h	/^    inline bool     GetBit(size_t n) const  { int off = (int)(n >> 5); ImU32 mask = 1u << (n & 3/;"	f	struct:ImFontGlyphRangesBuilder	typeref:typename:bool
GetBool	./imgui.cpp	/^bool ImGuiStorage::GetBool(ImGuiID key, bool default_val) const$/;"	f	class:ImGuiStorage	typeref:typename:bool
GetBoolRef	./imgui.cpp	/^bool* ImGuiStorage::GetBoolRef(ImGuiID key, bool default_val)$/;"	f	class:ImGuiStorage	typeref:typename:bool *
GetBoxSelectState	./imgui_internal.h	/^    inline ImGuiBoxSelectState*     GetBoxSelectState(ImGuiID id)   { ImGuiContext& g = *GImGui;/;"	f	namespace:ImGui	typeref:typename:ImGuiBoxSelectState *
GetBufSize	./imgui_internal.h	/^    int         GetBufSize() const                  { return Buf.Size; }$/;"	f	struct:ImPool	typeref:typename:int
GetBuildWorkRect	./imgui_internal.h	/^    ImRect  GetBuildWorkRect() const    { ImVec2 pos = CalcWorkRectPos(BuildWorkOffsetMin); ImVe/;"	f	struct:ImGuiViewportP	typeref:typename:ImRect
GetBuilderForFreeType	./misc/freetype/imgui_freetype.cpp	/^const ImFontBuilderIO* ImGuiFreeType::GetBuilderForFreeType()$/;"	f	class:ImGuiFreeType	typeref:typename:const ImFontBuilderIO *
GetByIndex	./imgui_internal.h	/^    T*          GetByIndex(ImPoolIdx n)             { return &Buf[n]; }$/;"	f	struct:ImPool	typeref:typename:T *
GetByKey	./imgui_internal.h	/^    T*          GetByKey(ImGuiID key)               { int idx = Map.GetInt(key, -1); return (idx/;"	f	struct:ImPool	typeref:typename:T *
GetCenter	./imgui.h	/^    ImVec2              GetCenter() const       { return ImVec2(Pos.x + Size.x * 0.5f, Pos.y + S/;"	f	struct:ImGuiViewport	typeref:typename:ImVec2
GetCenter	./imgui_internal.h	/^    ImVec2      GetCenter() const                   { return ImVec2((Min.x + Max.x) * 0.5f, (Min/;"	f	struct:ImRect	typeref:typename:ImVec2
GetCharAdvance	./imgui.h	/^    float                       GetCharAdvance(ImWchar c) const     { return ((int)c < IndexAdva/;"	f	struct:ImFont	typeref:typename:float
GetClipRectMax	./imgui.h	/^    inline ImVec2   GetClipRectMax() const { const ImVec4& cr = _ClipRectStack.back(); return Im/;"	f	struct:ImDrawList	typeref:typename:ImVec2
GetClipRectMin	./imgui.h	/^    inline ImVec2   GetClipRectMin() const { const ImVec4& cr = _ClipRectStack.back(); return Im/;"	f	struct:ImDrawList	typeref:typename:ImVec2
GetClipboardText	./imgui.cpp	/^const char* ImGui::GetClipboardText()$/;"	f	class:ImGui	typeref:typename:const char *
GetClipboardTextFn	./imgui.h	/^    const char* (*GetClipboardTextFn)(void* user_data);$/;"	m	struct:ImGuiIO	typeref:typename:const char * (*)(void * user_data)
GetColorU32	./imgui.cpp	/^ImU32 ImGui::GetColorU32(ImGuiCol idx, float alpha_mul)$/;"	f	class:ImGui	typeref:typename:ImU32
GetColorU32	./imgui.cpp	/^ImU32 ImGui::GetColorU32(ImU32 col, float alpha_mul)$/;"	f	class:ImGui	typeref:typename:ImU32
GetColorU32	./imgui.cpp	/^ImU32 ImGui::GetColorU32(const ImVec4& col)$/;"	f	class:ImGui	typeref:typename:ImU32
GetColumnIndex	./imgui_tables.cpp	/^int ImGui::GetColumnIndex()$/;"	f	class:ImGui	typeref:typename:int
GetColumnNormFromOffset	./imgui_tables.cpp	/^float ImGui::GetColumnNormFromOffset(const ImGuiOldColumns* columns, float offset)$/;"	f	class:ImGui	typeref:typename:float
GetColumnOffset	./imgui_tables.cpp	/^float ImGui::GetColumnOffset(int column_index)$/;"	f	class:ImGui	typeref:typename:float
GetColumnOffsetFromNorm	./imgui_tables.cpp	/^float ImGui::GetColumnOffsetFromNorm(const ImGuiOldColumns* columns, float offset_norm)$/;"	f	class:ImGui	typeref:typename:float
GetColumnSettings	./imgui_internal.h	/^    ImGuiTableColumnSettings*   GetColumnSettings()     { return (ImGuiTableColumnSettings*)(thi/;"	f	struct:ImGuiTableSettings	typeref:typename:ImGuiTableColumnSettings *
GetColumnWidth	./imgui_tables.cpp	/^float ImGui::GetColumnWidth(int column_index)$/;"	f	class:ImGui	typeref:typename:float
GetColumnWidthEx	./imgui_tables.cpp	/^static float GetColumnWidthEx(ImGuiOldColumns* columns, int column_index, bool before_resize = f/;"	f	typeref:typename:float	file:
GetColumnsCount	./imgui_tables.cpp	/^int ImGui::GetColumnsCount()$/;"	f	class:ImGui	typeref:typename:int
GetColumnsID	./imgui_tables.cpp	/^ImGuiID ImGui::GetColumnsID(const char* str_id, int columns_count)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetCombinedRootWindow	./imgui.cpp	/^static ImGuiWindow* GetCombinedRootWindow(ImGuiWindow* window, bool popup_hierarchy)$/;"	f	typeref:typename:ImGuiWindow *	file:
GetContentRegionAvail	./imgui.cpp	/^ImVec2 ImGui::GetContentRegionAvail()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetContentRegionMax	./imgui.cpp	/^ImVec2 ImGui::GetContentRegionMax()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetCurrentContext	./imgui.cpp	/^ImGuiContext* ImGui::GetCurrentContext()$/;"	f	class:ImGui	typeref:typename:ImGuiContext *
GetCurrentFocusScope	./imgui_internal.h	/^    inline ImGuiID          GetCurrentFocusScope() { ImGuiContext& g = *GImGui; return g.Current/;"	f	namespace:ImGui	typeref:typename:ImGuiID
GetCurrentTabBar	./imgui_internal.h	/^    inline    ImGuiTabBar*  GetCurrentTabBar() { ImGuiContext& g = *GImGui; return g.CurrentTabB/;"	f	namespace:ImGui	typeref:typename:ImGuiTabBar *
GetCurrentTable	./imgui_internal.h	/^    inline    ImGuiTable*   GetCurrentTable() { ImGuiContext& g = *GImGui; return g.CurrentTable/;"	f	namespace:ImGui	typeref:typename:ImGuiTable *
GetCurrentWindow	./imgui_internal.h	/^    inline    ImGuiWindow*  GetCurrentWindow()          { ImGuiContext& g = *GImGui; g.CurrentWi/;"	f	namespace:ImGui	typeref:typename:ImGuiWindow *
GetCurrentWindowRead	./imgui_internal.h	/^    inline    ImGuiWindow*  GetCurrentWindowRead()      { ImGuiContext& g = *GImGui; return g.Cu/;"	f	namespace:ImGui	typeref:typename:ImGuiWindow *
GetCursorPos	./imgui.cpp	/^ImVec2 ImGui::GetCursorPos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetCursorPos	./imgui_internal.h	/^    int         GetCursorPos() const        { return Stb.cursor; }$/;"	f	struct:ImGuiInputTextState	typeref:typename:int
GetCursorPosX	./imgui.cpp	/^float ImGui::GetCursorPosX()$/;"	f	class:ImGui	typeref:typename:float
GetCursorPosY	./imgui.cpp	/^float ImGui::GetCursorPosY()$/;"	f	class:ImGui	typeref:typename:float
GetCursorScreenPos	./imgui.cpp	/^ImVec2 ImGui::GetCursorScreenPos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetCursorStartPos	./imgui.cpp	/^ImVec2 ImGui::GetCursorStartPos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetCustomRectByIndex	./imgui.h	/^    ImFontAtlasCustomRect*      GetCustomRectByIndex(int index) { IM_ASSERT(index >= 0); return /;"	f	struct:ImFontAtlas	typeref:typename:ImFontAtlasCustomRect *
GetDebugName	./imgui.h	/^    const char*                 GetDebugName() const                { return ConfigData ? Config/;"	f	struct:ImFont	typeref:typename:const char *
GetDefaultCompressedFontDataTTFBase85	./imgui_draw.cpp	/^static const char* GetDefaultCompressedFontDataTTFBase85()$/;"	f	typeref:typename:const char *	file:
GetDefaultFont	./imgui_internal.h	/^    inline ImFont*          GetDefaultFont() { ImGuiContext& g = *GImGui; return g.IO.FontDefaul/;"	f	namespace:ImGui	typeref:typename:ImFont *
GetDragDropPayload	./imgui.cpp	/^const ImGuiPayload* ImGui::GetDragDropPayload()$/;"	f	class:ImGui	typeref:typename:const ImGuiPayload *
GetDraggedColumnOffset	./imgui_tables.cpp	/^static float GetDraggedColumnOffset(ImGuiOldColumns* columns, int column_index)$/;"	f	typeref:typename:float	file:
GetDrawData	./imgui.cpp	/^ImDrawData* ImGui::GetDrawData()$/;"	f	class:ImGui	typeref:typename:ImDrawData *
GetDrawListSharedData	./imgui.cpp	/^ImDrawListSharedData* ImGui::GetDrawListSharedData()$/;"	f	class:ImGui	typeref:typename:ImDrawListSharedData *
GetError	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLGETERRORPROC                 GetError;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLGETERRORPROC
GetFallbackWindowNameForWindowingList	./imgui.cpp	/^static const char* GetFallbackWindowNameForWindowingList(ImGuiWindow* window)$/;"	f	typeref:typename:const char *	file:
GetFloat	./imgui.cpp	/^float ImGuiStorage::GetFloat(ImGuiID key, float default_val) const$/;"	f	class:ImGuiStorage	typeref:typename:float
GetFloatRef	./imgui.cpp	/^float* ImGuiStorage::GetFloatRef(ImGuiID key, float default_val)$/;"	f	class:ImGuiStorage	typeref:typename:float *
GetFocusID	./imgui_internal.h	/^    inline ImGuiID          GetFocusID()    { ImGuiContext& g = *GImGui; return g.NavId; }$/;"	f	namespace:ImGui	typeref:typename:ImGuiID
GetFont	./imgui.cpp	/^ImFont* ImGui::GetFont()$/;"	f	class:ImGui	typeref:typename:ImFont *
GetFontSize	./imgui.cpp	/^float ImGui::GetFontSize()$/;"	f	class:ImGui	typeref:typename:float
GetFontTexUvWhitePixel	./imgui.cpp	/^ImVec2 ImGui::GetFontTexUvWhitePixel()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetForegroundDrawList	./imgui.cpp	/^ImDrawList* ImGui::GetForegroundDrawList()$/;"	f	class:ImGui	typeref:typename:ImDrawList *
GetForegroundDrawList	./imgui.cpp	/^ImDrawList* ImGui::GetForegroundDrawList(ImGuiViewport* viewport)$/;"	f	class:ImGui	typeref:typename:ImDrawList *
GetForegroundDrawList	./imgui_internal.h	/^    inline ImDrawList*      GetForegroundDrawList(ImGuiWindow* window) { IM_UNUSED(window); retu/;"	f	namespace:ImGui	typeref:typename:ImDrawList *
GetFrameCount	./imgui.cpp	/^int ImGui::GetFrameCount()$/;"	f	class:ImGui	typeref:typename:int
GetFrameHeight	./imgui.cpp	/^float ImGui::GetFrameHeight()$/;"	f	class:ImGui	typeref:typename:float
GetFrameHeightWithSpacing	./imgui.cpp	/^float ImGui::GetFrameHeightWithSpacing()$/;"	f	class:ImGui	typeref:typename:float
GetGlyphRangesChineseFull	./imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesChineseFull()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesChineseSimplifiedCommon	./imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesChineseSimplifiedCommon()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesCyrillic	./imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesCyrillic()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesDefault	./imgui_draw.cpp	/^const ImWchar*   ImFontAtlas::GetGlyphRangesDefault()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesGreek	./imgui_draw.cpp	/^const ImWchar*   ImFontAtlas::GetGlyphRangesGreek()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesJapanese	./imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesJapanese()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesKorean	./imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesKorean()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesThai	./imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesThai()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesVietnamese	./imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesVietnamese()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetHeight	./imgui_internal.h	/^    float       GetHeight() const                   { return Max.y - Min.y; }$/;"	f	struct:ImRect	typeref:typename:float
GetHoveredID	./imgui.cpp	/^ImGuiID ImGui::GetHoveredID()$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetID	./imgui.cpp	/^ImGuiID ImGui::GetID(const char* str_id)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetID	./imgui.cpp	/^ImGuiID ImGui::GetID(const char* str_id_begin, const char* str_id_end)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetID	./imgui.cpp	/^ImGuiID ImGui::GetID(const void* ptr_id)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetID	./imgui.cpp	/^ImGuiID ImGui::GetID(int int_id)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetID	./imgui.cpp	/^ImGuiID ImGuiWindow::GetID(const char* str, const char* str_end)$/;"	f	class:ImGuiWindow	typeref:typename:IM_MSVC_RUNTIME_CHECKS_OFF ImGuiID
GetID	./imgui.cpp	/^ImGuiID ImGuiWindow::GetID(const void* ptr)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetID	./imgui.cpp	/^ImGuiID ImGuiWindow::GetID(int n)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetIDFromRectangle	./imgui.cpp	/^ImGuiID ImGuiWindow::GetIDFromRectangle(const ImRect& r_abs)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetIDWithSeed	./imgui.cpp	/^ImGuiID ImGui::GetIDWithSeed(const char* str, const char* str_end, ImGuiID seed)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetIDWithSeed	./imgui.cpp	/^ImGuiID ImGui::GetIDWithSeed(int n, ImGuiID seed)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetIO	./imgui.cpp	/^ImGuiIO& ImGui::GetIO()$/;"	f	class:ImGui	typeref:typename:ImGuiIO &
GetIndex	./imgui_internal.h	/^    ImPoolIdx   GetIndex(const T* p) const          { IM_ASSERT(p >= Buf.Data && p < Buf.Data + /;"	f	struct:ImPool	typeref:typename:ImPoolIdx
GetInputSourceName	./imgui.cpp	/^static const char* GetInputSourceName(ImGuiInputSource source)$/;"	f	typeref:typename:const char *	file:
GetInputTextState	./imgui_internal.h	/^    inline ImGuiInputTextState* GetInputTextState(ImGuiID id)   { ImGuiContext& g = *GImGui; ret/;"	f	namespace:ImGui	typeref:typename:ImGuiInputTextState *
GetInt	./imgui.cpp	/^int ImGuiStorage::GetInt(ImGuiID key, int default_val) const$/;"	f	class:ImGuiStorage	typeref:typename:int
GetIntRef	./imgui.cpp	/^int* ImGuiStorage::GetIntRef(ImGuiID key, int default_val)$/;"	f	class:ImGuiStorage	typeref:typename:int *
GetIntegerv	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLGETINTEGERVPROC              GetIntegerv;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLGETINTEGERVPROC
GetItemFlags	./imgui_internal.h	/^    inline ImGuiItemFlags   GetItemFlags()  { ImGuiContext& g = *GImGui; return g.LastItemData.I/;"	f	namespace:ImGui	typeref:typename:ImGuiItemFlags
GetItemID	./imgui.cpp	/^ImGuiID ImGui::GetItemID()$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetItemRectMax	./imgui.cpp	/^ImVec2 ImGui::GetItemRectMax()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetItemRectMin	./imgui.cpp	/^ImVec2 ImGui::GetItemRectMin()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetItemRectSize	./imgui.cpp	/^ImVec2 ImGui::GetItemRectSize()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetItemStatusFlags	./imgui_internal.h	/^    inline ImGuiItemStatusFlags GetItemStatusFlags() { ImGuiContext& g = *GImGui; return g.LastI/;"	f	namespace:ImGui	typeref:typename:ImGuiItemStatusFlags
GetKeyChordName	./imgui.cpp	/^const char* ImGui::GetKeyChordName(ImGuiKeyChord key_chord)$/;"	f	class:ImGui	typeref:typename:const char *
GetKeyData	./imgui.cpp	/^ImGuiKeyData* ImGui::GetKeyData(ImGuiContext* ctx, ImGuiKey key)$/;"	f	class:ImGui	typeref:typename:ImGuiKeyData *
GetKeyData	./imgui_internal.h	/^    inline ImGuiKeyData*    GetKeyData(ImGuiKey key)                                    { ImGuiC/;"	f	namespace:ImGui	typeref:typename:ImGuiKeyData *
GetKeyIndex	./imgui.cpp	/^ImGuiKey ImGui::GetKeyIndex(ImGuiKey key)$/;"	f	class:ImGui	typeref:typename:ImGuiKey
GetKeyMagnitude2d	./imgui.cpp	/^ImVec2 ImGui::GetKeyMagnitude2d(ImGuiKey key_left, ImGuiKey key_right, ImGuiKey key_up, ImGuiKey/;"	f	class:ImGui	typeref:typename:ImVec2
GetKeyName	./imgui.cpp	/^const char* ImGui::GetKeyName(ImGuiKey key)$/;"	f	class:ImGui	typeref:typename:const char *
GetKeyOwner	./imgui.cpp	/^ImGuiID ImGui::GetKeyOwner(ImGuiKey key)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetKeyOwnerData	./imgui_internal.h	/^    inline ImGuiKeyOwnerData* GetKeyOwnerData(ImGuiContext* ctx, ImGuiKey key)          { if (ke/;"	f	namespace:ImGui	typeref:typename:ImGuiKeyOwnerData *
GetKeyPressedAmount	./imgui.cpp	/^int ImGui::GetKeyPressedAmount(ImGuiKey key, float repeat_delay, float repeat_rate)$/;"	f	class:ImGui	typeref:typename:int
GetMachAbsoluteTimeInSeconds	./backends/imgui_impl_metal.mm	/^static inline CFTimeInterval    GetMachAbsoluteTimeInSeconds()      { return (CFTimeInterval)(do/;"	f	struct:ImGui_ImplMetal_Data
GetMachAbsoluteTimeInSeconds	./backends/imgui_impl_osx.mm	/^static inline CFTimeInterval    GetMachAbsoluteTimeInSeconds()      { return (CFTimeInterval)(do/;"	f	struct:ImGui_ImplOSX_Data
GetMainRect	./imgui_internal.h	/^    ImRect  GetMainRect() const         { return ImRect(Pos.x, Pos.y, Pos.x + Size.x, Pos.y + Si/;"	f	struct:ImGuiViewportP	typeref:typename:ImRect
GetMainViewport	./imgui.cpp	/^ImGuiViewport* ImGui::GetMainViewport()$/;"	f	class:ImGui	typeref:typename:ImGuiViewport *
GetMapSize	./imgui_internal.h	/^    int         GetMapSize() const                  { return Map.Data.Size; }   \/\/ It is the m/;"	f	struct:ImPool	typeref:typename:int
GetMergedModsFromKeys	./imgui.cpp	/^static ImGuiKeyChord GetMergedModsFromKeys()$/;"	f	typeref:typename:ImGuiKeyChord	file:
GetMinimumStepAtDecimalPrecision	./imgui_widgets.cpp	/^static float GetMinimumStepAtDecimalPrecision(int decimal_precision)$/;"	f	typeref:typename:float	file:
GetModForLRModKey	./imgui.cpp	/^static ImGuiKeyChord GetModForLRModKey(ImGuiKey key)$/;"	f	typeref:typename:IM_MSVC_RUNTIME_CHECKS_RESTORE ImGuiKeyChord	file:
GetMouseClickedCount	./imgui.cpp	/^int ImGui::GetMouseClickedCount(ImGuiMouseButton button)$/;"	f	class:ImGui	typeref:typename:int
GetMouseCursor	./imgui.cpp	/^ImGuiMouseCursor ImGui::GetMouseCursor()$/;"	f	class:ImGui	typeref:typename:ImGuiMouseCursor
GetMouseCursorTexData	./imgui_draw.cpp	/^bool ImFontAtlas::GetMouseCursorTexData(ImGuiMouseCursor cursor_type, ImVec2* out_offset, ImVec2/;"	f	class:ImFontAtlas	typeref:typename:bool
GetMouseDragDelta	./imgui.cpp	/^ImVec2 ImGui::GetMouseDragDelta(ImGuiMouseButton button, float lock_threshold)$/;"	f	class:ImGui	typeref:typename:ImVec2
GetMousePos	./imgui.cpp	/^ImVec2 ImGui::GetMousePos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetMousePosOnOpeningCurrentPopup	./imgui.cpp	/^ImVec2 ImGui::GetMousePosOnOpeningCurrentPopup()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetMouseSource	./backends/imgui_impl_osx.mm	/^static ImGuiMouseSource GetMouseSource(NSEvent* event)$/;"	f
GetMouseSourceFromMessageExtraInfo	./backends/imgui_impl_glfw.cpp	/^static ImGuiMouseSource GetMouseSourceFromMessageExtraInfo()$/;"	f	typeref:typename:ImGuiMouseSource	file:
GetMouseSourceFromMessageExtraInfo	./backends/imgui_impl_win32.cpp	/^static ImGuiMouseSource GetMouseSourceFromMessageExtraInfo()$/;"	f	typeref:typename:ImGuiMouseSource	file:
GetMouseSourceName	./imgui.cpp	/^static const char* GetMouseSourceName(ImGuiMouseSource source)$/;"	f	typeref:typename:const char *	file:
GetMultiSelectState	./imgui_internal.h	/^    inline ImGuiMultiSelectState*   GetMultiSelectState(ImGuiID id) { ImGuiContext& g = *GImGui;/;"	f	namespace:ImGui	typeref:typename:ImGuiMultiSelectState *
GetName	./imgui_internal.h	/^    char* GetName()             { return (char*)(this + 1); }$/;"	f	struct:ImGuiWindowSettings	typeref:typename:char *
GetNavTweakPressedAmount	./imgui.cpp	/^float ImGui::GetNavTweakPressedAmount(ImGuiAxis axis)$/;"	f	class:ImGui	typeref:typename:float
GetNextSelectedItem	./imgui_widgets.cpp	/^bool ImGuiSelectionBasicStorage::GetNextSelectedItem(void** opaque_it, ImGuiID* out_id)$/;"	f	class:ImGuiSelectionBasicStorage	typeref:typename:bool
GetNextTriangle	./imgui_draw.cpp	/^void ImTriangulator::GetNextTriangle(unsigned int out_triangle[3])$/;"	f	class:ImTriangulator	typeref:typename:void
GetOrAddByKey	./imgui_internal.h	/^    T*          GetOrAddByKey(ImGuiID key)          { int* p_idx = Map.GetIntRef(key, -1); if (*/;"	f	struct:ImPool	typeref:typename:T *
GetPlatformIO	./imgui.cpp	/^ImGuiPlatformIO& ImGui::GetPlatformIO()$/;"	f	class:ImGui	typeref:typename:ImGuiPlatformIO &
GetPopupAllowedExtentRect	./imgui.cpp	/^ImRect ImGui::GetPopupAllowedExtentRect(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImRect
GetProgramInfoLog	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLGETPROGRAMINFOLOGPROC        GetProgramInfoLog;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLGETPROGRAMINFOLOGPROC
GetProgramiv	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLGETPROGRAMIVPROC             GetProgramiv;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLGETPROGRAMIVPROC
GetRedoAvailCount	./imgui_internal.h	/^    int         GetRedoAvailCount() const   { return IMSTB_TEXTEDIT_UNDOSTATECOUNT - Stb.undosta/;"	f	struct:ImGuiInputTextState	typeref:typename:int
GetResizeBorderRect	./imgui.cpp	/^static ImRect GetResizeBorderRect(ImGuiWindow* window, int border_n, float perp_padding, float t/;"	f	typeref:typename:ImRect	file:
GetRoutingIdFromOwnerId	./imgui.cpp	/^static inline ImGuiID GetRoutingIdFromOwnerId(ImGuiID owner_id)$/;"	f	typeref:typename:ImGuiID	file:
GetScrollMaxX	./imgui.cpp	/^float ImGui::GetScrollMaxX()$/;"	f	class:ImGui	typeref:typename:float
GetScrollMaxY	./imgui.cpp	/^float ImGui::GetScrollMaxY()$/;"	f	class:ImGui	typeref:typename:float
GetScrollX	./imgui.cpp	/^float ImGui::GetScrollX()$/;"	f	class:ImGui	typeref:typename:float
GetScrollY	./imgui.cpp	/^float ImGui::GetScrollY()$/;"	f	class:ImGui	typeref:typename:float
GetSelectionEnd	./imgui_internal.h	/^    int         GetSelectionEnd() const     { return Stb.select_end; }$/;"	f	struct:ImGuiInputTextState	typeref:typename:int
GetSelectionStart	./imgui_internal.h	/^    int         GetSelectionStart() const   { return Stb.select_start; }$/;"	f	struct:ImGuiInputTextState	typeref:typename:int
GetShaderInfoLog	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLGETSHADERINFOLOGPROC         GetShaderInfoLog;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLGETSHADERINFOLOGPROC
GetShaderiv	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLGETSHADERIVPROC              GetShaderiv;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLGETSHADERIVPROC
GetShortcutRoutingData	./imgui.cpp	/^ImGuiKeyRoutingData* ImGui::GetShortcutRoutingData(ImGuiKeyChord key_chord)$/;"	f	class:ImGui	typeref:typename:ImGuiKeyRoutingData *
GetSize	./imgui_internal.h	/^    ImVec2      GetSize() const                     { return ImVec2(Max.x - Min.x, Max.y - Min.y/;"	f	struct:ImRect	typeref:typename:ImVec2
GetSkipItemForListClipping	./imgui.cpp	/^static bool GetSkipItemForListClipping()$/;"	f	typeref:typename:bool	file:
GetSpan	./imgui_internal.h	/^    inline void  GetSpan(int n, ImSpan<T>* span)    { span->set((T*)GetSpanPtrBegin(n), (T*)GetS/;"	f	struct:ImSpanAllocator	typeref:typename:void
GetSpanPtrBegin	./imgui_internal.h	/^    inline void* GetSpanPtrBegin(int n)             { IM_ASSERT(n >= 0 && n < CHUNKS && CurrIdx /;"	f	struct:ImSpanAllocator	typeref:typename:void *
GetSpanPtrEnd	./imgui_internal.h	/^    inline void* GetSpanPtrEnd(int n)               { IM_ASSERT(n >= 0 && n < CHUNKS && CurrIdx /;"	f	struct:ImSpanAllocator	typeref:typename:void *
GetState	./backends/imgui_impl_opengl3.cpp	/^    void GetState(GLint index)$/;"	f	struct:ImGui_ImplOpenGL3_VtxAttribState	typeref:typename:void	file:
GetStateStorage	./imgui.cpp	/^ImGuiStorage* ImGui::GetStateStorage()$/;"	f	class:ImGui	typeref:typename:ImGuiStorage *
GetStorageIdFromIndex	./imgui.h	/^    inline ImGuiID  GetStorageIdFromIndex(int idx)              { return AdapterIndexToStorageId/;"	f	struct:ImGuiSelectionBasicStorage	typeref:typename:ImGuiID
GetString	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLGETSTRINGPROC                GetString;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLGETSTRINGPROC
GetStringi	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLGETSTRINGIPROC               GetStringi;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLGETSTRINGIPROC
GetStyle	./imgui.cpp	/^ImGuiStyle& ImGui::GetStyle()$/;"	f	class:ImGui	typeref:typename:ImGuiStyle &
GetStyleColorName	./imgui.cpp	/^const char* ImGui::GetStyleColorName(ImGuiCol idx)$/;"	f	class:ImGui	typeref:typename:const char *
GetStyleColorVec4	./imgui.cpp	/^const ImVec4& ImGui::GetStyleColorVec4(ImGuiCol idx)$/;"	f	class:ImGui	typeref:typename:const ImVec4 &
GetStyleVarInfo	./imgui.cpp	/^const ImGuiDataVarInfo* ImGui::GetStyleVarInfo(ImGuiStyleVar idx)$/;"	f	class:ImGui	typeref:typename:const ImGuiDataVarInfo *
GetTL	./imgui_internal.h	/^    ImVec2      GetTL() const                       { return Min; }                   \/\/ Top-l/;"	f	struct:ImRect	typeref:typename:ImVec2
GetTR	./imgui_internal.h	/^    ImVec2      GetTR() const                       { return ImVec2(Max.x, Min.y); }  \/\/ Top-r/;"	f	struct:ImRect	typeref:typename:ImVec2
GetTabBarFromTabBarRef	./imgui_widgets.cpp	/^static ImGuiTabBar* GetTabBarFromTabBarRef(const ImGuiPtrOrIndex& ref)$/;"	f	typeref:typename:ImGuiTabBar *	file:
GetTabBarRefFromTabBar	./imgui_widgets.cpp	/^static ImGuiPtrOrIndex GetTabBarRefFromTabBar(ImGuiTabBar* tab_bar)$/;"	f	typeref:typename:ImGuiPtrOrIndex	file:
GetTabName	./imgui_demo.cpp	/^    void GetTabName(MyDocument* doc, char* out_buf, size_t out_buf_size)$/;"	f	struct:ExampleAppDocuments	typeref:typename:void	file:
GetTableRect	./imgui.cpp	/^        static ImRect GetTableRect(ImGuiTable* table, int rect_type, int n)$/;"	f	struct:ImGui::ShowMetricsWindow::Funcs	typeref:typename:ImRect	file:
GetTexDataAsAlpha8	./imgui_draw.cpp	/^void    ImFontAtlas::GetTexDataAsAlpha8(unsigned char** out_pixels, int* out_width, int* out_hei/;"	f	class:ImFontAtlas	typeref:typename:void
GetTexDataAsRGBA32	./imgui_draw.cpp	/^void    ImFontAtlas::GetTexDataAsRGBA32(unsigned char** out_pixels, int* out_width, int* out_hei/;"	f	class:ImFontAtlas	typeref:typename:void
GetTexID	./imgui.h	/^    inline ImTextureID GetTexID() const { return TextureId; }$/;"	f	struct:ImDrawCmd	typeref:typename:ImTextureID
GetTextLineHeight	./imgui.cpp	/^float ImGui::GetTextLineHeight()$/;"	f	class:ImGui	typeref:typename:float
GetTextLineHeightWithSpacing	./imgui.cpp	/^float ImGui::GetTextLineHeightWithSpacing()$/;"	f	class:ImGui	typeref:typename:float
GetTime	./imgui.cpp	/^double ImGui::GetTime()$/;"	f	class:ImGui	typeref:typename:double
GetTopMostAndVisiblePopupModal	./imgui.cpp	/^ImGuiWindow* ImGui::GetTopMostAndVisiblePopupModal()$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
GetTopMostPopupModal	./imgui.cpp	/^ImGuiWindow* ImGui::GetTopMostPopupModal()$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
GetTreeNodeToLabelSpacing	./imgui_widgets.cpp	/^float ImGui::GetTreeNodeToLabelSpacing()$/;"	f	class:ImGui	typeref:typename:float
GetTypematicRepeatRate	./imgui.cpp	/^void ImGui::GetTypematicRepeatRate(ImGuiInputFlags flags, float* repeat_delay, float* repeat_rat/;"	f	class:ImGui	typeref:typename:void
GetTypingSelectRequest	./imgui_widgets.cpp	/^ImGuiTypingSelectRequest* ImGui::GetTypingSelectRequest(ImGuiTypingSelectFlags flags)$/;"	f	class:ImGui	typeref:typename:ImGuiTypingSelectRequest *
GetUndoAvailCount	./imgui_internal.h	/^    int         GetUndoAvailCount() const   { return Stb.undostate.undo_point; }$/;"	f	struct:ImGuiInputTextState	typeref:typename:int
GetUniformLocation	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLGETUNIFORMLOCATIONPROC       GetUniformLocation;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLGETUNIFORMLOCATIONPROC
GetVarPtr	./imgui_internal.h	/^    void* GetVarPtr(void* parent) const { return (void*)((unsigned char*)parent + Offset); }$/;"	f	struct:ImGuiDataVarInfo	typeref:typename:void *
GetVersion	./imgui.cpp	/^const char* ImGui::GetVersion()$/;"	f	class:ImGui	typeref:typename:const char *
GetVertexAttribPointerv	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLGETVERTEXATTRIBPOINTERVPROC  GetVertexAttribPointerv;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLGETVERTEXATTRIBPOINTERVPROC
GetVertexAttribiv	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLGETVERTEXATTRIBIVPROC        GetVertexAttribiv;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLGETVERTEXATTRIBIVPROC
GetViewportBgFgDrawList	./imgui.cpp	/^static ImDrawList* GetViewportBgFgDrawList(ImGuiViewportP* viewport, size_t drawlist_no, const c/;"	f	typeref:typename:ImDrawList *	file:
GetVoidPtr	./imgui.cpp	/^void* ImGuiStorage::GetVoidPtr(ImGuiID key) const$/;"	f	class:ImGuiStorage	typeref:typename:void *
GetVoidPtrRef	./imgui.cpp	/^void** ImGuiStorage::GetVoidPtrRef(ImGuiID key, void* default_val)$/;"	f	class:ImGuiStorage	typeref:typename:void **
GetWidth	./imgui_internal.h	/^    float       GetWidth() const                    { return Max.x - Min.x; }$/;"	f	struct:ImRect	typeref:typename:float
GetWindowBgColorIdx	./imgui.cpp	/^static ImGuiCol GetWindowBgColorIdx(ImGuiWindow* window)$/;"	f	typeref:typename:ImGuiCol	file:
GetWindowContentRegionMax	./imgui.cpp	/^ImVec2 ImGui::GetWindowContentRegionMax()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetWindowContentRegionMin	./imgui.cpp	/^ImVec2 ImGui::GetWindowContentRegionMin()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetWindowDisplayLayer	./imgui.cpp	/^static inline int GetWindowDisplayLayer(ImGuiWindow* window)$/;"	f	typeref:typename:int	file:
GetWindowDrawList	./imgui.cpp	/^ImDrawList* ImGui::GetWindowDrawList()$/;"	f	class:ImGui	typeref:typename:ImDrawList *
GetWindowHeight	./imgui.cpp	/^float ImGui::GetWindowHeight()$/;"	f	class:ImGui	typeref:typename:float
GetWindowPos	./imgui.cpp	/^ImVec2 ImGui::GetWindowPos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetWindowRect	./imgui.cpp	/^        static ImRect GetWindowRect(ImGuiWindow* window, int rect_type)$/;"	f	struct:ImGui::ShowMetricsWindow::Funcs	typeref:typename:ImRect	file:
GetWindowResizeBorderID	./imgui.cpp	/^ImGuiID ImGui::GetWindowResizeBorderID(ImGuiWindow* window, ImGuiDir dir)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetWindowResizeCornerID	./imgui.cpp	/^ImGuiID ImGui::GetWindowResizeCornerID(ImGuiWindow* window, int n)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetWindowScrollbarID	./imgui_widgets.cpp	/^ImGuiID ImGui::GetWindowScrollbarID(ImGuiWindow* window, ImGuiAxis axis)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetWindowScrollbarRect	./imgui_widgets.cpp	/^ImRect ImGui::GetWindowScrollbarRect(ImGuiWindow* window, ImGuiAxis axis)$/;"	f	class:ImGui	typeref:typename:ImRect
GetWindowSize	./imgui.cpp	/^ImVec2 ImGui::GetWindowSize()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetWindowWidth	./imgui.cpp	/^float ImGui::GetWindowWidth()$/;"	f	class:ImGui	typeref:typename:float
GetWorkCenter	./imgui.h	/^    ImVec2              GetWorkCenter() const   { return ImVec2(WorkPos.x + WorkSize.x * 0.5f, W/;"	f	struct:ImGuiViewport	typeref:typename:ImVec2
GetWorkRect	./imgui_internal.h	/^    ImRect  GetWorkRect() const         { return ImRect(WorkPos.x, WorkPos.y, WorkPos.x + WorkSi/;"	f	struct:ImGuiViewportP	typeref:typename:ImRect
Getting Started	./docs/EXAMPLES.md	/^### Getting Started$/;"	S	section:Dear ImGui: Examples
Getting Started & General Advice	./docs/CONTRIBUTING.md	/^## Getting Started & General Advice$/;"	s	chapter:Contributing Guidelines
Getting Started & Integration	./docs/README.md	/^### Getting Started & Integration$/;"	S	chapter:Dear ImGui
GlProfileIsCompat	./backends/imgui_impl_opengl3.cpp	/^    bool            GlProfileIsCompat;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:bool	file:
GlProfileIsES2	./backends/imgui_impl_opengl3.cpp	/^    bool            GlProfileIsES2;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:bool	file:
GlProfileIsES3	./backends/imgui_impl_opengl3.cpp	/^    bool            GlProfileIsES3;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:bool	file:
GlProfileMask	./backends/imgui_impl_opengl3.cpp	/^    GLint           GlProfileMask;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLint	file:
GlVersion	./backends/imgui_impl_opengl3.cpp	/^    GLuint          GlVersion;               \/\/ Extracted at runtime using GL_MAJOR_VERSION, G/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLuint	file:
GlfwClientApi	./backends/imgui_impl_glfw.cpp	/^enum GlfwClientApi$/;"	g	file:
GlfwClientApi_OpenGL	./backends/imgui_impl_glfw.cpp	/^    GlfwClientApi_OpenGL,$/;"	e	enum:GlfwClientApi	file:
GlfwClientApi_Unknown	./backends/imgui_impl_glfw.cpp	/^    GlfwClientApi_Unknown,$/;"	e	enum:GlfwClientApi	file:
GlfwClientApi_Vulkan	./backends/imgui_impl_glfw.cpp	/^    GlfwClientApi_Vulkan,$/;"	e	enum:GlfwClientApi	file:
GlslVersionString	./backends/imgui_impl_opengl3.cpp	/^    char            GlslVersionString[32];   \/\/ Specified by user or detected based on compile/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:char[32]	file:
GlyphAdvanceX	./imgui.h	/^    float           GlyphAdvanceX;  \/\/ Input    \/\/ For custom font glyphs only: glyph xadvan/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:float
GlyphExtraSpacing	./imgui.h	/^    ImVec2          GlyphExtraSpacing;      \/\/ 0, 0     \/\/ Extra spacing (in pixels) between/;"	m	struct:ImFontConfig	typeref:typename:ImVec2
GlyphID	./imgui.h	/^    unsigned int    GlyphID;        \/\/ Input    \/\/ For custom font glyphs only (ID < 0x11000/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned int
GlyphInfo	./misc/freetype/imgui_freetype.cpp	/^    struct GlyphInfo$/;"	s	namespace:__anon21d590df0111	file:
GlyphMaxAdvanceX	./imgui.h	/^    float           GlyphMaxAdvanceX;       \/\/ FLT_MAX  \/\/ Maximum AdvanceX for glyphs$/;"	m	struct:ImFontConfig	typeref:typename:float
GlyphMinAdvanceX	./imgui.h	/^    float           GlyphMinAdvanceX;       \/\/ 0        \/\/ Minimum AdvanceX for glyphs, set /;"	m	struct:ImFontConfig	typeref:typename:float
GlyphOffset	./imgui.h	/^    ImVec2          GlyphOffset;            \/\/ 0, 0     \/\/ Offset all glyphs from this font /;"	m	struct:ImFontConfig	typeref:typename:ImVec2
GlyphOffset	./imgui.h	/^    ImVec2          GlyphOffset;    \/\/ Input    \/\/ For custom font glyphs only: glyph displa/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:ImVec2
GlyphRanges	./imgui.h	/^    const ImWchar*  GlyphRanges;            \/\/ NULL     \/\/ THE ARRAY DATA NEEDS TO PERSIST A/;"	m	struct:ImFontConfig	typeref:typename:const ImWchar *
Glyphs	./imgui.h	/^    ImVector<ImFontGlyph>       Glyphs;             \/\/ 12-16 \/\/ out \/\/            \/\/ All/;"	m	struct:ImFont	typeref:typename:ImVector<ImFontGlyph>
GlyphsCount	./imgui_draw.cpp	/^    int                 GlyphsCount;        \/\/ Glyph count (excluding missing glyphs and glyph/;"	m	struct:ImFontBuildSrcData	typeref:typename:int	file:
GlyphsCount	./imgui_draw.cpp	/^    int                 GlyphsCount;$/;"	m	struct:ImFontBuildDstData	typeref:typename:int	file:
GlyphsCount	./misc/freetype/imgui_freetype.cpp	/^    int                 GlyphsCount;        \/\/ Glyph count (excluding missing glyphs and glyph/;"	m	struct:ImFontBuildSrcDataFT	typeref:typename:int	file:
GlyphsCount	./misc/freetype/imgui_freetype.cpp	/^    int                 GlyphsCount;$/;"	m	struct:ImFontBuildDstDataFT	typeref:typename:int	file:
GlyphsHighest	./imgui_draw.cpp	/^    int                 GlyphsHighest;      \/\/ Highest requested codepoint$/;"	m	struct:ImFontBuildSrcData	typeref:typename:int	file:
GlyphsHighest	./imgui_draw.cpp	/^    int                 GlyphsHighest;$/;"	m	struct:ImFontBuildDstData	typeref:typename:int	file:
GlyphsHighest	./misc/freetype/imgui_freetype.cpp	/^    int                 GlyphsHighest;      \/\/ Highest requested codepoint$/;"	m	struct:ImFontBuildSrcDataFT	typeref:typename:int	file:
GlyphsHighest	./misc/freetype/imgui_freetype.cpp	/^    int                 GlyphsHighest;$/;"	m	struct:ImFontBuildDstDataFT	typeref:typename:int	file:
GlyphsList	./imgui_draw.cpp	/^    ImVector<int>       GlyphsList;         \/\/ Glyph codepoints list (flattened version of Gly/;"	m	struct:ImFontBuildSrcData	typeref:typename:ImVector<int>	file:
GlyphsList	./misc/freetype/imgui_freetype.cpp	/^    ImVector<ImFontBuildSrcGlyphFT>   GlyphsList;$/;"	m	struct:ImFontBuildSrcDataFT	typeref:typename:ImVector<ImFontBuildSrcGlyphFT>	file:
GlyphsSet	./imgui_draw.cpp	/^    ImBitVector         GlyphsSet;          \/\/ Glyph bit map (random access, 1-bit per codepoi/;"	m	struct:ImFontBuildSrcData	typeref:typename:ImBitVector	file:
GlyphsSet	./imgui_draw.cpp	/^    ImBitVector         GlyphsSet;          \/\/ This is used to resolve collision when multiple/;"	m	struct:ImFontBuildDstData	typeref:typename:ImBitVector	file:
GlyphsSet	./misc/freetype/imgui_freetype.cpp	/^    ImBitVector         GlyphsSet;          \/\/ Glyph bit map (random access, 1-bit per codepoi/;"	m	struct:ImFontBuildSrcDataFT	typeref:typename:ImBitVector	file:
GlyphsSet	./misc/freetype/imgui_freetype.cpp	/^    ImBitVector         GlyphsSet;          \/\/ This is used to resolve collision when multiple/;"	m	struct:ImFontBuildDstDataFT	typeref:typename:ImBitVector	file:
GrabMinSize	./imgui.h	/^    float       GrabMinSize;                \/\/ Minimum width\/height of a grab box for slider\//;"	m	struct:ImGuiStyle	typeref:typename:float
GrabRounding	./imgui.h	/^    float       GrabRounding;               \/\/ Radius of grabs corners rounding. Set to 0.0f t/;"	m	struct:ImGuiStyle	typeref:typename:float
GroupOffset	./imgui_internal.h	/^    ImVec1                  GroupOffset;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec1
GroupStack	./imgui_internal.h	/^    ImVector<ImGuiGroupData>        GroupStack;                 \/\/ Stack for BeginGroup()\/End/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiGroupData>
GrowIndex	./imgui_draw.cpp	/^void ImFont::GrowIndex(int new_size)$/;"	f	class:ImFont	typeref:typename:void
HSV	./imgui.h	/^    static ImColor HSV(float h, float s, float v, float a = 1.0f)   { float r, g, b; ImGui::Colo/;"	f	struct:ImColor	typeref:typename:ImColor
HasClipOrigin	./backends/imgui_impl_opengl3.cpp	/^    bool            HasClipOrigin;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:bool	file:
HasCloseButton	./imgui_internal.h	/^    bool                    HasCloseButton;                     \/\/ Set when the window has a c/;"	m	struct:ImGuiWindow	typeref:typename:bool
HasData	./imgui_demo.cpp	/^    bool                        HasData = false;    \/\/ All leaves have data$/;"	m	struct:ExampleTreeNode	typeref:typename:bool	file:
HasGamepad	./backends/imgui_impl_win32.cpp	/^    bool                        HasGamepad;$/;"	m	struct:ImGui_ImplWin32_Data	typeref:typename:bool	file:
HasPolygonMode	./backends/imgui_impl_opengl3.cpp	/^    bool            HasPolygonMode;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:bool	file:
HasScrollbarYCurr	./imgui_internal.h	/^    bool                        HasScrollbarYCurr;          \/\/ Whether ANY instance of this ta/;"	m	struct:ImGuiTable	typeref:typename:bool
HasScrollbarYPrev	./imgui_internal.h	/^    bool                        HasScrollbarYPrev;          \/\/ Whether ANY instance of this ta/;"	m	struct:ImGuiTable	typeref:typename:bool
HasSelection	./imgui.h	/^    bool                HasSelection() const    { return SelectionStart != SelectionEnd; }$/;"	f	struct:ImGuiInputTextCallbackData	typeref:typename:bool
HasSelection	./imgui_internal.h	/^    bool        HasSelection() const        { return Stb.select_start != Stb.select_end; }$/;"	f	struct:ImGuiInputTextState	typeref:typename:bool
Height	./backends/imgui_impl_vulkan.h	/^    int                 Height;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:int
Height	./imgui.h	/^    unsigned short  Width, Height;  \/\/ Input    \/\/ Desired rectangle dimension$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned short
Height	./misc/freetype/imgui_freetype.cpp	/^        int         Height;             \/\/ Glyph's height in pixels.$/;"	m	struct:__anon21d590df0111::GlyphInfo	typeref:typename:int	file:
HeldHeaderColumn	./imgui_internal.h	/^    ImGuiTableColumnIdx         HeldHeaderColumn;           \/\/ Index of column header being he/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
HelpMarker	./imgui_demo.cpp	/^static void HelpMarker(const char* desc)$/;"	f	typeref:typename:void	file:
Hidden	./imgui_internal.h	/^    bool                    Hidden;                             \/\/ Do not display (== HiddenFr/;"	m	struct:ImGuiWindow	typeref:typename:bool
HiddenFramesCanSkipItems	./imgui_internal.h	/^    ImS8                    HiddenFramesCanSkipItems;           \/\/ Hide the window for N frame/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
HiddenFramesCannotSkipItems	./imgui_internal.h	/^    ImS8                    HiddenFramesCannotSkipItems;        \/\/ Hide the window for N frame/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
HiddenFramesForRenderOnly	./imgui_internal.h	/^    ImS8                    HiddenFramesForRenderOnly;          \/\/ Hide the window until frame/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
HighlightColumnHeader	./imgui_internal.h	/^    ImGuiTableColumnIdx         HighlightColumnHeader;      \/\/ Index of column which should be/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
HighlightMonitorIdx	./imgui_internal.h	/^    int         HighlightMonitorIdx = -1;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:int
HighlightViewportID	./imgui_internal.h	/^    ImGuiID     HighlightViewportID = 0;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:ImGuiID
History	./imgui_demo.cpp	/^    ImVector<char*>       History;$/;"	m	struct:ExampleAppConsole	typeref:typename:ImVector<char * >	file:
HistoryPos	./imgui_demo.cpp	/^    int                   HistoryPos;    \/\/ -1: new line, 0..History.Size-1 browsing history.$/;"	m	struct:ExampleAppConsole	typeref:typename:int	file:
HitTestHoleOffset	./imgui_internal.h	/^    ImVec2ih                HitTestHoleOffset;$/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2ih
HitTestHoleSize	./imgui_internal.h	/^    ImVec2ih                HitTestHoleSize;                    \/\/ Define an optional rectangu/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2ih
HookId	./imgui_internal.h	/^    ImGuiID                     HookId;     \/\/ A unique ID assigned by AddContextHook()$/;"	m	struct:ImGuiContextHook	typeref:typename:ImGuiID
HookIdNext	./imgui_internal.h	/^    ImGuiID                             HookIdNext;             \/\/ Next available HookId$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
Hooks	./imgui_internal.h	/^    ImVector<ImGuiContextHook>          Hooks;                  \/\/ Hooks for extensions (e.g. /;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiContextHook>
HostBackupClipRect	./imgui_internal.h	/^    ImRect              HostBackupClipRect;     \/\/ Backup of ClipRect during PushColumnsBackgr/;"	m	struct:ImGuiOldColumns	typeref:typename:ImRect
HostBackupColumnsOffset	./imgui_internal.h	/^    ImVec1                      HostBackupColumnsOffset;    \/\/ Backup of OuterWindow->DC.Colum/;"	m	struct:ImGuiTableTempData	typeref:typename:ImVec1
HostBackupCurrLineSize	./imgui_internal.h	/^    ImVec2                      HostBackupCurrLineSize;     \/\/ Backup of InnerWindow->DC.CurrL/;"	m	struct:ImGuiTableTempData	typeref:typename:ImVec2
HostBackupCursorMaxPos	./imgui_internal.h	/^    ImVec2                      HostBackupCursorMaxPos;     \/\/ Backup of InnerWindow->DC.Curso/;"	m	struct:ImGuiTableTempData	typeref:typename:ImVec2
HostBackupInnerClipRect	./imgui_internal.h	/^    ImRect                      HostBackupInnerClipRect;    \/\/ Backup of InnerWindow->ClipRect/;"	m	struct:ImGuiTable	typeref:typename:ImRect
HostBackupItemWidth	./imgui_internal.h	/^    float                       HostBackupItemWidth;        \/\/ Backup of OuterWindow->DC.ItemW/;"	m	struct:ImGuiTableTempData	typeref:typename:float
HostBackupItemWidthStackSize	./imgui_internal.h	/^    int                         HostBackupItemWidthStackSize;\/\/Backup of OuterWindow->DC.ItemW/;"	m	struct:ImGuiTableTempData	typeref:typename:int
HostBackupParentWorkRect	./imgui_internal.h	/^    ImRect                      HostBackupParentWorkRect;   \/\/ Backup of InnerWindow->ParentWo/;"	m	struct:ImGuiTableTempData	typeref:typename:ImRect
HostBackupParentWorkRect	./imgui_internal.h	/^    ImRect              HostBackupParentWorkRect;\/\/Backup of WorkRect at the time of BeginColu/;"	m	struct:ImGuiOldColumns	typeref:typename:ImRect
HostBackupPrevLineSize	./imgui_internal.h	/^    ImVec2                      HostBackupPrevLineSize;     \/\/ Backup of InnerWindow->DC.PrevL/;"	m	struct:ImGuiTableTempData	typeref:typename:ImVec2
HostBackupWorkRect	./imgui_internal.h	/^    ImRect                      HostBackupWorkRect;         \/\/ Backup of InnerWindow->WorkRect/;"	m	struct:ImGuiTableTempData	typeref:typename:ImRect
HostClipRect	./imgui_internal.h	/^    ImRect                      HostClipRect;               \/\/ This is used to check if we can/;"	m	struct:ImGuiTable	typeref:typename:ImRect
HostCursorMaxPosX	./imgui_internal.h	/^    float               HostCursorMaxPosX;      \/\/ Backup of CursorMaxPos at the time of Begin/;"	m	struct:ImGuiOldColumns	typeref:typename:float
HostCursorPosY	./imgui_internal.h	/^    float               HostCursorPosY;         \/\/ Backup of CursorPos at the time of BeginCol/;"	m	struct:ImGuiOldColumns	typeref:typename:float
HostIndentX	./imgui_internal.h	/^    float                       HostIndentX;$/;"	m	struct:ImGuiTable	typeref:typename:float
HostInitialClipRect	./imgui_internal.h	/^    ImRect              HostInitialClipRect;    \/\/ Backup of ClipRect at the time of BeginColu/;"	m	struct:ImGuiOldColumns	typeref:typename:ImRect
HostSkipItems	./imgui_internal.h	/^    bool                        HostSkipItems;              \/\/ Backup of InnerWindow->SkipItem/;"	m	struct:ImGuiTable	typeref:typename:bool
HoverDelayNormal	./imgui.h	/^    float             HoverDelayNormal;         \/\/ Delay for IsItemHovered(ImGuiHoveredFlags_D/;"	m	struct:ImGuiStyle	typeref:typename:float
HoverDelayShort	./imgui.h	/^    float             HoverDelayShort;          \/\/ Delay for IsItemHovered(ImGuiHoveredFlags_D/;"	m	struct:ImGuiStyle	typeref:typename:float
HoverFlagsForTooltipMouse	./imgui.h	/^    ImGuiHoveredFlags HoverFlagsForTooltipMouse;\/\/ Default flags when using IsItemHovered(ImGu/;"	m	struct:ImGuiStyle	typeref:typename:ImGuiHoveredFlags
HoverFlagsForTooltipNav	./imgui.h	/^    ImGuiHoveredFlags HoverFlagsForTooltipNav;  \/\/ Default flags when using IsItemHovered(ImGu/;"	m	struct:ImGuiStyle	typeref:typename:ImGuiHoveredFlags
HoverItemDelayClearTimer	./imgui_internal.h	/^    float                   HoverItemDelayClearTimer;           \/\/ Currently used by IsItemHov/;"	m	struct:ImGuiContext	typeref:typename:float
HoverItemDelayId	./imgui_internal.h	/^    ImGuiID                 HoverItemDelayId;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
HoverItemDelayIdPreviousFrame	./imgui_internal.h	/^    ImGuiID                 HoverItemDelayIdPreviousFrame;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
HoverItemDelayTimer	./imgui_internal.h	/^    float                   HoverItemDelayTimer;                \/\/ Currently used by IsItemHov/;"	m	struct:ImGuiContext	typeref:typename:float
HoverItemUnlockedStationaryId	./imgui_internal.h	/^    ImGuiID                 HoverItemUnlockedStationaryId;      \/\/ Mouse has once been station/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
HoverStationaryDelay	./imgui.h	/^    float             HoverStationaryDelay;     \/\/ Delay for IsItemHovered(ImGuiHoveredFlags_S/;"	m	struct:ImGuiStyle	typeref:typename:float
HoverWindowUnlockedStationaryId	./imgui_internal.h	/^    ImGuiID                 HoverWindowUnlockedStationaryId;    \/\/ Mouse has once been station/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
HoveredColumnBody	./imgui_internal.h	/^    ImGuiTableColumnIdx         HoveredColumnBody;          \/\/ Index of column whose visible r/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
HoveredColumnBorder	./imgui_internal.h	/^    ImGuiTableColumnIdx         HoveredColumnBorder;        \/\/ Index of column whose right-bor/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
HoveredId	./imgui_internal.h	/^    ImGuiID                 HoveredId;                          \/\/ Hovered widget, filled duri/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
HoveredIdAllowOverlap	./imgui_internal.h	/^    bool                    HoveredIdAllowOverlap;$/;"	m	struct:ImGuiContext	typeref:typename:bool
HoveredIdIsDisabled	./imgui_internal.h	/^    bool                    HoveredIdIsDisabled;                \/\/ At least one widget passed /;"	m	struct:ImGuiContext	typeref:typename:bool
HoveredIdNotActiveTimer	./imgui_internal.h	/^    float                   HoveredIdNotActiveTimer;            \/\/ Measure contiguous hovering/;"	m	struct:ImGuiContext	typeref:typename:float
HoveredIdPreviousFrame	./imgui_internal.h	/^    ImGuiID                 HoveredIdPreviousFrame;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
HoveredIdTimer	./imgui_internal.h	/^    float                   HoveredIdTimer;                     \/\/ Measure contiguous hovering/;"	m	struct:ImGuiContext	typeref:typename:float
HoveredRowLast	./imgui_internal.h	/^    int                         HoveredRowLast;             \/\/ Index of row which was hovered /;"	m	struct:ImGuiTableInstanceData	typeref:typename:int
HoveredRowNext	./imgui_internal.h	/^    int                         HoveredRowNext;             \/\/ Index of row hovered this frame/;"	m	struct:ImGuiTableInstanceData	typeref:typename:int
HoveredWindow	./imgui_internal.h	/^    ImGuiWindow*            HoveredWindow;                      \/\/ Window the mouse is hoverin/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
HoveredWindowBeforeClear	./imgui_internal.h	/^    ImGuiWindow*            HoveredWindowBeforeClear;           \/\/ Window the mouse is hoverin/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
HoveredWindowUnderMovingWindow	./imgui_internal.h	/^    ImGuiWindow*            HoveredWindowUnderMovingWindow;     \/\/ Hovered window ignoring Mov/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
How it works	./docs/README.md	/^### How it works$/;"	S	chapter:Dear ImGui
How should I handle DPI in my application?	./docs/FONTS.md	/^## How should I handle DPI in my application?$/;"	s
How to Build	./examples/example_allegro5/README.md	/^# How to Build$/;"	c
How to Build	./examples/example_glfw_wgpu/README.md	/^## How to Build$/;"	s
How to Build	./examples/example_sdl2_opengl2/README.md	/^# How to Build$/;"	c
How to Build	./examples/example_sdl2_opengl3/README.md	/^# How to Build$/;"	c
How to Build	./examples/example_sdl2_sdlrenderer2/README.md	/^# How to Build$/;"	c
How to Build	./examples/example_sdl3_opengl3/README.md	/^# How to Build$/;"	c
How to Run	./examples/example_glfw_wgpu/README.md	/^## How to Run$/;"	s
How to help	./docs/README.md	/^How to help$/;"	s	chapter:Dear ImGui
How to open a Pull Request	./docs/CONTRIBUTING.md	/^## How to open a Pull Request$/;"	s	chapter:Contributing Guidelines
How to open an issue	./docs/CONTRIBUTING.md	/^## How to open an issue$/;"	s	chapter:Contributing Guidelines
ICON FONTS	./docs/FONTS.md	/^#### ICON FONTS$/;"	t	section:Font Links
ID	./imgui.h	/^    ImGuiID             ID;                     \/\/ Unique identifier for the viewport$/;"	m	struct:ImGuiViewport	typeref:typename:ImGuiID
ID	./imgui_demo.cpp	/^    ImGuiID ID;$/;"	m	struct:ExampleAsset	typeref:typename:ImGuiID	file:
ID	./imgui_demo.cpp	/^    int         ID;$/;"	m	struct:__anon38b7fb720511::MyItem	typeref:typename:int	file:
ID	./imgui_internal.h	/^    ImGuiID                     ID;                     \/\/ Set to 0 to invalidate\/delete the /;"	m	struct:ImGuiTableSettings	typeref:typename:ImGuiID
ID	./imgui_internal.h	/^    ImGuiID                     ID;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiID
ID	./imgui_internal.h	/^    ImGuiID                 ID;                                 \/\/ == ImHashStr(Name)$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
ID	./imgui_internal.h	/^    ImGuiID                 ID;                     \/\/ widget id owning the text state$/;"	m	struct:ImGuiInputTextState	typeref:typename:ImGuiID
ID	./imgui_internal.h	/^    ImGuiID                 ID;$/;"	m	struct:ImGuiBoxSelectState	typeref:typename:ImGuiID
ID	./imgui_internal.h	/^    ImGuiID                 ID;$/;"	m	struct:ImGuiLastItemData	typeref:typename:ImGuiID
ID	./imgui_internal.h	/^    ImGuiID                 ID;$/;"	m	struct:ImGuiMultiSelectState	typeref:typename:ImGuiID
ID	./imgui_internal.h	/^    ImGuiID                 ID;$/;"	m	struct:ImGuiStackLevelInfo	typeref:typename:ImGuiID
ID	./imgui_internal.h	/^    ImGuiID                 ID;$/;"	m	struct:ImGuiTreeNodeStackData	typeref:typename:ImGuiID
ID	./imgui_internal.h	/^    ImGuiID             ID;                     \/\/ Zero for tab-bars used by docking$/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
ID	./imgui_internal.h	/^    ImGuiID             ID;             \/\/ Init,Move    \/\/ Best candidate item ID$/;"	m	struct:ImGuiNavItemData	typeref:typename:ImGuiID
ID	./imgui_internal.h	/^    ImGuiID             ID;$/;"	m	struct:ImGuiFocusScopeData	typeref:typename:ImGuiID
ID	./imgui_internal.h	/^    ImGuiID             ID;$/;"	m	struct:ImGuiOldColumns	typeref:typename:ImGuiID
ID	./imgui_internal.h	/^    ImGuiID             ID;$/;"	m	struct:ImGuiTabItem	typeref:typename:ImGuiID
ID	./imgui_internal.h	/^    ImGuiID            ID;              \/\/ widget id owning the text state (which just got dea/;"	m	struct:ImGuiInputTextDeactivatedState	typeref:typename:ImGuiID
ID	./imgui_internal.h	/^    ImGuiID     ID;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:ImGuiID
IDStack	./imgui_internal.h	/^    ImVector<ImGuiID>       IDStack;                            \/\/ ID stack. ID are hashes see/;"	m	struct:ImGuiWindow	typeref:typename:ImVector<ImGuiID>
IMGL3W_IMPL	./backends/imgui_impl_opengl3.cpp	/^#define IMGL3W_IMPL$/;"	d	file:
IMGUI_API	./imgui.h	/^#define IMGUI_API$/;"	d
IMGUI_CDECL	./imgui_demo.cpp	/^#define IMGUI_CDECL /;"	d	file:
IMGUI_CDECL	./imgui_demo.cpp	/^#define IMGUI_CDECL$/;"	d	file:
IMGUI_CDECL	./imgui_internal.h	/^#define IMGUI_CDECL /;"	d
IMGUI_CDECL	./imgui_internal.h	/^#define IMGUI_CDECL$/;"	d
IMGUI_CHECKVERSION	./imgui.h	/^#define IMGUI_CHECKVERSION(/;"	d
IMGUI_COL_TO_DX9_ARGB	./backends/imgui_impl_dx9.cpp	/^#define IMGUI_COL_TO_DX9_ARGB(/;"	d	file:
IMGUI_DAWN_DIR	./examples/example_glfw_wgpu/CMakeLists.txt	/^  set(IMGUI_DAWN_DIR CACHE PATH "Path to Dawn repository")$/;"	v
IMGUI_DEBUG_LOG	./imgui.h	/^#define IMGUI_DEBUG_LOG(/;"	d
IMGUI_DEBUG_LOG	./imgui_internal.h	/^#define IMGUI_DEBUG_LOG(/;"	d
IMGUI_DEBUG_LOG_ACTIVEID	./imgui_internal.h	/^#define IMGUI_DEBUG_LOG_ACTIVEID(/;"	d
IMGUI_DEBUG_LOG_CLIPPER	./imgui_internal.h	/^#define IMGUI_DEBUG_LOG_CLIPPER(/;"	d
IMGUI_DEBUG_LOG_FOCUS	./imgui_internal.h	/^#define IMGUI_DEBUG_LOG_FOCUS(/;"	d
IMGUI_DEBUG_LOG_INPUTROUTING	./imgui_internal.h	/^#define IMGUI_DEBUG_LOG_INPUTROUTING(/;"	d
IMGUI_DEBUG_LOG_IO	./imgui_internal.h	/^#define IMGUI_DEBUG_LOG_IO(/;"	d
IMGUI_DEBUG_LOG_NAV	./imgui_internal.h	/^#define IMGUI_DEBUG_LOG_NAV(/;"	d
IMGUI_DEBUG_LOG_POPUP	./imgui_internal.h	/^#define IMGUI_DEBUG_LOG_POPUP(/;"	d
IMGUI_DEBUG_LOG_SELECTION	./imgui_internal.h	/^#define IMGUI_DEBUG_LOG_SELECTION(/;"	d
IMGUI_DEBUG_NAV_RECTS	./imgui.cpp	/^#define IMGUI_DEBUG_NAV_RECTS /;"	d	file:
IMGUI_DEBUG_NAV_SCORING	./imgui.cpp	/^#define IMGUI_DEBUG_NAV_SCORING /;"	d	file:
IMGUI_DEBUG_PRINTF	./imgui_internal.h	/^#define IMGUI_DEBUG_PRINTF(/;"	d
IMGUI_DEFINE_MATH_OPERATORS	./imgui.cpp	/^#define IMGUI_DEFINE_MATH_OPERATORS$/;"	d	file:
IMGUI_DEFINE_MATH_OPERATORS	./imgui_draw.cpp	/^#define IMGUI_DEFINE_MATH_OPERATORS$/;"	d	file:
IMGUI_DEFINE_MATH_OPERATORS	./imgui_tables.cpp	/^#define IMGUI_DEFINE_MATH_OPERATORS$/;"	d	file:
IMGUI_DEFINE_MATH_OPERATORS	./imgui_widgets.cpp	/^#define IMGUI_DEFINE_MATH_OPERATORS$/;"	d	file:
IMGUI_DEFINE_MATH_OPERATORS	./misc/single_file/imgui_single_file.h	/^#define IMGUI_DEFINE_MATH_OPERATORS$/;"	d
IMGUI_DEFINE_MATH_OPERATORS_IMPLEMENTED	./imgui.h	/^#define IMGUI_DEFINE_MATH_OPERATORS_IMPLEMENTED$/;"	d
IMGUI_DEMO_MARKER	./imgui_demo.cpp	/^#define IMGUI_DEMO_MARKER(/;"	d	file:
IMGUI_DIR	./examples/example_glfw_metal/Makefile	/^IMGUI_DIR = ..\/..$/;"	m
IMGUI_DIR	./examples/example_glfw_opengl2/Makefile	/^IMGUI_DIR = ..\/..$/;"	m
IMGUI_DIR	./examples/example_glfw_opengl3/Makefile	/^IMGUI_DIR = ..\/..$/;"	m
IMGUI_DIR	./examples/example_glfw_vulkan/CMakeLists.txt	/^set(IMGUI_DIR ..\/..\/)$/;"	v
IMGUI_DIR	./examples/example_glfw_wgpu/CMakeLists.txt	/^set(IMGUI_DIR ..\/..\/)$/;"	v
IMGUI_DIR	./examples/example_glut_opengl2/Makefile	/^IMGUI_DIR = ..\/..$/;"	m
IMGUI_DIR	./examples/example_null/Makefile	/^IMGUI_DIR = ..\/..$/;"	m
IMGUI_DIR	./examples/example_sdl2_metal/Makefile	/^IMGUI_DIR = ..\/..$/;"	m
IMGUI_DIR	./examples/example_sdl2_opengl2/Makefile	/^IMGUI_DIR = ..\/..$/;"	m
IMGUI_DIR	./examples/example_sdl2_opengl3/Makefile	/^IMGUI_DIR = ..\/..$/;"	m
IMGUI_DIR	./examples/example_sdl2_sdlrenderer2/Makefile	/^IMGUI_DIR = ..\/..$/;"	m
IMGUI_DIR	./examples/example_sdl3_opengl3/Makefile	/^IMGUI_DIR = ..\/..$/;"	m
IMGUI_DIR	./examples/example_sdl3_sdlrenderer3/Makefile	/^IMGUI_DIR = ..\/..$/;"	m
IMGUI_DISABLE_DEBUG_TOOLS	./imgui.h	/^#define IMGUI_DISABLE_DEBUG_TOOLS$/;"	d
IMGUI_DISABLE_DEFAULT_FILE_FUNCTIONS	./imgui_internal.h	/^#define IMGUI_DISABLE_DEFAULT_FILE_FUNCTIONS$/;"	d
IMGUI_DISABLE_DEFAULT_SHELL_FUNCTIONS	./imgui.cpp	/^#define IMGUI_DISABLE_DEFAULT_SHELL_FUNCTIONS$/;"	d	file:
IMGUI_DISABLE_OBSOLETE_KEYIO	./imgui.h	/^#define IMGUI_DISABLE_OBSOLETE_KEYIO$/;"	d
IMGUI_DISABLE_TTY_FUNCTIONS	./imgui_internal.h	/^#define IMGUI_DISABLE_TTY_FUNCTIONS /;"	d
IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCTIONS	./imgui.cpp	/^#define IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCTIONS$/;"	d	file:
IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS	./imgui.cpp	/^#define IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS$/;"	d	file:
IMGUI_DISABLE_WIN32_FUNCTIONS	./imgui.cpp	/^#define IMGUI_DISABLE_WIN32_FUNCTIONS$/;"	d	file:
IMGUI_EMSCRIPTEN_GLFW3	./examples/example_glfw_wgpu/CMakeLists.txt	/^    set(IMGUI_EMSCRIPTEN_GLFW3 "--use-port=contrib.glfw3" CACHE STRING "Choose between --use-por/;"	v
IMGUI_EMSCRIPTEN_GLFW3	./examples/example_glfw_wgpu/CMakeLists.txt	/^    set(IMGUI_EMSCRIPTEN_GLFW3 "-sUSE_GLFW=3" CACHE STRING "Use -sUSE_GLFW=3 for GLFW implementa/;"	v
IMGUI_ENABLE_SSE	./imgui_internal.h	/^#define IMGUI_ENABLE_SSE$/;"	d
IMGUI_ENABLE_STB_TRUETYPE	./imgui_internal.h	/^#define IMGUI_ENABLE_STB_TRUETYPE$/;"	d
IMGUI_HAS_TABLE	./imgui.h	/^#define IMGUI_HAS_TABLE$/;"	d
IMGUI_IMPL_API	./backends/imgui_impl_metal.h	/^IMGUI_IMPL_API bool ImGui_ImplMetal_CreateDeviceObjects(MTL::Device* device);$/;"	C	protocol:MTLDevice
IMGUI_IMPL_API	./backends/imgui_impl_metal.h	/^IMGUI_IMPL_API bool ImGui_ImplMetal_CreateDeviceObjects(id<MTLDevice> device);$/;"	C	protocol:MTLDevice
IMGUI_IMPL_API	./backends/imgui_impl_metal.h	/^IMGUI_IMPL_API void ImGui_ImplMetal_NewFrame(MTL::RenderPassDescriptor* renderPassDescriptor);$/;"	C	protocol:MTLDevice
IMGUI_IMPL_API	./backends/imgui_impl_metal.h	/^IMGUI_IMPL_API void ImGui_ImplMetal_NewFrame(MTLRenderPassDescriptor* renderPassDescriptor);$/;"	C	protocol:MTLDevice
IMGUI_IMPL_API	./imgui.h	/^#define IMGUI_IMPL_API /;"	d
IMGUI_IMPL_OPENGL_ES2	./backends/imgui_impl_opengl3.h	/^#define IMGUI_IMPL_OPENGL_ES2 /;"	d
IMGUI_IMPL_OPENGL_ES3	./backends/imgui_impl_opengl3.h	/^#define IMGUI_IMPL_OPENGL_ES3 /;"	d
IMGUI_IMPL_OPENGL_HAS_EXTENSIONS	./backends/imgui_impl_opengl3.cpp	/^#define IMGUI_IMPL_OPENGL_HAS_EXTENSIONS /;"	d	file:
IMGUI_IMPL_OPENGL_MAY_HAVE_BIND_BUFFER_PIXEL_UNPACK	./backends/imgui_impl_opengl3.cpp	/^#define IMGUI_IMPL_OPENGL_MAY_HAVE_BIND_BUFFER_PIXEL_UNPACK$/;"	d	file:
IMGUI_IMPL_OPENGL_MAY_HAVE_BIND_SAMPLER	./backends/imgui_impl_opengl3.cpp	/^#define IMGUI_IMPL_OPENGL_MAY_HAVE_BIND_SAMPLER$/;"	d	file:
IMGUI_IMPL_OPENGL_MAY_HAVE_POLYGON_MODE	./backends/imgui_impl_opengl3.cpp	/^#define IMGUI_IMPL_OPENGL_MAY_HAVE_POLYGON_MODE /;"	d	file:
IMGUI_IMPL_OPENGL_MAY_HAVE_PRIMITIVE_RESTART	./backends/imgui_impl_opengl3.cpp	/^#define IMGUI_IMPL_OPENGL_MAY_HAVE_PRIMITIVE_RESTART$/;"	d	file:
IMGUI_IMPL_OPENGL_MAY_HAVE_VTX_OFFSET	./backends/imgui_impl_opengl3.cpp	/^#define IMGUI_IMPL_OPENGL_MAY_HAVE_VTX_OFFSET$/;"	d	file:
IMGUI_IMPL_OPENGL_USE_VERTEX_ARRAY	./backends/imgui_impl_opengl3.cpp	/^#define IMGUI_IMPL_OPENGL_USE_VERTEX_ARRAY$/;"	d	file:
IMGUI_IMPL_VULKAN_HAS_DYNAMIC_RENDERING	./backends/imgui_impl_vulkan.h	/^#define IMGUI_IMPL_VULKAN_HAS_DYNAMIC_RENDERING$/;"	d
IMGUI_IMPL_VULKAN_USE_LOADER	./backends/imgui_impl_vulkan.cpp	/^#define IMGUI_IMPL_VULKAN_USE_LOADER$/;"	d	file:
IMGUI_PAYLOAD_TYPE_COLOR_3F	./imgui.h	/^#define IMGUI_PAYLOAD_TYPE_COLOR_3F /;"	d
IMGUI_PAYLOAD_TYPE_COLOR_4F	./imgui.h	/^#define IMGUI_PAYLOAD_TYPE_COLOR_4F /;"	d
IMGUI_STB_NAMESPACE	./imgui_draw.cpp	/^namespace IMGUI_STB_NAMESPACE$/;"	n	file:
IMGUI_TABLE_MAX_COLUMNS	./imgui_internal.h	/^#define IMGUI_TABLE_MAX_COLUMNS /;"	d
IMGUI_TEST_ENGINE_ITEM_ADD	./imgui_internal.h	/^#define IMGUI_TEST_ENGINE_ITEM_ADD(/;"	d
IMGUI_TEST_ENGINE_ITEM_INFO	./imgui_internal.h	/^#define IMGUI_TEST_ENGINE_ITEM_INFO(/;"	d
IMGUI_TEST_ENGINE_LOG	./imgui_internal.h	/^#define IMGUI_TEST_ENGINE_LOG(/;"	d
IMGUI_VERSION	./imgui.h	/^#define IMGUI_VERSION /;"	d
IMGUI_VERSION_NUM	./imgui.h	/^#define IMGUI_VERSION_NUM /;"	d
IMGUI_VIEWPORT_DEFAULT_ID	./imgui.cpp	/^const ImGuiID           IMGUI_VIEWPORT_DEFAULT_ID = 0x11111111; \/\/ Using an arbitrary constant/;"	v	namespace:ImGui	typeref:typename:const ImGuiID
IMGUI_VULKAN_FUNC_DEF	./backends/imgui_impl_vulkan.cpp	/^#define IMGUI_VULKAN_FUNC_DEF(/;"	d	file:
IMGUI_VULKAN_FUNC_LOAD	./backends/imgui_impl_vulkan.cpp	/^#define IMGUI_VULKAN_FUNC_LOAD(/;"	d	file:
IMGUI_VULKAN_FUNC_MAP	./backends/imgui_impl_vulkan.cpp	/^#define IMGUI_VULKAN_FUNC_MAP(IMGUI_VULKAN_FUNC_MAP_/;"	d	file:
IMSTB_TEXTEDIT_CHARTYPE	./imgui_internal.h	/^#define IMSTB_TEXTEDIT_CHARTYPE /;"	d
IMSTB_TEXTEDIT_CHARTYPE	./imstb_textedit.h	/^#define IMSTB_TEXTEDIT_CHARTYPE /;"	d
IMSTB_TEXTEDIT_GETWIDTH_NEWLINE	./imgui_internal.h	/^#define IMSTB_TEXTEDIT_GETWIDTH_NEWLINE /;"	d
IMSTB_TEXTEDIT_IMPLEMENTATION	./imgui_widgets.cpp	/^#define IMSTB_TEXTEDIT_IMPLEMENTATION$/;"	d	file:
IMSTB_TEXTEDIT_POSITIONTYPE	./imstb_textedit.h	/^#define IMSTB_TEXTEDIT_POSITIONTYPE /;"	d
IMSTB_TEXTEDIT_STRING	./imgui_internal.h	/^#define IMSTB_TEXTEDIT_STRING /;"	d
IMSTB_TEXTEDIT_UNDOCHARCOUNT	./imgui_internal.h	/^#define IMSTB_TEXTEDIT_UNDOCHARCOUNT /;"	d
IMSTB_TEXTEDIT_UNDOCHARCOUNT	./imstb_textedit.h	/^#define IMSTB_TEXTEDIT_UNDOCHARCOUNT /;"	d
IMSTB_TEXTEDIT_UNDOSTATECOUNT	./imgui_internal.h	/^#define IMSTB_TEXTEDIT_UNDOSTATECOUNT /;"	d
IMSTB_TEXTEDIT_UNDOSTATECOUNT	./imstb_textedit.h	/^#define IMSTB_TEXTEDIT_UNDOSTATECOUNT /;"	d
IMSTB_TEXTEDIT_memmove	./imgui_widgets.cpp	/^#define IMSTB_TEXTEDIT_memmove /;"	d	file:
IMSTB_TEXTEDIT_memmove	./imstb_textedit.h	/^#define IMSTB_TEXTEDIT_memmove /;"	d
IM_ALLOC	./imgui.h	/^#define IM_ALLOC(/;"	d
IM_ARRAYSIZE	./imgui.h	/^#define IM_ARRAYSIZE(/;"	d
IM_ASSERT	./imgui.h	/^#define IM_ASSERT(/;"	d
IM_ASSERT_PARANOID	./imgui_internal.h	/^#define IM_ASSERT_PARANOID(/;"	d
IM_ASSERT_USER_ERROR	./imgui_internal.h	/^#define IM_ASSERT_USER_ERROR(/;"	d
IM_BITARRAY_CLEARBIT	./imgui_internal.h	/^#define         IM_BITARRAY_CLEARBIT(/;"	d
IM_BITARRAY_TESTBIT	./imgui_internal.h	/^#define         IM_BITARRAY_TESTBIT(/;"	d
IM_CLAMP	./imgui_demo.cpp	/^#define IM_CLAMP(/;"	d	file:
IM_COL32	./imgui.h	/^#define IM_COL32(R,G,B,A)    (((ImU32)(A)<<IM_COL32_A_SHIFT) | ((ImU32)(B)<<IM_COL32_B_SHIFT) | /;"	d
IM_COL32_A_MASK	./imgui.h	/^#define IM_COL32_A_MASK /;"	d
IM_COL32_A_SHIFT	./imgui.h	/^#define IM_COL32_A_SHIFT /;"	d
IM_COL32_BLACK	./imgui.h	/^#define IM_COL32_BLACK /;"	d
IM_COL32_BLACK_TRANS	./imgui.h	/^#define IM_COL32_BLACK_TRANS /;"	d
IM_COL32_B_SHIFT	./imgui.h	/^#define IM_COL32_B_SHIFT /;"	d
IM_COL32_DISABLE	./imgui_internal.h	/^#define IM_COL32_DISABLE /;"	d
IM_COL32_G_SHIFT	./imgui.h	/^#define IM_COL32_G_SHIFT /;"	d
IM_COL32_R_SHIFT	./imgui.h	/^#define IM_COL32_R_SHIFT /;"	d
IM_COL32_WHITE	./imgui.h	/^#define IM_COL32_WHITE /;"	d
IM_DEBUG_BREAK	./imgui_internal.h	/^#define IM_DEBUG_BREAK()    IM_ASSERT(0)    \/\/ It is expected that you define IM_DEBUG_BREAK(/;"	d
IM_DEBUG_BREAK	./imgui_internal.h	/^#define IM_DEBUG_BREAK(/;"	d
IM_DELETE	./imgui.h	/^template<typename T> void IM_DELETE(T* p)   { if (p) { p->~T(); ImGui::MemFree(p); } }$/;"	f	typeref:typename:void
IM_DRAWLIST_ARCFAST_SAMPLE_MAX	./imgui_internal.h	/^#define IM_DRAWLIST_ARCFAST_SAMPLE_MAX /;"	d
IM_DRAWLIST_ARCFAST_TABLE_SIZE	./imgui_internal.h	/^#define IM_DRAWLIST_ARCFAST_TABLE_SIZE /;"	d
IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC	./imgui_internal.h	/^#define IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC(/;"	d
IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC_ERROR	./imgui_internal.h	/^#define IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC_ERROR(/;"	d
IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC_R	./imgui_internal.h	/^#define IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC_R(/;"	d
IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MAX	./imgui_internal.h	/^#define IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MAX /;"	d
IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MIN	./imgui_internal.h	/^#define IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MIN /;"	d
IM_DRAWLIST_TEX_LINES_WIDTH_MAX	./imgui.h	/^#define IM_DRAWLIST_TEX_LINES_WIDTH_MAX /;"	d
IM_F32_TO_INT8_SAT	./imgui_internal.h	/^#define IM_F32_TO_INT8_SAT(/;"	d
IM_F32_TO_INT8_UNBOUND	./imgui_internal.h	/^#define IM_F32_TO_INT8_UNBOUND(/;"	d
IM_FIXNORMAL2F	./imgui_draw.cpp	/^#define IM_FIXNORMAL2F(VX,VY)               { float d2 = VX*VX + VY*VY; if (d2 > 0.000001f) { fl/;"	d	file:
IM_FIXNORMAL2F_MAX_INVLEN2	./imgui_draw.cpp	/^#define IM_FIXNORMAL2F_MAX_INVLEN2 /;"	d	file:
IM_FLOOR	./imgui_internal.h	/^#define IM_FLOOR /;"	d
IM_FMTARGS	./imgui.h	/^#define IM_FMTARGS(/;"	d
IM_FMTLIST	./imgui.h	/^#define IM_FMTLIST(/;"	d
IM_FREE	./imgui.h	/^#define IM_FREE(/;"	d
IM_MAX	./backends/imgui_impl_vulkan.cpp	/^#define IM_MAX(/;"	d	file:
IM_MAX	./imgui_demo.cpp	/^#define IM_MAX(/;"	d	file:
IM_MEMALIGN	./imgui_internal.h	/^#define IM_MEMALIGN(/;"	d
IM_MIN	./imgui_demo.cpp	/^#define IM_MIN(/;"	d	file:
IM_MSVC_RUNTIME_CHECKS_OFF	./imgui.h	/^#define IM_MSVC_RUNTIME_CHECKS_OFF /;"	d
IM_MSVC_RUNTIME_CHECKS_OFF	./imgui.h	/^#define IM_MSVC_RUNTIME_CHECKS_OFF$/;"	d
IM_MSVC_RUNTIME_CHECKS_RESTORE	./imgui.h	/^#define IM_MSVC_RUNTIME_CHECKS_RESTORE /;"	d
IM_MSVC_RUNTIME_CHECKS_RESTORE	./imgui.h	/^#define IM_MSVC_RUNTIME_CHECKS_RESTORE$/;"	d
IM_MSVC_WARNING_SUPPRESS	./imgui_internal.h	/^#define IM_MSVC_WARNING_SUPPRESS(/;"	d
IM_NEW	./imgui.h	/^#define IM_NEW(/;"	d
IM_NEWLINE	./imgui_demo.cpp	/^#define IM_NEWLINE /;"	d	file:
IM_NEWLINE	./imgui_internal.h	/^#define IM_NEWLINE /;"	d
IM_NORMALIZE2F_OVER_ZERO	./imgui_draw.cpp	/^#define IM_NORMALIZE2F_OVER_ZERO(/;"	d	file:
IM_OFFSETOF	./imgui.h	/^#define IM_OFFSETOF(/;"	d
IM_PI	./imgui_internal.h	/^#define IM_PI /;"	d
IM_PLACEMENT_NEW	./imgui.h	/^#define IM_PLACEMENT_NEW(/;"	d
IM_PRIX64	./imgui_internal.h	/^#define IM_PRIX64 /;"	d
IM_PRId64	./imgui_internal.h	/^#define IM_PRId64 /;"	d
IM_PRIu64	./imgui_internal.h	/^#define IM_PRIu64 /;"	d
IM_ROUND	./imgui_internal.h	/^#define IM_ROUND(/;"	d
IM_ROUNDUP_TO_EVEN	./imgui_internal.h	/^#define IM_ROUNDUP_TO_EVEN(/;"	d
IM_S16_MAX	./imgui_widgets.cpp	/^static const signed short   IM_S16_MAX = 32767;$/;"	v	typeref:typename:const signed short	file:
IM_S16_MIN	./imgui_widgets.cpp	/^static const signed short   IM_S16_MIN = -32768;$/;"	v	typeref:typename:const signed short	file:
IM_S32_MAX	./imgui_widgets.cpp	/^static const ImS32          IM_S32_MAX = INT_MAX;    \/\/ (2147483647), (0x7FFFFFFF)$/;"	v	typeref:typename:const ImS32	file:
IM_S32_MIN	./imgui_widgets.cpp	/^static const ImS32          IM_S32_MIN = INT_MIN;    \/\/ (-2147483647 - 1), (0x80000000);$/;"	v	typeref:typename:const ImS32	file:
IM_S64_MAX	./imgui_widgets.cpp	/^static const ImS64          IM_S64_MAX = 9223372036854775807LL;$/;"	v	typeref:typename:const ImS64	file:
IM_S64_MAX	./imgui_widgets.cpp	/^static const ImS64          IM_S64_MAX = LLONG_MAX;  \/\/ (9223372036854775807ll);$/;"	v	typeref:typename:const ImS64	file:
IM_S64_MIN	./imgui_widgets.cpp	/^static const ImS64          IM_S64_MIN = -9223372036854775807LL - 1;$/;"	v	typeref:typename:const ImS64	file:
IM_S64_MIN	./imgui_widgets.cpp	/^static const ImS64          IM_S64_MIN = LLONG_MIN;  \/\/ (-9223372036854775807ll - 1ll);$/;"	v	typeref:typename:const ImS64	file:
IM_S8_MAX	./imgui_widgets.cpp	/^static const signed char    IM_S8_MAX  = 127;$/;"	v	typeref:typename:const signed char	file:
IM_S8_MIN	./imgui_widgets.cpp	/^static const signed char    IM_S8_MIN  = -128;$/;"	v	typeref:typename:const signed char	file:
IM_SATURATE	./backends/imgui_impl_win32.cpp	/^    #define IM_SATURATE(/;"	d	file:
IM_STATIC_ASSERT	./imgui_internal.h	/^#define IM_STATIC_ASSERT(/;"	d
IM_STRINGIFY	./imgui_internal.h	/^#define IM_STRINGIFY(_X)                IM_STRINGIFY_/;"	d
IM_STRINGIFY_HELPER	./imgui_internal.h	/^#define IM_STRINGIFY_HELPER(/;"	d
IM_TABSIZE	./imgui_internal.h	/^#define IM_TABSIZE /;"	d
IM_TRUNC	./imgui_internal.h	/^#define IM_TRUNC(/;"	d
IM_U16_MAX	./imgui_widgets.cpp	/^static const unsigned short IM_U16_MAX = 0xFFFF;$/;"	v	typeref:typename:const unsigned short	file:
IM_U16_MIN	./imgui_widgets.cpp	/^static const unsigned short IM_U16_MIN = 0;$/;"	v	typeref:typename:const unsigned short	file:
IM_U32_MAX	./imgui_widgets.cpp	/^static const ImU32          IM_U32_MAX = UINT_MAX;   \/\/ (0xFFFFFFFF)$/;"	v	typeref:typename:const ImU32	file:
IM_U32_MIN	./imgui_widgets.cpp	/^static const ImU32          IM_U32_MIN = 0;$/;"	v	typeref:typename:const ImU32	file:
IM_U64_MAX	./imgui_widgets.cpp	/^static const ImU64          IM_U64_MAX = (2ULL * 9223372036854775807LL + 1);$/;"	v	typeref:typename:const ImU64	file:
IM_U64_MAX	./imgui_widgets.cpp	/^static const ImU64          IM_U64_MAX = ULLONG_MAX; \/\/ (0xFFFFFFFFFFFFFFFFull);$/;"	v	typeref:typename:const ImU64	file:
IM_U64_MIN	./imgui_widgets.cpp	/^static const ImU64          IM_U64_MIN = 0;$/;"	v	typeref:typename:const ImU64	file:
IM_U8_MAX	./imgui_widgets.cpp	/^static const unsigned char  IM_U8_MAX  = 0xFF;$/;"	v	typeref:typename:const unsigned char	file:
IM_U8_MIN	./imgui_widgets.cpp	/^static const unsigned char  IM_U8_MIN  = 0;$/;"	v	typeref:typename:const unsigned char	file:
IM_UNICODE_CODEPOINT_INVALID	./imgui.h	/^#define IM_UNICODE_CODEPOINT_INVALID /;"	d
IM_UNICODE_CODEPOINT_MAX	./imgui.h	/^#define IM_UNICODE_CODEPOINT_MAX /;"	d
IM_UNUSED	./imgui.h	/^#define IM_UNUSED(/;"	d
IM_VK_KEYPAD_ENTER	./backends/imgui_impl_win32.cpp	/^#define IM_VK_KEYPAD_ENTER /;"	d	file:
INCLUDES	./examples/example_glfw_opengl2/build_win32.bat	/^@set INCLUDES=\/I..\\.. \/I..\\..\\backends \/I..\\libs\\glfw\\include$/;"	v
INCLUDES	./examples/example_glfw_opengl3/build_win32.bat	/^@set INCLUDES=\/I..\\.. \/I..\\..\\backends \/I..\\libs\\glfw\\include$/;"	v
INCLUDES	./examples/example_glfw_vulkan/build_win32.bat	/^@set INCLUDES=\/I..\\.. \/I..\\..\\backends \/I..\\libs\\glfw\\include \/I %VULKAN_SDK%\\include$/;"	v
INCLUDES	./examples/example_glfw_vulkan/build_win64.bat	/^@set INCLUDES=\/I..\\.. \/I..\\..\\backends \/I..\\libs\\glfw\\include \/I %VULKAN_SDK%\\include$/;"	v
INCLUDES	./examples/example_sdl2_directx11/build_win32.bat	/^@set INCLUDES=\/I..\\.. \/I..\\..\\backends \/I%SDL2_DIR%\\include \/I "%WindowsSdkDir%Include\\/;"	v
INCLUDES	./examples/example_sdl2_opengl2/build_win32.bat	/^@set INCLUDES=\/I..\\.. \/I..\\..\\backends \/I%SDL2_DIR%\\include$/;"	v
INCLUDES	./examples/example_sdl2_opengl3/build_win32.bat	/^@set INCLUDES=\/I..\\.. \/I..\\..\\backends \/I%SDL2_DIR%\\include$/;"	v
INCLUDES	./examples/example_sdl2_sdlrenderer2/build_win32.bat	/^@set INCLUDES=\/I..\\.. \/I..\\..\\backends \/I%SDL2_DIR%\\include$/;"	v
INCLUDES	./examples/example_sdl2_vulkan/build_win32.bat	/^@set INCLUDES=\/I..\\.. \/I..\\..\\backends \/I%SDL2_DIR%\\include \/I %VULKAN_SDK%\\include$/;"	v
INCLUDES	./examples/example_sdl3_opengl3/build_win32.bat	/^@set INCLUDES=\/I..\\.. \/I..\\..\\backends \/I%SDL3_DIR%\\include$/;"	v
INCLUDES	./examples/example_sdl3_sdlrenderer3/build_win32.bat	/^@set INCLUDES=\/I..\\.. \/I..\\..\\backends \/I%SDL3_DIR%\\include$/;"	v
INCLUDES	./examples/example_win32_directx10/build_win32.bat	/^@set INCLUDES=\/I..\\.. \/I..\\..\\backends \/I "%WindowsSdkDir%Include\\um" \/I "%WindowsSdkDir/;"	v
INCLUDES	./examples/example_win32_directx11/build_win32.bat	/^@set INCLUDES=\/I..\\.. \/I..\\..\\backends \/I "%WindowsSdkDir%Include\\um" \/I "%WindowsSdkDir/;"	v
INCLUDES	./examples/example_win32_directx12/build_win32.bat	/^@set INCLUDES=\/I..\\.. \/I..\\..\\backends \/I "%WindowsSdkDir%Include\\um" \/I "%WindowsSdkDir/;"	v
INCLUDES	./examples/example_win32_directx9/build_win32.bat	/^@set INCLUDES=\/I..\\.. \/I..\\..\\backends \/I "%DXSDK_DIR%\/Include"$/;"	v
INCLUDES	./examples/example_win32_opengl3/build_win32.bat	/^@set INCLUDES=\/I..\\.. \/I..\\..\\backends$/;"	v
INCLUDE_IMSTB_TEXTEDIT_H	./imstb_textedit.h	/^#define INCLUDE_IMSTB_TEXTEDIT_H$/;"	d
IO	./imgui_internal.h	/^    ImGuiIO                 IO;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiIO
IO	./imgui_internal.h	/^    ImGuiMultiSelectIO      IO;                 \/\/ MUST BE FIRST FIELD. Requests are set and r/;"	m	struct:ImGuiMultiSelectTempData	typeref:typename:ImGuiMultiSelectIO
IconHitSpacing	./imgui_demo.cpp	/^    int             IconHitSpacing = 4;         \/\/ Increase hit-spacing if you want to make it/;"	m	struct:ExampleAssetsBrowser	typeref:typename:int	file:
IconSize	./imgui_demo.cpp	/^    float           IconSize = 32.0f;$/;"	m	struct:ExampleAssetsBrowser	typeref:typename:float	file:
IconSpacing	./imgui_demo.cpp	/^    int             IconSpacing = 10;$/;"	m	struct:ExampleAssetsBrowser	typeref:typename:int	file:
IdealMaxPos	./imgui_internal.h	/^    ImVec2                  IdealMaxPos;            \/\/ Used to implicitly calculate ContentSiz/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
IdxBuffer	./imgui.h	/^    ImVector<ImDrawIdx>     IdxBuffer;          \/\/ Index buffer. Each command consume ImDrawCm/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImDrawIdx>
IdxOffset	./imgui.h	/^    unsigned int    IdxOffset;          \/\/ 4    \/\/ Start offset in index buffer.$/;"	m	struct:ImDrawCmd	typeref:typename:unsigned int
ImAbs	./imgui_internal.h	/^static inline double ImAbs(double x)            { return fabs(x); }$/;"	f	typeref:typename:double
ImAbs	./imgui_internal.h	/^static inline float  ImAbs(float x)             { return fabsf(x); }$/;"	f	typeref:typename:float
ImAbs	./imgui_internal.h	/^static inline int    ImAbs(int x)               { return x < 0 ? -x : x; }$/;"	f	typeref:typename:int
ImAcos	./imgui_internal.h	/^#define ImAcos(/;"	d
ImAcos01	./imgui_draw.cpp	/^static inline float ImAcos01(float x)$/;"	f	typeref:typename:float	file:
ImAddClampOverflow	./imgui_internal.h	/^template<typename T> static inline T ImAddClampOverflow(T a, T b, T mn, T mx)   { if (b < 0 && (/;"	f	typeref:typename:T
ImAlphaBlendColors	./imgui.cpp	/^IMGUI_API ImU32 ImAlphaBlendColors(ImU32 col_a, ImU32 col_b)$/;"	f	typeref:typename:IM_MSVC_RUNTIME_CHECKS_RESTORE IMGUI_API ImU32
ImAtan2	./imgui_internal.h	/^#define ImAtan2(/;"	d
ImAtof	./imgui_internal.h	/^#define ImAtof(/;"	d
ImAtoi	./imgui_widgets.cpp	/^static const char* ImAtoi(const char* src, TYPE* output)$/;"	f	typeref:typename:const char *	file:
ImBezierCubicCalc	./imgui_draw.cpp	/^ImVec2 ImBezierCubicCalc(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4,/;"	f	typeref:typename:ImVec2
ImBezierCubicClosestPoint	./imgui.cpp	/^ImVec2 ImBezierCubicClosestPoint(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImV/;"	f	typeref:typename:ImVec2
ImBezierCubicClosestPointCasteljau	./imgui.cpp	/^ImVec2 ImBezierCubicClosestPointCasteljau(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, /;"	f	typeref:typename:ImVec2
ImBezierCubicClosestPointCasteljauStep	./imgui.cpp	/^static void ImBezierCubicClosestPointCasteljauStep(const ImVec2& p, ImVec2& p_closest, ImVec2& p/;"	f	typeref:typename:void	file:
ImBezierQuadraticCalc	./imgui_draw.cpp	/^ImVec2 ImBezierQuadraticCalc(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, float t)$/;"	f	typeref:typename:ImVec2
ImBitArray	./imgui_internal.h	/^    ImBitArray()                                { ClearAllBits(); }$/;"	f	struct:ImBitArray
ImBitArray	./imgui_internal.h	/^struct ImBitArray$/;"	s
ImBitArrayClearAllBits	./imgui_internal.h	/^inline void     ImBitArrayClearAllBits(ImU32* arr, int bitcount){ memset(arr, 0, ImBitArrayGetSt/;"	f	typeref:typename:void
ImBitArrayClearBit	./imgui_internal.h	/^inline void     ImBitArrayClearBit(ImU32* arr, int n)           { ImU32 mask = (ImU32)1 << (n & /;"	f	typeref:typename:void
ImBitArrayForNamedKeys	./imgui_internal.h	/^typedef ImBitArray<ImGuiKey_NamedKey_COUNT, -ImGuiKey_NamedKey_BEGIN>    ImBitArrayForNamedKeys;$/;"	t	typeref:typename:ImBitArray<ImGuiKey_NamedKey_COUNT,-ImGuiKey_NamedKey_BEGIN>
ImBitArrayGetStorageSizeInBytes	./imgui_internal.h	/^inline size_t   ImBitArrayGetStorageSizeInBytes(int bitcount)   { return (size_t)((bitcount + 31/;"	f	typeref:typename:size_t
ImBitArrayPtr	./imgui_internal.h	/^typedef ImU32* ImBitArrayPtr; \/\/ Name for use in structs$/;"	t	typeref:typename:ImU32 *
ImBitArraySetBit	./imgui_internal.h	/^inline void     ImBitArraySetBit(ImU32* arr, int n)             { ImU32 mask = (ImU32)1 << (n & /;"	f	typeref:typename:void
ImBitArraySetBitRange	./imgui_internal.h	/^inline void     ImBitArraySetBitRange(ImU32* arr, int n, int n2) \/\/ Works on range [n..n2)$/;"	f	typeref:typename:void
ImBitArrayTestBit	./imgui_internal.h	/^inline bool     ImBitArrayTestBit(const ImU32* arr, int n)      { ImU32 mask = (ImU32)1 << (n & /;"	f	typeref:typename:bool
ImBitVector	./imgui_internal.h	/^struct IMGUI_API ImBitVector$/;"	s
ImCeil	./imgui_internal.h	/^#define ImCeil(/;"	d
ImCharIsBlankA	./imgui_internal.h	/^static inline bool      ImCharIsBlankA(char c)          { return c == ' ' || c == '\\t'; }$/;"	f	typeref:typename:bool
ImCharIsBlankW	./imgui_internal.h	/^static inline bool      ImCharIsBlankW(unsigned int c)  { return c == ' ' || c == '\\t' || c == /;"	f	typeref:typename:bool
ImCharIsXdigitA	./imgui_internal.h	/^static inline bool      ImCharIsXdigitA(char c)         { return (c >= '0' && c <= '9') || (c >=/;"	f	typeref:typename:bool
ImChunkStream	./imgui_internal.h	/^struct ImChunkStream$/;"	s
ImClamp	./imgui_internal.h	/^static inline ImVec2 ImClamp(const ImVec2& v, const ImVec2&mn, const ImVec2&mx) { return ImVec2(/;"	f	typeref:typename:ImVec2
ImClamp	./imgui_internal.h	/^template<typename T> static inline T ImClamp(T v, T mn, T mx)                   { return (v < mn/;"	f	typeref:typename:T
ImColor	./imgui.h	/^    constexpr ImColor()                                             { }$/;"	f	struct:ImColor
ImColor	./imgui.h	/^    constexpr ImColor(ImU32 rgba)                                   : Value((float)((rgba >> IM_/;"	f	struct:ImColor
ImColor	./imgui.h	/^    constexpr ImColor(const ImVec4& col)                            : Value(col) {}$/;"	f	struct:ImColor
ImColor	./imgui.h	/^    constexpr ImColor(float r, float g, float b, float a = 1.0f)    : Value(r, g, b, a) { }$/;"	f	struct:ImColor
ImColor	./imgui.h	/^    constexpr ImColor(int r, int g, int b, int a = 255)             : Value((float)r * (1.0f \/ /;"	f	struct:ImColor
ImColor	./imgui.h	/^struct ImColor$/;"	s
ImCos	./imgui_internal.h	/^#define ImCos(/;"	d
ImDot	./imgui_internal.h	/^static inline float  ImDot(const ImVec2& a, const ImVec2& b)                    { return a.x * b/;"	f	typeref:typename:float
ImDrawCallback	./imgui.h	/^typedef void (*ImDrawCallback)(const ImDrawList* parent_list, const ImDrawCmd* cmd);$/;"	t	typeref:typename:void (*)(const ImDrawList * parent_list,const ImDrawCmd * cmd)
ImDrawCallback_ResetRenderState	./imgui.h	/^#define ImDrawCallback_ResetRenderState /;"	d
ImDrawChannel	./imgui.h	/^struct ImDrawChannel$/;"	s
ImDrawCmd	./imgui.h	/^    ImDrawCmd() { memset(this, 0, sizeof(*this)); } \/\/ Also ensure our padding fields are zero/;"	f	struct:ImDrawCmd
ImDrawCmd	./imgui.h	/^struct ImDrawCmd$/;"	s
ImDrawCmdHeader	./imgui.h	/^struct ImDrawCmdHeader$/;"	s
ImDrawCmd_AreSequentialIdxOffset	./imgui_draw.cpp	/^#define ImDrawCmd_AreSequentialIdxOffset(/;"	d	file:
ImDrawCmd_HeaderCompare	./imgui_draw.cpp	/^#define ImDrawCmd_HeaderCompare(/;"	d	file:
ImDrawCmd_HeaderCopy	./imgui_draw.cpp	/^#define ImDrawCmd_HeaderCopy(/;"	d	file:
ImDrawCmd_HeaderSize	./imgui_draw.cpp	/^#define ImDrawCmd_HeaderSize /;"	d	file:
ImDrawData	./backends/imgui_impl_metal.h	/^IMGUI_IMPL_API void ImGui_ImplMetal_RenderDrawData(ImDrawData* drawData,$/;"	C	protocol:MTLDevice
ImDrawData	./backends/imgui_impl_metal.h	/^IMGUI_IMPL_API void ImGui_ImplMetal_RenderDrawData(ImDrawData* draw_data,$/;"	C	protocol:MTLDevice
ImDrawData	./imgui.h	/^    ImDrawData()    { Clear(); }$/;"	f	struct:ImDrawData
ImDrawData	./imgui.h	/^struct ImDrawData$/;"	s
ImDrawDataBuilder	./imgui_internal.h	/^    ImDrawDataBuilder()                     { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImDrawDataBuilder
ImDrawDataBuilder	./imgui_internal.h	/^struct ImDrawDataBuilder$/;"	s
ImDrawFlags	./imgui.h	/^typedef int ImDrawFlags;            \/\/ -> enum ImDrawFlags_          \/\/ Flags: for ImDrawLis/;"	t	typeref:typename:int
ImDrawFlags_	./imgui.h	/^enum ImDrawFlags_$/;"	g
ImDrawFlags_Closed	./imgui.h	/^    ImDrawFlags_Closed                      = 1 << 0, \/\/ PathStroke(), AddPolyline(): specify /;"	e	enum:ImDrawFlags_
ImDrawFlags_None	./imgui.h	/^    ImDrawFlags_None                        = 0,$/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersAll	./imgui.h	/^    ImDrawFlags_RoundCornersAll             = ImDrawFlags_RoundCornersTopLeft | ImDrawFlags_Roun/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersBottom	./imgui.h	/^    ImDrawFlags_RoundCornersBottom          = ImDrawFlags_RoundCornersBottomLeft | ImDrawFlags_R/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersBottomLeft	./imgui.h	/^    ImDrawFlags_RoundCornersBottomLeft      = 1 << 6, \/\/ AddRect(), AddRectFilled(), PathRect(/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersBottomRight	./imgui.h	/^    ImDrawFlags_RoundCornersBottomRight     = 1 << 7, \/\/ AddRect(), AddRectFilled(), PathRect(/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersDefault_	./imgui.h	/^    ImDrawFlags_RoundCornersDefault_        = ImDrawFlags_RoundCornersAll, \/\/ Default to ALL c/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersLeft	./imgui.h	/^    ImDrawFlags_RoundCornersLeft            = ImDrawFlags_RoundCornersBottomLeft | ImDrawFlags_R/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersMask_	./imgui.h	/^    ImDrawFlags_RoundCornersMask_           = ImDrawFlags_RoundCornersAll | ImDrawFlags_RoundCor/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersNone	./imgui.h	/^    ImDrawFlags_RoundCornersNone            = 1 << 8, \/\/ AddRect(), AddRectFilled(), PathRect(/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersRight	./imgui.h	/^    ImDrawFlags_RoundCornersRight           = ImDrawFlags_RoundCornersBottomRight | ImDrawFlags_/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersTop	./imgui.h	/^    ImDrawFlags_RoundCornersTop             = ImDrawFlags_RoundCornersTopLeft | ImDrawFlags_Roun/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersTopLeft	./imgui.h	/^    ImDrawFlags_RoundCornersTopLeft         = 1 << 4, \/\/ AddRect(), AddRectFilled(), PathRect(/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersTopRight	./imgui.h	/^    ImDrawFlags_RoundCornersTopRight        = 1 << 5, \/\/ AddRect(), AddRectFilled(), PathRect(/;"	e	enum:ImDrawFlags_
ImDrawIdx	./examples/example_allegro5/imconfig_allegro5.h	/^#define ImDrawIdx /;"	d
ImDrawIdx	./imgui.h	/^typedef unsigned short ImDrawIdx;   \/\/ Default: 16-bit (for maximum compatibility with rendere/;"	t	typeref:typename:unsigned short
ImDrawList	./imgui.h	/^    ImDrawList(ImDrawListSharedData* shared_data) { memset(this, 0, sizeof(*this)); _Data = shar/;"	f	struct:ImDrawList
ImDrawList	./imgui.h	/^struct ImDrawList$/;"	s
ImDrawListFlags	./imgui.h	/^typedef int ImDrawListFlags;        \/\/ -> enum ImDrawListFlags_      \/\/ Flags: for ImDrawLis/;"	t	typeref:typename:int
ImDrawListFlags_	./imgui.h	/^enum ImDrawListFlags_$/;"	g
ImDrawListFlags_AllowVtxOffset	./imgui.h	/^    ImDrawListFlags_AllowVtxOffset          = 1 << 3,  \/\/ Can emit 'VtxOffset > 0' to allow la/;"	e	enum:ImDrawListFlags_
ImDrawListFlags_AntiAliasedFill	./imgui.h	/^    ImDrawListFlags_AntiAliasedFill         = 1 << 2,  \/\/ Enable anti-aliased edge around fill/;"	e	enum:ImDrawListFlags_
ImDrawListFlags_AntiAliasedLines	./imgui.h	/^    ImDrawListFlags_AntiAliasedLines        = 1 << 0,  \/\/ Enable anti-aliased lines\/borders (/;"	e	enum:ImDrawListFlags_
ImDrawListFlags_AntiAliasedLinesUseTex	./imgui.h	/^    ImDrawListFlags_AntiAliasedLinesUseTex  = 1 << 1,  \/\/ Enable anti-aliased lines\/borders u/;"	e	enum:ImDrawListFlags_
ImDrawListFlags_None	./imgui.h	/^    ImDrawListFlags_None                    = 0,$/;"	e	enum:ImDrawListFlags_
ImDrawListSharedData	./imgui_draw.cpp	/^ImDrawListSharedData::ImDrawListSharedData()$/;"	f	class:ImDrawListSharedData
ImDrawListSharedData	./imgui_internal.h	/^struct IMGUI_API ImDrawListSharedData$/;"	s
ImDrawListSplitter	./imgui.h	/^    inline ImDrawListSplitter()  { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImDrawListSplitter
ImDrawListSplitter	./imgui.h	/^struct ImDrawListSplitter$/;"	s
ImDrawVert	./imgui.h	/^struct ImDrawVert$/;"	s
ImDrawVertAllegro	./backends/imgui_impl_allegro5.cpp	/^struct ImDrawVertAllegro$/;"	s	file:
ImExponentialMovingAverage	./imgui_internal.h	/^static inline float  ImExponentialMovingAverage(float avg, float sample, int n) { avg -= avg \/ /;"	f	typeref:typename:float
ImFabs	./imgui_internal.h	/^#define ImFabs(/;"	d
ImFileClose	./imgui.cpp	/^bool    ImFileClose(ImFileHandle f)     { return fclose(f) == 0; }$/;"	f	typeref:typename:bool
ImFileClose	./imgui_internal.h	/^static inline bool          ImFileClose(ImFileHandle)                               { return fal/;"	f	typeref:typename:bool
ImFileGetSize	./imgui.cpp	/^ImU64   ImFileGetSize(ImFileHandle f)   { long off = 0, sz = 0; return ((off = ftell(f)) != -1 &/;"	f	typeref:typename:ImU64
ImFileGetSize	./imgui_internal.h	/^static inline ImU64         ImFileGetSize(ImFileHandle)                             { return (Im/;"	f	typeref:typename:ImU64
ImFileHandle	./imgui_internal.h	/^typedef FILE* ImFileHandle;$/;"	t	typeref:typename:FILE *
ImFileHandle	./imgui_internal.h	/^typedef void* ImFileHandle;$/;"	t	typeref:typename:void *
ImFileLoadToMemory	./imgui.cpp	/^void*   ImFileLoadToMemory(const char* filename, const char* mode, size_t* out_file_size, int pa/;"	f	typeref:typename:void *
ImFileOpen	./imgui.cpp	/^ImFileHandle ImFileOpen(const char* filename, const char* mode)$/;"	f	typeref:typename:ImFileHandle
ImFileOpen	./imgui_internal.h	/^static inline ImFileHandle  ImFileOpen(const char*, const char*)                    { return NUL/;"	f	typeref:typename:ImFileHandle
ImFileRead	./imgui.cpp	/^ImU64   ImFileRead(void* data, ImU64 sz, ImU64 count, ImFileHandle f)           { return fread(d/;"	f	typeref:typename:ImU64
ImFileRead	./imgui_internal.h	/^static inline ImU64         ImFileRead(void*, ImU64, ImU64, ImFileHandle)           { return 0; /;"	f	typeref:typename:ImU64
ImFileWrite	./imgui.cpp	/^ImU64   ImFileWrite(const void* data, ImU64 sz, ImU64 count, ImFileHandle f)    { return fwrite(/;"	f	typeref:typename:ImU64
ImFileWrite	./imgui_internal.h	/^static inline ImU64         ImFileWrite(const void*, ImU64, ImU64, ImFileHandle)    { return 0; /;"	f	typeref:typename:ImU64
ImFloor	./imgui_internal.h	/^static inline ImVec2 ImFloor(const ImVec2& v)                                   { return ImVec2(/;"	f	typeref:typename:ImVec2
ImFloor	./imgui_internal.h	/^static inline float  ImFloor(float f)                                           { return (float)/;"	f	typeref:typename:float
ImFmod	./imgui_internal.h	/^#define ImFmod(/;"	d
ImFont	./imgui.h	/^struct ImFont$/;"	s
ImFont	./imgui_draw.cpp	/^ImFont::ImFont()$/;"	f	class:ImFont
ImFontAtlas	./imgui.h	/^struct ImFontAtlas$/;"	s
ImFontAtlas	./imgui_draw.cpp	/^ImFontAtlas::ImFontAtlas()$/;"	f	class:ImFontAtlas
ImFontAtlasBuildFinish	./imgui_draw.cpp	/^void ImFontAtlasBuildFinish(ImFontAtlas* atlas)$/;"	f	typeref:typename:void
ImFontAtlasBuildInit	./imgui_draw.cpp	/^void ImFontAtlasBuildInit(ImFontAtlas* atlas)$/;"	f	typeref:typename:void
ImFontAtlasBuildMultiplyCalcLookupTable	./imgui_draw.cpp	/^void    ImFontAtlasBuildMultiplyCalcLookupTable(unsigned char out_table[256], float in_brighten_/;"	f	typeref:typename:void
ImFontAtlasBuildMultiplyRectAlpha8	./imgui_draw.cpp	/^void    ImFontAtlasBuildMultiplyRectAlpha8(const unsigned char table[256], unsigned char* pixels/;"	f	typeref:typename:void
ImFontAtlasBuildPackCustomRects	./imgui_draw.cpp	/^void ImFontAtlasBuildPackCustomRects(ImFontAtlas* atlas, void* stbrp_context_opaque)$/;"	f	typeref:typename:void
ImFontAtlasBuildRender32bppRectFromString	./imgui_draw.cpp	/^void ImFontAtlasBuildRender32bppRectFromString(ImFontAtlas* atlas, int x, int y, int w, int h, c/;"	f	typeref:typename:void
ImFontAtlasBuildRender8bppRectFromString	./imgui_draw.cpp	/^void ImFontAtlasBuildRender8bppRectFromString(ImFontAtlas* atlas, int x, int y, int w, int h, co/;"	f	typeref:typename:void
ImFontAtlasBuildRenderDefaultTexData	./imgui_draw.cpp	/^static void ImFontAtlasBuildRenderDefaultTexData(ImFontAtlas* atlas)$/;"	f	typeref:typename:void	file:
ImFontAtlasBuildRenderLinesTexData	./imgui_draw.cpp	/^static void ImFontAtlasBuildRenderLinesTexData(ImFontAtlas* atlas)$/;"	f	typeref:typename:void	file:
ImFontAtlasBuildSetupFont	./imgui_draw.cpp	/^void ImFontAtlasBuildSetupFont(ImFontAtlas* atlas, ImFont* font, ImFontConfig* font_config, floa/;"	f	typeref:typename:void
ImFontAtlasBuildWithFreeType	./misc/freetype/imgui_freetype.cpp	/^static bool ImFontAtlasBuildWithFreeType(ImFontAtlas* atlas)$/;"	f	typeref:typename:bool	file:
ImFontAtlasBuildWithFreeTypeEx	./misc/freetype/imgui_freetype.cpp	/^bool ImFontAtlasBuildWithFreeTypeEx(FT_Library ft_library, ImFontAtlas* atlas, unsigned int extr/;"	f	typeref:typename:bool
ImFontAtlasBuildWithStbTruetype	./imgui_draw.cpp	/^static bool ImFontAtlasBuildWithStbTruetype(ImFontAtlas* atlas)$/;"	f	typeref:typename:bool	file:
ImFontAtlasCustomRect	./imgui.h	/^    ImFontAtlasCustomRect()         { Width = Height = 0; X = Y = 0xFFFF; GlyphID = 0; GlyphAdva/;"	f	struct:ImFontAtlasCustomRect
ImFontAtlasCustomRect	./imgui.h	/^struct ImFontAtlasCustomRect$/;"	s
ImFontAtlasFlags	./imgui.h	/^typedef int ImFontAtlasFlags;       \/\/ -> enum ImFontAtlasFlags_     \/\/ Flags: for ImFontAtl/;"	t	typeref:typename:int
ImFontAtlasFlags_	./imgui.h	/^enum ImFontAtlasFlags_$/;"	g
ImFontAtlasFlags_NoBakedLines	./imgui.h	/^    ImFontAtlasFlags_NoBakedLines       = 1 << 2,   \/\/ Don't build thick line textures into th/;"	e	enum:ImFontAtlasFlags_
ImFontAtlasFlags_NoMouseCursors	./imgui.h	/^    ImFontAtlasFlags_NoMouseCursors     = 1 << 1,   \/\/ Don't build software mouse cursors into/;"	e	enum:ImFontAtlasFlags_
ImFontAtlasFlags_NoPowerOfTwoHeight	./imgui.h	/^    ImFontAtlasFlags_NoPowerOfTwoHeight = 1 << 0,   \/\/ Don't round the height to next power of/;"	e	enum:ImFontAtlasFlags_
ImFontAtlasFlags_None	./imgui.h	/^    ImFontAtlasFlags_None               = 0,$/;"	e	enum:ImFontAtlasFlags_
ImFontAtlasGetBuilderForStbTruetype	./imgui_draw.cpp	/^const ImFontBuilderIO* ImFontAtlasGetBuilderForStbTruetype()$/;"	f	typeref:typename:const ImFontBuilderIO *
ImFontAtlasUpdateConfigDataPointers	./imgui_draw.cpp	/^void ImFontAtlasUpdateConfigDataPointers(ImFontAtlas* atlas)$/;"	f	typeref:typename:void
ImFontBuildDstData	./imgui_draw.cpp	/^struct ImFontBuildDstData$/;"	s	file:
ImFontBuildDstDataFT	./misc/freetype/imgui_freetype.cpp	/^struct ImFontBuildDstDataFT$/;"	s	file:
ImFontBuildSrcData	./imgui_draw.cpp	/^struct ImFontBuildSrcData$/;"	s	file:
ImFontBuildSrcDataFT	./misc/freetype/imgui_freetype.cpp	/^struct ImFontBuildSrcDataFT$/;"	s	file:
ImFontBuildSrcGlyphFT	./misc/freetype/imgui_freetype.cpp	/^    ImFontBuildSrcGlyphFT() { memset((void*)this, 0, sizeof(*this)); }$/;"	f	struct:ImFontBuildSrcGlyphFT	file:
ImFontBuildSrcGlyphFT	./misc/freetype/imgui_freetype.cpp	/^struct ImFontBuildSrcGlyphFT$/;"	s	file:
ImFontBuilderIO	./imgui_internal.h	/^struct ImFontBuilderIO$/;"	s
ImFontConfig	./imgui.h	/^struct ImFontConfig$/;"	s
ImFontConfig	./imgui_draw.cpp	/^ImFontConfig::ImFontConfig()$/;"	f	class:ImFontConfig
ImFontGlyph	./imgui.h	/^struct ImFontGlyph$/;"	s
ImFontGlyphRangesBuilder	./imgui.h	/^    ImFontGlyphRangesBuilder()              { Clear(); }$/;"	f	struct:ImFontGlyphRangesBuilder
ImFontGlyphRangesBuilder	./imgui.h	/^struct ImFontGlyphRangesBuilder$/;"	s
ImFormatString	./imgui.cpp	/^int ImFormatString(char* buf, size_t buf_size, const char* fmt, ...)$/;"	f	typeref:typename:int
ImFormatStringToTempBuffer	./imgui.cpp	/^void ImFormatStringToTempBuffer(const char** out_buf, const char** out_buf_end, const char* fmt,/;"	f	typeref:typename:void
ImFormatStringToTempBufferV	./imgui.cpp	/^void ImFormatStringToTempBufferV(const char** out_buf, const char** out_buf_end, const char* fmt/;"	f	typeref:typename:void
ImFormatStringV	./imgui.cpp	/^int ImFormatStringV(char* buf, size_t buf_size, const char* fmt, va_list args)$/;"	f	typeref:typename:int
ImGL3WProcs	./backends/imgui_impl_opengl3_loader.h	/^union ImGL3WProcs {$/;"	u
ImGetDirQuadrantFromDelta	./imgui.cpp	/^static ImGuiDir ImGetDirQuadrantFromDelta(float dx, float dy)$/;"	f	typeref:typename:ImGuiDir	file:
ImGui	./imgui.cpp	/^namespace ImGui$/;"	n	file:
ImGui	./imgui.h	/^namespace ImGui$/;"	n
ImGui	./imgui_demo.cpp	/^namespace ImGui { IMGUI_API void ShowFontAtlas(ImFontAtlas* atlas); }$/;"	n	file:
ImGui	./imgui_internal.h	/^namespace ImGui$/;"	n
ImGui	./imgui_widgets.cpp	/^namespace ImGui$/;"	n	file:
ImGui	./misc/cpp/imgui_stdlib.h	/^namespace ImGui$/;"	n
ImGuiActivateFlags	./imgui_internal.h	/^typedef int ImGuiActivateFlags;         \/\/ -> enum ImGuiActivateFlags_      \/\/ Flags: for na/;"	t	typeref:typename:int
ImGuiActivateFlags_	./imgui_internal.h	/^enum ImGuiActivateFlags_$/;"	g
ImGuiActivateFlags_FromShortcut	./imgui_internal.h	/^    ImGuiActivateFlags_FromShortcut         = 1 << 4,       \/\/ Activation requested by an item/;"	e	enum:ImGuiActivateFlags_
ImGuiActivateFlags_FromTabbing	./imgui_internal.h	/^    ImGuiActivateFlags_FromTabbing          = 1 << 3,       \/\/ Activation requested by a tabbi/;"	e	enum:ImGuiActivateFlags_
ImGuiActivateFlags_None	./imgui_internal.h	/^    ImGuiActivateFlags_None                 = 0,$/;"	e	enum:ImGuiActivateFlags_
ImGuiActivateFlags_PreferInput	./imgui_internal.h	/^    ImGuiActivateFlags_PreferInput          = 1 << 0,       \/\/ Favor activation that requires /;"	e	enum:ImGuiActivateFlags_
ImGuiActivateFlags_PreferTweak	./imgui_internal.h	/^    ImGuiActivateFlags_PreferTweak          = 1 << 1,       \/\/ Favor activation for tweaking w/;"	e	enum:ImGuiActivateFlags_
ImGuiActivateFlags_TryToPreserveState	./imgui_internal.h	/^    ImGuiActivateFlags_TryToPreserveState   = 1 << 2,       \/\/ Request widget to preserve stat/;"	e	enum:ImGuiActivateFlags_
ImGuiAxis	./imgui_internal.h	/^enum ImGuiAxis$/;"	g
ImGuiAxis_None	./imgui_internal.h	/^    ImGuiAxis_None = -1,$/;"	e	enum:ImGuiAxis
ImGuiAxis_X	./imgui_internal.h	/^    ImGuiAxis_X = 0,$/;"	e	enum:ImGuiAxis
ImGuiAxis_Y	./imgui_internal.h	/^    ImGuiAxis_Y = 1$/;"	e	enum:ImGuiAxis
ImGuiBackendFlags	./imgui.h	/^typedef int ImGuiBackendFlags;      \/\/ -> enum ImGuiBackendFlags_    \/\/ Flags: for io.Backen/;"	t	typeref:typename:int
ImGuiBackendFlags_	./imgui.h	/^enum ImGuiBackendFlags_$/;"	g
ImGuiBackendFlags_HasGamepad	./imgui.h	/^    ImGuiBackendFlags_HasGamepad            = 1 << 0,   \/\/ Backend Platform supports gamepad a/;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_HasMouseCursors	./imgui.h	/^    ImGuiBackendFlags_HasMouseCursors       = 1 << 1,   \/\/ Backend Platform supports honoring /;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_HasSetMousePos	./imgui.h	/^    ImGuiBackendFlags_HasSetMousePos        = 1 << 2,   \/\/ Backend Platform supports io.WantSe/;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_None	./imgui.h	/^    ImGuiBackendFlags_None                  = 0,$/;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_RendererHasVtxOffset	./imgui.h	/^    ImGuiBackendFlags_RendererHasVtxOffset  = 1 << 3,   \/\/ Backend Renderer supports ImDrawCmd/;"	e	enum:ImGuiBackendFlags_
ImGuiBoxSelectState	./imgui_internal.h	/^    ImGuiBoxSelectState()   { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiBoxSelectState
ImGuiBoxSelectState	./imgui_internal.h	/^struct ImGuiBoxSelectState$/;"	s
ImGuiButtonFlags	./imgui.h	/^typedef int ImGuiButtonFlags;       \/\/ -> enum ImGuiButtonFlags_     \/\/ Flags: for Invisible/;"	t	typeref:typename:int
ImGuiButtonFlagsPrivate_	./imgui_internal.h	/^enum ImGuiButtonFlagsPrivate_$/;"	g
ImGuiButtonFlags_	./imgui.h	/^enum ImGuiButtonFlags_$/;"	g
ImGuiButtonFlags_AlignTextBaseLine	./imgui_internal.h	/^    ImGuiButtonFlags_AlignTextBaseLine      = 1 << 15,  \/\/ vertically align button to match te/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_AllowOverlap	./imgui_internal.h	/^    ImGuiButtonFlags_AllowOverlap           = 1 << 12,  \/\/ require previous frame HoveredId to/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_DontClosePopups	./imgui_internal.h	/^    ImGuiButtonFlags_DontClosePopups        = 1 << 13,  \/\/ disable automatically closing paren/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_FlattenChildren	./imgui_internal.h	/^    ImGuiButtonFlags_FlattenChildren        = 1 << 11,  \/\/ allow interactions even if a child /;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_MouseButtonLeft	./imgui.h	/^    ImGuiButtonFlags_MouseButtonLeft        = 1 << 0,   \/\/ React on left mouse button (default/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_MouseButtonMask_	./imgui.h	/^    ImGuiButtonFlags_MouseButtonMask_       = ImGuiButtonFlags_MouseButtonLeft | ImGuiButtonFlag/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_MouseButtonMiddle	./imgui.h	/^    ImGuiButtonFlags_MouseButtonMiddle      = 1 << 2,   \/\/ React on center mouse button$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_MouseButtonRight	./imgui.h	/^    ImGuiButtonFlags_MouseButtonRight       = 1 << 1,   \/\/ React on right mouse button$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_NoHoldingActiveId	./imgui_internal.h	/^    ImGuiButtonFlags_NoHoldingActiveId      = 1 << 17,  \/\/ don't set ActiveId while holding th/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_NoHoveredOnFocus	./imgui_internal.h	/^    ImGuiButtonFlags_NoHoveredOnFocus       = 1 << 19,  \/\/ don't report as hovered when nav fo/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_NoKeyModifiers	./imgui_internal.h	/^    ImGuiButtonFlags_NoKeyModifiers         = 1 << 16,  \/\/ disable mouse interaction if a key /;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_NoNavFocus	./imgui_internal.h	/^    ImGuiButtonFlags_NoNavFocus             = 1 << 18,  \/\/ don't override navigation focus whe/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_NoSetKeyOwner	./imgui_internal.h	/^    ImGuiButtonFlags_NoSetKeyOwner          = 1 << 20,  \/\/ don't set key\/input owner on the i/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_NoTestKeyOwner	./imgui_internal.h	/^    ImGuiButtonFlags_NoTestKeyOwner         = 1 << 21,  \/\/ don't test key\/input owner when po/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_None	./imgui.h	/^    ImGuiButtonFlags_None                   = 0,$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_PressedOnClick	./imgui_internal.h	/^    ImGuiButtonFlags_PressedOnClick         = 1 << 4,   \/\/ return true on click (mouse down ev/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnClickRelease	./imgui_internal.h	/^    ImGuiButtonFlags_PressedOnClickRelease  = 1 << 5,   \/\/ [Default] return true on click + re/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnClickReleaseAnywhere	./imgui_internal.h	/^    ImGuiButtonFlags_PressedOnClickReleaseAnywhere = 1 << 6, \/\/ return true on click + release/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnDefault_	./imgui_internal.h	/^    ImGuiButtonFlags_PressedOnDefault_      = ImGuiButtonFlags_PressedOnClickRelease,$/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnDoubleClick	./imgui_internal.h	/^    ImGuiButtonFlags_PressedOnDoubleClick   = 1 << 8,   \/\/ return true on double-click (defaul/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnDragDropHold	./imgui_internal.h	/^    ImGuiButtonFlags_PressedOnDragDropHold  = 1 << 9,   \/\/ return true when held into while we/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnMask_	./imgui_internal.h	/^    ImGuiButtonFlags_PressedOnMask_         = ImGuiButtonFlags_PressedOnClick | ImGuiButtonFlags/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnRelease	./imgui_internal.h	/^    ImGuiButtonFlags_PressedOnRelease       = 1 << 7,   \/\/ return true on release (default req/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_Repeat	./imgui_internal.h	/^    ImGuiButtonFlags_Repeat                 = 1 << 10,  \/\/ hold to repeat$/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiChildFlags	./imgui.h	/^typedef int ImGuiChildFlags;        \/\/ -> enum ImGuiChildFlags_      \/\/ Flags: for BeginChil/;"	t	typeref:typename:int
ImGuiChildFlags_	./imgui.h	/^enum ImGuiChildFlags_$/;"	g
ImGuiChildFlags_AlwaysAutoResize	./imgui.h	/^    ImGuiChildFlags_AlwaysAutoResize        = 1 << 6,   \/\/ Combined with AutoResizeX\/AutoResi/;"	e	enum:ImGuiChildFlags_
ImGuiChildFlags_AlwaysUseWindowPadding	./imgui.h	/^    ImGuiChildFlags_AlwaysUseWindowPadding  = 1 << 1,   \/\/ Pad with style.WindowPadding even i/;"	e	enum:ImGuiChildFlags_
ImGuiChildFlags_AutoResizeX	./imgui.h	/^    ImGuiChildFlags_AutoResizeX             = 1 << 4,   \/\/ Enable auto-resizing width. Read "I/;"	e	enum:ImGuiChildFlags_
ImGuiChildFlags_AutoResizeY	./imgui.h	/^    ImGuiChildFlags_AutoResizeY             = 1 << 5,   \/\/ Enable auto-resizing height. Read "/;"	e	enum:ImGuiChildFlags_
ImGuiChildFlags_Border	./imgui.h	/^    ImGuiChildFlags_Border                  = 1 << 0,   \/\/ Show an outer border and enable Win/;"	e	enum:ImGuiChildFlags_
ImGuiChildFlags_FrameStyle	./imgui.h	/^    ImGuiChildFlags_FrameStyle              = 1 << 7,   \/\/ Style the child window like a frame/;"	e	enum:ImGuiChildFlags_
ImGuiChildFlags_NavFlattened	./imgui.h	/^    ImGuiChildFlags_NavFlattened            = 1 << 8,   \/\/ [BETA] Share focus scope, allow gam/;"	e	enum:ImGuiChildFlags_
ImGuiChildFlags_None	./imgui.h	/^    ImGuiChildFlags_None                    = 0,$/;"	e	enum:ImGuiChildFlags_
ImGuiChildFlags_ResizeX	./imgui.h	/^    ImGuiChildFlags_ResizeX                 = 1 << 2,   \/\/ Allow resize from right border (lay/;"	e	enum:ImGuiChildFlags_
ImGuiChildFlags_ResizeY	./imgui.h	/^    ImGuiChildFlags_ResizeY                 = 1 << 3,   \/\/ Allow resize from bottom border (la/;"	e	enum:ImGuiChildFlags_
ImGuiCol	./imgui.h	/^typedef int ImGuiCol;               \/\/ -> enum ImGuiCol_             \/\/ Enum: A color identi/;"	t	typeref:typename:int
ImGuiCol_	./imgui.h	/^enum ImGuiCol_$/;"	g
ImGuiCol_Border	./imgui.h	/^    ImGuiCol_Border,$/;"	e	enum:ImGuiCol_
ImGuiCol_BorderShadow	./imgui.h	/^    ImGuiCol_BorderShadow,$/;"	e	enum:ImGuiCol_
ImGuiCol_Button	./imgui.h	/^    ImGuiCol_Button,$/;"	e	enum:ImGuiCol_
ImGuiCol_ButtonActive	./imgui.h	/^    ImGuiCol_ButtonActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_ButtonHovered	./imgui.h	/^    ImGuiCol_ButtonHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_COUNT	./imgui.h	/^    ImGuiCol_COUNT,$/;"	e	enum:ImGuiCol_
ImGuiCol_CheckMark	./imgui.h	/^    ImGuiCol_CheckMark,             \/\/ Checkbox tick and RadioButton circle$/;"	e	enum:ImGuiCol_
ImGuiCol_ChildBg	./imgui.h	/^    ImGuiCol_ChildBg,               \/\/ Background of child windows$/;"	e	enum:ImGuiCol_
ImGuiCol_DragDropTarget	./imgui.h	/^    ImGuiCol_DragDropTarget,        \/\/ Rectangle highlighting a drop target$/;"	e	enum:ImGuiCol_
ImGuiCol_FrameBg	./imgui.h	/^    ImGuiCol_FrameBg,               \/\/ Background of checkbox, radio button, plot, slider, tex/;"	e	enum:ImGuiCol_
ImGuiCol_FrameBgActive	./imgui.h	/^    ImGuiCol_FrameBgActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_FrameBgHovered	./imgui.h	/^    ImGuiCol_FrameBgHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_Header	./imgui.h	/^    ImGuiCol_Header,                \/\/ Header* colors are used for CollapsingHeader, TreeNode,/;"	e	enum:ImGuiCol_
ImGuiCol_HeaderActive	./imgui.h	/^    ImGuiCol_HeaderActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_HeaderHovered	./imgui.h	/^    ImGuiCol_HeaderHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_MenuBarBg	./imgui.h	/^    ImGuiCol_MenuBarBg,$/;"	e	enum:ImGuiCol_
ImGuiCol_ModalWindowDimBg	./imgui.h	/^    ImGuiCol_ModalWindowDimBg,      \/\/ Darken\/colorize entire screen behind a modal window, w/;"	e	enum:ImGuiCol_
ImGuiCol_NavHighlight	./imgui.h	/^    ImGuiCol_NavHighlight,          \/\/ Gamepad\/keyboard: current highlighted item$/;"	e	enum:ImGuiCol_
ImGuiCol_NavWindowingDimBg	./imgui.h	/^    ImGuiCol_NavWindowingDimBg,     \/\/ Darken\/colorize entire screen behind the CTRL+TAB wind/;"	e	enum:ImGuiCol_
ImGuiCol_NavWindowingHighlight	./imgui.h	/^    ImGuiCol_NavWindowingHighlight, \/\/ Highlight window when using CTRL+TAB$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotHistogram	./imgui.h	/^    ImGuiCol_PlotHistogram,$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotHistogramHovered	./imgui.h	/^    ImGuiCol_PlotHistogramHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotLines	./imgui.h	/^    ImGuiCol_PlotLines,$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotLinesHovered	./imgui.h	/^    ImGuiCol_PlotLinesHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_PopupBg	./imgui.h	/^    ImGuiCol_PopupBg,               \/\/ Background of popups, menus, tooltips windows$/;"	e	enum:ImGuiCol_
ImGuiCol_ResizeGrip	./imgui.h	/^    ImGuiCol_ResizeGrip,            \/\/ Resize grip in lower-right and lower-left corners of wi/;"	e	enum:ImGuiCol_
ImGuiCol_ResizeGripActive	./imgui.h	/^    ImGuiCol_ResizeGripActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_ResizeGripHovered	./imgui.h	/^    ImGuiCol_ResizeGripHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarBg	./imgui.h	/^    ImGuiCol_ScrollbarBg,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarGrab	./imgui.h	/^    ImGuiCol_ScrollbarGrab,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarGrabActive	./imgui.h	/^    ImGuiCol_ScrollbarGrabActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarGrabHovered	./imgui.h	/^    ImGuiCol_ScrollbarGrabHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_Separator	./imgui.h	/^    ImGuiCol_Separator,$/;"	e	enum:ImGuiCol_
ImGuiCol_SeparatorActive	./imgui.h	/^    ImGuiCol_SeparatorActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_SeparatorHovered	./imgui.h	/^    ImGuiCol_SeparatorHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_SliderGrab	./imgui.h	/^    ImGuiCol_SliderGrab,$/;"	e	enum:ImGuiCol_
ImGuiCol_SliderGrabActive	./imgui.h	/^    ImGuiCol_SliderGrabActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_Tab	./imgui.h	/^    ImGuiCol_Tab,                   \/\/ Tab background, when tab-bar is focused & tab is unsele/;"	e	enum:ImGuiCol_
ImGuiCol_TabActive	./imgui.h	/^    ImGuiCol_TabActive = ImGuiCol_TabSelected,                  \/\/ [renamed in 1.90.9]$/;"	e	enum:ImGuiCol_
ImGuiCol_TabDimmed	./imgui.h	/^    ImGuiCol_TabDimmed,             \/\/ Tab background, when tab-bar is unfocused & tab is unse/;"	e	enum:ImGuiCol_
ImGuiCol_TabDimmedSelected	./imgui.h	/^    ImGuiCol_TabDimmedSelected,     \/\/ Tab background, when tab-bar is unfocused & tab is sele/;"	e	enum:ImGuiCol_
ImGuiCol_TabDimmedSelectedOverline	./imgui.h	/^    ImGuiCol_TabDimmedSelectedOverline,\/\/..horizontal overline, when tab-bar is unfocused & ta/;"	e	enum:ImGuiCol_
ImGuiCol_TabHovered	./imgui.h	/^    ImGuiCol_TabHovered,            \/\/ Tab background, when hovered$/;"	e	enum:ImGuiCol_
ImGuiCol_TabSelected	./imgui.h	/^    ImGuiCol_TabSelected,           \/\/ Tab background, when tab-bar is focused & tab is select/;"	e	enum:ImGuiCol_
ImGuiCol_TabSelectedOverline	./imgui.h	/^    ImGuiCol_TabSelectedOverline,   \/\/ Tab horizontal overline, when tab-bar is focused & tab /;"	e	enum:ImGuiCol_
ImGuiCol_TabUnfocused	./imgui.h	/^    ImGuiCol_TabUnfocused = ImGuiCol_TabDimmed,                 \/\/ [renamed in 1.90.9]$/;"	e	enum:ImGuiCol_
ImGuiCol_TabUnfocusedActive	./imgui.h	/^    ImGuiCol_TabUnfocusedActive = ImGuiCol_TabDimmedSelected,   \/\/ [renamed in 1.90.9]$/;"	e	enum:ImGuiCol_
ImGuiCol_TableBorderLight	./imgui.h	/^    ImGuiCol_TableBorderLight,      \/\/ Table inner borders (prefer using Alpha=1.0 here)$/;"	e	enum:ImGuiCol_
ImGuiCol_TableBorderStrong	./imgui.h	/^    ImGuiCol_TableBorderStrong,     \/\/ Table outer and header borders (prefer using Alpha=1.0 /;"	e	enum:ImGuiCol_
ImGuiCol_TableHeaderBg	./imgui.h	/^    ImGuiCol_TableHeaderBg,         \/\/ Table header background$/;"	e	enum:ImGuiCol_
ImGuiCol_TableRowBg	./imgui.h	/^    ImGuiCol_TableRowBg,            \/\/ Table row background (even rows)$/;"	e	enum:ImGuiCol_
ImGuiCol_TableRowBgAlt	./imgui.h	/^    ImGuiCol_TableRowBgAlt,         \/\/ Table row background (odd rows)$/;"	e	enum:ImGuiCol_
ImGuiCol_Text	./imgui.h	/^    ImGuiCol_Text,$/;"	e	enum:ImGuiCol_
ImGuiCol_TextDisabled	./imgui.h	/^    ImGuiCol_TextDisabled,$/;"	e	enum:ImGuiCol_
ImGuiCol_TextLink	./imgui.h	/^    ImGuiCol_TextLink,              \/\/ Hyperlink color$/;"	e	enum:ImGuiCol_
ImGuiCol_TextSelectedBg	./imgui.h	/^    ImGuiCol_TextSelectedBg,$/;"	e	enum:ImGuiCol_
ImGuiCol_TitleBg	./imgui.h	/^    ImGuiCol_TitleBg,               \/\/ Title bar$/;"	e	enum:ImGuiCol_
ImGuiCol_TitleBgActive	./imgui.h	/^    ImGuiCol_TitleBgActive,         \/\/ Title bar when focused$/;"	e	enum:ImGuiCol_
ImGuiCol_TitleBgCollapsed	./imgui.h	/^    ImGuiCol_TitleBgCollapsed,      \/\/ Title bar when collapsed$/;"	e	enum:ImGuiCol_
ImGuiCol_WindowBg	./imgui.h	/^    ImGuiCol_WindowBg,              \/\/ Background of normal windows$/;"	e	enum:ImGuiCol_
ImGuiColorEditFlags	./imgui.h	/^typedef int ImGuiColorEditFlags;    \/\/ -> enum ImGuiColorEditFlags_  \/\/ Flags: for ColorEdit/;"	t	typeref:typename:int
ImGuiColorEditFlags_	./imgui.h	/^enum ImGuiColorEditFlags_$/;"	g
ImGuiColorEditFlags_AlphaBar	./imgui.h	/^    ImGuiColorEditFlags_AlphaBar        = 1 << 16,  \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_AlphaPreview	./imgui.h	/^    ImGuiColorEditFlags_AlphaPreview    = 1 << 17,  \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_AlphaPreviewHalf	./imgui.h	/^    ImGuiColorEditFlags_AlphaPreviewHalf= 1 << 18,  \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DataTypeMask_	./imgui.h	/^    ImGuiColorEditFlags_DataTypeMask_   = ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_Float,$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DefaultOptions_	./imgui.h	/^    ImGuiColorEditFlags_DefaultOptions_ = ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_Displa/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DisplayHSV	./imgui.h	/^    ImGuiColorEditFlags_DisplayHSV      = 1 << 21,  \/\/ [Display]    \/\/ "$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DisplayHex	./imgui.h	/^    ImGuiColorEditFlags_DisplayHex      = 1 << 22,  \/\/ [Display]    \/\/ "$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DisplayMask_	./imgui.h	/^    ImGuiColorEditFlags_DisplayMask_    = ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_D/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DisplayRGB	./imgui.h	/^    ImGuiColorEditFlags_DisplayRGB      = 1 << 20,  \/\/ [Display]    \/\/ ColorEdit: override _/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_Float	./imgui.h	/^    ImGuiColorEditFlags_Float           = 1 << 24,  \/\/ [DataType]   \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_HDR	./imgui.h	/^    ImGuiColorEditFlags_HDR             = 1 << 19,  \/\/              \/\/ (WIP) ColorEdit: Curr/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_InputHSV	./imgui.h	/^    ImGuiColorEditFlags_InputHSV        = 1 << 28,  \/\/ [Input]      \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_InputMask_	./imgui.h	/^    ImGuiColorEditFlags_InputMask_      = ImGuiColorEditFlags_InputRGB | ImGuiColorEditFlags_Inp/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_InputRGB	./imgui.h	/^    ImGuiColorEditFlags_InputRGB        = 1 << 27,  \/\/ [Input]      \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoAlpha	./imgui.h	/^    ImGuiColorEditFlags_NoAlpha         = 1 << 1,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoBorder	./imgui.h	/^    ImGuiColorEditFlags_NoBorder        = 1 << 10,  \/\/              \/\/ ColorButton: disable /;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoDragDrop	./imgui.h	/^    ImGuiColorEditFlags_NoDragDrop      = 1 << 9,   \/\/              \/\/ ColorEdit: disable dr/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoInputs	./imgui.h	/^    ImGuiColorEditFlags_NoInputs        = 1 << 5,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoLabel	./imgui.h	/^    ImGuiColorEditFlags_NoLabel         = 1 << 7,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoOptions	./imgui.h	/^    ImGuiColorEditFlags_NoOptions       = 1 << 3,   \/\/              \/\/ ColorEdit: disable to/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoPicker	./imgui.h	/^    ImGuiColorEditFlags_NoPicker        = 1 << 2,   \/\/              \/\/ ColorEdit: disable pi/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoSidePreview	./imgui.h	/^    ImGuiColorEditFlags_NoSidePreview   = 1 << 8,   \/\/              \/\/ ColorPicker: disable /;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoSmallPreview	./imgui.h	/^    ImGuiColorEditFlags_NoSmallPreview  = 1 << 4,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoTooltip	./imgui.h	/^    ImGuiColorEditFlags_NoTooltip       = 1 << 6,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_None	./imgui.h	/^    ImGuiColorEditFlags_None            = 0,$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_PickerHueBar	./imgui.h	/^    ImGuiColorEditFlags_PickerHueBar    = 1 << 25,  \/\/ [Picker]     \/\/ ColorPicker: bar for /;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_PickerHueWheel	./imgui.h	/^    ImGuiColorEditFlags_PickerHueWheel  = 1 << 26,  \/\/ [Picker]     \/\/ ColorPicker: wheel fo/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_PickerMask_	./imgui.h	/^    ImGuiColorEditFlags_PickerMask_     = ImGuiColorEditFlags_PickerHueWheel | ImGuiColorEditFla/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_Uint8	./imgui.h	/^    ImGuiColorEditFlags_Uint8           = 1 << 23,  \/\/ [DataType]   \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorMod	./imgui_internal.h	/^struct ImGuiColorMod$/;"	s
ImGuiComboFlags	./imgui.h	/^typedef int ImGuiComboFlags;        \/\/ -> enum ImGuiComboFlags_      \/\/ Flags: for BeginComb/;"	t	typeref:typename:int
ImGuiComboFlagsPrivate_	./imgui_internal.h	/^enum ImGuiComboFlagsPrivate_$/;"	g
ImGuiComboFlags_	./imgui.h	/^enum ImGuiComboFlags_$/;"	g
ImGuiComboFlags_CustomPreview	./imgui_internal.h	/^    ImGuiComboFlags_CustomPreview           = 1 << 20,  \/\/ enable BeginComboPreview()$/;"	e	enum:ImGuiComboFlagsPrivate_
ImGuiComboFlags_HeightLarge	./imgui.h	/^    ImGuiComboFlags_HeightLarge             = 1 << 3,   \/\/ Max ~20 items visible$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightLargest	./imgui.h	/^    ImGuiComboFlags_HeightLargest           = 1 << 4,   \/\/ As many fitting items as possible$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightMask_	./imgui.h	/^    ImGuiComboFlags_HeightMask_             = ImGuiComboFlags_HeightSmall | ImGuiComboFlags_Heig/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightRegular	./imgui.h	/^    ImGuiComboFlags_HeightRegular           = 1 << 2,   \/\/ Max ~8 items visible (default)$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightSmall	./imgui.h	/^    ImGuiComboFlags_HeightSmall             = 1 << 1,   \/\/ Max ~4 items visible. Tip: If you w/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_NoArrowButton	./imgui.h	/^    ImGuiComboFlags_NoArrowButton           = 1 << 5,   \/\/ Display on the preview box without /;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_NoPreview	./imgui.h	/^    ImGuiComboFlags_NoPreview               = 1 << 6,   \/\/ Display only a square arrow button$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_None	./imgui.h	/^    ImGuiComboFlags_None                    = 0,$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_PopupAlignLeft	./imgui.h	/^    ImGuiComboFlags_PopupAlignLeft          = 1 << 0,   \/\/ Align the popup toward the left by /;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_WidthFitPreview	./imgui.h	/^    ImGuiComboFlags_WidthFitPreview         = 1 << 7,   \/\/ Width dynamically calculated from p/;"	e	enum:ImGuiComboFlags_
ImGuiComboPreviewData	./imgui_internal.h	/^    ImGuiComboPreviewData() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiComboPreviewData
ImGuiComboPreviewData	./imgui_internal.h	/^struct IMGUI_API ImGuiComboPreviewData$/;"	s
ImGuiCond	./imgui.h	/^typedef int ImGuiCond;              \/\/ -> enum ImGuiCond_            \/\/ Enum: A condition fo/;"	t	typeref:typename:int
ImGuiCond_	./imgui.h	/^enum ImGuiCond_$/;"	g
ImGuiCond_Always	./imgui.h	/^    ImGuiCond_Always        = 1 << 0,   \/\/ No condition (always set the variable), same as _No/;"	e	enum:ImGuiCond_
ImGuiCond_Appearing	./imgui.h	/^    ImGuiCond_Appearing     = 1 << 3,   \/\/ Set the variable if the object\/window is appearing/;"	e	enum:ImGuiCond_
ImGuiCond_FirstUseEver	./imgui.h	/^    ImGuiCond_FirstUseEver  = 1 << 2,   \/\/ Set the variable if the object\/window has no persi/;"	e	enum:ImGuiCond_
ImGuiCond_None	./imgui.h	/^    ImGuiCond_None          = 0,        \/\/ No condition (always set the variable), same as _Al/;"	e	enum:ImGuiCond_
ImGuiCond_Once	./imgui.h	/^    ImGuiCond_Once          = 1 << 1,   \/\/ Set the variable once per runtime session (only the/;"	e	enum:ImGuiCond_
ImGuiConfigFlags	./imgui.h	/^typedef int ImGuiConfigFlags;       \/\/ -> enum ImGuiConfigFlags_     \/\/ Flags: for io.Config/;"	t	typeref:typename:int
ImGuiConfigFlags_	./imgui.h	/^enum ImGuiConfigFlags_$/;"	g
ImGuiConfigFlags_IsSRGB	./imgui.h	/^    ImGuiConfigFlags_IsSRGB                 = 1 << 20,  \/\/ Application is SRGB-aware.$/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_IsTouchScreen	./imgui.h	/^    ImGuiConfigFlags_IsTouchScreen          = 1 << 21,  \/\/ Application is using a touch screen/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavEnableGamepad	./imgui.h	/^    ImGuiConfigFlags_NavEnableGamepad       = 1 << 1,   \/\/ Master gamepad navigation enable fl/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavEnableKeyboard	./imgui.h	/^    ImGuiConfigFlags_NavEnableKeyboard      = 1 << 0,   \/\/ Master keyboard navigation enable f/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavEnableSetMousePos	./imgui.h	/^    ImGuiConfigFlags_NavEnableSetMousePos   = 1 << 2,   \/\/ Instruct navigation to move the mou/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavNoCaptureKeyboard	./imgui.h	/^    ImGuiConfigFlags_NavNoCaptureKeyboard   = 1 << 3,   \/\/ Instruct navigation to not set the /;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NoKeyboard	./imgui.h	/^    ImGuiConfigFlags_NoKeyboard             = 1 << 6,   \/\/ Instruct dear imgui to disable keyb/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NoMouse	./imgui.h	/^    ImGuiConfigFlags_NoMouse                = 1 << 4,   \/\/ Instruct dear imgui to disable mous/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NoMouseCursorChange	./imgui.h	/^    ImGuiConfigFlags_NoMouseCursorChange    = 1 << 5,   \/\/ Instruct backend to not alter mouse/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_None	./imgui.h	/^    ImGuiConfigFlags_None                   = 0,$/;"	e	enum:ImGuiConfigFlags_
ImGuiContext	./imgui_internal.h	/^    ImGuiContext(ImFontAtlas* shared_font_atlas)$/;"	f	struct:ImGuiContext
ImGuiContext	./imgui_internal.h	/^struct ImGuiContext$/;"	s
ImGuiContextHook	./imgui_internal.h	/^    ImGuiContextHook()          { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiContextHook
ImGuiContextHook	./imgui_internal.h	/^struct ImGuiContextHook$/;"	s
ImGuiContextHookCallback	./imgui_internal.h	/^typedef void (*ImGuiContextHookCallback)(ImGuiContext* ctx, ImGuiContextHook* hook);$/;"	t	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiContextHook * hook)
ImGuiContextHookType	./imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	g
ImGuiContextHookType_EndFramePost	./imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_EndFramePre	./imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_NewFramePost	./imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_NewFramePre	./imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_PendingRemoval_	./imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_RenderPost	./imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_RenderPre	./imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_Shutdown	./imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiDataType	./imgui.h	/^typedef int ImGuiDataType;          \/\/ -> enum ImGuiDataType_        \/\/ Enum: A primary data/;"	t	typeref:typename:int
ImGuiDataTypeInfo	./imgui_internal.h	/^struct ImGuiDataTypeInfo$/;"	s
ImGuiDataTypePrivate_	./imgui_internal.h	/^enum ImGuiDataTypePrivate_$/;"	g
ImGuiDataTypeStorage	./imgui_internal.h	/^struct ImGuiDataTypeStorage$/;"	s
ImGuiDataType_	./imgui.h	/^enum ImGuiDataType_$/;"	g
ImGuiDataType_Bool	./imgui.h	/^    ImGuiDataType_Bool,     \/\/ bool (provided for user convenience, not supported by scalar wi/;"	e	enum:ImGuiDataType_
ImGuiDataType_COUNT	./imgui.h	/^    ImGuiDataType_COUNT$/;"	e	enum:ImGuiDataType_
ImGuiDataType_Double	./imgui.h	/^    ImGuiDataType_Double,   \/\/ double$/;"	e	enum:ImGuiDataType_
ImGuiDataType_Float	./imgui.h	/^    ImGuiDataType_Float,    \/\/ float$/;"	e	enum:ImGuiDataType_
ImGuiDataType_ID	./imgui_internal.h	/^    ImGuiDataType_ID,$/;"	e	enum:ImGuiDataTypePrivate_
ImGuiDataType_Pointer	./imgui_internal.h	/^    ImGuiDataType_Pointer,$/;"	e	enum:ImGuiDataTypePrivate_
ImGuiDataType_S16	./imgui.h	/^    ImGuiDataType_S16,      \/\/ short$/;"	e	enum:ImGuiDataType_
ImGuiDataType_S32	./imgui.h	/^    ImGuiDataType_S32,      \/\/ int$/;"	e	enum:ImGuiDataType_
ImGuiDataType_S64	./imgui.h	/^    ImGuiDataType_S64,      \/\/ long long \/ __int64$/;"	e	enum:ImGuiDataType_
ImGuiDataType_S8	./imgui.h	/^    ImGuiDataType_S8,       \/\/ signed char \/ char (with sensible compilers)$/;"	e	enum:ImGuiDataType_
ImGuiDataType_String	./imgui_internal.h	/^    ImGuiDataType_String = ImGuiDataType_COUNT + 1,$/;"	e	enum:ImGuiDataTypePrivate_
ImGuiDataType_U16	./imgui.h	/^    ImGuiDataType_U16,      \/\/ unsigned short$/;"	e	enum:ImGuiDataType_
ImGuiDataType_U32	./imgui.h	/^    ImGuiDataType_U32,      \/\/ unsigned int$/;"	e	enum:ImGuiDataType_
ImGuiDataType_U64	./imgui.h	/^    ImGuiDataType_U64,      \/\/ unsigned long long \/ unsigned __int64$/;"	e	enum:ImGuiDataType_
ImGuiDataType_U8	./imgui.h	/^    ImGuiDataType_U8,       \/\/ unsigned char$/;"	e	enum:ImGuiDataType_
ImGuiDataVarInfo	./imgui_internal.h	/^struct ImGuiDataVarInfo$/;"	s
ImGuiDebugAllocEntry	./imgui_internal.h	/^struct ImGuiDebugAllocEntry$/;"	s
ImGuiDebugAllocInfo	./imgui_internal.h	/^    ImGuiDebugAllocInfo() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiDebugAllocInfo
ImGuiDebugAllocInfo	./imgui_internal.h	/^struct ImGuiDebugAllocInfo$/;"	s
ImGuiDebugLogFlags	./imgui_internal.h	/^typedef int ImGuiDebugLogFlags;         \/\/ -> enum ImGuiDebugLogFlags_      \/\/ Flags: for Sh/;"	t	typeref:typename:int
ImGuiDebugLogFlags_	./imgui_internal.h	/^enum ImGuiDebugLogFlags_$/;"	g
ImGuiDebugLogFlags_EventActiveId	./imgui_internal.h	/^    ImGuiDebugLogFlags_EventActiveId        = 1 << 0,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventClipper	./imgui_internal.h	/^    ImGuiDebugLogFlags_EventClipper         = 1 << 4,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventFocus	./imgui_internal.h	/^    ImGuiDebugLogFlags_EventFocus           = 1 << 1,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventIO	./imgui_internal.h	/^    ImGuiDebugLogFlags_EventIO              = 1 << 6,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventInputRouting	./imgui_internal.h	/^    ImGuiDebugLogFlags_EventInputRouting    = 1 << 7,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventMask_	./imgui_internal.h	/^    ImGuiDebugLogFlags_EventMask_           = ImGuiDebugLogFlags_EventActiveId  | ImGuiDebugLogF/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventNav	./imgui_internal.h	/^    ImGuiDebugLogFlags_EventNav             = 1 << 3,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventPopup	./imgui_internal.h	/^    ImGuiDebugLogFlags_EventPopup           = 1 << 2,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventSelection	./imgui_internal.h	/^    ImGuiDebugLogFlags_EventSelection       = 1 << 5,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_None	./imgui_internal.h	/^    ImGuiDebugLogFlags_None                 = 0,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_OutputToTTY	./imgui_internal.h	/^    ImGuiDebugLogFlags_OutputToTTY          = 1 << 20,  \/\/ Also send output to TTY$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_OutputToTestEngine	./imgui_internal.h	/^    ImGuiDebugLogFlags_OutputToTestEngine   = 1 << 21,  \/\/ Also send output to Test Engine$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDemoMarkerCallback	./imgui_demo.cpp	/^typedef void (*ImGuiDemoMarkerCallback)(const char* file, int line, const char* section, void* u/;"	t	typeref:typename:void (*)(const char * file,int line,const char * section,void * user_data)	file:
ImGuiDemoWindowData	./imgui_demo.cpp	/^struct ImGuiDemoWindowData$/;"	s	file:
ImGuiDir	./imgui.h	/^enum ImGuiDir : int$/;"	g	typeref:typename:int
ImGuiDir_COUNT	./imgui.h	/^    ImGuiDir_COUNT$/;"	e	enum:ImGuiDir
ImGuiDir_Down	./imgui.h	/^    ImGuiDir_Down    = 3,$/;"	e	enum:ImGuiDir
ImGuiDir_Left	./imgui.h	/^    ImGuiDir_Left    = 0,$/;"	e	enum:ImGuiDir
ImGuiDir_None	./imgui.h	/^    ImGuiDir_None    = -1,$/;"	e	enum:ImGuiDir
ImGuiDir_Right	./imgui.h	/^    ImGuiDir_Right   = 1,$/;"	e	enum:ImGuiDir
ImGuiDir_Up	./imgui.h	/^    ImGuiDir_Up      = 2,$/;"	e	enum:ImGuiDir
ImGuiDragDropFlags	./imgui.h	/^typedef int ImGuiDragDropFlags;     \/\/ -> enum ImGuiDragDropFlags_   \/\/ Flags: for BeginDrag/;"	t	typeref:typename:int
ImGuiDragDropFlags_	./imgui.h	/^enum ImGuiDragDropFlags_$/;"	g
ImGuiDragDropFlags_AcceptBeforeDelivery	./imgui.h	/^    ImGuiDragDropFlags_AcceptBeforeDelivery         = 1 << 10,  \/\/ AcceptDragDropPayload() wil/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_AcceptNoDrawDefaultRect	./imgui.h	/^    ImGuiDragDropFlags_AcceptNoDrawDefaultRect      = 1 << 11,  \/\/ Do not draw the default hig/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_AcceptNoPreviewTooltip	./imgui.h	/^    ImGuiDragDropFlags_AcceptNoPreviewTooltip       = 1 << 12,  \/\/ Request hiding the BeginDra/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_AcceptPeekOnly	./imgui.h	/^    ImGuiDragDropFlags_AcceptPeekOnly               = ImGuiDragDropFlags_AcceptBeforeDelivery | /;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_None	./imgui.h	/^    ImGuiDragDropFlags_None                         = 0,$/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_PayloadAutoExpire	./imgui.h	/^    ImGuiDragDropFlags_PayloadAutoExpire            = 1 << 5,   \/\/ Automatically expire the pa/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_PayloadNoCrossContext	./imgui.h	/^    ImGuiDragDropFlags_PayloadNoCrossContext        = 1 << 6,   \/\/ Hint to specify that the pa/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_PayloadNoCrossProcess	./imgui.h	/^    ImGuiDragDropFlags_PayloadNoCrossProcess        = 1 << 7,   \/\/ Hint to specify that the pa/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceAllowNullID	./imgui.h	/^    ImGuiDragDropFlags_SourceAllowNullID            = 1 << 3,   \/\/ Allow items such as Text(),/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceAutoExpirePayload	./imgui.h	/^    ImGuiDragDropFlags_SourceAutoExpirePayload = ImGuiDragDropFlags_PayloadAutoExpire, \/\/ Rena/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceExtern	./imgui.h	/^    ImGuiDragDropFlags_SourceExtern                 = 1 << 4,   \/\/ External source (from outsi/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceNoDisableHover	./imgui.h	/^    ImGuiDragDropFlags_SourceNoDisableHover         = 1 << 1,   \/\/ By default, when dragging w/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceNoHoldToOpenOthers	./imgui.h	/^    ImGuiDragDropFlags_SourceNoHoldToOpenOthers     = 1 << 2,   \/\/ Disable the behavior that a/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceNoPreviewTooltip	./imgui.h	/^    ImGuiDragDropFlags_SourceNoPreviewTooltip       = 1 << 0,   \/\/ Disable preview tooltip. By/;"	e	enum:ImGuiDragDropFlags_
ImGuiErrorLogCallback	./imgui_internal.h	/^typedef void (*ImGuiErrorLogCallback)(void* user_data, const char* fmt, ...);$/;"	t	typeref:typename:void (*)(void * user_data,const char * fmt,...)
ImGuiExample	./examples/example_android_opengl3/CMakeLists.txt	/^project(ImGuiExample)$/;"	p
ImGuiFocusRequestFlags	./imgui_internal.h	/^typedef int ImGuiFocusRequestFlags;     \/\/ -> enum ImGuiFocusRequestFlags_  \/\/ Flags: for Fo/;"	t	typeref:typename:int
ImGuiFocusRequestFlags_	./imgui_internal.h	/^enum ImGuiFocusRequestFlags_$/;"	g
ImGuiFocusRequestFlags_None	./imgui_internal.h	/^    ImGuiFocusRequestFlags_None                 = 0,$/;"	e	enum:ImGuiFocusRequestFlags_
ImGuiFocusRequestFlags_RestoreFocusedChild	./imgui_internal.h	/^    ImGuiFocusRequestFlags_RestoreFocusedChild  = 1 << 0,   \/\/ Find last focused child (if any/;"	e	enum:ImGuiFocusRequestFlags_
ImGuiFocusRequestFlags_UnlessBelowModal	./imgui_internal.h	/^    ImGuiFocusRequestFlags_UnlessBelowModal     = 1 << 1,   \/\/ Do not set focus if the window /;"	e	enum:ImGuiFocusRequestFlags_
ImGuiFocusScopeData	./imgui_internal.h	/^struct ImGuiFocusScopeData$/;"	s
ImGuiFocusedFlags	./imgui.h	/^typedef int ImGuiFocusedFlags;      \/\/ -> enum ImGuiFocusedFlags_    \/\/ Flags: for IsWindowF/;"	t	typeref:typename:int
ImGuiFocusedFlags_	./imgui.h	/^enum ImGuiFocusedFlags_$/;"	g
ImGuiFocusedFlags_AnyWindow	./imgui.h	/^    ImGuiFocusedFlags_AnyWindow                     = 1 << 2,   \/\/ Return true if any window i/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_ChildWindows	./imgui.h	/^    ImGuiFocusedFlags_ChildWindows                  = 1 << 0,   \/\/ Return true if any children/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_NoPopupHierarchy	./imgui.h	/^    ImGuiFocusedFlags_NoPopupHierarchy              = 1 << 3,   \/\/ Do not consider popup hiera/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_None	./imgui.h	/^    ImGuiFocusedFlags_None                          = 0,$/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_RootAndChildWindows	./imgui.h	/^    ImGuiFocusedFlags_RootAndChildWindows           = ImGuiFocusedFlags_RootWindow | ImGuiFocuse/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_RootWindow	./imgui.h	/^    ImGuiFocusedFlags_RootWindow                    = 1 << 1,   \/\/ Test from root window (top /;"	e	enum:ImGuiFocusedFlags_
ImGuiFreeType	./misc/freetype/imgui_freetype.h	/^namespace ImGuiFreeType$/;"	n
ImGuiFreeTypeBuilderFlags	./misc/freetype/imgui_freetype.h	/^enum ImGuiFreeTypeBuilderFlags$/;"	g
ImGuiFreeTypeBuilderFlags_Bitmap	./misc/freetype/imgui_freetype.h	/^    ImGuiFreeTypeBuilderFlags_Bitmap        = 1 << 9    \/\/ Enable FreeType bitmap glyphs$/;"	e	enum:ImGuiFreeTypeBuilderFlags
ImGuiFreeTypeBuilderFlags_Bold	./misc/freetype/imgui_freetype.h	/^    ImGuiFreeTypeBuilderFlags_Bold          = 1 << 5,   \/\/ Styling: Should we artificially emb/;"	e	enum:ImGuiFreeTypeBuilderFlags
ImGuiFreeTypeBuilderFlags_ForceAutoHint	./misc/freetype/imgui_freetype.h	/^    ImGuiFreeTypeBuilderFlags_ForceAutoHint = 1 << 2,   \/\/ Indicates that the auto-hinter is p/;"	e	enum:ImGuiFreeTypeBuilderFlags
ImGuiFreeTypeBuilderFlags_LightHinting	./misc/freetype/imgui_freetype.h	/^    ImGuiFreeTypeBuilderFlags_LightHinting  = 1 << 3,   \/\/ A lighter hinting algorithm for gra/;"	e	enum:ImGuiFreeTypeBuilderFlags
ImGuiFreeTypeBuilderFlags_LoadColor	./misc/freetype/imgui_freetype.h	/^    ImGuiFreeTypeBuilderFlags_LoadColor     = 1 << 8,   \/\/ Enable FreeType color-layered glyph/;"	e	enum:ImGuiFreeTypeBuilderFlags
ImGuiFreeTypeBuilderFlags_MonoHinting	./misc/freetype/imgui_freetype.h	/^    ImGuiFreeTypeBuilderFlags_MonoHinting   = 1 << 4,   \/\/ Strong hinting algorithm that shoul/;"	e	enum:ImGuiFreeTypeBuilderFlags
ImGuiFreeTypeBuilderFlags_Monochrome	./misc/freetype/imgui_freetype.h	/^    ImGuiFreeTypeBuilderFlags_Monochrome    = 1 << 7,   \/\/ Disable anti-aliasing. Combine this/;"	e	enum:ImGuiFreeTypeBuilderFlags
ImGuiFreeTypeBuilderFlags_NoAutoHint	./misc/freetype/imgui_freetype.h	/^    ImGuiFreeTypeBuilderFlags_NoAutoHint    = 1 << 1,   \/\/ Disable auto-hinter.$/;"	e	enum:ImGuiFreeTypeBuilderFlags
ImGuiFreeTypeBuilderFlags_NoHinting	./misc/freetype/imgui_freetype.h	/^    ImGuiFreeTypeBuilderFlags_NoHinting     = 1 << 0,   \/\/ Disable hinting. This generally gen/;"	e	enum:ImGuiFreeTypeBuilderFlags
ImGuiFreeTypeBuilderFlags_Oblique	./misc/freetype/imgui_freetype.h	/^    ImGuiFreeTypeBuilderFlags_Oblique       = 1 << 6,   \/\/ Styling: Should we slant the font, /;"	e	enum:ImGuiFreeTypeBuilderFlags
ImGuiFreeTypeDefaultAllocFunc	./misc/freetype/imgui_freetype.cpp	/^static void* ImGuiFreeTypeDefaultAllocFunc(size_t size, void* user_data) { IM_UNUSED(user_data);/;"	f	typeref:typename:void *	file:
ImGuiFreeTypeDefaultFreeFunc	./misc/freetype/imgui_freetype.cpp	/^static void  ImGuiFreeTypeDefaultFreeFunc(void* ptr, void* user_data) { IM_UNUSED(user_data); IM/;"	f	typeref:typename:void	file:
ImGuiGetNameFromIndexOldToNewCallback	./imgui_widgets.cpp	/^static const char* ImGuiGetNameFromIndexOldToNewCallback(void* user_data, int idx)$/;"	f	typeref:typename:const char *	file:
ImGuiGetNameFromIndexOldToNewCallbackData	./imgui_widgets.cpp	/^struct ImGuiGetNameFromIndexOldToNewCallbackData { void* UserData; bool (*OldCallback)(void*, in/;"	s	file:
ImGuiGroupData	./imgui_internal.h	/^struct IMGUI_API ImGuiGroupData$/;"	s
ImGuiHoveredFlags	./imgui.h	/^typedef int ImGuiHoveredFlags;      \/\/ -> enum ImGuiHoveredFlags_    \/\/ Flags: for IsItemHov/;"	t	typeref:typename:int
ImGuiHoveredFlagsPrivate_	./imgui_internal.h	/^enum ImGuiHoveredFlagsPrivate_$/;"	g
ImGuiHoveredFlags_	./imgui.h	/^enum ImGuiHoveredFlags_$/;"	g
ImGuiHoveredFlags_AllowWhenBlockedByActiveItem	./imgui.h	/^    ImGuiHoveredFlags_AllowWhenBlockedByActiveItem  = 1 << 7,   \/\/ Return true even if an acti/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowWhenBlockedByPopup	./imgui.h	/^    ImGuiHoveredFlags_AllowWhenBlockedByPopup       = 1 << 5,   \/\/ Return true even if a popup/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowWhenDisabled	./imgui.h	/^    ImGuiHoveredFlags_AllowWhenDisabled             = 1 << 10,  \/\/ IsItemHovered() only: Retur/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowWhenOverlapped	./imgui.h	/^    ImGuiHoveredFlags_AllowWhenOverlapped           = ImGuiHoveredFlags_AllowWhenOverlappedByIte/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowWhenOverlappedByItem	./imgui.h	/^    ImGuiHoveredFlags_AllowWhenOverlappedByItem     = 1 << 8,   \/\/ IsItemHovered() only: Retur/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowWhenOverlappedByWindow	./imgui.h	/^    ImGuiHoveredFlags_AllowWhenOverlappedByWindow   = 1 << 9,   \/\/ IsItemHovered() only: Retur/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowedMaskForIsItemHovered	./imgui_internal.h	/^    ImGuiHoveredFlags_AllowedMaskForIsItemHovered   = ImGuiHoveredFlags_AllowWhenBlockedByPopup /;"	e	enum:ImGuiHoveredFlagsPrivate_
ImGuiHoveredFlags_AllowedMaskForIsWindowHovered	./imgui_internal.h	/^    ImGuiHoveredFlags_AllowedMaskForIsWindowHovered = ImGuiHoveredFlags_ChildWindows | ImGuiHove/;"	e	enum:ImGuiHoveredFlagsPrivate_
ImGuiHoveredFlags_AnyWindow	./imgui.h	/^    ImGuiHoveredFlags_AnyWindow                     = 1 << 2,   \/\/ IsWindowHovered() only: Ret/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_ChildWindows	./imgui.h	/^    ImGuiHoveredFlags_ChildWindows                  = 1 << 0,   \/\/ IsWindowHovered() only: Ret/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_DelayMask_	./imgui_internal.h	/^    ImGuiHoveredFlags_DelayMask_                    = ImGuiHoveredFlags_DelayNone | ImGuiHovered/;"	e	enum:ImGuiHoveredFlagsPrivate_
ImGuiHoveredFlags_DelayNone	./imgui.h	/^    ImGuiHoveredFlags_DelayNone                     = 1 << 14,  \/\/ IsItemHovered() only: Retur/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_DelayNormal	./imgui.h	/^    ImGuiHoveredFlags_DelayNormal                   = 1 << 16,  \/\/ IsItemHovered() only: Retur/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_DelayShort	./imgui.h	/^    ImGuiHoveredFlags_DelayShort                    = 1 << 15,  \/\/ IsItemHovered() only: Retur/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_ForTooltip	./imgui.h	/^    ImGuiHoveredFlags_ForTooltip                    = 1 << 12,  \/\/ Shortcut for standard flags/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_NoNavOverride	./imgui.h	/^    ImGuiHoveredFlags_NoNavOverride                 = 1 << 11,  \/\/ IsItemHovered() only: Disab/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_NoPopupHierarchy	./imgui.h	/^    ImGuiHoveredFlags_NoPopupHierarchy              = 1 << 3,   \/\/ IsWindowHovered() only: Do /;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_NoSharedDelay	./imgui.h	/^    ImGuiHoveredFlags_NoSharedDelay                 = 1 << 17,  \/\/ IsItemHovered() only: Disab/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_None	./imgui.h	/^    ImGuiHoveredFlags_None                          = 0,        \/\/ Return true if directly ove/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_RectOnly	./imgui.h	/^    ImGuiHoveredFlags_RectOnly                      = ImGuiHoveredFlags_AllowWhenBlockedByPopup /;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_RootAndChildWindows	./imgui.h	/^    ImGuiHoveredFlags_RootAndChildWindows           = ImGuiHoveredFlags_RootWindow | ImGuiHovere/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_RootWindow	./imgui.h	/^    ImGuiHoveredFlags_RootWindow                    = 1 << 1,   \/\/ IsWindowHovered() only: Tes/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_Stationary	./imgui.h	/^    ImGuiHoveredFlags_Stationary                    = 1 << 13,  \/\/ Require mouse to be station/;"	e	enum:ImGuiHoveredFlags_
ImGuiID	./imgui.h	/^typedef unsigned int        ImGuiID;\/\/ A unique ID used by widgets (typically the result of ha/;"	t	typeref:typename:unsigned int
ImGuiIDStackTool	./imgui_internal.h	/^    ImGuiIDStackTool()      { memset(this, 0, sizeof(*this)); CopyToClipboardLastTime = -FLT_MAX/;"	f	struct:ImGuiIDStackTool
ImGuiIDStackTool	./imgui_internal.h	/^struct ImGuiIDStackTool$/;"	s
ImGuiIO	./imgui.cpp	/^ImGuiIO::ImGuiIO()$/;"	f	class:ImGuiIO
ImGuiIO	./imgui.h	/^struct ImGuiIO$/;"	s
ImGuiImplVulkanFuncs_vkCmdEndRenderingKHR	./backends/imgui_impl_vulkan.cpp	/^static PFN_vkCmdEndRenderingKHR     ImGuiImplVulkanFuncs_vkCmdEndRenderingKHR;$/;"	v	typeref:typename:PFN_vkCmdEndRenderingKHR	file:
ImGuiInputEvent	./imgui_internal.h	/^    ImGuiInputEvent() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiInputEvent
ImGuiInputEvent	./imgui_internal.h	/^struct ImGuiInputEvent$/;"	s
ImGuiInputEventAppFocused	./imgui_internal.h	/^struct ImGuiInputEventAppFocused    { bool Focused; };$/;"	s
ImGuiInputEventKey	./imgui_internal.h	/^struct ImGuiInputEventKey           { ImGuiKey Key; bool Down; float AnalogValue; };$/;"	s
ImGuiInputEventMouseButton	./imgui_internal.h	/^struct ImGuiInputEventMouseButton   { int Button; bool Down; ImGuiMouseSource MouseSource; };$/;"	s
ImGuiInputEventMousePos	./imgui_internal.h	/^struct ImGuiInputEventMousePos      { float PosX, PosY; ImGuiMouseSource MouseSource; };$/;"	s
ImGuiInputEventMouseWheel	./imgui_internal.h	/^struct ImGuiInputEventMouseWheel    { float WheelX, WheelY; ImGuiMouseSource MouseSource; };$/;"	s
ImGuiInputEventText	./imgui_internal.h	/^struct ImGuiInputEventText          { unsigned int Char; };$/;"	s
ImGuiInputEventType	./imgui_internal.h	/^enum ImGuiInputEventType$/;"	g
ImGuiInputEventType_COUNT	./imgui_internal.h	/^    ImGuiInputEventType_COUNT$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_Focus	./imgui_internal.h	/^    ImGuiInputEventType_Focus,$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_Key	./imgui_internal.h	/^    ImGuiInputEventType_Key,$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_MouseButton	./imgui_internal.h	/^    ImGuiInputEventType_MouseButton,$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_MousePos	./imgui_internal.h	/^    ImGuiInputEventType_MousePos,$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_MouseWheel	./imgui_internal.h	/^    ImGuiInputEventType_MouseWheel,$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_None	./imgui_internal.h	/^    ImGuiInputEventType_None = 0,$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_Text	./imgui_internal.h	/^    ImGuiInputEventType_Text,$/;"	e	enum:ImGuiInputEventType
ImGuiInputFlags	./imgui.h	/^typedef int ImGuiInputFlags;        \/\/ -> enum ImGuiInputFlags_      \/\/ Flags: for Shortcut(/;"	t	typeref:typename:int
ImGuiInputFlagsPrivate_	./imgui_internal.h	/^enum ImGuiInputFlagsPrivate_$/;"	g
ImGuiInputFlags_	./imgui.h	/^enum ImGuiInputFlags_$/;"	g
ImGuiInputFlags_CondActive	./imgui_internal.h	/^    ImGuiInputFlags_CondActive                  = 1 << 23,  \/\/ Only set if item is active (def/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_CondDefault_	./imgui_internal.h	/^    ImGuiInputFlags_CondDefault_                = ImGuiInputFlags_CondHovered | ImGuiInputFlags_/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_CondHovered	./imgui_internal.h	/^    ImGuiInputFlags_CondHovered                 = 1 << 22,  \/\/ Only set if item is hovered (de/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_CondMask_	./imgui_internal.h	/^    ImGuiInputFlags_CondMask_                   = ImGuiInputFlags_CondHovered | ImGuiInputFlags_/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_LockThisFrame	./imgui_internal.h	/^    ImGuiInputFlags_LockThisFrame               = 1 << 20,  \/\/ Further accesses to key data wi/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_LockUntilRelease	./imgui_internal.h	/^    ImGuiInputFlags_LockUntilRelease            = 1 << 21,  \/\/ Further accesses to key data wi/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_None	./imgui.h	/^    ImGuiInputFlags_None                    = 0,$/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_Repeat	./imgui.h	/^    ImGuiInputFlags_Repeat                  = 1 << 0,   \/\/ Enable repeat. Return true on succe/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RepeatMask_	./imgui_internal.h	/^    ImGuiInputFlags_RepeatMask_                 = ImGuiInputFlags_Repeat | ImGuiInputFlags_Repea/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_RepeatRateDefault	./imgui_internal.h	/^    ImGuiInputFlags_RepeatRateDefault           = 1 << 1,   \/\/ Repeat rate: Regular (default)$/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_RepeatRateMask_	./imgui_internal.h	/^    ImGuiInputFlags_RepeatRateMask_             = ImGuiInputFlags_RepeatRateDefault | ImGuiInput/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_RepeatRateNavMove	./imgui_internal.h	/^    ImGuiInputFlags_RepeatRateNavMove           = 1 << 2,   \/\/ Repeat rate: Fast$/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_RepeatRateNavTweak	./imgui_internal.h	/^    ImGuiInputFlags_RepeatRateNavTweak          = 1 << 3,   \/\/ Repeat rate: Faster$/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_RepeatUntilKeyModsChange	./imgui_internal.h	/^    ImGuiInputFlags_RepeatUntilKeyModsChange    = 1 << 5,   \/\/ Stop repeating when released OR/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_RepeatUntilKeyModsChangeFromNone	./imgui_internal.h	/^    ImGuiInputFlags_RepeatUntilKeyModsChangeFromNone = 1 << 6,  \/\/ Stop repeating when release/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_RepeatUntilMask_	./imgui_internal.h	/^    ImGuiInputFlags_RepeatUntilMask_            = ImGuiInputFlags_RepeatUntilRelease | ImGuiInpu/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_RepeatUntilOtherKeyPress	./imgui_internal.h	/^    ImGuiInputFlags_RepeatUntilOtherKeyPress    = 1 << 7,   \/\/ Stop repeating when released OR/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_RepeatUntilRelease	./imgui_internal.h	/^    ImGuiInputFlags_RepeatUntilRelease          = 1 << 4,   \/\/ Stop repeating when released (d/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_RouteActive	./imgui.h	/^    ImGuiInputFlags_RouteActive             = 1 << 10,  \/\/ Route to active item only.$/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RouteAlways	./imgui.h	/^    ImGuiInputFlags_RouteAlways             = 1 << 13,  \/\/ Do not register route, poll keys di/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RouteFocused	./imgui.h	/^    ImGuiInputFlags_RouteFocused            = 1 << 11,  \/\/ Route to windows in the focus stack/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RouteFromRootWindow	./imgui.h	/^    ImGuiInputFlags_RouteFromRootWindow     = 1 << 17,  \/\/ Option: route evaluated from the po/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RouteGlobal	./imgui.h	/^    ImGuiInputFlags_RouteGlobal             = 1 << 12,  \/\/ Global route (unless a focused wind/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RouteOptionsMask_	./imgui_internal.h	/^    ImGuiInputFlags_RouteOptionsMask_           = ImGuiInputFlags_RouteOverFocused | ImGuiInputF/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_RouteOverActive	./imgui.h	/^    ImGuiInputFlags_RouteOverActive         = 1 << 15,  \/\/ Option: global route: higher priori/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RouteOverFocused	./imgui.h	/^    ImGuiInputFlags_RouteOverFocused        = 1 << 14,  \/\/ Option: global route: higher priori/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RouteTypeMask_	./imgui_internal.h	/^    ImGuiInputFlags_RouteTypeMask_              = ImGuiInputFlags_RouteActive | ImGuiInputFlags_/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_RouteUnlessBgFocused	./imgui.h	/^    ImGuiInputFlags_RouteUnlessBgFocused    = 1 << 16,  \/\/ Option: global route: will not be a/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_SupportedByIsKeyPressed	./imgui_internal.h	/^    ImGuiInputFlags_SupportedByIsKeyPressed     = ImGuiInputFlags_RepeatMask_,$/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_SupportedByIsMouseClicked	./imgui_internal.h	/^    ImGuiInputFlags_SupportedByIsMouseClicked   = ImGuiInputFlags_Repeat,$/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_SupportedBySetItemKeyOwner	./imgui_internal.h	/^    ImGuiInputFlags_SupportedBySetItemKeyOwner  = ImGuiInputFlags_SupportedBySetKeyOwner | ImGui/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_SupportedBySetKeyOwner	./imgui_internal.h	/^    ImGuiInputFlags_SupportedBySetKeyOwner      = ImGuiInputFlags_LockThisFrame | ImGuiInputFlag/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_SupportedBySetNextItemShortcut	./imgui_internal.h	/^    ImGuiInputFlags_SupportedBySetNextItemShortcut = ImGuiInputFlags_RepeatMask_ | ImGuiInputFla/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_SupportedByShortcut	./imgui_internal.h	/^    ImGuiInputFlags_SupportedByShortcut         = ImGuiInputFlags_RepeatMask_ | ImGuiInputFlags_/;"	e	enum:ImGuiInputFlagsPrivate_
ImGuiInputFlags_Tooltip	./imgui.h	/^    ImGuiInputFlags_Tooltip                 = 1 << 18,  \/\/ Automatically display a tooltip whe/;"	e	enum:ImGuiInputFlags_
ImGuiInputSource	./imgui_internal.h	/^enum ImGuiInputSource$/;"	g
ImGuiInputSource_COUNT	./imgui_internal.h	/^    ImGuiInputSource_COUNT$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_Gamepad	./imgui_internal.h	/^    ImGuiInputSource_Gamepad,$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_Keyboard	./imgui_internal.h	/^    ImGuiInputSource_Keyboard,$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_Mouse	./imgui_internal.h	/^    ImGuiInputSource_Mouse,         \/\/ Note: may be Mouse or TouchScreen or Pen. See io.MouseS/;"	e	enum:ImGuiInputSource
ImGuiInputSource_None	./imgui_internal.h	/^    ImGuiInputSource_None = 0,$/;"	e	enum:ImGuiInputSource
ImGuiInputTextCallback	./imgui.h	/^typedef int     (*ImGuiInputTextCallback)(ImGuiInputTextCallbackData* data);    \/\/ Callback fu/;"	t	typeref:typename:int (*)(ImGuiInputTextCallbackData * data)
ImGuiInputTextCallbackData	./imgui.h	/^struct ImGuiInputTextCallbackData$/;"	s
ImGuiInputTextCallbackData	./imgui_widgets.cpp	/^ImGuiInputTextCallbackData::ImGuiInputTextCallbackData()$/;"	f	class:ImGuiInputTextCallbackData
ImGuiInputTextDeactivatedState	./imgui_internal.h	/^    ImGuiInputTextDeactivatedState()    { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiInputTextDeactivatedState
ImGuiInputTextDeactivatedState	./imgui_internal.h	/^struct IMGUI_API ImGuiInputTextDeactivatedState$/;"	s
ImGuiInputTextFlags	./imgui.h	/^typedef int ImGuiInputTextFlags;    \/\/ -> enum ImGuiInputTextFlags_  \/\/ Flags: for InputText/;"	t	typeref:typename:int
ImGuiInputTextFlagsPrivate_	./imgui_internal.h	/^enum ImGuiInputTextFlagsPrivate_$/;"	g
ImGuiInputTextFlags_	./imgui.h	/^enum ImGuiInputTextFlags_$/;"	g
ImGuiInputTextFlags_AllowTabInput	./imgui.h	/^    ImGuiInputTextFlags_AllowTabInput       = 1 << 5,   \/\/ Pressing TAB input a '\\t' characte/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_AlwaysOverwrite	./imgui.h	/^    ImGuiInputTextFlags_AlwaysOverwrite     = 1 << 11,  \/\/ Overwrite mode$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_AutoSelectAll	./imgui.h	/^    ImGuiInputTextFlags_AutoSelectAll       = 1 << 12,  \/\/ Select entire text when first takin/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackAlways	./imgui.h	/^    ImGuiInputTextFlags_CallbackAlways      = 1 << 19,  \/\/ Callback on each iteration. User co/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackCharFilter	./imgui.h	/^    ImGuiInputTextFlags_CallbackCharFilter  = 1 << 20,  \/\/ Callback on character inputs to rep/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackCompletion	./imgui.h	/^    ImGuiInputTextFlags_CallbackCompletion  = 1 << 17,  \/\/ Callback on pressing TAB (for compl/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackEdit	./imgui.h	/^    ImGuiInputTextFlags_CallbackEdit        = 1 << 22,  \/\/ Callback on any edit (note that Inp/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackHistory	./imgui.h	/^    ImGuiInputTextFlags_CallbackHistory     = 1 << 18,  \/\/ Callback on pressing Up\/Down arrow/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackResize	./imgui.h	/^    ImGuiInputTextFlags_CallbackResize      = 1 << 21,  \/\/ Callback on buffer capacity changes/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsDecimal	./imgui.h	/^    ImGuiInputTextFlags_CharsDecimal        = 1 << 0,   \/\/ Allow 0123456789.+-*\/$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsHexadecimal	./imgui.h	/^    ImGuiInputTextFlags_CharsHexadecimal    = 1 << 1,   \/\/ Allow 0123456789ABCDEFabcdef$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsNoBlank	./imgui.h	/^    ImGuiInputTextFlags_CharsNoBlank        = 1 << 4,   \/\/ Filter out spaces, tabs$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsScientific	./imgui.h	/^    ImGuiInputTextFlags_CharsScientific     = 1 << 2,   \/\/ Allow 0123456789.+-*\/eE (Scientifi/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsUppercase	./imgui.h	/^    ImGuiInputTextFlags_CharsUppercase      = 1 << 3,   \/\/ Turn a..z into A..Z$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CtrlEnterForNewLine	./imgui.h	/^    ImGuiInputTextFlags_CtrlEnterForNewLine = 1 << 8,   \/\/ In multi-line mode, validate with E/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_DisplayEmptyRefVal	./imgui.h	/^    ImGuiInputTextFlags_DisplayEmptyRefVal  = 1 << 14,  \/\/ InputFloat(), InputInt(), InputScal/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_EnterReturnsTrue	./imgui.h	/^    ImGuiInputTextFlags_EnterReturnsTrue    = 1 << 6,   \/\/ Return 'true' when Enter is pressed/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_EscapeClearsAll	./imgui.h	/^    ImGuiInputTextFlags_EscapeClearsAll     = 1 << 7,   \/\/ Escape key clears content if not em/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_LocalizeDecimalPoint	./imgui_internal.h	/^    ImGuiInputTextFlags_LocalizeDecimalPoint= 1 << 29,  \/\/ For internal use by InputScalar() a/;"	e	enum:ImGuiInputTextFlagsPrivate_
ImGuiInputTextFlags_MergedItem	./imgui_internal.h	/^    ImGuiInputTextFlags_MergedItem          = 1 << 28,  \/\/ For internal use by TempInputText()/;"	e	enum:ImGuiInputTextFlagsPrivate_
ImGuiInputTextFlags_Multiline	./imgui_internal.h	/^    ImGuiInputTextFlags_Multiline           = 1 << 26,  \/\/ For internal use by InputTextMultil/;"	e	enum:ImGuiInputTextFlagsPrivate_
ImGuiInputTextFlags_NoHorizontalScroll	./imgui.h	/^    ImGuiInputTextFlags_NoHorizontalScroll  = 1 << 15,  \/\/ Disable following the cursor horizo/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_NoMarkEdited	./imgui_internal.h	/^    ImGuiInputTextFlags_NoMarkEdited        = 1 << 27,  \/\/ For internal use by functions using/;"	e	enum:ImGuiInputTextFlagsPrivate_
ImGuiInputTextFlags_NoUndoRedo	./imgui.h	/^    ImGuiInputTextFlags_NoUndoRedo          = 1 << 16,  \/\/ Disable undo\/redo. Note that input/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_None	./imgui.h	/^    ImGuiInputTextFlags_None                = 0,$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_ParseEmptyRefVal	./imgui.h	/^    ImGuiInputTextFlags_ParseEmptyRefVal    = 1 << 13,  \/\/ InputFloat(), InputInt(), InputScal/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_Password	./imgui.h	/^    ImGuiInputTextFlags_Password            = 1 << 10,  \/\/ Password mode, display all characte/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_ReadOnly	./imgui.h	/^    ImGuiInputTextFlags_ReadOnly            = 1 << 9,   \/\/ Read-only mode$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextState	./imgui_internal.h	/^    ImGuiInputTextState()                   { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiInputTextState
ImGuiInputTextState	./imgui_internal.h	/^struct IMGUI_API ImGuiInputTextState$/;"	s
ImGuiItemFlags	./imgui.h	/^typedef int ImGuiItemFlags;         \/\/ -> enum ImGuiItemFlags_       \/\/ Flags: for PushItemF/;"	t	typeref:typename:int
ImGuiItemFlagsPrivate_	./imgui_internal.h	/^enum ImGuiItemFlagsPrivate_$/;"	g
ImGuiItemFlags_	./imgui.h	/^enum ImGuiItemFlags_$/;"	g
ImGuiItemFlags_AllowOverlap	./imgui_internal.h	/^    ImGuiItemFlags_AllowOverlap             = 1 << 14, \/\/ false     \/\/ Allow being overlappe/;"	e	enum:ImGuiItemFlagsPrivate_
ImGuiItemFlags_AutoClosePopups	./imgui.h	/^    ImGuiItemFlags_AutoClosePopups          = 1 << 4,   \/\/ true     \/\/ MenuItem()\/Selectabl/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_ButtonRepeat	./imgui.h	/^    ImGuiItemFlags_ButtonRepeat             = 1 << 3,   \/\/ false    \/\/ Any button-like behav/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_Default_	./imgui_internal.h	/^    ImGuiItemFlags_Default_                 = ImGuiItemFlags_AutoClosePopups,    \/\/ Please don/;"	e	enum:ImGuiItemFlagsPrivate_
ImGuiItemFlags_Disabled	./imgui_internal.h	/^    ImGuiItemFlags_Disabled                 = 1 << 10, \/\/ false     \/\/ Disable interactions /;"	e	enum:ImGuiItemFlagsPrivate_
ImGuiItemFlags_HasSelectionUserData	./imgui_internal.h	/^    ImGuiItemFlags_HasSelectionUserData     = 1 << 21, \/\/ false     \/\/ Set by SetNextItemSel/;"	e	enum:ImGuiItemFlagsPrivate_
ImGuiItemFlags_Inputable	./imgui_internal.h	/^    ImGuiItemFlags_Inputable                = 1 << 20, \/\/ false     \/\/ [WIP] Auto-activate i/;"	e	enum:ImGuiItemFlagsPrivate_
ImGuiItemFlags_IsMultiSelect	./imgui_internal.h	/^    ImGuiItemFlags_IsMultiSelect            = 1 << 22, \/\/ false     \/\/ Set by SetNextItemSel/;"	e	enum:ImGuiItemFlagsPrivate_
ImGuiItemFlags_MixedValue	./imgui_internal.h	/^    ImGuiItemFlags_MixedValue               = 1 << 12, \/\/ false     \/\/ [BETA] Represent a mi/;"	e	enum:ImGuiItemFlagsPrivate_
ImGuiItemFlags_NoNav	./imgui.h	/^    ImGuiItemFlags_NoNav                    = 1 << 1,   \/\/ false    \/\/ Disable any form of f/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_NoNavDefaultFocus	./imgui.h	/^    ImGuiItemFlags_NoNavDefaultFocus        = 1 << 2,   \/\/ false    \/\/ Disable item being a /;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_NoTabStop	./imgui.h	/^    ImGuiItemFlags_NoTabStop                = 1 << 0,   \/\/ false    \/\/ Disable keyboard tabb/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_NoWindowHoverableCheck	./imgui_internal.h	/^    ImGuiItemFlags_NoWindowHoverableCheck   = 1 << 13, \/\/ false     \/\/ Disable hoverable che/;"	e	enum:ImGuiItemFlagsPrivate_
ImGuiItemFlags_None	./imgui.h	/^    ImGuiItemFlags_None                     = 0,        \/\/ (Default)$/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_ReadOnly	./imgui_internal.h	/^    ImGuiItemFlags_ReadOnly                 = 1 << 11, \/\/ false     \/\/ [ALPHA] Allow hoverin/;"	e	enum:ImGuiItemFlagsPrivate_
ImGuiItemStatusFlags	./imgui_internal.h	/^typedef int ImGuiItemStatusFlags;       \/\/ -> enum ImGuiItemStatusFlags_    \/\/ Flags: for g./;"	t	typeref:typename:int
ImGuiItemStatusFlags_	./imgui_internal.h	/^enum ImGuiItemStatusFlags_$/;"	g
ImGuiItemStatusFlags_Checkable	./imgui_internal.h	/^    ImGuiItemStatusFlags_Checkable          = 1 << 22,  \/\/ Item is a checkable (e.g. CheckBox,/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Checked	./imgui_internal.h	/^    ImGuiItemStatusFlags_Checked            = 1 << 23,  \/\/ Checked status$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Deactivated	./imgui_internal.h	/^    ImGuiItemStatusFlags_Deactivated        = 1 << 6,   \/\/ Only valid if ImGuiItemStatusFlags_/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Edited	./imgui_internal.h	/^    ImGuiItemStatusFlags_Edited             = 1 << 2,   \/\/ Value exposed by item was edited in/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HasClipRect	./imgui_internal.h	/^    ImGuiItemStatusFlags_HasClipRect        = 1 << 9,   \/\/ g.LastItemData.ClipRect is valid.$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HasDeactivated	./imgui_internal.h	/^    ImGuiItemStatusFlags_HasDeactivated     = 1 << 5,   \/\/ Set if the widget\/group is able to/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HasDisplayRect	./imgui_internal.h	/^    ImGuiItemStatusFlags_HasDisplayRect     = 1 << 1,   \/\/ g.LastItemData.DisplayRect is valid$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HasShortcut	./imgui_internal.h	/^    ImGuiItemStatusFlags_HasShortcut        = 1 << 10,  \/\/ g.LastItemData.Shortcut valid. Set /;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HoveredRect	./imgui_internal.h	/^    ImGuiItemStatusFlags_HoveredRect        = 1 << 0,   \/\/ Mouse position is within item recta/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HoveredWindow	./imgui_internal.h	/^    ImGuiItemStatusFlags_HoveredWindow      = 1 << 7,   \/\/ Override the HoveredWindow test to /;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Inputable	./imgui_internal.h	/^    ImGuiItemStatusFlags_Inputable          = 1 << 24,  \/\/ Item is a text-inputable (e.g. Inpu/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_None	./imgui_internal.h	/^    ImGuiItemStatusFlags_None               = 0,$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Openable	./imgui_internal.h	/^    ImGuiItemStatusFlags_Openable           = 1 << 20,  \/\/ Item is an openable (e.g. TreeNode)$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Opened	./imgui_internal.h	/^    ImGuiItemStatusFlags_Opened             = 1 << 21,  \/\/ Opened status$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_ToggledOpen	./imgui_internal.h	/^    ImGuiItemStatusFlags_ToggledOpen        = 1 << 4,   \/\/ Set when TreeNode() reports togglin/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_ToggledSelection	./imgui_internal.h	/^    ImGuiItemStatusFlags_ToggledSelection   = 1 << 3,   \/\/ Set when Selectable(), TreeNode() r/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Visible	./imgui_internal.h	/^    ImGuiItemStatusFlags_Visible            = 1 << 8,   \/\/ [WIP] Set when item is overlapping /;"	e	enum:ImGuiItemStatusFlags_
ImGuiKey	./imgui.h	/^enum ImGuiKey : int$/;"	g	typeref:typename:int
ImGuiKeyChord	./imgui.h	/^typedef int ImGuiKeyChord;          \/\/ -> ImGuiKey | ImGuiMod_XXX    \/\/ Flags: for IsKeyChor/;"	t	typeref:typename:int
ImGuiKeyData	./imgui.h	/^struct ImGuiKeyData$/;"	s
ImGuiKeyOwnerData	./imgui_internal.h	/^    ImGuiKeyOwnerData()             { OwnerCurr = OwnerNext = ImGuiKeyOwner_NoOwner; LockThisFra/;"	f	struct:ImGuiKeyOwnerData
ImGuiKeyOwnerData	./imgui_internal.h	/^struct ImGuiKeyOwnerData$/;"	s
ImGuiKeyOwner_Any	./imgui_internal.h	/^#define ImGuiKeyOwner_Any /;"	d
ImGuiKeyOwner_NoOwner	./imgui_internal.h	/^#define ImGuiKeyOwner_NoOwner /;"	d
ImGuiKeyRoutingData	./imgui_internal.h	/^    ImGuiKeyRoutingData()           { NextEntryIndex = -1; Mods = 0; RoutingCurrScore = RoutingN/;"	f	struct:ImGuiKeyRoutingData
ImGuiKeyRoutingData	./imgui_internal.h	/^struct ImGuiKeyRoutingData$/;"	s
ImGuiKeyRoutingIndex	./imgui_internal.h	/^typedef ImS16 ImGuiKeyRoutingIndex;$/;"	t	typeref:typename:ImS16
ImGuiKeyRoutingTable	./imgui_internal.h	/^    ImGuiKeyRoutingTable()          { Clear(); }$/;"	f	struct:ImGuiKeyRoutingTable
ImGuiKeyRoutingTable	./imgui_internal.h	/^struct ImGuiKeyRoutingTable$/;"	s
ImGuiKey_0	./imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_1	./imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_2	./imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_3	./imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_4	./imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_5	./imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_6	./imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_7	./imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_8	./imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_9	./imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_A	./imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_Aliases_BEGIN	./imgui_internal.h	/^#define ImGuiKey_Aliases_BEGIN /;"	d
ImGuiKey_Aliases_END	./imgui_internal.h	/^#define ImGuiKey_Aliases_END /;"	d
ImGuiKey_Apostrophe	./imgui.h	/^    ImGuiKey_Apostrophe,        \/\/ '$/;"	e	enum:ImGuiKey
ImGuiKey_AppBack	./imgui.h	/^    ImGuiKey_AppBack,               \/\/ Available on some keyboard\/mouses. Often referred as "/;"	e	enum:ImGuiKey
ImGuiKey_AppForward	./imgui.h	/^    ImGuiKey_AppForward,$/;"	e	enum:ImGuiKey
ImGuiKey_B	./imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_Backslash	./imgui.h	/^    ImGuiKey_Backslash,         \/\/ \\ (this text inhibit multiline comment caused by backslash/;"	e	enum:ImGuiKey
ImGuiKey_Backspace	./imgui.h	/^    ImGuiKey_Backspace,$/;"	e	enum:ImGuiKey
ImGuiKey_C	./imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_COUNT	./imgui.h	/^    ImGuiKey_COUNT,$/;"	e	enum:ImGuiKey
ImGuiKey_CapsLock	./imgui.h	/^    ImGuiKey_CapsLock,$/;"	e	enum:ImGuiKey
ImGuiKey_Comma	./imgui.h	/^    ImGuiKey_Comma,             \/\/ ,$/;"	e	enum:ImGuiKey
ImGuiKey_D	./imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_Delete	./imgui.h	/^    ImGuiKey_Delete,$/;"	e	enum:ImGuiKey
ImGuiKey_DownArrow	./imgui.h	/^    ImGuiKey_DownArrow,$/;"	e	enum:ImGuiKey
ImGuiKey_E	./imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_End	./imgui.h	/^    ImGuiKey_End,$/;"	e	enum:ImGuiKey
ImGuiKey_Enter	./imgui.h	/^    ImGuiKey_Enter,$/;"	e	enum:ImGuiKey
ImGuiKey_Equal	./imgui.h	/^    ImGuiKey_Equal,             \/\/ =$/;"	e	enum:ImGuiKey
ImGuiKey_Escape	./imgui.h	/^    ImGuiKey_Escape,$/;"	e	enum:ImGuiKey
ImGuiKey_F	./imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_F1	./imgui.h	/^    ImGuiKey_F1, ImGuiKey_F2, ImGuiKey_F3, ImGuiKey_F4, ImGuiKey_F5, ImGuiKey_F6,$/;"	e	enum:ImGuiKey
ImGuiKey_F10	./imgui.h	/^    ImGuiKey_F7, ImGuiKey_F8, ImGuiKey_F9, ImGuiKey_F10, ImGuiKey_F11, ImGuiKey_F12,$/;"	e	enum:ImGuiKey
ImGuiKey_F11	./imgui.h	/^    ImGuiKey_F7, ImGuiKey_F8, ImGuiKey_F9, ImGuiKey_F10, ImGuiKey_F11, ImGuiKey_F12,$/;"	e	enum:ImGuiKey
ImGuiKey_F12	./imgui.h	/^    ImGuiKey_F7, ImGuiKey_F8, ImGuiKey_F9, ImGuiKey_F10, ImGuiKey_F11, ImGuiKey_F12,$/;"	e	enum:ImGuiKey
ImGuiKey_F13	./imgui.h	/^    ImGuiKey_F13, ImGuiKey_F14, ImGuiKey_F15, ImGuiKey_F16, ImGuiKey_F17, ImGuiKey_F18,$/;"	e	enum:ImGuiKey
ImGuiKey_F14	./imgui.h	/^    ImGuiKey_F13, ImGuiKey_F14, ImGuiKey_F15, ImGuiKey_F16, ImGuiKey_F17, ImGuiKey_F18,$/;"	e	enum:ImGuiKey
ImGuiKey_F15	./imgui.h	/^    ImGuiKey_F13, ImGuiKey_F14, ImGuiKey_F15, ImGuiKey_F16, ImGuiKey_F17, ImGuiKey_F18,$/;"	e	enum:ImGuiKey
ImGuiKey_F16	./imgui.h	/^    ImGuiKey_F13, ImGuiKey_F14, ImGuiKey_F15, ImGuiKey_F16, ImGuiKey_F17, ImGuiKey_F18,$/;"	e	enum:ImGuiKey
ImGuiKey_F17	./imgui.h	/^    ImGuiKey_F13, ImGuiKey_F14, ImGuiKey_F15, ImGuiKey_F16, ImGuiKey_F17, ImGuiKey_F18,$/;"	e	enum:ImGuiKey
ImGuiKey_F18	./imgui.h	/^    ImGuiKey_F13, ImGuiKey_F14, ImGuiKey_F15, ImGuiKey_F16, ImGuiKey_F17, ImGuiKey_F18,$/;"	e	enum:ImGuiKey
ImGuiKey_F19	./imgui.h	/^    ImGuiKey_F19, ImGuiKey_F20, ImGuiKey_F21, ImGuiKey_F22, ImGuiKey_F23, ImGuiKey_F24,$/;"	e	enum:ImGuiKey
ImGuiKey_F2	./imgui.h	/^    ImGuiKey_F1, ImGuiKey_F2, ImGuiKey_F3, ImGuiKey_F4, ImGuiKey_F5, ImGuiKey_F6,$/;"	e	enum:ImGuiKey
ImGuiKey_F20	./imgui.h	/^    ImGuiKey_F19, ImGuiKey_F20, ImGuiKey_F21, ImGuiKey_F22, ImGuiKey_F23, ImGuiKey_F24,$/;"	e	enum:ImGuiKey
ImGuiKey_F21	./imgui.h	/^    ImGuiKey_F19, ImGuiKey_F20, ImGuiKey_F21, ImGuiKey_F22, ImGuiKey_F23, ImGuiKey_F24,$/;"	e	enum:ImGuiKey
ImGuiKey_F22	./imgui.h	/^    ImGuiKey_F19, ImGuiKey_F20, ImGuiKey_F21, ImGuiKey_F22, ImGuiKey_F23, ImGuiKey_F24,$/;"	e	enum:ImGuiKey
ImGuiKey_F23	./imgui.h	/^    ImGuiKey_F19, ImGuiKey_F20, ImGuiKey_F21, ImGuiKey_F22, ImGuiKey_F23, ImGuiKey_F24,$/;"	e	enum:ImGuiKey
ImGuiKey_F24	./imgui.h	/^    ImGuiKey_F19, ImGuiKey_F20, ImGuiKey_F21, ImGuiKey_F22, ImGuiKey_F23, ImGuiKey_F24,$/;"	e	enum:ImGuiKey
ImGuiKey_F3	./imgui.h	/^    ImGuiKey_F1, ImGuiKey_F2, ImGuiKey_F3, ImGuiKey_F4, ImGuiKey_F5, ImGuiKey_F6,$/;"	e	enum:ImGuiKey
ImGuiKey_F4	./imgui.h	/^    ImGuiKey_F1, ImGuiKey_F2, ImGuiKey_F3, ImGuiKey_F4, ImGuiKey_F5, ImGuiKey_F6,$/;"	e	enum:ImGuiKey
ImGuiKey_F5	./imgui.h	/^    ImGuiKey_F1, ImGuiKey_F2, ImGuiKey_F3, ImGuiKey_F4, ImGuiKey_F5, ImGuiKey_F6,$/;"	e	enum:ImGuiKey
ImGuiKey_F6	./imgui.h	/^    ImGuiKey_F1, ImGuiKey_F2, ImGuiKey_F3, ImGuiKey_F4, ImGuiKey_F5, ImGuiKey_F6,$/;"	e	enum:ImGuiKey
ImGuiKey_F7	./imgui.h	/^    ImGuiKey_F7, ImGuiKey_F8, ImGuiKey_F9, ImGuiKey_F10, ImGuiKey_F11, ImGuiKey_F12,$/;"	e	enum:ImGuiKey
ImGuiKey_F8	./imgui.h	/^    ImGuiKey_F7, ImGuiKey_F8, ImGuiKey_F9, ImGuiKey_F10, ImGuiKey_F11, ImGuiKey_F12,$/;"	e	enum:ImGuiKey
ImGuiKey_F9	./imgui.h	/^    ImGuiKey_F7, ImGuiKey_F8, ImGuiKey_F9, ImGuiKey_F10, ImGuiKey_F11, ImGuiKey_F12,$/;"	e	enum:ImGuiKey
ImGuiKey_G	./imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_GamepadBack	./imgui.h	/^    ImGuiKey_GamepadBack,           \/\/ View (Xbox)      - (Switch)   Share (PS)$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadDpadDown	./imgui.h	/^    ImGuiKey_GamepadDpadDown,       \/\/ D-pad Down                                       \/\/ M/;"	e	enum:ImGuiKey
ImGuiKey_GamepadDpadLeft	./imgui.h	/^    ImGuiKey_GamepadDpadLeft,       \/\/ D-pad Left                                       \/\/ M/;"	e	enum:ImGuiKey
ImGuiKey_GamepadDpadRight	./imgui.h	/^    ImGuiKey_GamepadDpadRight,      \/\/ D-pad Right                                      \/\/ M/;"	e	enum:ImGuiKey
ImGuiKey_GamepadDpadUp	./imgui.h	/^    ImGuiKey_GamepadDpadUp,         \/\/ D-pad Up                                         \/\/ M/;"	e	enum:ImGuiKey
ImGuiKey_GamepadFaceDown	./imgui.h	/^    ImGuiKey_GamepadFaceDown,       \/\/ A (Xbox)         B (Switch)   Cross (PS)         \/\/ A/;"	e	enum:ImGuiKey
ImGuiKey_GamepadFaceLeft	./imgui.h	/^    ImGuiKey_GamepadFaceLeft,       \/\/ X (Xbox)         Y (Switch)   Square (PS)        \/\/ T/;"	e	enum:ImGuiKey
ImGuiKey_GamepadFaceRight	./imgui.h	/^    ImGuiKey_GamepadFaceRight,      \/\/ B (Xbox)         A (Switch)   Circle (PS)        \/\/ C/;"	e	enum:ImGuiKey
ImGuiKey_GamepadFaceUp	./imgui.h	/^    ImGuiKey_GamepadFaceUp,         \/\/ Y (Xbox)         X (Switch)   Triangle (PS)      \/\/ T/;"	e	enum:ImGuiKey
ImGuiKey_GamepadL1	./imgui.h	/^    ImGuiKey_GamepadL1,             \/\/ L Bumper (Xbox)  L (Switch)   L1 (PS)            \/\/ T/;"	e	enum:ImGuiKey
ImGuiKey_GamepadL2	./imgui.h	/^    ImGuiKey_GamepadL2,             \/\/ L Trig. (Xbox)   ZL (Switch)  L2 (PS) [Analog]$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadL3	./imgui.h	/^    ImGuiKey_GamepadL3,             \/\/ L Stick (Xbox)   L3 (Switch)  L3 (PS)$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadLStickDown	./imgui.h	/^    ImGuiKey_GamepadLStickDown,     \/\/ [Analog]                                         \/\/ M/;"	e	enum:ImGuiKey
ImGuiKey_GamepadLStickLeft	./imgui.h	/^    ImGuiKey_GamepadLStickLeft,     \/\/ [Analog]                                         \/\/ M/;"	e	enum:ImGuiKey
ImGuiKey_GamepadLStickRight	./imgui.h	/^    ImGuiKey_GamepadLStickRight,    \/\/ [Analog]                                         \/\/ M/;"	e	enum:ImGuiKey
ImGuiKey_GamepadLStickUp	./imgui.h	/^    ImGuiKey_GamepadLStickUp,       \/\/ [Analog]                                         \/\/ M/;"	e	enum:ImGuiKey
ImGuiKey_GamepadR1	./imgui.h	/^    ImGuiKey_GamepadR1,             \/\/ R Bumper (Xbox)  R (Switch)   R1 (PS)            \/\/ T/;"	e	enum:ImGuiKey
ImGuiKey_GamepadR2	./imgui.h	/^    ImGuiKey_GamepadR2,             \/\/ R Trig. (Xbox)   ZR (Switch)  R2 (PS) [Analog]$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadR3	./imgui.h	/^    ImGuiKey_GamepadR3,             \/\/ R Stick (Xbox)   R3 (Switch)  R3 (PS)$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadRStickDown	./imgui.h	/^    ImGuiKey_GamepadRStickDown,     \/\/ [Analog]$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadRStickLeft	./imgui.h	/^    ImGuiKey_GamepadRStickLeft,     \/\/ [Analog]$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadRStickRight	./imgui.h	/^    ImGuiKey_GamepadRStickRight,    \/\/ [Analog]$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadRStickUp	./imgui.h	/^    ImGuiKey_GamepadRStickUp,       \/\/ [Analog]$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadStart	./imgui.h	/^    ImGuiKey_GamepadStart,          \/\/ Menu (Xbox)      + (Switch)   Start\/Options (PS)$/;"	e	enum:ImGuiKey
ImGuiKey_Gamepad_BEGIN	./imgui_internal.h	/^#define ImGuiKey_Gamepad_BEGIN /;"	d
ImGuiKey_Gamepad_END	./imgui_internal.h	/^#define ImGuiKey_Gamepad_END /;"	d
ImGuiKey_GraveAccent	./imgui.h	/^    ImGuiKey_GraveAccent,       \/\/ `$/;"	e	enum:ImGuiKey
ImGuiKey_H	./imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_Home	./imgui.h	/^    ImGuiKey_Home,$/;"	e	enum:ImGuiKey
ImGuiKey_I	./imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_Insert	./imgui.h	/^    ImGuiKey_Insert,$/;"	e	enum:ImGuiKey
ImGuiKey_J	./imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_K	./imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_Keyboard_BEGIN	./imgui_internal.h	/^#define ImGuiKey_Keyboard_BEGIN /;"	d
ImGuiKey_Keyboard_END	./imgui_internal.h	/^#define ImGuiKey_Keyboard_END /;"	d
ImGuiKey_Keypad0	./imgui.h	/^    ImGuiKey_Keypad0, ImGuiKey_Keypad1, ImGuiKey_Keypad2, ImGuiKey_Keypad3, ImGuiKey_Keypad4,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad1	./imgui.h	/^    ImGuiKey_Keypad0, ImGuiKey_Keypad1, ImGuiKey_Keypad2, ImGuiKey_Keypad3, ImGuiKey_Keypad4,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad2	./imgui.h	/^    ImGuiKey_Keypad0, ImGuiKey_Keypad1, ImGuiKey_Keypad2, ImGuiKey_Keypad3, ImGuiKey_Keypad4,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad3	./imgui.h	/^    ImGuiKey_Keypad0, ImGuiKey_Keypad1, ImGuiKey_Keypad2, ImGuiKey_Keypad3, ImGuiKey_Keypad4,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad4	./imgui.h	/^    ImGuiKey_Keypad0, ImGuiKey_Keypad1, ImGuiKey_Keypad2, ImGuiKey_Keypad3, ImGuiKey_Keypad4,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad5	./imgui.h	/^    ImGuiKey_Keypad5, ImGuiKey_Keypad6, ImGuiKey_Keypad7, ImGuiKey_Keypad8, ImGuiKey_Keypad9,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad6	./imgui.h	/^    ImGuiKey_Keypad5, ImGuiKey_Keypad6, ImGuiKey_Keypad7, ImGuiKey_Keypad8, ImGuiKey_Keypad9,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad7	./imgui.h	/^    ImGuiKey_Keypad5, ImGuiKey_Keypad6, ImGuiKey_Keypad7, ImGuiKey_Keypad8, ImGuiKey_Keypad9,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad8	./imgui.h	/^    ImGuiKey_Keypad5, ImGuiKey_Keypad6, ImGuiKey_Keypad7, ImGuiKey_Keypad8, ImGuiKey_Keypad9,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad9	./imgui.h	/^    ImGuiKey_Keypad5, ImGuiKey_Keypad6, ImGuiKey_Keypad7, ImGuiKey_Keypad8, ImGuiKey_Keypad9,$/;"	e	enum:ImGuiKey
ImGuiKey_KeypadAdd	./imgui.h	/^    ImGuiKey_KeypadAdd,$/;"	e	enum:ImGuiKey
ImGuiKey_KeypadDecimal	./imgui.h	/^    ImGuiKey_KeypadDecimal,$/;"	e	enum:ImGuiKey
ImGuiKey_KeypadDivide	./imgui.h	/^    ImGuiKey_KeypadDivide,$/;"	e	enum:ImGuiKey
ImGuiKey_KeypadEnter	./imgui.h	/^    ImGuiKey_KeypadEnter,$/;"	e	enum:ImGuiKey
ImGuiKey_KeypadEqual	./imgui.h	/^    ImGuiKey_KeypadEqual,$/;"	e	enum:ImGuiKey
ImGuiKey_KeypadMultiply	./imgui.h	/^    ImGuiKey_KeypadMultiply,$/;"	e	enum:ImGuiKey
ImGuiKey_KeypadSubtract	./imgui.h	/^    ImGuiKey_KeypadSubtract,$/;"	e	enum:ImGuiKey
ImGuiKey_KeysData_OFFSET	./imgui.h	/^    ImGuiKey_KeysData_OFFSET        = ImGuiKey_NamedKey_BEGIN,  \/\/ Accesses to io.KeysData[] m/;"	e	enum:ImGuiKey
ImGuiKey_KeysData_SIZE	./imgui.h	/^    ImGuiKey_KeysData_SIZE          = ImGuiKey_NamedKey_COUNT,  \/\/ Size of KeysData[]: only ho/;"	e	enum:ImGuiKey
ImGuiKey_L	./imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_LeftAlt	./imgui.h	/^    ImGuiKey_LeftCtrl, ImGuiKey_LeftShift, ImGuiKey_LeftAlt, ImGuiKey_LeftSuper,$/;"	e	enum:ImGuiKey
ImGuiKey_LeftArrow	./imgui.h	/^    ImGuiKey_LeftArrow,$/;"	e	enum:ImGuiKey
ImGuiKey_LeftBracket	./imgui.h	/^    ImGuiKey_LeftBracket,       \/\/ [$/;"	e	enum:ImGuiKey
ImGuiKey_LeftCtrl	./imgui.h	/^    ImGuiKey_LeftCtrl, ImGuiKey_LeftShift, ImGuiKey_LeftAlt, ImGuiKey_LeftSuper,$/;"	e	enum:ImGuiKey
ImGuiKey_LeftShift	./imgui.h	/^    ImGuiKey_LeftCtrl, ImGuiKey_LeftShift, ImGuiKey_LeftAlt, ImGuiKey_LeftSuper,$/;"	e	enum:ImGuiKey
ImGuiKey_LeftSuper	./imgui.h	/^    ImGuiKey_LeftCtrl, ImGuiKey_LeftShift, ImGuiKey_LeftAlt, ImGuiKey_LeftSuper,$/;"	e	enum:ImGuiKey
ImGuiKey_LegacyNativeKey_BEGIN	./imgui_internal.h	/^#define ImGuiKey_LegacyNativeKey_BEGIN /;"	d
ImGuiKey_LegacyNativeKey_END	./imgui_internal.h	/^#define ImGuiKey_LegacyNativeKey_END /;"	d
ImGuiKey_M	./imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_Menu	./imgui.h	/^    ImGuiKey_Menu,$/;"	e	enum:ImGuiKey
ImGuiKey_Minus	./imgui.h	/^    ImGuiKey_Minus,             \/\/ -$/;"	e	enum:ImGuiKey
ImGuiKey_ModAlt	./imgui.h	/^    ImGuiKey_ModCtrl = ImGuiMod_Ctrl, ImGuiKey_ModShift = ImGuiMod_Shift, ImGuiKey_ModAlt = ImGu/;"	e	enum:ImGuiKey
ImGuiKey_ModCtrl	./imgui.h	/^    ImGuiKey_ModCtrl = ImGuiMod_Ctrl, ImGuiKey_ModShift = ImGuiMod_Shift, ImGuiKey_ModAlt = ImGu/;"	e	enum:ImGuiKey
ImGuiKey_ModShift	./imgui.h	/^    ImGuiKey_ModCtrl = ImGuiMod_Ctrl, ImGuiKey_ModShift = ImGuiMod_Shift, ImGuiKey_ModAlt = ImGu/;"	e	enum:ImGuiKey
ImGuiKey_ModSuper	./imgui.h	/^    ImGuiKey_ModCtrl = ImGuiMod_Ctrl, ImGuiKey_ModShift = ImGuiMod_Shift, ImGuiKey_ModAlt = ImGu/;"	e	enum:ImGuiKey
ImGuiKey_MouseLeft	./imgui.h	/^    ImGuiKey_MouseLeft, ImGuiKey_MouseRight, ImGuiKey_MouseMiddle, ImGuiKey_MouseX1, ImGuiKey_Mo/;"	e	enum:ImGuiKey
ImGuiKey_MouseMiddle	./imgui.h	/^    ImGuiKey_MouseLeft, ImGuiKey_MouseRight, ImGuiKey_MouseMiddle, ImGuiKey_MouseX1, ImGuiKey_Mo/;"	e	enum:ImGuiKey
ImGuiKey_MouseRight	./imgui.h	/^    ImGuiKey_MouseLeft, ImGuiKey_MouseRight, ImGuiKey_MouseMiddle, ImGuiKey_MouseX1, ImGuiKey_Mo/;"	e	enum:ImGuiKey
ImGuiKey_MouseWheelX	./imgui.h	/^    ImGuiKey_MouseLeft, ImGuiKey_MouseRight, ImGuiKey_MouseMiddle, ImGuiKey_MouseX1, ImGuiKey_Mo/;"	e	enum:ImGuiKey
ImGuiKey_MouseWheelY	./imgui.h	/^    ImGuiKey_MouseLeft, ImGuiKey_MouseRight, ImGuiKey_MouseMiddle, ImGuiKey_MouseX1, ImGuiKey_Mo/;"	e	enum:ImGuiKey
ImGuiKey_MouseX1	./imgui.h	/^    ImGuiKey_MouseLeft, ImGuiKey_MouseRight, ImGuiKey_MouseMiddle, ImGuiKey_MouseX1, ImGuiKey_Mo/;"	e	enum:ImGuiKey
ImGuiKey_MouseX2	./imgui.h	/^    ImGuiKey_MouseLeft, ImGuiKey_MouseRight, ImGuiKey_MouseMiddle, ImGuiKey_MouseX1, ImGuiKey_Mo/;"	e	enum:ImGuiKey
ImGuiKey_Mouse_BEGIN	./imgui_internal.h	/^#define ImGuiKey_Mouse_BEGIN /;"	d
ImGuiKey_Mouse_END	./imgui_internal.h	/^#define ImGuiKey_Mouse_END /;"	d
ImGuiKey_N	./imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_NamedKey_BEGIN	./imgui.h	/^    ImGuiKey_NamedKey_BEGIN         = 512,$/;"	e	enum:ImGuiKey
ImGuiKey_NamedKey_COUNT	./imgui.h	/^    ImGuiKey_NamedKey_COUNT         = ImGuiKey_NamedKey_END - ImGuiKey_NamedKey_BEGIN,$/;"	e	enum:ImGuiKey
ImGuiKey_NamedKey_END	./imgui.h	/^    ImGuiKey_NamedKey_END           = ImGuiKey_COUNT,$/;"	e	enum:ImGuiKey
ImGuiKey_NavGamepadActivate	./imgui_internal.h	/^#define ImGuiKey_NavGamepadActivate /;"	d
ImGuiKey_NavGamepadCancel	./imgui_internal.h	/^#define ImGuiKey_NavGamepadCancel /;"	d
ImGuiKey_NavGamepadInput	./imgui_internal.h	/^#define ImGuiKey_NavGamepadInput /;"	d
ImGuiKey_NavGamepadMenu	./imgui_internal.h	/^#define ImGuiKey_NavGamepadMenu /;"	d
ImGuiKey_NavGamepadTweakFast	./imgui_internal.h	/^#define ImGuiKey_NavGamepadTweakFast /;"	d
ImGuiKey_NavGamepadTweakSlow	./imgui_internal.h	/^#define ImGuiKey_NavGamepadTweakSlow /;"	d
ImGuiKey_NavKeyboardTweakFast	./imgui_internal.h	/^#define ImGuiKey_NavKeyboardTweakFast /;"	d
ImGuiKey_NavKeyboardTweakSlow	./imgui_internal.h	/^#define ImGuiKey_NavKeyboardTweakSlow /;"	d
ImGuiKey_None	./imgui.h	/^    ImGuiKey_None = 0,$/;"	e	enum:ImGuiKey
ImGuiKey_NumLock	./imgui.h	/^    ImGuiKey_NumLock,$/;"	e	enum:ImGuiKey
ImGuiKey_O	./imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_P	./imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_PageDown	./imgui.h	/^    ImGuiKey_PageDown,$/;"	e	enum:ImGuiKey
ImGuiKey_PageUp	./imgui.h	/^    ImGuiKey_PageUp,$/;"	e	enum:ImGuiKey
ImGuiKey_Pause	./imgui.h	/^    ImGuiKey_Pause,$/;"	e	enum:ImGuiKey
ImGuiKey_Period	./imgui.h	/^    ImGuiKey_Period,            \/\/ .$/;"	e	enum:ImGuiKey
ImGuiKey_PrintScreen	./imgui.h	/^    ImGuiKey_PrintScreen,$/;"	e	enum:ImGuiKey
ImGuiKey_Q	./imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_R	./imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_ReservedForModAlt	./imgui.h	/^    ImGuiKey_ReservedForModCtrl, ImGuiKey_ReservedForModShift, ImGuiKey_ReservedForModAlt, ImGui/;"	e	enum:ImGuiKey
ImGuiKey_ReservedForModCtrl	./imgui.h	/^    ImGuiKey_ReservedForModCtrl, ImGuiKey_ReservedForModShift, ImGuiKey_ReservedForModAlt, ImGui/;"	e	enum:ImGuiKey
ImGuiKey_ReservedForModShift	./imgui.h	/^    ImGuiKey_ReservedForModCtrl, ImGuiKey_ReservedForModShift, ImGuiKey_ReservedForModAlt, ImGui/;"	e	enum:ImGuiKey
ImGuiKey_ReservedForModSuper	./imgui.h	/^    ImGuiKey_ReservedForModCtrl, ImGuiKey_ReservedForModShift, ImGuiKey_ReservedForModAlt, ImGui/;"	e	enum:ImGuiKey
ImGuiKey_RightAlt	./imgui.h	/^    ImGuiKey_RightCtrl, ImGuiKey_RightShift, ImGuiKey_RightAlt, ImGuiKey_RightSuper,$/;"	e	enum:ImGuiKey
ImGuiKey_RightArrow	./imgui.h	/^    ImGuiKey_RightArrow,$/;"	e	enum:ImGuiKey
ImGuiKey_RightBracket	./imgui.h	/^    ImGuiKey_RightBracket,      \/\/ ]$/;"	e	enum:ImGuiKey
ImGuiKey_RightCtrl	./imgui.h	/^    ImGuiKey_RightCtrl, ImGuiKey_RightShift, ImGuiKey_RightAlt, ImGuiKey_RightSuper,$/;"	e	enum:ImGuiKey
ImGuiKey_RightShift	./imgui.h	/^    ImGuiKey_RightCtrl, ImGuiKey_RightShift, ImGuiKey_RightAlt, ImGuiKey_RightSuper,$/;"	e	enum:ImGuiKey
ImGuiKey_RightSuper	./imgui.h	/^    ImGuiKey_RightCtrl, ImGuiKey_RightShift, ImGuiKey_RightAlt, ImGuiKey_RightSuper,$/;"	e	enum:ImGuiKey
ImGuiKey_S	./imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_ScrollLock	./imgui.h	/^    ImGuiKey_ScrollLock,$/;"	e	enum:ImGuiKey
ImGuiKey_Semicolon	./imgui.h	/^    ImGuiKey_Semicolon,         \/\/ ;$/;"	e	enum:ImGuiKey
ImGuiKey_Slash	./imgui.h	/^    ImGuiKey_Slash,             \/\/ \/$/;"	e	enum:ImGuiKey
ImGuiKey_Space	./imgui.h	/^    ImGuiKey_Space,$/;"	e	enum:ImGuiKey
ImGuiKey_T	./imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_Tab	./imgui.h	/^    ImGuiKey_Tab = 512,             \/\/ == ImGuiKey_NamedKey_BEGIN$/;"	e	enum:ImGuiKey
ImGuiKey_U	./imgui.h	/^    ImGuiKey_U, ImGuiKey_V, ImGuiKey_W, ImGuiKey_X, ImGuiKey_Y, ImGuiKey_Z,$/;"	e	enum:ImGuiKey
ImGuiKey_UpArrow	./imgui.h	/^    ImGuiKey_UpArrow,$/;"	e	enum:ImGuiKey
ImGuiKey_V	./imgui.h	/^    ImGuiKey_U, ImGuiKey_V, ImGuiKey_W, ImGuiKey_X, ImGuiKey_Y, ImGuiKey_Z,$/;"	e	enum:ImGuiKey
ImGuiKey_W	./imgui.h	/^    ImGuiKey_U, ImGuiKey_V, ImGuiKey_W, ImGuiKey_X, ImGuiKey_Y, ImGuiKey_Z,$/;"	e	enum:ImGuiKey
ImGuiKey_X	./imgui.h	/^    ImGuiKey_U, ImGuiKey_V, ImGuiKey_W, ImGuiKey_X, ImGuiKey_Y, ImGuiKey_Z,$/;"	e	enum:ImGuiKey
ImGuiKey_Y	./imgui.h	/^    ImGuiKey_U, ImGuiKey_V, ImGuiKey_W, ImGuiKey_X, ImGuiKey_Y, ImGuiKey_Z,$/;"	e	enum:ImGuiKey
ImGuiKey_Z	./imgui.h	/^    ImGuiKey_U, ImGuiKey_V, ImGuiKey_W, ImGuiKey_X, ImGuiKey_Y, ImGuiKey_Z,$/;"	e	enum:ImGuiKey
ImGuiLastItemData	./imgui_internal.h	/^    ImGuiLastItemData()     { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiLastItemData
ImGuiLastItemData	./imgui_internal.h	/^struct ImGuiLastItemData$/;"	s
ImGuiLayoutType	./imgui_internal.h	/^typedef int ImGuiLayoutType;            \/\/ -> enum ImGuiLayoutType_         \/\/ Enum: Horizon/;"	t	typeref:typename:int
ImGuiLayoutType_	./imgui_internal.h	/^enum ImGuiLayoutType_$/;"	g
ImGuiLayoutType_Horizontal	./imgui_internal.h	/^    ImGuiLayoutType_Horizontal = 0,$/;"	e	enum:ImGuiLayoutType_
ImGuiLayoutType_Vertical	./imgui_internal.h	/^    ImGuiLayoutType_Vertical = 1$/;"	e	enum:ImGuiLayoutType_
ImGuiListClipper	./imgui.cpp	/^ImGuiListClipper::ImGuiListClipper()$/;"	f	class:ImGuiListClipper
ImGuiListClipper	./imgui.h	/^struct ImGuiListClipper$/;"	s
ImGuiListClipperData	./imgui_internal.h	/^    ImGuiListClipperData()          { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiListClipperData
ImGuiListClipperData	./imgui_internal.h	/^struct ImGuiListClipperData$/;"	s
ImGuiListClipperRange	./imgui_internal.h	/^struct ImGuiListClipperRange$/;"	s
ImGuiListClipper_SeekCursorAndSetupPrevLine	./imgui.cpp	/^static void ImGuiListClipper_SeekCursorAndSetupPrevLine(float pos_y, float line_height)$/;"	f	typeref:typename:void	file:
ImGuiListClipper_SortAndFuseRanges	./imgui.cpp	/^static void ImGuiListClipper_SortAndFuseRanges(ImVector<ImGuiListClipperRange>& ranges, int offs/;"	f	typeref:typename:void	file:
ImGuiListClipper_StepInternal	./imgui.cpp	/^static bool ImGuiListClipper_StepInternal(ImGuiListClipper* clipper)$/;"	f	typeref:typename:bool	file:
ImGuiLocEntry	./imgui_internal.h	/^struct ImGuiLocEntry$/;"	s
ImGuiLocKey	./imgui_internal.h	/^enum ImGuiLocKey : int$/;"	g	typeref:typename:int
ImGuiLocKey_COUNT	./imgui_internal.h	/^    ImGuiLocKey_COUNT$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_CopyLink	./imgui_internal.h	/^    ImGuiLocKey_CopyLink,$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_TableResetOrder	./imgui_internal.h	/^    ImGuiLocKey_TableResetOrder,$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_TableSizeAllDefault	./imgui_internal.h	/^    ImGuiLocKey_TableSizeAllDefault,$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_TableSizeAllFit	./imgui_internal.h	/^    ImGuiLocKey_TableSizeAllFit,$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_TableSizeOne	./imgui_internal.h	/^    ImGuiLocKey_TableSizeOne,$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_VersionStr	./imgui_internal.h	/^    ImGuiLocKey_VersionStr,$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_WindowingMainMenuBar	./imgui_internal.h	/^    ImGuiLocKey_WindowingMainMenuBar,$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_WindowingPopup	./imgui_internal.h	/^    ImGuiLocKey_WindowingPopup,$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_WindowingUntitled	./imgui_internal.h	/^    ImGuiLocKey_WindowingUntitled,$/;"	e	enum:ImGuiLocKey
ImGuiLogType	./imgui_internal.h	/^enum ImGuiLogType$/;"	g
ImGuiLogType_Buffer	./imgui_internal.h	/^    ImGuiLogType_Buffer,$/;"	e	enum:ImGuiLogType
ImGuiLogType_Clipboard	./imgui_internal.h	/^    ImGuiLogType_Clipboard,$/;"	e	enum:ImGuiLogType
ImGuiLogType_File	./imgui_internal.h	/^    ImGuiLogType_File,$/;"	e	enum:ImGuiLogType
ImGuiLogType_None	./imgui_internal.h	/^    ImGuiLogType_None = 0,$/;"	e	enum:ImGuiLogType
ImGuiLogType_TTY	./imgui_internal.h	/^    ImGuiLogType_TTY,$/;"	e	enum:ImGuiLogType
ImGuiLunasvgPortFree	./misc/freetype/imgui_freetype.cpp	/^static void ImGuiLunasvgPortFree(FT_Pointer* _state)$/;"	f	typeref:typename:void	file:
ImGuiLunasvgPortInit	./misc/freetype/imgui_freetype.cpp	/^static FT_Error ImGuiLunasvgPortInit(FT_Pointer* _state)$/;"	f	typeref:typename:FT_Error	file:
ImGuiLunasvgPortPresetSlot	./misc/freetype/imgui_freetype.cpp	/^static FT_Error ImGuiLunasvgPortPresetSlot(FT_GlyphSlot slot, FT_Bool cache, FT_Pointer* _state)$/;"	f	typeref:typename:FT_Error	file:
ImGuiLunasvgPortRender	./misc/freetype/imgui_freetype.cpp	/^static FT_Error ImGuiLunasvgPortRender(FT_GlyphSlot slot, FT_Pointer* _state)$/;"	f	typeref:typename:FT_Error	file:
ImGuiMemAllocFunc	./imgui.h	/^typedef void*   (*ImGuiMemAllocFunc)(size_t sz, void* user_data);               \/\/ Function si/;"	t	typeref:typename:void * (*)(size_t sz,void * user_data)
ImGuiMemFreeFunc	./imgui.h	/^typedef void    (*ImGuiMemFreeFunc)(void* ptr, void* user_data);                \/\/ Function si/;"	t	typeref:typename:void (*)(void * ptr,void * user_data)
ImGuiMenuColumns	./imgui_internal.h	/^    ImGuiMenuColumns() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiMenuColumns
ImGuiMenuColumns	./imgui_internal.h	/^struct IMGUI_API ImGuiMenuColumns$/;"	s
ImGuiMetricsConfig	./imgui_internal.h	/^struct ImGuiMetricsConfig$/;"	s
ImGuiMod_Alt	./imgui.h	/^    ImGuiMod_Alt                    = 1 << 14, \/\/ Option\/Menu$/;"	e	enum:ImGuiKey
ImGuiMod_Ctrl	./imgui.h	/^    ImGuiMod_Ctrl                   = 1 << 12, \/\/ Ctrl (non-macOS), Cmd (macOS)$/;"	e	enum:ImGuiKey
ImGuiMod_Mask_	./imgui.h	/^    ImGuiMod_Mask_                  = 0xF000,  \/\/ 4-bits$/;"	e	enum:ImGuiKey
ImGuiMod_None	./imgui.h	/^    ImGuiMod_None                   = 0,$/;"	e	enum:ImGuiKey
ImGuiMod_Shift	./imgui.h	/^    ImGuiMod_Shift                  = 1 << 13, \/\/ Shift$/;"	e	enum:ImGuiKey
ImGuiMod_Shortcut	./imgui.h	/^    ImGuiMod_Shortcut               = ImGuiMod_Ctrl,            \/\/ Removed in 1.90.7, you can /;"	e	enum:ImGuiKey
ImGuiMod_Super	./imgui.h	/^    ImGuiMod_Super                  = 1 << 15, \/\/ Windows\/Super (non-macOS), Ctrl (macOS)$/;"	e	enum:ImGuiKey
ImGuiMouseButton	./imgui.h	/^typedef int ImGuiMouseButton;       \/\/ -> enum ImGuiMouseButton_     \/\/ Enum: A mouse button/;"	t	typeref:typename:int
ImGuiMouseButton_	./imgui.h	/^enum ImGuiMouseButton_$/;"	g
ImGuiMouseButton_COUNT	./imgui.h	/^    ImGuiMouseButton_COUNT = 5$/;"	e	enum:ImGuiMouseButton_
ImGuiMouseButton_Left	./imgui.h	/^    ImGuiMouseButton_Left = 0,$/;"	e	enum:ImGuiMouseButton_
ImGuiMouseButton_Middle	./imgui.h	/^    ImGuiMouseButton_Middle = 2,$/;"	e	enum:ImGuiMouseButton_
ImGuiMouseButton_Right	./imgui.h	/^    ImGuiMouseButton_Right = 1,$/;"	e	enum:ImGuiMouseButton_
ImGuiMouseCursor	./imgui.h	/^typedef int ImGuiMouseCursor;       \/\/ -> enum ImGuiMouseCursor_     \/\/ Enum: A mouse cursor/;"	t	typeref:typename:int
ImGuiMouseCursor_	./imgui.h	/^enum ImGuiMouseCursor_$/;"	g
ImGuiMouseCursor_Arrow	./imgui.h	/^    ImGuiMouseCursor_Arrow = 0,$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_COUNT	./imgui.h	/^    ImGuiMouseCursor_COUNT$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_Hand	./imgui.h	/^    ImGuiMouseCursor_Hand,              \/\/ (Unused by Dear ImGui functions. Use for e.g. hyper/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_None	./imgui.h	/^    ImGuiMouseCursor_None = -1,$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_NotAllowed	./imgui.h	/^    ImGuiMouseCursor_NotAllowed,        \/\/ When hovering something with disallowed interaction/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeAll	./imgui.h	/^    ImGuiMouseCursor_ResizeAll,         \/\/ (Unused by Dear ImGui functions)$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeEW	./imgui.h	/^    ImGuiMouseCursor_ResizeEW,          \/\/ When hovering over a vertical border or a column$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeNESW	./imgui.h	/^    ImGuiMouseCursor_ResizeNESW,        \/\/ When hovering over the bottom-left corner of a wind/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeNS	./imgui.h	/^    ImGuiMouseCursor_ResizeNS,          \/\/ When hovering over a horizontal border$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeNWSE	./imgui.h	/^    ImGuiMouseCursor_ResizeNWSE,        \/\/ When hovering over the bottom-right corner of a win/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_TextInput	./imgui.h	/^    ImGuiMouseCursor_TextInput,         \/\/ When hovering over InputText, etc.$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseSource	./imgui.h	/^enum ImGuiMouseSource : int$/;"	g	typeref:typename:int
ImGuiMouseSource_COUNT	./imgui.h	/^    ImGuiMouseSource_COUNT$/;"	e	enum:ImGuiMouseSource
ImGuiMouseSource_Mouse	./imgui.h	/^    ImGuiMouseSource_Mouse = 0,         \/\/ Input is coming from an actual mouse.$/;"	e	enum:ImGuiMouseSource
ImGuiMouseSource_Pen	./imgui.h	/^    ImGuiMouseSource_Pen,               \/\/ Input is coming from a pressure\/magnetic pen (ofte/;"	e	enum:ImGuiMouseSource
ImGuiMouseSource_TouchScreen	./imgui.h	/^    ImGuiMouseSource_TouchScreen,       \/\/ Input is coming from a touch screen (no hovering pr/;"	e	enum:ImGuiMouseSource
ImGuiMultiSelectFlags	./imgui.h	/^typedef int ImGuiMultiSelectFlags;  \/\/ -> enum ImGuiMultiSelectFlags_\/\/ Flags: for BeginMult/;"	t	typeref:typename:int
ImGuiMultiSelectFlags_	./imgui.h	/^enum ImGuiMultiSelectFlags_$/;"	g
ImGuiMultiSelectFlags_BoxSelect1d	./imgui.h	/^    ImGuiMultiSelectFlags_BoxSelect1d           = 1 << 6,   \/\/ Enable box-selection with same /;"	e	enum:ImGuiMultiSelectFlags_
ImGuiMultiSelectFlags_BoxSelect2d	./imgui.h	/^    ImGuiMultiSelectFlags_BoxSelect2d           = 1 << 7,   \/\/ Enable box-selection with varyi/;"	e	enum:ImGuiMultiSelectFlags_
ImGuiMultiSelectFlags_BoxSelectNoScroll	./imgui.h	/^    ImGuiMultiSelectFlags_BoxSelectNoScroll     = 1 << 8,   \/\/ Disable scrolling when box-sele/;"	e	enum:ImGuiMultiSelectFlags_
ImGuiMultiSelectFlags_ClearOnClickVoid	./imgui.h	/^    ImGuiMultiSelectFlags_ClearOnClickVoid      = 1 << 10,  \/\/ Clear selection when clicking o/;"	e	enum:ImGuiMultiSelectFlags_
ImGuiMultiSelectFlags_ClearOnEscape	./imgui.h	/^    ImGuiMultiSelectFlags_ClearOnEscape         = 1 << 9,   \/\/ Clear selection when pressing E/;"	e	enum:ImGuiMultiSelectFlags_
ImGuiMultiSelectFlags_NavWrapX	./imgui.h	/^    ImGuiMultiSelectFlags_NavWrapX              = 1 << 16,  \/\/ [Temporary] Enable navigation w/;"	e	enum:ImGuiMultiSelectFlags_
ImGuiMultiSelectFlags_NoAutoClear	./imgui.h	/^    ImGuiMultiSelectFlags_NoAutoClear           = 1 << 4,   \/\/ Disable clearing selection when/;"	e	enum:ImGuiMultiSelectFlags_
ImGuiMultiSelectFlags_NoAutoClearOnReselect	./imgui.h	/^    ImGuiMultiSelectFlags_NoAutoClearOnReselect = 1 << 5,   \/\/ Disable clearing selection when/;"	e	enum:ImGuiMultiSelectFlags_
ImGuiMultiSelectFlags_NoAutoSelect	./imgui.h	/^    ImGuiMultiSelectFlags_NoAutoSelect          = 1 << 3,   \/\/ Disable selecting items when na/;"	e	enum:ImGuiMultiSelectFlags_
ImGuiMultiSelectFlags_NoRangeSelect	./imgui.h	/^    ImGuiMultiSelectFlags_NoRangeSelect         = 1 << 2,   \/\/ Disable Shift+selection mouse\//;"	e	enum:ImGuiMultiSelectFlags_
ImGuiMultiSelectFlags_NoSelectAll	./imgui.h	/^    ImGuiMultiSelectFlags_NoSelectAll           = 1 << 1,   \/\/ Disable CTRL+A shortcut to sele/;"	e	enum:ImGuiMultiSelectFlags_
ImGuiMultiSelectFlags_None	./imgui.h	/^    ImGuiMultiSelectFlags_None                  = 0,$/;"	e	enum:ImGuiMultiSelectFlags_
ImGuiMultiSelectFlags_ScopeRect	./imgui.h	/^    ImGuiMultiSelectFlags_ScopeRect             = 1 << 12,  \/\/ Scope for _BoxSelect and _Clear/;"	e	enum:ImGuiMultiSelectFlags_
ImGuiMultiSelectFlags_ScopeWindow	./imgui.h	/^    ImGuiMultiSelectFlags_ScopeWindow           = 1 << 11,  \/\/ Scope for _BoxSelect and _Clear/;"	e	enum:ImGuiMultiSelectFlags_
ImGuiMultiSelectFlags_SelectOnClick	./imgui.h	/^    ImGuiMultiSelectFlags_SelectOnClick         = 1 << 13,  \/\/ Apply selection on mouse down w/;"	e	enum:ImGuiMultiSelectFlags_
ImGuiMultiSelectFlags_SelectOnClickRelease	./imgui.h	/^    ImGuiMultiSelectFlags_SelectOnClickRelease  = 1 << 14,  \/\/ Apply selection on mouse releas/;"	e	enum:ImGuiMultiSelectFlags_
ImGuiMultiSelectFlags_SingleSelect	./imgui.h	/^    ImGuiMultiSelectFlags_SingleSelect          = 1 << 0,   \/\/ Disable selecting more than one/;"	e	enum:ImGuiMultiSelectFlags_
ImGuiMultiSelectIO	./imgui.h	/^struct ImGuiMultiSelectIO$/;"	s
ImGuiMultiSelectState	./imgui_internal.h	/^    ImGuiMultiSelectState() { Window = NULL; ID = 0; LastFrameActive = LastSelectionSize = 0; Ra/;"	f	struct:ImGuiMultiSelectState
ImGuiMultiSelectState	./imgui_internal.h	/^struct IMGUI_API ImGuiMultiSelectState$/;"	s
ImGuiMultiSelectTempData	./imgui_internal.h	/^    ImGuiMultiSelectTempData()  { Clear(); }$/;"	f	struct:ImGuiMultiSelectTempData
ImGuiMultiSelectTempData	./imgui_internal.h	/^struct IMGUI_API ImGuiMultiSelectTempData$/;"	s
ImGuiNavHighlightFlags	./imgui_internal.h	/^typedef int ImGuiNavHighlightFlags;     \/\/ -> enum ImGuiNavHighlightFlags_  \/\/ Flags: for Re/;"	t	typeref:typename:int
ImGuiNavHighlightFlags_	./imgui_internal.h	/^enum ImGuiNavHighlightFlags_$/;"	g
ImGuiNavHighlightFlags_AlwaysDraw	./imgui_internal.h	/^    ImGuiNavHighlightFlags_AlwaysDraw       = 1 << 2,       \/\/ Draw rectangular highlight if (/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavHighlightFlags_Compact	./imgui_internal.h	/^    ImGuiNavHighlightFlags_Compact          = 1 << 1,       \/\/ Compact highlight, no padding$/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavHighlightFlags_NoRounding	./imgui_internal.h	/^    ImGuiNavHighlightFlags_NoRounding       = 1 << 3,$/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavHighlightFlags_None	./imgui_internal.h	/^    ImGuiNavHighlightFlags_None             = 0,$/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavInput	./imgui.h	/^enum ImGuiNavInput$/;"	g
ImGuiNavInput_Activate	./imgui.h	/^    ImGuiNavInput_Activate, ImGuiNavInput_Cancel, ImGuiNavInput_Input, ImGuiNavInput_Menu, ImGui/;"	e	enum:ImGuiNavInput
ImGuiNavInput_COUNT	./imgui.h	/^    ImGuiNavInput_COUNT,$/;"	e	enum:ImGuiNavInput
ImGuiNavInput_Cancel	./imgui.h	/^    ImGuiNavInput_Activate, ImGuiNavInput_Cancel, ImGuiNavInput_Input, ImGuiNavInput_Menu, ImGui/;"	e	enum:ImGuiNavInput
ImGuiNavInput_DpadDown	./imgui.h	/^    ImGuiNavInput_Activate, ImGuiNavInput_Cancel, ImGuiNavInput_Input, ImGuiNavInput_Menu, ImGui/;"	e	enum:ImGuiNavInput
ImGuiNavInput_DpadLeft	./imgui.h	/^    ImGuiNavInput_Activate, ImGuiNavInput_Cancel, ImGuiNavInput_Input, ImGuiNavInput_Menu, ImGui/;"	e	enum:ImGuiNavInput
ImGuiNavInput_DpadRight	./imgui.h	/^    ImGuiNavInput_Activate, ImGuiNavInput_Cancel, ImGuiNavInput_Input, ImGuiNavInput_Menu, ImGui/;"	e	enum:ImGuiNavInput
ImGuiNavInput_DpadUp	./imgui.h	/^    ImGuiNavInput_Activate, ImGuiNavInput_Cancel, ImGuiNavInput_Input, ImGuiNavInput_Menu, ImGui/;"	e	enum:ImGuiNavInput
ImGuiNavInput_FocusNext	./imgui.h	/^    ImGuiNavInput_LStickLeft, ImGuiNavInput_LStickRight, ImGuiNavInput_LStickUp, ImGuiNavInput_L/;"	e	enum:ImGuiNavInput
ImGuiNavInput_FocusPrev	./imgui.h	/^    ImGuiNavInput_LStickLeft, ImGuiNavInput_LStickRight, ImGuiNavInput_LStickUp, ImGuiNavInput_L/;"	e	enum:ImGuiNavInput
ImGuiNavInput_Input	./imgui.h	/^    ImGuiNavInput_Activate, ImGuiNavInput_Cancel, ImGuiNavInput_Input, ImGuiNavInput_Menu, ImGui/;"	e	enum:ImGuiNavInput
ImGuiNavInput_LStickDown	./imgui.h	/^    ImGuiNavInput_LStickLeft, ImGuiNavInput_LStickRight, ImGuiNavInput_LStickUp, ImGuiNavInput_L/;"	e	enum:ImGuiNavInput
ImGuiNavInput_LStickLeft	./imgui.h	/^    ImGuiNavInput_LStickLeft, ImGuiNavInput_LStickRight, ImGuiNavInput_LStickUp, ImGuiNavInput_L/;"	e	enum:ImGuiNavInput
ImGuiNavInput_LStickRight	./imgui.h	/^    ImGuiNavInput_LStickLeft, ImGuiNavInput_LStickRight, ImGuiNavInput_LStickUp, ImGuiNavInput_L/;"	e	enum:ImGuiNavInput
ImGuiNavInput_LStickUp	./imgui.h	/^    ImGuiNavInput_LStickLeft, ImGuiNavInput_LStickRight, ImGuiNavInput_LStickUp, ImGuiNavInput_L/;"	e	enum:ImGuiNavInput
ImGuiNavInput_Menu	./imgui.h	/^    ImGuiNavInput_Activate, ImGuiNavInput_Cancel, ImGuiNavInput_Input, ImGuiNavInput_Menu, ImGui/;"	e	enum:ImGuiNavInput
ImGuiNavInput_TweakFast	./imgui.h	/^    ImGuiNavInput_LStickLeft, ImGuiNavInput_LStickRight, ImGuiNavInput_LStickUp, ImGuiNavInput_L/;"	e	enum:ImGuiNavInput
ImGuiNavInput_TweakSlow	./imgui.h	/^    ImGuiNavInput_LStickLeft, ImGuiNavInput_LStickRight, ImGuiNavInput_LStickUp, ImGuiNavInput_L/;"	e	enum:ImGuiNavInput
ImGuiNavItemData	./imgui_internal.h	/^    ImGuiNavItemData()  { Clear(); }$/;"	f	struct:ImGuiNavItemData
ImGuiNavItemData	./imgui_internal.h	/^struct ImGuiNavItemData$/;"	s
ImGuiNavLayer	./imgui_internal.h	/^enum ImGuiNavLayer$/;"	g
ImGuiNavLayer_COUNT	./imgui_internal.h	/^    ImGuiNavLayer_COUNT$/;"	e	enum:ImGuiNavLayer
ImGuiNavLayer_Main	./imgui_internal.h	/^    ImGuiNavLayer_Main  = 0,    \/\/ Main scrolling layer$/;"	e	enum:ImGuiNavLayer
ImGuiNavLayer_Menu	./imgui_internal.h	/^    ImGuiNavLayer_Menu  = 1,    \/\/ Menu layer (access with Alt)$/;"	e	enum:ImGuiNavLayer
ImGuiNavMoveFlags	./imgui_internal.h	/^typedef int ImGuiNavMoveFlags;          \/\/ -> enum ImGuiNavMoveFlags_       \/\/ Flags: for na/;"	t	typeref:typename:int
ImGuiNavMoveFlags_	./imgui_internal.h	/^enum ImGuiNavMoveFlags_$/;"	g
ImGuiNavMoveFlags_Activate	./imgui_internal.h	/^    ImGuiNavMoveFlags_Activate              = 1 << 12,  \/\/ Activate\/select target item.$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_AllowCurrentNavId	./imgui_internal.h	/^    ImGuiNavMoveFlags_AllowCurrentNavId     = 1 << 4,   \/\/ Allow scoring and considering the c/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_AlsoScoreVisibleSet	./imgui_internal.h	/^    ImGuiNavMoveFlags_AlsoScoreVisibleSet   = 1 << 5,   \/\/ Store alternate result in NavMoveRe/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_DebugNoResult	./imgui_internal.h	/^    ImGuiNavMoveFlags_DebugNoResult         = 1 << 8,   \/\/ Dummy scoring for debug purpose, do/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_FocusApi	./imgui_internal.h	/^    ImGuiNavMoveFlags_FocusApi              = 1 << 9,   \/\/ Requests from focus API can land\/f/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_Forwarded	./imgui_internal.h	/^    ImGuiNavMoveFlags_Forwarded             = 1 << 7,$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_IsPageMove	./imgui_internal.h	/^    ImGuiNavMoveFlags_IsPageMove            = 1 << 11,  \/\/ Identify a PageDown\/PageUp request/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_IsTabbing	./imgui_internal.h	/^    ImGuiNavMoveFlags_IsTabbing             = 1 << 10,  \/\/ == Focus + Activate if item is Inpu/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_LoopX	./imgui_internal.h	/^    ImGuiNavMoveFlags_LoopX                 = 1 << 0,   \/\/ On failed request, restart from opp/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_LoopY	./imgui_internal.h	/^    ImGuiNavMoveFlags_LoopY                 = 1 << 1,$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_NoClearActiveId	./imgui_internal.h	/^    ImGuiNavMoveFlags_NoClearActiveId       = 1 << 15,  \/\/ (Experimental) Do not clear active /;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_NoSelect	./imgui_internal.h	/^    ImGuiNavMoveFlags_NoSelect              = 1 << 13,  \/\/ Don't trigger selection by not sett/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_NoSetNavHighlight	./imgui_internal.h	/^    ImGuiNavMoveFlags_NoSetNavHighlight     = 1 << 14,  \/\/ Do not alter the visible state of k/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_None	./imgui_internal.h	/^    ImGuiNavMoveFlags_None                  = 0,$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_ScrollToEdgeY	./imgui_internal.h	/^    ImGuiNavMoveFlags_ScrollToEdgeY         = 1 << 6,   \/\/ Force scrolling to min\/max (used b/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_WrapMask_	./imgui_internal.h	/^    ImGuiNavMoveFlags_WrapMask_             = ImGuiNavMoveFlags_LoopX | ImGuiNavMoveFlags_LoopY /;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_WrapX	./imgui_internal.h	/^    ImGuiNavMoveFlags_WrapX                 = 1 << 2,   \/\/ On failed request, request from opp/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_WrapY	./imgui_internal.h	/^    ImGuiNavMoveFlags_WrapY                 = 1 << 3,   \/\/ This is not super useful but provid/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNextItemData	./imgui_internal.h	/^    ImGuiNextItemData()         { memset(this, 0, sizeof(*this)); SelectionUserData = -1; }$/;"	f	struct:ImGuiNextItemData
ImGuiNextItemData	./imgui_internal.h	/^struct ImGuiNextItemData$/;"	s
ImGuiNextItemDataFlags	./imgui_internal.h	/^typedef int ImGuiNextItemDataFlags;     \/\/ -> enum ImGuiNextItemDataFlags_  \/\/ Flags: for Se/;"	t	typeref:typename:int
ImGuiNextItemDataFlags_	./imgui_internal.h	/^enum ImGuiNextItemDataFlags_$/;"	g
ImGuiNextItemDataFlags_HasOpen	./imgui_internal.h	/^    ImGuiNextItemDataFlags_HasOpen      = 1 << 1,$/;"	e	enum:ImGuiNextItemDataFlags_
ImGuiNextItemDataFlags_HasRefVal	./imgui_internal.h	/^    ImGuiNextItemDataFlags_HasRefVal    = 1 << 3,$/;"	e	enum:ImGuiNextItemDataFlags_
ImGuiNextItemDataFlags_HasShortcut	./imgui_internal.h	/^    ImGuiNextItemDataFlags_HasShortcut  = 1 << 2,$/;"	e	enum:ImGuiNextItemDataFlags_
ImGuiNextItemDataFlags_HasStorageID	./imgui_internal.h	/^    ImGuiNextItemDataFlags_HasStorageID = 1 << 4,$/;"	e	enum:ImGuiNextItemDataFlags_
ImGuiNextItemDataFlags_HasWidth	./imgui_internal.h	/^    ImGuiNextItemDataFlags_HasWidth     = 1 << 0,$/;"	e	enum:ImGuiNextItemDataFlags_
ImGuiNextItemDataFlags_None	./imgui_internal.h	/^    ImGuiNextItemDataFlags_None         = 0,$/;"	e	enum:ImGuiNextItemDataFlags_
ImGuiNextWindowData	./imgui_internal.h	/^    ImGuiNextWindowData()       { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiNextWindowData
ImGuiNextWindowData	./imgui_internal.h	/^struct ImGuiNextWindowData$/;"	s
ImGuiNextWindowDataFlags	./imgui_internal.h	/^typedef int ImGuiNextWindowDataFlags;   \/\/ -> enum ImGuiNextWindowDataFlags_\/\/ Flags: for Se/;"	t	typeref:typename:int
ImGuiNextWindowDataFlags_	./imgui_internal.h	/^enum ImGuiNextWindowDataFlags_$/;"	g
ImGuiNextWindowDataFlags_HasBgAlpha	./imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasBgAlpha         = 1 << 6,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasChildFlags	./imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasChildFlags      = 1 << 8,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasCollapsed	./imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasCollapsed       = 1 << 3,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasContentSize	./imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasContentSize     = 1 << 2,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasFocus	./imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasFocus           = 1 << 5,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasPos	./imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasPos             = 1 << 0,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasRefreshPolicy	./imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasRefreshPolicy   = 1 << 9,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasScroll	./imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasScroll          = 1 << 7,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasSize	./imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasSize            = 1 << 1,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasSizeConstraint	./imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasSizeConstraint  = 1 << 4,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_None	./imgui_internal.h	/^    ImGuiNextWindowDataFlags_None               = 0,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiObserver	./backends/imgui_impl_osx.mm	/^@implementation ImGuiObserver$/;"	I
ImGuiObserver	./backends/imgui_impl_osx.mm	/^@interface ImGuiObserver : NSObject$/;"	i
ImGuiOldColumnData	./imgui_internal.h	/^    ImGuiOldColumnData() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiOldColumnData
ImGuiOldColumnData	./imgui_internal.h	/^struct ImGuiOldColumnData$/;"	s
ImGuiOldColumnFlags	./imgui_internal.h	/^typedef int ImGuiOldColumnFlags;        \/\/ -> enum ImGuiOldColumnFlags_     \/\/ Flags: for Be/;"	t	typeref:typename:int
ImGuiOldColumnFlags_	./imgui_internal.h	/^enum ImGuiOldColumnFlags_$/;"	g
ImGuiOldColumnFlags_GrowParentContentsSize	./imgui_internal.h	/^    ImGuiOldColumnFlags_GrowParentContentsSize  = 1 << 4,   \/\/ Restore pre-1.51 behavior of ex/;"	e	enum:ImGuiOldColumnFlags_
ImGuiOldColumnFlags_NoBorder	./imgui_internal.h	/^    ImGuiOldColumnFlags_NoBorder                = 1 << 0,   \/\/ Disable column dividers$/;"	e	enum:ImGuiOldColumnFlags_
ImGuiOldColumnFlags_NoForceWithinWindow	./imgui_internal.h	/^    ImGuiOldColumnFlags_NoForceWithinWindow     = 1 << 3,   \/\/ Disable forcing columns to fit /;"	e	enum:ImGuiOldColumnFlags_
ImGuiOldColumnFlags_NoPreserveWidths	./imgui_internal.h	/^    ImGuiOldColumnFlags_NoPreserveWidths        = 1 << 2,   \/\/ Disable column width preservati/;"	e	enum:ImGuiOldColumnFlags_
ImGuiOldColumnFlags_NoResize	./imgui_internal.h	/^    ImGuiOldColumnFlags_NoResize                = 1 << 1,   \/\/ Disable resizing columns when c/;"	e	enum:ImGuiOldColumnFlags_
ImGuiOldColumnFlags_None	./imgui_internal.h	/^    ImGuiOldColumnFlags_None                    = 0,$/;"	e	enum:ImGuiOldColumnFlags_
ImGuiOldColumns	./imgui_internal.h	/^    ImGuiOldColumns()   { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiOldColumns
ImGuiOldColumns	./imgui_internal.h	/^struct ImGuiOldColumns$/;"	s
ImGuiOnceUponAFrame	./imgui.h	/^    ImGuiOnceUponAFrame() { RefFrame = -1; }$/;"	f	struct:ImGuiOnceUponAFrame
ImGuiOnceUponAFrame	./imgui.h	/^struct ImGuiOnceUponAFrame$/;"	s
ImGuiPayload	./imgui.h	/^    ImGuiPayload()  { Clear(); }$/;"	f	struct:ImGuiPayload
ImGuiPayload	./imgui.h	/^struct ImGuiPayload$/;"	s
ImGuiPlatformIO	./imgui.cpp	/^ImGuiPlatformIO::ImGuiPlatformIO()$/;"	f	class:ImGuiPlatformIO
ImGuiPlatformIO	./imgui.h	/^struct ImGuiPlatformIO$/;"	s
ImGuiPlatformImeData	./imgui.h	/^    ImGuiPlatformImeData() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiPlatformImeData
ImGuiPlatformImeData	./imgui.h	/^struct ImGuiPlatformImeData$/;"	s
ImGuiPlotArrayGetterData	./imgui_widgets.cpp	/^    ImGuiPlotArrayGetterData(const float* values, int stride) { Values = values; Stride = stride/;"	f	struct:ImGuiPlotArrayGetterData	file:
ImGuiPlotArrayGetterData	./imgui_widgets.cpp	/^struct ImGuiPlotArrayGetterData$/;"	s	file:
ImGuiPlotType	./imgui_internal.h	/^enum ImGuiPlotType$/;"	g
ImGuiPlotType_Histogram	./imgui_internal.h	/^    ImGuiPlotType_Histogram,$/;"	e	enum:ImGuiPlotType
ImGuiPlotType_Lines	./imgui_internal.h	/^    ImGuiPlotType_Lines,$/;"	e	enum:ImGuiPlotType
ImGuiPopupData	./imgui_internal.h	/^    ImGuiPopupData()    { memset(this, 0, sizeof(*this)); ParentNavLayer = OpenFrameCount = -1; /;"	f	struct:ImGuiPopupData
ImGuiPopupData	./imgui_internal.h	/^struct ImGuiPopupData$/;"	s
ImGuiPopupFlags	./imgui.h	/^typedef int ImGuiPopupFlags;        \/\/ -> enum ImGuiPopupFlags_      \/\/ Flags: for OpenPopup/;"	t	typeref:typename:int
ImGuiPopupFlags_	./imgui.h	/^enum ImGuiPopupFlags_$/;"	g
ImGuiPopupFlags_AnyPopup	./imgui.h	/^    ImGuiPopupFlags_AnyPopup                = ImGuiPopupFlags_AnyPopupId | ImGuiPopupFlags_AnyPo/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_AnyPopupId	./imgui.h	/^    ImGuiPopupFlags_AnyPopupId              = 1 << 10,  \/\/ For IsPopupOpen(): ignore the ImGui/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_AnyPopupLevel	./imgui.h	/^    ImGuiPopupFlags_AnyPopupLevel           = 1 << 11,  \/\/ For IsPopupOpen(): search\/test at /;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_MouseButtonDefault_	./imgui.h	/^    ImGuiPopupFlags_MouseButtonDefault_     = 1,$/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_MouseButtonLeft	./imgui.h	/^    ImGuiPopupFlags_MouseButtonLeft         = 0,        \/\/ For BeginPopupContext*(): open on L/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_MouseButtonMask_	./imgui.h	/^    ImGuiPopupFlags_MouseButtonMask_        = 0x1F,$/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_MouseButtonMiddle	./imgui.h	/^    ImGuiPopupFlags_MouseButtonMiddle       = 2,        \/\/ For BeginPopupContext*(): open on M/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_MouseButtonRight	./imgui.h	/^    ImGuiPopupFlags_MouseButtonRight        = 1,        \/\/ For BeginPopupContext*(): open on R/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_NoOpenOverExistingPopup	./imgui.h	/^    ImGuiPopupFlags_NoOpenOverExistingPopup = 1 << 7,   \/\/ For OpenPopup*(), BeginPopupContext/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_NoOpenOverItems	./imgui.h	/^    ImGuiPopupFlags_NoOpenOverItems         = 1 << 8,   \/\/ For BeginPopupContextWindow(): don'/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_NoReopen	./imgui.h	/^    ImGuiPopupFlags_NoReopen                = 1 << 5,   \/\/ For OpenPopup*(), BeginPopupContext/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_None	./imgui.h	/^    ImGuiPopupFlags_None                    = 0,$/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupPositionPolicy	./imgui_internal.h	/^enum ImGuiPopupPositionPolicy$/;"	g
ImGuiPopupPositionPolicy_ComboBox	./imgui_internal.h	/^    ImGuiPopupPositionPolicy_ComboBox,$/;"	e	enum:ImGuiPopupPositionPolicy
ImGuiPopupPositionPolicy_Default	./imgui_internal.h	/^    ImGuiPopupPositionPolicy_Default,$/;"	e	enum:ImGuiPopupPositionPolicy
ImGuiPopupPositionPolicy_Tooltip	./imgui_internal.h	/^    ImGuiPopupPositionPolicy_Tooltip,$/;"	e	enum:ImGuiPopupPositionPolicy
ImGuiPtrOrIndex	./imgui_internal.h	/^    ImGuiPtrOrIndex(int index)  { Ptr = NULL; Index = index; }$/;"	f	struct:ImGuiPtrOrIndex
ImGuiPtrOrIndex	./imgui_internal.h	/^    ImGuiPtrOrIndex(void* ptr)  { Ptr = ptr; Index = -1; }$/;"	f	struct:ImGuiPtrOrIndex
ImGuiPtrOrIndex	./imgui_internal.h	/^struct ImGuiPtrOrIndex$/;"	s
ImGuiResizeBorderDef	./imgui.cpp	/^struct ImGuiResizeBorderDef$/;"	s	file:
ImGuiResizeGripDef	./imgui.cpp	/^struct ImGuiResizeGripDef$/;"	s	file:
ImGuiScrollFlags	./imgui_internal.h	/^typedef int ImGuiScrollFlags;           \/\/ -> enum ImGuiScrollFlags_        \/\/ Flags: for Sc/;"	t	typeref:typename:int
ImGuiScrollFlags_	./imgui_internal.h	/^enum ImGuiScrollFlags_$/;"	g
ImGuiScrollFlags_AlwaysCenterX	./imgui_internal.h	/^    ImGuiScrollFlags_AlwaysCenterX          = 1 << 4,       \/\/ Always center the result item o/;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_AlwaysCenterY	./imgui_internal.h	/^    ImGuiScrollFlags_AlwaysCenterY          = 1 << 5,       \/\/ Always center the result item o/;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_KeepVisibleCenterX	./imgui_internal.h	/^    ImGuiScrollFlags_KeepVisibleCenterX     = 1 << 2,       \/\/ If item is not visible: scroll /;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_KeepVisibleCenterY	./imgui_internal.h	/^    ImGuiScrollFlags_KeepVisibleCenterY     = 1 << 3,       \/\/ If item is not visible: scroll /;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_KeepVisibleEdgeX	./imgui_internal.h	/^    ImGuiScrollFlags_KeepVisibleEdgeX       = 1 << 0,       \/\/ If item is not visible: scroll /;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_KeepVisibleEdgeY	./imgui_internal.h	/^    ImGuiScrollFlags_KeepVisibleEdgeY       = 1 << 1,       \/\/ If item is not visible: scroll /;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_MaskX_	./imgui_internal.h	/^    ImGuiScrollFlags_MaskX_                 = ImGuiScrollFlags_KeepVisibleEdgeX | ImGuiScrollFla/;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_MaskY_	./imgui_internal.h	/^    ImGuiScrollFlags_MaskY_                 = ImGuiScrollFlags_KeepVisibleEdgeY | ImGuiScrollFla/;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_NoScrollParent	./imgui_internal.h	/^    ImGuiScrollFlags_NoScrollParent         = 1 << 6,       \/\/ Disable forwarding scrolling to/;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_None	./imgui_internal.h	/^    ImGuiScrollFlags_None                   = 0,$/;"	e	enum:ImGuiScrollFlags_
ImGuiSelectableFlags	./imgui.h	/^typedef int ImGuiSelectableFlags;   \/\/ -> enum ImGuiSelectableFlags_ \/\/ Flags: for Selectabl/;"	t	typeref:typename:int
ImGuiSelectableFlagsPrivate_	./imgui_internal.h	/^enum ImGuiSelectableFlagsPrivate_$/;"	g
ImGuiSelectableFlags_	./imgui.h	/^enum ImGuiSelectableFlags_$/;"	g
ImGuiSelectableFlags_AllowDoubleClick	./imgui.h	/^    ImGuiSelectableFlags_AllowDoubleClick   = 1 << 2,   \/\/ Generate press events on double cli/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_AllowItemOverlap	./imgui.h	/^    ImGuiSelectableFlags_AllowItemOverlap   = ImGuiSelectableFlags_AllowOverlap,        \/\/ Ren/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_AllowOverlap	./imgui.h	/^    ImGuiSelectableFlags_AllowOverlap       = 1 << 4,   \/\/ (WIP) Hit testing to allow subseque/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_Disabled	./imgui.h	/^    ImGuiSelectableFlags_Disabled           = 1 << 3,   \/\/ Cannot be selected, display grayed /;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_DontClosePopups	./imgui.h	/^    ImGuiSelectableFlags_DontClosePopups    = ImGuiSelectableFlags_NoAutoClosePopups,   \/\/ Ren/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_Highlight	./imgui.h	/^    ImGuiSelectableFlags_Highlight          = 1 << 5,   \/\/ Make the item be displayed as if it/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_NoAutoClosePopups	./imgui.h	/^    ImGuiSelectableFlags_NoAutoClosePopups  = 1 << 0,   \/\/ Clicking this doesn't close parent /;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_NoHoldingActiveID	./imgui_internal.h	/^    ImGuiSelectableFlags_NoHoldingActiveID      = 1 << 20,$/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_NoPadWithHalfSpacing	./imgui_internal.h	/^    ImGuiSelectableFlags_NoPadWithHalfSpacing   = 1 << 26,  \/\/ Disable padding each side with /;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_NoSetKeyOwner	./imgui_internal.h	/^    ImGuiSelectableFlags_NoSetKeyOwner          = 1 << 27,  \/\/ Don't set key\/input owner on t/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_None	./imgui.h	/^    ImGuiSelectableFlags_None               = 0,$/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_SelectOnClick	./imgui_internal.h	/^    ImGuiSelectableFlags_SelectOnClick          = 1 << 22,  \/\/ Override button behavior to rea/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_SelectOnNav	./imgui_internal.h	/^    ImGuiSelectableFlags_SelectOnNav            = 1 << 21,  \/\/ (WIP) Auto-select when moved in/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_SelectOnRelease	./imgui_internal.h	/^    ImGuiSelectableFlags_SelectOnRelease        = 1 << 23,  \/\/ Override button behavior to rea/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_SetNavIdOnHover	./imgui_internal.h	/^    ImGuiSelectableFlags_SetNavIdOnHover        = 1 << 25,  \/\/ Set Nav\/Focus ID on mouse hove/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_SpanAllColumns	./imgui.h	/^    ImGuiSelectableFlags_SpanAllColumns     = 1 << 1,   \/\/ Frame will span all columns of its /;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_SpanAvailWidth	./imgui_internal.h	/^    ImGuiSelectableFlags_SpanAvailWidth         = 1 << 24,  \/\/ Span all avail width even if we/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectionBasicStorage	./imgui.h	/^struct ImGuiSelectionBasicStorage$/;"	s
ImGuiSelectionBasicStorage	./imgui_widgets.cpp	/^ImGuiSelectionBasicStorage::ImGuiSelectionBasicStorage()$/;"	f	class:ImGuiSelectionBasicStorage
ImGuiSelectionBasicStorage_BatchFinish	./imgui_widgets.cpp	/^static void ImGuiSelectionBasicStorage_BatchFinish(ImGuiSelectionBasicStorage* selection, bool s/;"	f	typeref:typename:void	file:
ImGuiSelectionBasicStorage_BatchSetItemSelected	./imgui_widgets.cpp	/^static void ImGuiSelectionBasicStorage_BatchSetItemSelected(ImGuiSelectionBasicStorage* selectio/;"	f	typeref:typename:void	file:
ImGuiSelectionExternalStorage	./imgui.h	/^struct ImGuiSelectionExternalStorage$/;"	s
ImGuiSelectionExternalStorage	./imgui_widgets.cpp	/^ImGuiSelectionExternalStorage::ImGuiSelectionExternalStorage()$/;"	f	class:ImGuiSelectionExternalStorage
ImGuiSelectionRequest	./imgui.h	/^struct ImGuiSelectionRequest$/;"	s
ImGuiSelectionRequestType	./imgui.h	/^enum ImGuiSelectionRequestType$/;"	g
ImGuiSelectionRequestType_None	./imgui.h	/^    ImGuiSelectionRequestType_None = 0,$/;"	e	enum:ImGuiSelectionRequestType
ImGuiSelectionRequestType_SetAll	./imgui.h	/^    ImGuiSelectionRequestType_SetAll,           \/\/ Request app to clear selection (if Selected/;"	e	enum:ImGuiSelectionRequestType
ImGuiSelectionRequestType_SetRange	./imgui.h	/^    ImGuiSelectionRequestType_SetRange,         \/\/ Request app to select\/unselect [RangeFirst/;"	e	enum:ImGuiSelectionRequestType
ImGuiSelectionUserData	./imgui.h	/^typedef ImS64 ImGuiSelectionUserData;$/;"	t	typeref:typename:ImS64
ImGuiSelectionUserData_Invalid	./imgui_internal.h	/^#define ImGuiSelectionUserData_Invalid /;"	d
ImGuiSeparatorFlags	./imgui_internal.h	/^typedef int ImGuiSeparatorFlags;        \/\/ -> enum ImGuiSeparatorFlags_     \/\/ Flags: for Se/;"	t	typeref:typename:int
ImGuiSeparatorFlags_	./imgui_internal.h	/^enum ImGuiSeparatorFlags_$/;"	g
ImGuiSeparatorFlags_Horizontal	./imgui_internal.h	/^    ImGuiSeparatorFlags_Horizontal              = 1 << 0,   \/\/ Axis default to current layout /;"	e	enum:ImGuiSeparatorFlags_
ImGuiSeparatorFlags_None	./imgui_internal.h	/^    ImGuiSeparatorFlags_None                    = 0,$/;"	e	enum:ImGuiSeparatorFlags_
ImGuiSeparatorFlags_SpanAllColumns	./imgui_internal.h	/^    ImGuiSeparatorFlags_SpanAllColumns          = 1 << 2,   \/\/ Make separator cover all column/;"	e	enum:ImGuiSeparatorFlags_
ImGuiSeparatorFlags_Vertical	./imgui_internal.h	/^    ImGuiSeparatorFlags_Vertical                = 1 << 1,$/;"	e	enum:ImGuiSeparatorFlags_
ImGuiSettingsHandler	./imgui_internal.h	/^    ImGuiSettingsHandler() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiSettingsHandler
ImGuiSettingsHandler	./imgui_internal.h	/^struct ImGuiSettingsHandler$/;"	s
ImGuiShrinkWidthItem	./imgui_internal.h	/^struct ImGuiShrinkWidthItem$/;"	s
ImGuiSizeCallback	./imgui.h	/^typedef void    (*ImGuiSizeCallback)(ImGuiSizeCallbackData* data);              \/\/ Callback fu/;"	t	typeref:typename:void (*)(ImGuiSizeCallbackData * data)
ImGuiSizeCallbackData	./imgui.h	/^struct ImGuiSizeCallbackData$/;"	s
ImGuiSliderFlags	./imgui.h	/^typedef int ImGuiSliderFlags;       \/\/ -> enum ImGuiSliderFlags_     \/\/ Flags: for DragFloat/;"	t	typeref:typename:int
ImGuiSliderFlagsPrivate_	./imgui_internal.h	/^enum ImGuiSliderFlagsPrivate_$/;"	g
ImGuiSliderFlags_	./imgui.h	/^enum ImGuiSliderFlags_$/;"	g
ImGuiSliderFlags_AlwaysClamp	./imgui.h	/^    ImGuiSliderFlags_AlwaysClamp            = 1 << 4,       \/\/ Clamp value to min\/max bounds /;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_InvalidMask_	./imgui.h	/^    ImGuiSliderFlags_InvalidMask_           = 0x7000000F,   \/\/ [Internal] We treat using those/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_Logarithmic	./imgui.h	/^    ImGuiSliderFlags_Logarithmic            = 1 << 5,       \/\/ Make the widget logarithmic (li/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_NoInput	./imgui.h	/^    ImGuiSliderFlags_NoInput                = 1 << 7,       \/\/ Disable CTRL+Click or Enter key/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_NoRoundToFormat	./imgui.h	/^    ImGuiSliderFlags_NoRoundToFormat        = 1 << 6,       \/\/ Disable rounding underlying val/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_None	./imgui.h	/^    ImGuiSliderFlags_None                   = 0,$/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_ReadOnly	./imgui_internal.h	/^    ImGuiSliderFlags_ReadOnly               = 1 << 21,  \/\/ Consider using g.NextItemData.ItemF/;"	e	enum:ImGuiSliderFlagsPrivate_
ImGuiSliderFlags_Vertical	./imgui_internal.h	/^    ImGuiSliderFlags_Vertical               = 1 << 20,  \/\/ Should this slider be orientated ve/;"	e	enum:ImGuiSliderFlagsPrivate_
ImGuiSliderFlags_WrapAround	./imgui.h	/^    ImGuiSliderFlags_WrapAround             = 1 << 8,       \/\/ Enable wrapping around from max/;"	e	enum:ImGuiSliderFlags_
ImGuiSortDirection	./imgui.h	/^enum ImGuiSortDirection : ImU8$/;"	g	typeref:typename:ImU8
ImGuiSortDirection_Ascending	./imgui.h	/^    ImGuiSortDirection_Ascending    = 1,    \/\/ Ascending = 0->9, A->Z etc.$/;"	e	enum:ImGuiSortDirection
ImGuiSortDirection_Descending	./imgui.h	/^    ImGuiSortDirection_Descending   = 2     \/\/ Descending = 9->0, Z->A etc.$/;"	e	enum:ImGuiSortDirection
ImGuiSortDirection_None	./imgui.h	/^    ImGuiSortDirection_None         = 0,$/;"	e	enum:ImGuiSortDirection
ImGuiStackLevelInfo	./imgui_internal.h	/^    ImGuiStackLevelInfo()   { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiStackLevelInfo
ImGuiStackLevelInfo	./imgui_internal.h	/^struct ImGuiStackLevelInfo$/;"	s
ImGuiStackSizes	./imgui_internal.h	/^    ImGuiStackSizes() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiStackSizes
ImGuiStackSizes	./imgui_internal.h	/^struct IMGUI_API ImGuiStackSizes$/;"	s
ImGuiStorage	./imgui.h	/^struct ImGuiStorage$/;"	s
ImGuiStoragePair	./imgui.h	/^    ImGuiStoragePair(ImGuiID _key, float _val)  { key = _key; val_f = _val; }$/;"	f	struct:ImGuiStoragePair
ImGuiStoragePair	./imgui.h	/^    ImGuiStoragePair(ImGuiID _key, int _val)    { key = _key; val_i = _val; }$/;"	f	struct:ImGuiStoragePair
ImGuiStoragePair	./imgui.h	/^    ImGuiStoragePair(ImGuiID _key, void* _val)  { key = _key; val_p = _val; }$/;"	f	struct:ImGuiStoragePair
ImGuiStoragePair	./imgui.h	/^struct ImGuiStoragePair$/;"	s
ImGuiStyle	./imgui.cpp	/^ImGuiStyle::ImGuiStyle()$/;"	f	class:ImGuiStyle
ImGuiStyle	./imgui.h	/^struct ImGuiStyle$/;"	s
ImGuiStyleMod	./imgui_internal.h	/^    ImGuiStyleMod(ImGuiStyleVar idx, ImVec2 v)  { VarIdx = idx; BackupFloat[0] = v.x; BackupFloa/;"	f	struct:ImGuiStyleMod
ImGuiStyleMod	./imgui_internal.h	/^    ImGuiStyleMod(ImGuiStyleVar idx, float v)   { VarIdx = idx; BackupFloat[0] = v; }$/;"	f	struct:ImGuiStyleMod
ImGuiStyleMod	./imgui_internal.h	/^    ImGuiStyleMod(ImGuiStyleVar idx, int v)     { VarIdx = idx; BackupInt[0] = v; }$/;"	f	struct:ImGuiStyleMod
ImGuiStyleMod	./imgui_internal.h	/^struct ImGuiStyleMod$/;"	s
ImGuiStyleVar	./imgui.h	/^typedef int ImGuiStyleVar;          \/\/ -> enum ImGuiStyleVar_        \/\/ Enum: A variable ide/;"	t	typeref:typename:int
ImGuiStyleVar_	./imgui.h	/^enum ImGuiStyleVar_$/;"	g
ImGuiStyleVar_Alpha	./imgui.h	/^    ImGuiStyleVar_Alpha,                    \/\/ float     Alpha$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ButtonTextAlign	./imgui.h	/^    ImGuiStyleVar_ButtonTextAlign,          \/\/ ImVec2    ButtonTextAlign$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_COUNT	./imgui.h	/^    ImGuiStyleVar_COUNT$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_CellPadding	./imgui.h	/^    ImGuiStyleVar_CellPadding,              \/\/ ImVec2    CellPadding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ChildBorderSize	./imgui.h	/^    ImGuiStyleVar_ChildBorderSize,          \/\/ float     ChildBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ChildRounding	./imgui.h	/^    ImGuiStyleVar_ChildRounding,            \/\/ float     ChildRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_DisabledAlpha	./imgui.h	/^    ImGuiStyleVar_DisabledAlpha,            \/\/ float     DisabledAlpha$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_FrameBorderSize	./imgui.h	/^    ImGuiStyleVar_FrameBorderSize,          \/\/ float     FrameBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_FramePadding	./imgui.h	/^    ImGuiStyleVar_FramePadding,             \/\/ ImVec2    FramePadding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_FrameRounding	./imgui.h	/^    ImGuiStyleVar_FrameRounding,            \/\/ float     FrameRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_GrabMinSize	./imgui.h	/^    ImGuiStyleVar_GrabMinSize,              \/\/ float     GrabMinSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_GrabRounding	./imgui.h	/^    ImGuiStyleVar_GrabRounding,             \/\/ float     GrabRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_IndentSpacing	./imgui.h	/^    ImGuiStyleVar_IndentSpacing,            \/\/ float     IndentSpacing$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ItemInnerSpacing	./imgui.h	/^    ImGuiStyleVar_ItemInnerSpacing,         \/\/ ImVec2    ItemInnerSpacing$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ItemSpacing	./imgui.h	/^    ImGuiStyleVar_ItemSpacing,              \/\/ ImVec2    ItemSpacing$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_PopupBorderSize	./imgui.h	/^    ImGuiStyleVar_PopupBorderSize,          \/\/ float     PopupBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_PopupRounding	./imgui.h	/^    ImGuiStyleVar_PopupRounding,            \/\/ float     PopupRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ScrollbarRounding	./imgui.h	/^    ImGuiStyleVar_ScrollbarRounding,        \/\/ float     ScrollbarRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ScrollbarSize	./imgui.h	/^    ImGuiStyleVar_ScrollbarSize,            \/\/ float     ScrollbarSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_SelectableTextAlign	./imgui.h	/^    ImGuiStyleVar_SelectableTextAlign,      \/\/ ImVec2    SelectableTextAlign$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_SeparatorTextAlign	./imgui.h	/^    ImGuiStyleVar_SeparatorTextAlign,       \/\/ ImVec2    SeparatorTextAlign$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_SeparatorTextBorderSize	./imgui.h	/^    ImGuiStyleVar_SeparatorTextBorderSize,  \/\/ float     SeparatorTextBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_SeparatorTextPadding	./imgui.h	/^    ImGuiStyleVar_SeparatorTextPadding,     \/\/ ImVec2    SeparatorTextPadding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_TabBarBorderSize	./imgui.h	/^    ImGuiStyleVar_TabBarBorderSize,         \/\/ float     TabBarBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_TabBarOverlineSize	./imgui.h	/^    ImGuiStyleVar_TabBarOverlineSize,       \/\/ float     TabBarOverlineSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_TabBorderSize	./imgui.h	/^    ImGuiStyleVar_TabBorderSize,            \/\/ float     TabBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_TabRounding	./imgui.h	/^    ImGuiStyleVar_TabRounding,              \/\/ float     TabRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_TableAngledHeadersAngle	./imgui.h	/^    ImGuiStyleVar_TableAngledHeadersAngle,  \/\/ float     TableAngledHeadersAngle$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_TableAngledHeadersTextAlign	./imgui.h	/^    ImGuiStyleVar_TableAngledHeadersTextAlign,\/\/ ImVec2  TableAngledHeadersTextAlign$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowBorderSize	./imgui.h	/^    ImGuiStyleVar_WindowBorderSize,         \/\/ float     WindowBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowMinSize	./imgui.h	/^    ImGuiStyleVar_WindowMinSize,            \/\/ ImVec2    WindowMinSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowPadding	./imgui.h	/^    ImGuiStyleVar_WindowPadding,            \/\/ ImVec2    WindowPadding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowRounding	./imgui.h	/^    ImGuiStyleVar_WindowRounding,           \/\/ float     WindowRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowTitleAlign	./imgui.h	/^    ImGuiStyleVar_WindowTitleAlign,         \/\/ ImVec2    WindowTitleAlign$/;"	e	enum:ImGuiStyleVar_
ImGuiTabBar	./imgui_internal.h	/^struct IMGUI_API ImGuiTabBar$/;"	s
ImGuiTabBar	./imgui_widgets.cpp	/^ImGuiTabBar::ImGuiTabBar()$/;"	f	class:ImGuiTabBar
ImGuiTabBarFlags	./imgui.h	/^typedef int ImGuiTabBarFlags;       \/\/ -> enum ImGuiTabBarFlags_     \/\/ Flags: for BeginTabB/;"	t	typeref:typename:int
ImGuiTabBarFlagsPrivate_	./imgui_internal.h	/^enum ImGuiTabBarFlagsPrivate_$/;"	g
ImGuiTabBarFlags_	./imgui.h	/^enum ImGuiTabBarFlags_$/;"	g
ImGuiTabBarFlags_AutoSelectNewTabs	./imgui.h	/^    ImGuiTabBarFlags_AutoSelectNewTabs              = 1 << 1,   \/\/ Automatically select new ta/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_DockNode	./imgui_internal.h	/^    ImGuiTabBarFlags_DockNode                   = 1 << 20,  \/\/ Part of a dock node [we don't u/;"	e	enum:ImGuiTabBarFlagsPrivate_
ImGuiTabBarFlags_DrawSelectedOverline	./imgui.h	/^    ImGuiTabBarFlags_DrawSelectedOverline           = 1 << 6,   \/\/ Draw selected overline mark/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_FittingPolicyDefault_	./imgui.h	/^    ImGuiTabBarFlags_FittingPolicyDefault_          = ImGuiTabBarFlags_FittingPolicyResizeDown,$/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_FittingPolicyMask_	./imgui.h	/^    ImGuiTabBarFlags_FittingPolicyMask_             = ImGuiTabBarFlags_FittingPolicyResizeDown |/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_FittingPolicyResizeDown	./imgui.h	/^    ImGuiTabBarFlags_FittingPolicyResizeDown        = 1 << 7,   \/\/ Resize tabs when they don't/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_FittingPolicyScroll	./imgui.h	/^    ImGuiTabBarFlags_FittingPolicyScroll            = 1 << 8,   \/\/ Add scroll buttons when tab/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_IsFocused	./imgui_internal.h	/^    ImGuiTabBarFlags_IsFocused                  = 1 << 21,$/;"	e	enum:ImGuiTabBarFlagsPrivate_
ImGuiTabBarFlags_NoCloseWithMiddleMouseButton	./imgui.h	/^    ImGuiTabBarFlags_NoCloseWithMiddleMouseButton   = 1 << 3,   \/\/ Disable behavior of closing/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_NoTabListScrollingButtons	./imgui.h	/^    ImGuiTabBarFlags_NoTabListScrollingButtons      = 1 << 4,   \/\/ Disable scrolling buttons (/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_NoTooltip	./imgui.h	/^    ImGuiTabBarFlags_NoTooltip                      = 1 << 5,   \/\/ Disable tooltips when hover/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_None	./imgui.h	/^    ImGuiTabBarFlags_None                           = 0,$/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_Reorderable	./imgui.h	/^    ImGuiTabBarFlags_Reorderable                    = 1 << 0,   \/\/ Allow manually dragging tab/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_SaveSettings	./imgui_internal.h	/^    ImGuiTabBarFlags_SaveSettings               = 1 << 22,  \/\/ FIXME: Settings are handled by /;"	e	enum:ImGuiTabBarFlagsPrivate_
ImGuiTabBarFlags_TabListPopupButton	./imgui.h	/^    ImGuiTabBarFlags_TabListPopupButton             = 1 << 2,   \/\/ Disable buttons to open the/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarSection	./imgui_widgets.cpp	/^    ImGuiTabBarSection() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiTabBarSection	file:
ImGuiTabBarSection	./imgui_widgets.cpp	/^struct ImGuiTabBarSection$/;"	s	file:
ImGuiTabItem	./imgui_internal.h	/^    ImGuiTabItem()      { memset(this, 0, sizeof(*this)); LastFrameVisible = LastFrameSelected =/;"	f	struct:ImGuiTabItem
ImGuiTabItem	./imgui_internal.h	/^struct ImGuiTabItem$/;"	s
ImGuiTabItemFlags	./imgui.h	/^typedef int ImGuiTabItemFlags;      \/\/ -> enum ImGuiTabItemFlags_    \/\/ Flags: for BeginTabI/;"	t	typeref:typename:int
ImGuiTabItemFlagsPrivate_	./imgui_internal.h	/^enum ImGuiTabItemFlagsPrivate_$/;"	g
ImGuiTabItemFlags_	./imgui.h	/^enum ImGuiTabItemFlags_$/;"	g
ImGuiTabItemFlags_Button	./imgui_internal.h	/^    ImGuiTabItemFlags_Button                    = 1 << 21,  \/\/ Used by TabItemButton, change t/;"	e	enum:ImGuiTabItemFlagsPrivate_
ImGuiTabItemFlags_Leading	./imgui.h	/^    ImGuiTabItemFlags_Leading                       = 1 << 6,   \/\/ Enforce the tab position to/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_NoAssumedClosure	./imgui.h	/^    ImGuiTabItemFlags_NoAssumedClosure              = 1 << 8,   \/\/ Tab is selected when trying/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_NoCloseButton	./imgui_internal.h	/^    ImGuiTabItemFlags_NoCloseButton             = 1 << 20,  \/\/ Track whether p_open was set or/;"	e	enum:ImGuiTabItemFlagsPrivate_
ImGuiTabItemFlags_NoCloseWithMiddleMouseButton	./imgui.h	/^    ImGuiTabItemFlags_NoCloseWithMiddleMouseButton  = 1 << 2,   \/\/ Disable behavior of closing/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_NoPushId	./imgui.h	/^    ImGuiTabItemFlags_NoPushId                      = 1 << 3,   \/\/ Don't call PushID()\/PopID(/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_NoReorder	./imgui.h	/^    ImGuiTabItemFlags_NoReorder                     = 1 << 5,   \/\/ Disable reordering this tab/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_NoTooltip	./imgui.h	/^    ImGuiTabItemFlags_NoTooltip                     = 1 << 4,   \/\/ Disable tooltip for the giv/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_None	./imgui.h	/^    ImGuiTabItemFlags_None                          = 0,$/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_SectionMask_	./imgui_internal.h	/^    ImGuiTabItemFlags_SectionMask_              = ImGuiTabItemFlags_Leading | ImGuiTabItemFlags_/;"	e	enum:ImGuiTabItemFlagsPrivate_
ImGuiTabItemFlags_SetSelected	./imgui.h	/^    ImGuiTabItemFlags_SetSelected                   = 1 << 1,   \/\/ Trigger flag to programmati/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_Trailing	./imgui.h	/^    ImGuiTabItemFlags_Trailing                      = 1 << 7,   \/\/ Enforce the tab position to/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_UnsavedDocument	./imgui.h	/^    ImGuiTabItemFlags_UnsavedDocument               = 1 << 0,   \/\/ Display a dot next to the t/;"	e	enum:ImGuiTabItemFlags_
ImGuiTable	./imgui_internal.h	/^    ImGuiTable()                { memset(this, 0, sizeof(*this)); LastFrameActive = -1; }$/;"	f	struct:ImGuiTable
ImGuiTable	./imgui_internal.h	/^struct IMGUI_API ImGuiTable$/;"	s
ImGuiTableBgTarget	./imgui.h	/^typedef int ImGuiTableBgTarget;     \/\/ -> enum ImGuiTableBgTarget_   \/\/ Enum: A color target/;"	t	typeref:typename:int
ImGuiTableBgTarget_	./imgui.h	/^enum ImGuiTableBgTarget_$/;"	g
ImGuiTableBgTarget_CellBg	./imgui.h	/^    ImGuiTableBgTarget_CellBg                   = 3,        \/\/ Set cell background color (top-/;"	e	enum:ImGuiTableBgTarget_
ImGuiTableBgTarget_None	./imgui.h	/^    ImGuiTableBgTarget_None                     = 0,$/;"	e	enum:ImGuiTableBgTarget_
ImGuiTableBgTarget_RowBg0	./imgui.h	/^    ImGuiTableBgTarget_RowBg0                   = 1,        \/\/ Set row background color 0 (gen/;"	e	enum:ImGuiTableBgTarget_
ImGuiTableBgTarget_RowBg1	./imgui.h	/^    ImGuiTableBgTarget_RowBg1                   = 2,        \/\/ Set row background color 1 (gen/;"	e	enum:ImGuiTableBgTarget_
ImGuiTableCellData	./imgui_internal.h	/^struct ImGuiTableCellData$/;"	s
ImGuiTableColumn	./imgui_internal.h	/^    ImGuiTableColumn()$/;"	f	struct:ImGuiTableColumn
ImGuiTableColumn	./imgui_internal.h	/^struct ImGuiTableColumn$/;"	s
ImGuiTableColumnFlags	./imgui.h	/^typedef int ImGuiTableColumnFlags;  \/\/ -> enum ImGuiTableColumnFlags_\/\/ Flags: For TableSetu/;"	t	typeref:typename:int
ImGuiTableColumnFlags_	./imgui.h	/^enum ImGuiTableColumnFlags_$/;"	g
ImGuiTableColumnFlags_AngledHeader	./imgui.h	/^    ImGuiTableColumnFlags_AngledHeader          = 1 << 18,  \/\/ TableHeadersRow() will submit a/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_DefaultHide	./imgui.h	/^    ImGuiTableColumnFlags_DefaultHide           = 1 << 1,   \/\/ Default as a hidden\/disabled c/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_DefaultSort	./imgui.h	/^    ImGuiTableColumnFlags_DefaultSort           = 1 << 2,   \/\/ Default as a sorting column.$/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_Disabled	./imgui.h	/^    ImGuiTableColumnFlags_Disabled              = 1 << 0,   \/\/ Overriding\/master disable flag/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IndentDisable	./imgui.h	/^    ImGuiTableColumnFlags_IndentDisable         = 1 << 17,  \/\/ Ignore current Indent value whe/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IndentEnable	./imgui.h	/^    ImGuiTableColumnFlags_IndentEnable          = 1 << 16,  \/\/ Use current Indent value when e/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IndentMask_	./imgui.h	/^    ImGuiTableColumnFlags_IndentMask_           = ImGuiTableColumnFlags_IndentEnable | ImGuiTabl/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IsEnabled	./imgui.h	/^    ImGuiTableColumnFlags_IsEnabled             = 1 << 24,  \/\/ Status: is enabled == not hidde/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IsHovered	./imgui.h	/^    ImGuiTableColumnFlags_IsHovered             = 1 << 27,  \/\/ Status: is hovered by mouse$/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IsSorted	./imgui.h	/^    ImGuiTableColumnFlags_IsSorted              = 1 << 26,  \/\/ Status: is currently part of th/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IsVisible	./imgui.h	/^    ImGuiTableColumnFlags_IsVisible             = 1 << 25,  \/\/ Status: is visible == is enable/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoClip	./imgui.h	/^    ImGuiTableColumnFlags_NoClip                = 1 << 8,   \/\/ Disable clipping for this colum/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoDirectResize_	./imgui.h	/^    ImGuiTableColumnFlags_NoDirectResize_       = 1 << 30,  \/\/ [Internal] Disable user resizin/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoHeaderLabel	./imgui.h	/^    ImGuiTableColumnFlags_NoHeaderLabel         = 1 << 12,  \/\/ TableHeadersRow() will not subm/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoHeaderWidth	./imgui.h	/^    ImGuiTableColumnFlags_NoHeaderWidth         = 1 << 13,  \/\/ Disable header text width contr/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoHide	./imgui.h	/^    ImGuiTableColumnFlags_NoHide                = 1 << 7,   \/\/ Disable ability to hide\/disabl/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoReorder	./imgui.h	/^    ImGuiTableColumnFlags_NoReorder             = 1 << 6,   \/\/ Disable manual reordering this /;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoResize	./imgui.h	/^    ImGuiTableColumnFlags_NoResize              = 1 << 5,   \/\/ Disable manual resizing.$/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoSort	./imgui.h	/^    ImGuiTableColumnFlags_NoSort                = 1 << 9,   \/\/ Disable ability to sort on this/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoSortAscending	./imgui.h	/^    ImGuiTableColumnFlags_NoSortAscending       = 1 << 10,  \/\/ Disable ability to sort in the /;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoSortDescending	./imgui.h	/^    ImGuiTableColumnFlags_NoSortDescending      = 1 << 11,  \/\/ Disable ability to sort in the /;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_None	./imgui.h	/^    ImGuiTableColumnFlags_None                  = 0,$/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_PreferSortAscending	./imgui.h	/^    ImGuiTableColumnFlags_PreferSortAscending   = 1 << 14,  \/\/ Make the initial sort direction/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_PreferSortDescending	./imgui.h	/^    ImGuiTableColumnFlags_PreferSortDescending  = 1 << 15,  \/\/ Make the initial sort direction/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_StatusMask_	./imgui.h	/^    ImGuiTableColumnFlags_StatusMask_           = ImGuiTableColumnFlags_IsEnabled | ImGuiTableCo/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_WidthFixed	./imgui.h	/^    ImGuiTableColumnFlags_WidthFixed            = 1 << 4,   \/\/ Column will not stretch. Prefer/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_WidthMask_	./imgui.h	/^    ImGuiTableColumnFlags_WidthMask_            = ImGuiTableColumnFlags_WidthStretch | ImGuiTabl/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_WidthStretch	./imgui.h	/^    ImGuiTableColumnFlags_WidthStretch          = 1 << 3,   \/\/ Column will stretch. Preferable/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnIdx	./imgui_internal.h	/^typedef ImS16 ImGuiTableColumnIdx;$/;"	t	typeref:typename:ImS16
ImGuiTableColumnSettings	./imgui_internal.h	/^    ImGuiTableColumnSettings()$/;"	f	struct:ImGuiTableColumnSettings
ImGuiTableColumnSettings	./imgui_internal.h	/^struct ImGuiTableColumnSettings$/;"	s
ImGuiTableColumnSortSpecs	./imgui.h	/^    ImGuiTableColumnSortSpecs() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiTableColumnSortSpecs
ImGuiTableColumnSortSpecs	./imgui.h	/^struct ImGuiTableColumnSortSpecs$/;"	s
ImGuiTableDrawChannelIdx	./imgui_internal.h	/^typedef ImU16 ImGuiTableDrawChannelIdx;$/;"	t	typeref:typename:ImU16
ImGuiTableFlags	./imgui.h	/^typedef int ImGuiTableFlags;        \/\/ -> enum ImGuiTableFlags_      \/\/ Flags: For BeginTabl/;"	t	typeref:typename:int
ImGuiTableFlags_	./imgui.h	/^enum ImGuiTableFlags_$/;"	g
ImGuiTableFlags_Borders	./imgui.h	/^    ImGuiTableFlags_Borders                    = ImGuiTableFlags_BordersInner | ImGuiTableFlags_/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersH	./imgui.h	/^    ImGuiTableFlags_BordersH                   = ImGuiTableFlags_BordersInnerH | ImGuiTableFlags/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersInner	./imgui.h	/^    ImGuiTableFlags_BordersInner               = ImGuiTableFlags_BordersInnerV | ImGuiTableFlags/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersInnerH	./imgui.h	/^    ImGuiTableFlags_BordersInnerH              = 1 << 7,   \/\/ Draw horizontal borders between /;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersInnerV	./imgui.h	/^    ImGuiTableFlags_BordersInnerV              = 1 << 9,   \/\/ Draw vertical borders between co/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersOuter	./imgui.h	/^    ImGuiTableFlags_BordersOuter               = ImGuiTableFlags_BordersOuterV | ImGuiTableFlags/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersOuterH	./imgui.h	/^    ImGuiTableFlags_BordersOuterH              = 1 << 8,   \/\/ Draw horizontal borders at the t/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersOuterV	./imgui.h	/^    ImGuiTableFlags_BordersOuterV              = 1 << 10,  \/\/ Draw vertical borders on the lef/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersV	./imgui.h	/^    ImGuiTableFlags_BordersV                   = ImGuiTableFlags_BordersInnerV | ImGuiTableFlags/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_ContextMenuInBody	./imgui.h	/^    ImGuiTableFlags_ContextMenuInBody          = 1 << 5,   \/\/ Right-click on columns body\/con/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_Hideable	./imgui.h	/^    ImGuiTableFlags_Hideable                   = 1 << 2,   \/\/ Enable hiding\/disabling columns/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_HighlightHoveredColumn	./imgui.h	/^    ImGuiTableFlags_HighlightHoveredColumn     = 1 << 28,  \/\/ Highlight column headers when ho/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoBordersInBody	./imgui.h	/^    ImGuiTableFlags_NoBordersInBody            = 1 << 11,  \/\/ [ALPHA] Disable vertical borders/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoBordersInBodyUntilResize	./imgui.h	/^    ImGuiTableFlags_NoBordersInBodyUntilResize = 1 << 12,  \/\/ [ALPHA] Disable vertical borders/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoClip	./imgui.h	/^    ImGuiTableFlags_NoClip                     = 1 << 20,  \/\/ Disable clipping rectangle for e/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoHostExtendX	./imgui.h	/^    ImGuiTableFlags_NoHostExtendX              = 1 << 16,  \/\/ Make outer width auto-fit to col/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoHostExtendY	./imgui.h	/^    ImGuiTableFlags_NoHostExtendY              = 1 << 17,  \/\/ Make outer height stop exactly a/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoKeepColumnsVisible	./imgui.h	/^    ImGuiTableFlags_NoKeepColumnsVisible       = 1 << 18,  \/\/ Disable keeping column always mi/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoPadInnerX	./imgui.h	/^    ImGuiTableFlags_NoPadInnerX                = 1 << 23,  \/\/ Disable inner padding between co/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoPadOuterX	./imgui.h	/^    ImGuiTableFlags_NoPadOuterX                = 1 << 22,  \/\/ Default if BordersOuterV is off./;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoSavedSettings	./imgui.h	/^    ImGuiTableFlags_NoSavedSettings            = 1 << 4,   \/\/ Disable persisting columns order/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_None	./imgui.h	/^    ImGuiTableFlags_None                       = 0,$/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_PadOuterX	./imgui.h	/^    ImGuiTableFlags_PadOuterX                  = 1 << 21,  \/\/ Default if BordersOuterV is on. /;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_PreciseWidths	./imgui.h	/^    ImGuiTableFlags_PreciseWidths              = 1 << 19,  \/\/ Disable distributing remainder w/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_Reorderable	./imgui.h	/^    ImGuiTableFlags_Reorderable                = 1 << 1,   \/\/ Enable reordering columns in hea/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_Resizable	./imgui.h	/^    ImGuiTableFlags_Resizable                  = 1 << 0,   \/\/ Enable resizing columns.$/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_RowBg	./imgui.h	/^    ImGuiTableFlags_RowBg                      = 1 << 6,   \/\/ Set each RowBg color with ImGuiC/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_ScrollX	./imgui.h	/^    ImGuiTableFlags_ScrollX                    = 1 << 24,  \/\/ Enable horizontal scrolling. Req/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_ScrollY	./imgui.h	/^    ImGuiTableFlags_ScrollY                    = 1 << 25,  \/\/ Enable vertical scrolling. Requi/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SizingFixedFit	./imgui.h	/^    ImGuiTableFlags_SizingFixedFit             = 1 << 13,  \/\/ Columns default to _WidthFixed o/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SizingFixedSame	./imgui.h	/^    ImGuiTableFlags_SizingFixedSame            = 2 << 13,  \/\/ Columns default to _WidthFixed o/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SizingMask_	./imgui.h	/^    ImGuiTableFlags_SizingMask_                = ImGuiTableFlags_SizingFixedFit | ImGuiTableFlag/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SizingStretchProp	./imgui.h	/^    ImGuiTableFlags_SizingStretchProp          = 3 << 13,  \/\/ Columns default to _WidthStretch/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SizingStretchSame	./imgui.h	/^    ImGuiTableFlags_SizingStretchSame          = 4 << 13,  \/\/ Columns default to _WidthStretch/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SortMulti	./imgui.h	/^    ImGuiTableFlags_SortMulti                  = 1 << 26,  \/\/ Hold shift when clicking headers/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SortTristate	./imgui.h	/^    ImGuiTableFlags_SortTristate               = 1 << 27,  \/\/ Allow no sorting, disable defaul/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_Sortable	./imgui.h	/^    ImGuiTableFlags_Sortable                   = 1 << 3,   \/\/ Enable sorting. Call TableGetSor/;"	e	enum:ImGuiTableFlags_
ImGuiTableHeaderData	./imgui_internal.h	/^struct ImGuiTableHeaderData$/;"	s
ImGuiTableInstanceData	./imgui_internal.h	/^    ImGuiTableInstanceData()    { TableInstanceID = 0; LastOuterHeight = LastTopHeadersRowHeight/;"	f	struct:ImGuiTableInstanceData
ImGuiTableInstanceData	./imgui_internal.h	/^struct ImGuiTableInstanceData$/;"	s
ImGuiTableRowFlags	./imgui.h	/^typedef int ImGuiTableRowFlags;     \/\/ -> enum ImGuiTableRowFlags_   \/\/ Flags: For TableNext/;"	t	typeref:typename:int
ImGuiTableRowFlags_	./imgui.h	/^enum ImGuiTableRowFlags_$/;"	g
ImGuiTableRowFlags_Headers	./imgui.h	/^    ImGuiTableRowFlags_Headers                  = 1 << 0,   \/\/ Identify header row (set defaul/;"	e	enum:ImGuiTableRowFlags_
ImGuiTableRowFlags_None	./imgui.h	/^    ImGuiTableRowFlags_None                     = 0,$/;"	e	enum:ImGuiTableRowFlags_
ImGuiTableSettings	./imgui_internal.h	/^    ImGuiTableSettings()        { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiTableSettings
ImGuiTableSettings	./imgui_internal.h	/^struct ImGuiTableSettings$/;"	s
ImGuiTableSortSpecs	./imgui.h	/^    ImGuiTableSortSpecs()       { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiTableSortSpecs
ImGuiTableSortSpecs	./imgui.h	/^struct ImGuiTableSortSpecs$/;"	s
ImGuiTableTempData	./imgui_internal.h	/^    ImGuiTableTempData()        { memset(this, 0, sizeof(*this)); LastTimeActive = -1.0f; }$/;"	f	struct:ImGuiTableTempData
ImGuiTableTempData	./imgui_internal.h	/^struct IMGUI_API ImGuiTableTempData$/;"	s
ImGuiTextBuffer	./imgui.h	/^    ImGuiTextBuffer()   { }$/;"	f	struct:ImGuiTextBuffer
ImGuiTextBuffer	./imgui.h	/^struct ImGuiTextBuffer$/;"	s
ImGuiTextFilter	./imgui.cpp	/^ImGuiTextFilter::ImGuiTextFilter(const char* default_filter) \/\/-V1077$/;"	f	class:ImGuiTextFilter	typeref:typename:IM_MSVC_RUNTIME_CHECKS_RESTORE
ImGuiTextFilter	./imgui.h	/^struct ImGuiTextFilter$/;"	s
ImGuiTextFlags	./imgui_internal.h	/^typedef int ImGuiTextFlags;             \/\/ -> enum ImGuiTextFlags_          \/\/ Flags: for Te/;"	t	typeref:typename:int
ImGuiTextFlags_	./imgui_internal.h	/^enum ImGuiTextFlags_$/;"	g
ImGuiTextFlags_NoWidthForLargeClippedText	./imgui_internal.h	/^    ImGuiTextFlags_NoWidthForLargeClippedText   = 1 << 0,$/;"	e	enum:ImGuiTextFlags_
ImGuiTextFlags_None	./imgui_internal.h	/^    ImGuiTextFlags_None                         = 0,$/;"	e	enum:ImGuiTextFlags_
ImGuiTextIndex	./imgui_internal.h	/^struct ImGuiTextIndex$/;"	s
ImGuiTextRange	./imgui.h	/^        ImGuiTextRange()                                { b = e = NULL; }$/;"	f	struct:ImGuiTextFilter::ImGuiTextRange
ImGuiTextRange	./imgui.h	/^        ImGuiTextRange(const char* _b, const char* _e)  { b = _b; e = _e; }$/;"	f	struct:ImGuiTextFilter::ImGuiTextRange
ImGuiTextRange	./imgui.h	/^    struct ImGuiTextRange$/;"	s	struct:ImGuiTextFilter
ImGuiTooltipFlags	./imgui_internal.h	/^typedef int ImGuiTooltipFlags;          \/\/ -> enum ImGuiTooltipFlags_       \/\/ Flags: for Be/;"	t	typeref:typename:int
ImGuiTooltipFlags_	./imgui_internal.h	/^enum ImGuiTooltipFlags_$/;"	g
ImGuiTooltipFlags_None	./imgui_internal.h	/^    ImGuiTooltipFlags_None                      = 0,$/;"	e	enum:ImGuiTooltipFlags_
ImGuiTooltipFlags_OverridePrevious	./imgui_internal.h	/^    ImGuiTooltipFlags_OverridePrevious          = 1 << 1,   \/\/ Clear\/ignore previously submit/;"	e	enum:ImGuiTooltipFlags_
ImGuiTreeNodeFlags	./imgui.h	/^typedef int ImGuiTreeNodeFlags;     \/\/ -> enum ImGuiTreeNodeFlags_   \/\/ Flags: for TreeNode(/;"	t	typeref:typename:int
ImGuiTreeNodeFlagsPrivate_	./imgui_internal.h	/^enum ImGuiTreeNodeFlagsPrivate_$/;"	g
ImGuiTreeNodeFlags_	./imgui.h	/^enum ImGuiTreeNodeFlags_$/;"	g
ImGuiTreeNodeFlags_AllowItemOverlap	./imgui.h	/^    ImGuiTreeNodeFlags_AllowItemOverlap     = ImGuiTreeNodeFlags_AllowOverlap,  \/\/ Renamed in /;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_AllowOverlap	./imgui.h	/^    ImGuiTreeNodeFlags_AllowOverlap         = 1 << 2,   \/\/ Hit testing to allow subsequent wid/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Bullet	./imgui.h	/^    ImGuiTreeNodeFlags_Bullet               = 1 << 9,   \/\/ Display a bullet instead of arrow. /;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_ClipLabelForTrailingButton	./imgui_internal.h	/^    ImGuiTreeNodeFlags_ClipLabelForTrailingButton = 1 << 28,\/\/ FIXME-WIP: Hard-coded for Colla/;"	e	enum:ImGuiTreeNodeFlagsPrivate_
ImGuiTreeNodeFlags_CollapsingHeader	./imgui.h	/^    ImGuiTreeNodeFlags_CollapsingHeader     = ImGuiTreeNodeFlags_Framed | ImGuiTreeNodeFlags_NoT/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_DefaultOpen	./imgui.h	/^    ImGuiTreeNodeFlags_DefaultOpen          = 1 << 5,   \/\/ Default node to be open$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_FramePadding	./imgui.h	/^    ImGuiTreeNodeFlags_FramePadding         = 1 << 10,  \/\/ Use FramePadding (even for an unfra/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Framed	./imgui.h	/^    ImGuiTreeNodeFlags_Framed               = 1 << 1,   \/\/ Draw frame with background (e.g. fo/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Leaf	./imgui.h	/^    ImGuiTreeNodeFlags_Leaf                 = 1 << 8,   \/\/ No collapsing, no arrow (use as a c/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_NavLeftJumpsBackHere	./imgui.h	/^    ImGuiTreeNodeFlags_NavLeftJumpsBackHere = 1 << 15,  \/\/ (WIP) Nav: left direction may move /;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_NoAutoOpenOnLog	./imgui.h	/^    ImGuiTreeNodeFlags_NoAutoOpenOnLog      = 1 << 4,   \/\/ Don't automatically and temporarily/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_NoTreePushOnOpen	./imgui.h	/^    ImGuiTreeNodeFlags_NoTreePushOnOpen     = 1 << 3,   \/\/ Don't do a TreePush() when open (e./;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_None	./imgui.h	/^    ImGuiTreeNodeFlags_None                 = 0,$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_OpenOnArrow	./imgui.h	/^    ImGuiTreeNodeFlags_OpenOnArrow          = 1 << 7,   \/\/ Open when clicking on the arrow par/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_OpenOnDoubleClick	./imgui.h	/^    ImGuiTreeNodeFlags_OpenOnDoubleClick    = 1 << 6,   \/\/ Open on double-click instead of sim/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_OpenOnMask_	./imgui_internal.h	/^    ImGuiTreeNodeFlags_OpenOnMask_                = ImGuiTreeNodeFlags_OpenOnDoubleClick | ImGui/;"	e	enum:ImGuiTreeNodeFlagsPrivate_
ImGuiTreeNodeFlags_Selected	./imgui.h	/^    ImGuiTreeNodeFlags_Selected             = 1 << 0,   \/\/ Draw as selected$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_SpanAllColumns	./imgui.h	/^    ImGuiTreeNodeFlags_SpanAllColumns       = 1 << 14,  \/\/ Frame will span all columns of its /;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_SpanAvailWidth	./imgui.h	/^    ImGuiTreeNodeFlags_SpanAvailWidth       = 1 << 11,  \/\/ Extend hit box to the right-most ed/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_SpanFullWidth	./imgui.h	/^    ImGuiTreeNodeFlags_SpanFullWidth        = 1 << 12,  \/\/ Extend hit box to the left-most and/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_SpanTextWidth	./imgui.h	/^    ImGuiTreeNodeFlags_SpanTextWidth        = 1 << 13,  \/\/ Narrow hit box + narrow hovering hi/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_UpsideDownArrow	./imgui_internal.h	/^    ImGuiTreeNodeFlags_UpsideDownArrow            = 1 << 29,\/\/ FIXME-WIP: Turn Down arrow into/;"	e	enum:ImGuiTreeNodeFlagsPrivate_
ImGuiTreeNodeStackData	./imgui_internal.h	/^struct ImGuiTreeNodeStackData$/;"	s
ImGuiTypingSelectFlags	./imgui_internal.h	/^typedef int ImGuiTypingSelectFlags;     \/\/ -> enum ImGuiTypingSelectFlags_  \/\/ Flags: for Ge/;"	t	typeref:typename:int
ImGuiTypingSelectFlags_	./imgui_internal.h	/^enum ImGuiTypingSelectFlags_$/;"	g
ImGuiTypingSelectFlags_AllowBackspace	./imgui_internal.h	/^    ImGuiTypingSelectFlags_AllowBackspace       = 1 << 0,   \/\/ Backspace to delete character i/;"	e	enum:ImGuiTypingSelectFlags_
ImGuiTypingSelectFlags_AllowSingleCharMode	./imgui_internal.h	/^    ImGuiTypingSelectFlags_AllowSingleCharMode  = 1 << 1,   \/\/ Allow "single char" search mode/;"	e	enum:ImGuiTypingSelectFlags_
ImGuiTypingSelectFlags_None	./imgui_internal.h	/^    ImGuiTypingSelectFlags_None                 = 0,$/;"	e	enum:ImGuiTypingSelectFlags_
ImGuiTypingSelectRequest	./imgui_internal.h	/^struct IMGUI_API ImGuiTypingSelectRequest$/;"	s
ImGuiTypingSelectState	./imgui_internal.h	/^    ImGuiTypingSelectState() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiTypingSelectState
ImGuiTypingSelectState	./imgui_internal.h	/^struct IMGUI_API ImGuiTypingSelectState$/;"	s
ImGuiViewport	./imgui.h	/^    ImGuiViewport()     { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiViewport
ImGuiViewport	./imgui.h	/^struct ImGuiViewport$/;"	s
ImGuiViewportFlags	./imgui.h	/^typedef int ImGuiViewportFlags;     \/\/ -> enum ImGuiViewportFlags_   \/\/ Flags: for ImGuiView/;"	t	typeref:typename:int
ImGuiViewportFlags_	./imgui.h	/^enum ImGuiViewportFlags_$/;"	g
ImGuiViewportFlags_IsPlatformMonitor	./imgui.h	/^    ImGuiViewportFlags_IsPlatformMonitor        = 1 << 1,   \/\/ Represent a Platform Monitor (u/;"	e	enum:ImGuiViewportFlags_
ImGuiViewportFlags_IsPlatformWindow	./imgui.h	/^    ImGuiViewportFlags_IsPlatformWindow         = 1 << 0,   \/\/ Represent a Platform Window$/;"	e	enum:ImGuiViewportFlags_
ImGuiViewportFlags_None	./imgui.h	/^    ImGuiViewportFlags_None                     = 0,$/;"	e	enum:ImGuiViewportFlags_
ImGuiViewportFlags_OwnedByApp	./imgui.h	/^    ImGuiViewportFlags_OwnedByApp               = 1 << 2,   \/\/ Platform Window: is created\/ma/;"	e	enum:ImGuiViewportFlags_
ImGuiViewportP	./imgui_internal.h	/^    ImGuiViewportP()    { BgFgDrawListsLastFrame[0] = BgFgDrawListsLastFrame[1] = -1; BgFgDrawLi/;"	f	struct:ImGuiViewportP
ImGuiViewportP	./imgui_internal.h	/^struct ImGuiViewportP : public ImGuiViewport$/;"	s
ImGuiWindow	./imgui.cpp	/^ImGuiWindow::ImGuiWindow(ImGuiContext* ctx, const char* name) : DrawListInst(NULL)$/;"	f	class:ImGuiWindow
ImGuiWindow	./imgui_internal.h	/^struct IMGUI_API ImGuiWindow$/;"	s
ImGuiWindowFlags	./imgui.h	/^typedef int ImGuiWindowFlags;       \/\/ -> enum ImGuiWindowFlags_     \/\/ Flags: for Begin(), /;"	t	typeref:typename:int
ImGuiWindowFlags_	./imgui.h	/^enum ImGuiWindowFlags_$/;"	g
ImGuiWindowFlags_AlwaysAutoResize	./imgui.h	/^    ImGuiWindowFlags_AlwaysAutoResize       = 1 << 6,   \/\/ Resize every window to its content /;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_AlwaysHorizontalScrollbar	./imgui.h	/^    ImGuiWindowFlags_AlwaysHorizontalScrollbar=1<< 15,  \/\/ Always show horizontal scrollbar (e/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_AlwaysUseWindowPadding	./imgui.h	/^    ImGuiWindowFlags_AlwaysUseWindowPadding = 1 << 30,  \/\/ Obsoleted in 1.90.0: Use ImGuiChild/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_AlwaysVerticalScrollbar	./imgui.h	/^    ImGuiWindowFlags_AlwaysVerticalScrollbar= 1 << 14,  \/\/ Always show vertical scrollbar (eve/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_ChildMenu	./imgui.h	/^    ImGuiWindowFlags_ChildMenu              = 1 << 28,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_ChildWindow	./imgui.h	/^    ImGuiWindowFlags_ChildWindow            = 1 << 24,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_HorizontalScrollbar	./imgui.h	/^    ImGuiWindowFlags_HorizontalScrollbar    = 1 << 11,  \/\/ Allow horizontal scrollbar to appea/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_MenuBar	./imgui.h	/^    ImGuiWindowFlags_MenuBar                = 1 << 10,  \/\/ Has a menu-bar$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_Modal	./imgui.h	/^    ImGuiWindowFlags_Modal                  = 1 << 27,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NavFlattened	./imgui.h	/^    ImGuiWindowFlags_NavFlattened           = 1 << 31,  \/\/ Obsoleted in 1.90.9: Use ImGuiChild/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoBackground	./imgui.h	/^    ImGuiWindowFlags_NoBackground           = 1 << 7,   \/\/ Disable drawing background color (W/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoBringToFrontOnFocus	./imgui.h	/^    ImGuiWindowFlags_NoBringToFrontOnFocus  = 1 << 13,  \/\/ Disable bringing window to front wh/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoCollapse	./imgui.h	/^    ImGuiWindowFlags_NoCollapse             = 1 << 5,   \/\/ Disable user collapsing window by d/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoDecoration	./imgui.h	/^    ImGuiWindowFlags_NoDecoration           = ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoR/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoFocusOnAppearing	./imgui.h	/^    ImGuiWindowFlags_NoFocusOnAppearing     = 1 << 12,  \/\/ Disable taking focus when transitio/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoInputs	./imgui.h	/^    ImGuiWindowFlags_NoInputs               = ImGuiWindowFlags_NoMouseInputs | ImGuiWindowFlags_/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoMouseInputs	./imgui.h	/^    ImGuiWindowFlags_NoMouseInputs          = 1 << 9,   \/\/ Disable catching mouse, hovering te/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoMove	./imgui.h	/^    ImGuiWindowFlags_NoMove                 = 1 << 2,   \/\/ Disable user moving the window$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoNav	./imgui.h	/^    ImGuiWindowFlags_NoNav                  = ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_No/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoNavFocus	./imgui.h	/^    ImGuiWindowFlags_NoNavFocus             = 1 << 17,  \/\/ No focusing toward this window with/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoNavInputs	./imgui.h	/^    ImGuiWindowFlags_NoNavInputs            = 1 << 16,  \/\/ No gamepad\/keyboard navigation wit/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoResize	./imgui.h	/^    ImGuiWindowFlags_NoResize               = 1 << 1,   \/\/ Disable user resizing with the lowe/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoSavedSettings	./imgui.h	/^    ImGuiWindowFlags_NoSavedSettings        = 1 << 8,   \/\/ Never load\/save settings in .ini f/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoScrollWithMouse	./imgui.h	/^    ImGuiWindowFlags_NoScrollWithMouse      = 1 << 4,   \/\/ Disable user vertically scrolling w/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoScrollbar	./imgui.h	/^    ImGuiWindowFlags_NoScrollbar            = 1 << 3,   \/\/ Disable scrollbars (window can stil/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoTitleBar	./imgui.h	/^    ImGuiWindowFlags_NoTitleBar             = 1 << 0,   \/\/ Disable title-bar$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_None	./imgui.h	/^    ImGuiWindowFlags_None                   = 0,$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_Popup	./imgui.h	/^    ImGuiWindowFlags_Popup                  = 1 << 26,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_Tooltip	./imgui.h	/^    ImGuiWindowFlags_Tooltip                = 1 << 25,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_UnsavedDocument	./imgui.h	/^    ImGuiWindowFlags_UnsavedDocument        = 1 << 18,  \/\/ Display a dot next to the title. Wh/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowRefreshFlags	./imgui_internal.h	/^typedef int ImGuiWindowRefreshFlags;    \/\/ -> enum ImGuiWindowRefreshFlags_ \/\/ Flags: for Se/;"	t	typeref:typename:int
ImGuiWindowRefreshFlags_	./imgui_internal.h	/^enum ImGuiWindowRefreshFlags_$/;"	g
ImGuiWindowRefreshFlags_None	./imgui_internal.h	/^    ImGuiWindowRefreshFlags_None                = 0,$/;"	e	enum:ImGuiWindowRefreshFlags_
ImGuiWindowRefreshFlags_RefreshOnFocus	./imgui_internal.h	/^    ImGuiWindowRefreshFlags_RefreshOnFocus      = 1 << 2,   \/\/ [EXPERIMENTAL] Always refresh o/;"	e	enum:ImGuiWindowRefreshFlags_
ImGuiWindowRefreshFlags_RefreshOnHover	./imgui_internal.h	/^    ImGuiWindowRefreshFlags_RefreshOnHover      = 1 << 1,   \/\/ [EXPERIMENTAL] Always refresh o/;"	e	enum:ImGuiWindowRefreshFlags_
ImGuiWindowRefreshFlags_TryToAvoidRefresh	./imgui_internal.h	/^    ImGuiWindowRefreshFlags_TryToAvoidRefresh   = 1 << 0,   \/\/ [EXPERIMENTAL] Try to keep exis/;"	e	enum:ImGuiWindowRefreshFlags_
ImGuiWindowSettings	./imgui_internal.h	/^    ImGuiWindowSettings()       { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiWindowSettings
ImGuiWindowSettings	./imgui_internal.h	/^struct ImGuiWindowSettings$/;"	s
ImGuiWindowStackData	./imgui_internal.h	/^struct ImGuiWindowStackData$/;"	s
ImGuiWindowTempData	./imgui_internal.h	/^struct IMGUI_API ImGuiWindowTempData$/;"	s
ImGui_ImplAllegro5_CreateDeviceObjects	./backends/imgui_impl_allegro5.cpp	/^bool ImGui_ImplAllegro5_CreateDeviceObjects()$/;"	f	typeref:typename:bool
ImGui_ImplAllegro5_Data	./backends/imgui_impl_allegro5.cpp	/^    ImGui_ImplAllegro5_Data()   { memset((void*)this, 0, sizeof(*this)); }$/;"	f	struct:ImGui_ImplAllegro5_Data	file:
ImGui_ImplAllegro5_Data	./backends/imgui_impl_allegro5.cpp	/^struct ImGui_ImplAllegro5_Data$/;"	s	file:
ImGui_ImplAllegro5_GetBackendData	./backends/imgui_impl_allegro5.cpp	/^static ImGui_ImplAllegro5_Data* ImGui_ImplAllegro5_GetBackendData()     { return ImGui::GetCurre/;"	f	typeref:typename:ImGui_ImplAllegro5_Data *	file:
ImGui_ImplAllegro5_GetClipboardText	./backends/imgui_impl_allegro5.cpp	/^static const char* ImGui_ImplAllegro5_GetClipboardText(ImGuiContext*)$/;"	f	typeref:typename:const char *	file:
ImGui_ImplAllegro5_Init	./backends/imgui_impl_allegro5.cpp	/^bool ImGui_ImplAllegro5_Init(ALLEGRO_DISPLAY* display)$/;"	f	typeref:typename:bool
ImGui_ImplAllegro5_InvalidateDeviceObjects	./backends/imgui_impl_allegro5.cpp	/^void ImGui_ImplAllegro5_InvalidateDeviceObjects()$/;"	f	typeref:typename:void
ImGui_ImplAllegro5_KeyCodeToImGuiKey	./backends/imgui_impl_allegro5.cpp	/^static ImGuiKey ImGui_ImplAllegro5_KeyCodeToImGuiKey(int key_code)$/;"	f	typeref:typename:ImGuiKey	file:
ImGui_ImplAllegro5_NewFrame	./backends/imgui_impl_allegro5.cpp	/^void ImGui_ImplAllegro5_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplAllegro5_ProcessEvent	./backends/imgui_impl_allegro5.cpp	/^bool ImGui_ImplAllegro5_ProcessEvent(ALLEGRO_EVENT* ev)$/;"	f	typeref:typename:bool
ImGui_ImplAllegro5_RenderDrawData	./backends/imgui_impl_allegro5.cpp	/^void ImGui_ImplAllegro5_RenderDrawData(ImDrawData* draw_data)$/;"	f	typeref:typename:void
ImGui_ImplAllegro5_SetClipboardText	./backends/imgui_impl_allegro5.cpp	/^static void ImGui_ImplAllegro5_SetClipboardText(ImGuiContext*, const char* text)$/;"	f	typeref:typename:void	file:
ImGui_ImplAllegro5_SetupRenderState	./backends/imgui_impl_allegro5.cpp	/^static void ImGui_ImplAllegro5_SetupRenderState(ImDrawData* draw_data)$/;"	f	typeref:typename:void	file:
ImGui_ImplAllegro5_Shutdown	./backends/imgui_impl_allegro5.cpp	/^void ImGui_ImplAllegro5_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplAllegro5_UpdateKeyModifiers	./backends/imgui_impl_allegro5.cpp	/^static void ImGui_ImplAllegro5_UpdateKeyModifiers()$/;"	f	typeref:typename:void	file:
ImGui_ImplAllegro5_UpdateMouseCursor	./backends/imgui_impl_allegro5.cpp	/^static void ImGui_ImplAllegro5_UpdateMouseCursor()$/;"	f	typeref:typename:void	file:
ImGui_ImplAndroid_HandleInputEvent	./backends/imgui_impl_android.cpp	/^int32_t ImGui_ImplAndroid_HandleInputEvent(const AInputEvent* input_event)$/;"	f	typeref:typename:int32_t
ImGui_ImplAndroid_Init	./backends/imgui_impl_android.cpp	/^bool ImGui_ImplAndroid_Init(ANativeWindow* window)$/;"	f	typeref:typename:bool
ImGui_ImplAndroid_KeyCodeToImGuiKey	./backends/imgui_impl_android.cpp	/^static ImGuiKey ImGui_ImplAndroid_KeyCodeToImGuiKey(int32_t key_code)$/;"	f	typeref:typename:ImGuiKey	file:
ImGui_ImplAndroid_NewFrame	./backends/imgui_impl_android.cpp	/^void ImGui_ImplAndroid_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplAndroid_Shutdown	./backends/imgui_impl_android.cpp	/^void ImGui_ImplAndroid_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplDX10_CreateDeviceObjects	./backends/imgui_impl_dx10.cpp	/^bool    ImGui_ImplDX10_CreateDeviceObjects()$/;"	f	typeref:typename:bool
ImGui_ImplDX10_CreateFontsTexture	./backends/imgui_impl_dx10.cpp	/^static void ImGui_ImplDX10_CreateFontsTexture()$/;"	f	typeref:typename:void	file:
ImGui_ImplDX10_Data	./backends/imgui_impl_dx10.cpp	/^    ImGui_ImplDX10_Data()       { memset((void*)this, 0, sizeof(*this)); VertexBufferSize = 5000/;"	f	struct:ImGui_ImplDX10_Data	file:
ImGui_ImplDX10_Data	./backends/imgui_impl_dx10.cpp	/^struct ImGui_ImplDX10_Data$/;"	s	file:
ImGui_ImplDX10_GetBackendData	./backends/imgui_impl_dx10.cpp	/^static ImGui_ImplDX10_Data* ImGui_ImplDX10_GetBackendData()$/;"	f	typeref:typename:ImGui_ImplDX10_Data *	file:
ImGui_ImplDX10_Init	./backends/imgui_impl_dx10.cpp	/^bool    ImGui_ImplDX10_Init(ID3D10Device* device)$/;"	f	typeref:typename:bool
ImGui_ImplDX10_InvalidateDeviceObjects	./backends/imgui_impl_dx10.cpp	/^void    ImGui_ImplDX10_InvalidateDeviceObjects()$/;"	f	typeref:typename:void
ImGui_ImplDX10_NewFrame	./backends/imgui_impl_dx10.cpp	/^void ImGui_ImplDX10_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplDX10_RenderDrawData	./backends/imgui_impl_dx10.cpp	/^void ImGui_ImplDX10_RenderDrawData(ImDrawData* draw_data)$/;"	f	typeref:typename:void
ImGui_ImplDX10_SetupRenderState	./backends/imgui_impl_dx10.cpp	/^static void ImGui_ImplDX10_SetupRenderState(ImDrawData* draw_data, ID3D10Device* ctx)$/;"	f	typeref:typename:void	file:
ImGui_ImplDX10_Shutdown	./backends/imgui_impl_dx10.cpp	/^void ImGui_ImplDX10_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplDX11_CreateDeviceObjects	./backends/imgui_impl_dx11.cpp	/^bool    ImGui_ImplDX11_CreateDeviceObjects()$/;"	f	typeref:typename:bool
ImGui_ImplDX11_CreateFontsTexture	./backends/imgui_impl_dx11.cpp	/^static void ImGui_ImplDX11_CreateFontsTexture()$/;"	f	typeref:typename:void	file:
ImGui_ImplDX11_Data	./backends/imgui_impl_dx11.cpp	/^    ImGui_ImplDX11_Data()       { memset((void*)this, 0, sizeof(*this)); VertexBufferSize = 5000/;"	f	struct:ImGui_ImplDX11_Data	file:
ImGui_ImplDX11_Data	./backends/imgui_impl_dx11.cpp	/^struct ImGui_ImplDX11_Data$/;"	s	file:
ImGui_ImplDX11_GetBackendData	./backends/imgui_impl_dx11.cpp	/^static ImGui_ImplDX11_Data* ImGui_ImplDX11_GetBackendData()$/;"	f	typeref:typename:ImGui_ImplDX11_Data *	file:
ImGui_ImplDX11_Init	./backends/imgui_impl_dx11.cpp	/^bool    ImGui_ImplDX11_Init(ID3D11Device* device, ID3D11DeviceContext* device_context)$/;"	f	typeref:typename:bool
ImGui_ImplDX11_InvalidateDeviceObjects	./backends/imgui_impl_dx11.cpp	/^void    ImGui_ImplDX11_InvalidateDeviceObjects()$/;"	f	typeref:typename:void
ImGui_ImplDX11_NewFrame	./backends/imgui_impl_dx11.cpp	/^void ImGui_ImplDX11_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplDX11_RenderDrawData	./backends/imgui_impl_dx11.cpp	/^void ImGui_ImplDX11_RenderDrawData(ImDrawData* draw_data)$/;"	f	typeref:typename:void
ImGui_ImplDX11_SetupRenderState	./backends/imgui_impl_dx11.cpp	/^static void ImGui_ImplDX11_SetupRenderState(ImDrawData* draw_data, ID3D11DeviceContext* ctx)$/;"	f	typeref:typename:void	file:
ImGui_ImplDX11_Shutdown	./backends/imgui_impl_dx11.cpp	/^void ImGui_ImplDX11_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplDX12_CreateDeviceObjects	./backends/imgui_impl_dx12.cpp	/^bool    ImGui_ImplDX12_CreateDeviceObjects()$/;"	f	typeref:typename:bool
ImGui_ImplDX12_CreateFontsTexture	./backends/imgui_impl_dx12.cpp	/^static void ImGui_ImplDX12_CreateFontsTexture()$/;"	f	typeref:typename:void	file:
ImGui_ImplDX12_Data	./backends/imgui_impl_dx12.cpp	/^    ImGui_ImplDX12_Data()       { memset((void*)this, 0, sizeof(*this)); frameIndex = UINT_MAX; /;"	f	struct:ImGui_ImplDX12_Data	file:
ImGui_ImplDX12_Data	./backends/imgui_impl_dx12.cpp	/^struct ImGui_ImplDX12_Data$/;"	s	file:
ImGui_ImplDX12_GetBackendData	./backends/imgui_impl_dx12.cpp	/^static ImGui_ImplDX12_Data* ImGui_ImplDX12_GetBackendData()$/;"	f	typeref:typename:ImGui_ImplDX12_Data *	file:
ImGui_ImplDX12_Init	./backends/imgui_impl_dx12.cpp	/^bool ImGui_ImplDX12_Init(ID3D12Device* device, int num_frames_in_flight, DXGI_FORMAT rtv_format,/;"	f	typeref:typename:bool
ImGui_ImplDX12_InvalidateDeviceObjects	./backends/imgui_impl_dx12.cpp	/^void    ImGui_ImplDX12_InvalidateDeviceObjects()$/;"	f	typeref:typename:void
ImGui_ImplDX12_NewFrame	./backends/imgui_impl_dx12.cpp	/^void ImGui_ImplDX12_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplDX12_RenderBuffers	./backends/imgui_impl_dx12.cpp	/^struct ImGui_ImplDX12_RenderBuffers$/;"	s	file:
ImGui_ImplDX12_RenderDrawData	./backends/imgui_impl_dx12.cpp	/^void ImGui_ImplDX12_RenderDrawData(ImDrawData* draw_data, ID3D12GraphicsCommandList* ctx)$/;"	f	typeref:typename:void
ImGui_ImplDX12_SetupRenderState	./backends/imgui_impl_dx12.cpp	/^static void ImGui_ImplDX12_SetupRenderState(ImDrawData* draw_data, ID3D12GraphicsCommandList* ct/;"	f	typeref:typename:void	file:
ImGui_ImplDX12_Shutdown	./backends/imgui_impl_dx12.cpp	/^void ImGui_ImplDX12_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplDX9_CheckFormatSupport	./backends/imgui_impl_dx9.cpp	/^static bool ImGui_ImplDX9_CheckFormatSupport(IDirect3DDevice9* pDevice, D3DFORMAT format)$/;"	f	typeref:typename:bool	file:
ImGui_ImplDX9_CreateDeviceObjects	./backends/imgui_impl_dx9.cpp	/^bool ImGui_ImplDX9_CreateDeviceObjects()$/;"	f	typeref:typename:bool
ImGui_ImplDX9_CreateFontsTexture	./backends/imgui_impl_dx9.cpp	/^static bool ImGui_ImplDX9_CreateFontsTexture()$/;"	f	typeref:typename:bool	file:
ImGui_ImplDX9_Data	./backends/imgui_impl_dx9.cpp	/^    ImGui_ImplDX9_Data()        { memset((void*)this, 0, sizeof(*this)); VertexBufferSize = 5000/;"	f	struct:ImGui_ImplDX9_Data	file:
ImGui_ImplDX9_Data	./backends/imgui_impl_dx9.cpp	/^struct ImGui_ImplDX9_Data$/;"	s	file:
ImGui_ImplDX9_GetBackendData	./backends/imgui_impl_dx9.cpp	/^static ImGui_ImplDX9_Data* ImGui_ImplDX9_GetBackendData()$/;"	f	typeref:typename:ImGui_ImplDX9_Data *	file:
ImGui_ImplDX9_Init	./backends/imgui_impl_dx9.cpp	/^bool ImGui_ImplDX9_Init(IDirect3DDevice9* device)$/;"	f	typeref:typename:bool
ImGui_ImplDX9_InvalidateDeviceObjects	./backends/imgui_impl_dx9.cpp	/^void ImGui_ImplDX9_InvalidateDeviceObjects()$/;"	f	typeref:typename:void
ImGui_ImplDX9_NewFrame	./backends/imgui_impl_dx9.cpp	/^void ImGui_ImplDX9_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplDX9_RenderDrawData	./backends/imgui_impl_dx9.cpp	/^void ImGui_ImplDX9_RenderDrawData(ImDrawData* draw_data)$/;"	f	typeref:typename:void
ImGui_ImplDX9_SetupRenderState	./backends/imgui_impl_dx9.cpp	/^static void ImGui_ImplDX9_SetupRenderState(ImDrawData* draw_data)$/;"	f	typeref:typename:void	file:
ImGui_ImplDX9_Shutdown	./backends/imgui_impl_dx9.cpp	/^void ImGui_ImplDX9_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplEmscripten_FullscreenChangeCallback	./backends/imgui_impl_glfw.cpp	/^static EM_BOOL ImGui_ImplEmscripten_FullscreenChangeCallback(int event_type, const EmscriptenFul/;"	f	typeref:typename:EM_BOOL	file:
ImGui_ImplEmscripten_WheelCallback	./backends/imgui_impl_glfw.cpp	/^static EM_BOOL ImGui_ImplEmscripten_WheelCallback(int, const EmscriptenWheelEvent* ev, void*)$/;"	f	typeref:typename:EM_BOOL	file:
ImGui_ImplGLUT_AddKeyEvent	./backends/imgui_impl_glut.cpp	/^static void ImGui_ImplGLUT_AddKeyEvent(ImGuiKey key, bool down, int native_keycode)$/;"	f	typeref:typename:void	file:
ImGui_ImplGLUT_Init	./backends/imgui_impl_glut.cpp	/^bool ImGui_ImplGLUT_Init()$/;"	f	typeref:typename:bool
ImGui_ImplGLUT_InstallFuncs	./backends/imgui_impl_glut.cpp	/^void ImGui_ImplGLUT_InstallFuncs()$/;"	f	typeref:typename:void
ImGui_ImplGLUT_KeyToImGuiKey	./backends/imgui_impl_glut.cpp	/^static ImGuiKey ImGui_ImplGLUT_KeyToImGuiKey(int key)$/;"	f	typeref:typename:ImGuiKey	file:
ImGui_ImplGLUT_KeyboardFunc	./backends/imgui_impl_glut.cpp	/^void ImGui_ImplGLUT_KeyboardFunc(unsigned char c, int x, int y)$/;"	f	typeref:typename:void
ImGui_ImplGLUT_KeyboardUpFunc	./backends/imgui_impl_glut.cpp	/^void ImGui_ImplGLUT_KeyboardUpFunc(unsigned char c, int x, int y)$/;"	f	typeref:typename:void
ImGui_ImplGLUT_MotionFunc	./backends/imgui_impl_glut.cpp	/^void ImGui_ImplGLUT_MotionFunc(int x, int y)$/;"	f	typeref:typename:void
ImGui_ImplGLUT_MouseFunc	./backends/imgui_impl_glut.cpp	/^void ImGui_ImplGLUT_MouseFunc(int glut_button, int state, int x, int y)$/;"	f	typeref:typename:void
ImGui_ImplGLUT_MouseWheelFunc	./backends/imgui_impl_glut.cpp	/^void ImGui_ImplGLUT_MouseWheelFunc(int button, int dir, int x, int y)$/;"	f	typeref:typename:void
ImGui_ImplGLUT_NewFrame	./backends/imgui_impl_glut.cpp	/^void ImGui_ImplGLUT_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplGLUT_ReshapeFunc	./backends/imgui_impl_glut.cpp	/^void ImGui_ImplGLUT_ReshapeFunc(int w, int h)$/;"	f	typeref:typename:void
ImGui_ImplGLUT_Shutdown	./backends/imgui_impl_glut.cpp	/^void ImGui_ImplGLUT_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplGLUT_SpecialFunc	./backends/imgui_impl_glut.cpp	/^void ImGui_ImplGLUT_SpecialFunc(int key, int x, int y)$/;"	f	typeref:typename:void
ImGui_ImplGLUT_SpecialUpFunc	./backends/imgui_impl_glut.cpp	/^void ImGui_ImplGLUT_SpecialUpFunc(int key, int x, int y)$/;"	f	typeref:typename:void
ImGui_ImplGLUT_UpdateKeyModifiers	./backends/imgui_impl_glut.cpp	/^static void ImGui_ImplGLUT_UpdateKeyModifiers()$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_CharCallback	./backends/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_CharCallback(GLFWwindow* window, unsigned int c)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_CursorEnterCallback	./backends/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_CursorEnterCallback(GLFWwindow* window, int entered)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_CursorPosCallback	./backends/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_CursorPosCallback(GLFWwindow* window, double x, double y)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_Data	./backends/imgui_impl_glfw.cpp	/^    ImGui_ImplGlfw_Data()   { memset((void*)this, 0, sizeof(*this)); }$/;"	f	struct:ImGui_ImplGlfw_Data	file:
ImGui_ImplGlfw_Data	./backends/imgui_impl_glfw.cpp	/^struct ImGui_ImplGlfw_Data$/;"	s	file:
ImGui_ImplGlfw_GetBackendData	./backends/imgui_impl_glfw.cpp	/^static ImGui_ImplGlfw_Data* ImGui_ImplGlfw_GetBackendData()$/;"	f	typeref:typename:ImGui_ImplGlfw_Data *	file:
ImGui_ImplGlfw_Init	./backends/imgui_impl_glfw.cpp	/^static bool ImGui_ImplGlfw_Init(GLFWwindow* window, bool install_callbacks, GlfwClientApi client/;"	f	typeref:typename:bool	file:
ImGui_ImplGlfw_InitForOpenGL	./backends/imgui_impl_glfw.cpp	/^bool ImGui_ImplGlfw_InitForOpenGL(GLFWwindow* window, bool install_callbacks)$/;"	f	typeref:typename:bool
ImGui_ImplGlfw_InitForOther	./backends/imgui_impl_glfw.cpp	/^bool ImGui_ImplGlfw_InitForOther(GLFWwindow* window, bool install_callbacks)$/;"	f	typeref:typename:bool
ImGui_ImplGlfw_InitForVulkan	./backends/imgui_impl_glfw.cpp	/^bool ImGui_ImplGlfw_InitForVulkan(GLFWwindow* window, bool install_callbacks)$/;"	f	typeref:typename:bool
ImGui_ImplGlfw_InstallCallbacks	./backends/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_InstallCallbacks(GLFWwindow* window)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_InstallEmscriptenCallbacks	./backends/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_InstallEmscriptenCallbacks(GLFWwindow* window, const char* canvas_selector)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_InstallEmscriptenCallbacks	./backends/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_InstallEmscriptenCallbacks(GLFWwindow*, const char* canvas_selector)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_KeyCallback	./backends/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_KeyCallback(GLFWwindow* window, int keycode, int scancode, int action, int m/;"	f	typeref:typename:void
ImGui_ImplGlfw_KeyToImGuiKey	./backends/imgui_impl_glfw.cpp	/^static ImGuiKey ImGui_ImplGlfw_KeyToImGuiKey(int key)$/;"	f	typeref:typename:ImGuiKey	file:
ImGui_ImplGlfw_MonitorCallback	./backends/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_MonitorCallback(GLFWmonitor*, int)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_MouseButtonCallback	./backends/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_MouseButtonCallback(GLFWwindow* window, int button, int action, int mods)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_NewFrame	./backends/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplGlfw_OnCanvasSizeChange	./backends/imgui_impl_glfw.cpp	/^static EM_BOOL ImGui_ImplGlfw_OnCanvasSizeChange(int event_type, const EmscriptenUiEvent* event,/;"	f	typeref:typename:EM_BOOL	file:
ImGui_ImplGlfw_RestoreCallbacks	./backends/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_RestoreCallbacks(GLFWwindow* window)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_ScrollCallback	./backends/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_ScrollCallback(GLFWwindow* window, double xoffset, double yoffset)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_SetCallbacksChainForAllWindows	./backends/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_SetCallbacksChainForAllWindows(bool chain_for_all_windows)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_ShouldChainCallback	./backends/imgui_impl_glfw.cpp	/^static bool ImGui_ImplGlfw_ShouldChainCallback(GLFWwindow* window)$/;"	f	typeref:typename:bool	file:
ImGui_ImplGlfw_Shutdown	./backends/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplGlfw_Sleep	./backends/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_Sleep(int milliseconds)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_TranslateUntranslatedKey	./backends/imgui_impl_glfw.cpp	/^static int ImGui_ImplGlfw_TranslateUntranslatedKey(int key, int scancode)$/;"	f	typeref:typename:int	file:
ImGui_ImplGlfw_UpdateGamepads	./backends/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_UpdateGamepads()$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_UpdateKeyModifiers	./backends/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_UpdateKeyModifiers(GLFWwindow* window)$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_UpdateMouseCursor	./backends/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_UpdateMouseCursor()$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_UpdateMouseData	./backends/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_UpdateMouseData()$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_WindowFocusCallback	./backends/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_WindowFocusCallback(GLFWwindow* window, int focused)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_WndProc	./backends/imgui_impl_glfw.cpp	/^static LRESULT CALLBACK ImGui_ImplGlfw_WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam/;"	f	typeref:typename:LRESULT CALLBACK	file:
ImGui_ImplMetal_CreateDeviceObjects	./backends/imgui_impl_metal.mm	/^bool ImGui_ImplMetal_CreateDeviceObjects(MTL::Device* device)$/;"	f	struct:ImGui_ImplMetal_Data
ImGui_ImplMetal_CreateDeviceObjects	./backends/imgui_impl_metal.mm	/^bool ImGui_ImplMetal_CreateDeviceObjects(id<MTLDevice> device)$/;"	f	struct:ImGui_ImplMetal_Data
ImGui_ImplMetal_CreateFontsTexture	./backends/imgui_impl_metal.mm	/^bool ImGui_ImplMetal_CreateFontsTexture(MTL::Device* device)$/;"	f	struct:ImGui_ImplMetal_Data
ImGui_ImplMetal_CreateFontsTexture	./backends/imgui_impl_metal.mm	/^bool ImGui_ImplMetal_CreateFontsTexture(id<MTLDevice> device)$/;"	f	struct:ImGui_ImplMetal_Data
ImGui_ImplMetal_Data	./backends/imgui_impl_metal.mm	/^struct ImGui_ImplMetal_Data$/;"	s
ImGui_ImplMetal_DestroyBackendData	./backends/imgui_impl_metal.mm	/^static void                     ImGui_ImplMetal_DestroyBackendData(){ IM_DELETE(ImGui_ImplMetal_/;"	f	struct:ImGui_ImplMetal_Data
ImGui_ImplMetal_DestroyDeviceObjects	./backends/imgui_impl_metal.mm	/^void ImGui_ImplMetal_DestroyDeviceObjects()$/;"	f	struct:ImGui_ImplMetal_Data
ImGui_ImplMetal_DestroyFontsTexture	./backends/imgui_impl_metal.mm	/^void ImGui_ImplMetal_DestroyFontsTexture()$/;"	f	struct:ImGui_ImplMetal_Data
ImGui_ImplMetal_GetBackendData	./backends/imgui_impl_metal.mm	/^static ImGui_ImplMetal_Data*    ImGui_ImplMetal_GetBackendData()    { return ImGui::GetCurrentCo/;"	f	struct:ImGui_ImplMetal_Data
ImGui_ImplMetal_Init	./backends/imgui_impl_metal.mm	/^bool ImGui_ImplMetal_Init(MTL::Device* device)$/;"	f	struct:ImGui_ImplMetal_Data
ImGui_ImplMetal_Init	./backends/imgui_impl_metal.mm	/^bool ImGui_ImplMetal_Init(id<MTLDevice> device)$/;"	f	struct:ImGui_ImplMetal_Data
ImGui_ImplMetal_NewFrame	./backends/imgui_impl_metal.mm	/^void ImGui_ImplMetal_NewFrame(MTL::RenderPassDescriptor* renderPassDescriptor)$/;"	f	struct:ImGui_ImplMetal_Data
ImGui_ImplMetal_NewFrame	./backends/imgui_impl_metal.mm	/^void ImGui_ImplMetal_NewFrame(MTLRenderPassDescriptor* renderPassDescriptor)$/;"	f	struct:ImGui_ImplMetal_Data
ImGui_ImplMetal_RenderDrawData	./backends/imgui_impl_metal.mm	/^void ImGui_ImplMetal_RenderDrawData(ImDrawData* drawData, id<MTLCommandBuffer> commandBuffer, id/;"	f	struct:ImGui_ImplMetal_Data
ImGui_ImplMetal_RenderDrawData	./backends/imgui_impl_metal.mm	/^void ImGui_ImplMetal_RenderDrawData(ImDrawData* draw_data,$/;"	f	struct:ImGui_ImplMetal_Data
ImGui_ImplMetal_SetupRenderState	./backends/imgui_impl_metal.mm	/^static void ImGui_ImplMetal_SetupRenderState(ImDrawData* drawData, id<MTLCommandBuffer> commandB/;"	f	struct:ImGui_ImplMetal_Data
ImGui_ImplMetal_Shutdown	./backends/imgui_impl_metal.mm	/^void ImGui_ImplMetal_Shutdown()$/;"	f	struct:ImGui_ImplMetal_Data
ImGui_ImplOSX_AddTrackingArea	./backends/imgui_impl_osx.mm	/^static void ImGui_ImplOSX_AddTrackingArea(NSView* _Nonnull view)$/;"	f
ImGui_ImplOSX_AddTrackingArea	./backends/imgui_impl_osx.mm	/^static void ImGui_ImplOSX_AddTrackingArea(NSView* _Nonnull view);$/;"	f	struct:ImGui_ImplOSX_Data
ImGui_ImplOSX_Data	./backends/imgui_impl_osx.mm	/^struct ImGui_ImplOSX_Data$/;"	s
ImGui_ImplOSX_DestroyBackendData	./backends/imgui_impl_osx.mm	/^static void                     ImGui_ImplOSX_DestroyBackendData()  { IM_DELETE(ImGui_ImplOSX_Ge/;"	f	struct:ImGui_ImplOSX_Data
ImGui_ImplOSX_GetBackendData	./backends/imgui_impl_osx.mm	/^static ImGui_ImplOSX_Data*      ImGui_ImplOSX_GetBackendData()      { return (ImGui_ImplOSX_Data/;"	f	struct:ImGui_ImplOSX_Data
ImGui_ImplOSX_HandleEvent	./backends/imgui_impl_osx.mm	/^static bool ImGui_ImplOSX_HandleEvent(NSEvent* event, NSView* view)$/;"	f
ImGui_ImplOSX_HandleEvent	./backends/imgui_impl_osx.mm	/^static bool ImGui_ImplOSX_HandleEvent(NSEvent* event, NSView* view);$/;"	f	struct:ImGui_ImplOSX_Data
ImGui_ImplOSX_Init	./backends/imgui_impl_osx.mm	/^IMGUI_IMPL_API bool ImGui_ImplOSX_Init(void* _Nonnull view) {$/;"	f
ImGui_ImplOSX_Init	./backends/imgui_impl_osx.mm	/^bool ImGui_ImplOSX_Init(NSView* view)$/;"	f
ImGui_ImplOSX_KeyCodeToImGuiKey	./backends/imgui_impl_osx.mm	/^static ImGuiKey ImGui_ImplOSX_KeyCodeToImGuiKey(int key_code)$/;"	f
ImGui_ImplOSX_NewFrame	./backends/imgui_impl_osx.mm	/^IMGUI_IMPL_API void ImGui_ImplOSX_NewFrame(void* _Nullable view) {$/;"	f
ImGui_ImplOSX_NewFrame	./backends/imgui_impl_osx.mm	/^void ImGui_ImplOSX_NewFrame(NSView* view)$/;"	f
ImGui_ImplOSX_Shutdown	./backends/imgui_impl_osx.mm	/^void ImGui_ImplOSX_Shutdown()$/;"	f
ImGui_ImplOSX_UpdateGamepads	./backends/imgui_impl_osx.mm	/^static void ImGui_ImplOSX_UpdateGamepads()$/;"	f
ImGui_ImplOSX_UpdateImePosWithView	./backends/imgui_impl_osx.mm	/^static void ImGui_ImplOSX_UpdateImePosWithView(NSView* view)$/;"	f
ImGui_ImplOSX_UpdateMouseCursor	./backends/imgui_impl_osx.mm	/^static void ImGui_ImplOSX_UpdateMouseCursor()$/;"	f
ImGui_ImplOpenGL2_CreateDeviceObjects	./backends/imgui_impl_opengl2.cpp	/^bool    ImGui_ImplOpenGL2_CreateDeviceObjects()$/;"	f	typeref:typename:bool
ImGui_ImplOpenGL2_CreateFontsTexture	./backends/imgui_impl_opengl2.cpp	/^bool ImGui_ImplOpenGL2_CreateFontsTexture()$/;"	f	typeref:typename:bool
ImGui_ImplOpenGL2_Data	./backends/imgui_impl_opengl2.cpp	/^    ImGui_ImplOpenGL2_Data() { memset((void*)this, 0, sizeof(*this)); }$/;"	f	struct:ImGui_ImplOpenGL2_Data	file:
ImGui_ImplOpenGL2_Data	./backends/imgui_impl_opengl2.cpp	/^struct ImGui_ImplOpenGL2_Data$/;"	s	file:
ImGui_ImplOpenGL2_DestroyDeviceObjects	./backends/imgui_impl_opengl2.cpp	/^void    ImGui_ImplOpenGL2_DestroyDeviceObjects()$/;"	f	typeref:typename:void
ImGui_ImplOpenGL2_DestroyFontsTexture	./backends/imgui_impl_opengl2.cpp	/^void ImGui_ImplOpenGL2_DestroyFontsTexture()$/;"	f	typeref:typename:void
ImGui_ImplOpenGL2_GetBackendData	./backends/imgui_impl_opengl2.cpp	/^static ImGui_ImplOpenGL2_Data* ImGui_ImplOpenGL2_GetBackendData()$/;"	f	typeref:typename:ImGui_ImplOpenGL2_Data *	file:
ImGui_ImplOpenGL2_Init	./backends/imgui_impl_opengl2.cpp	/^bool    ImGui_ImplOpenGL2_Init()$/;"	f	typeref:typename:bool
ImGui_ImplOpenGL2_NewFrame	./backends/imgui_impl_opengl2.cpp	/^void    ImGui_ImplOpenGL2_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplOpenGL2_RenderDrawData	./backends/imgui_impl_opengl2.cpp	/^void ImGui_ImplOpenGL2_RenderDrawData(ImDrawData* draw_data)$/;"	f	typeref:typename:void
ImGui_ImplOpenGL2_SetupRenderState	./backends/imgui_impl_opengl2.cpp	/^static void ImGui_ImplOpenGL2_SetupRenderState(ImDrawData* draw_data, int fb_width, int fb_heigh/;"	f	typeref:typename:void	file:
ImGui_ImplOpenGL2_Shutdown	./backends/imgui_impl_opengl2.cpp	/^void    ImGui_ImplOpenGL2_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplOpenGL3_CreateDeviceObjects	./backends/imgui_impl_opengl3.cpp	/^bool    ImGui_ImplOpenGL3_CreateDeviceObjects()$/;"	f	typeref:typename:bool
ImGui_ImplOpenGL3_CreateFontsTexture	./backends/imgui_impl_opengl3.cpp	/^bool ImGui_ImplOpenGL3_CreateFontsTexture()$/;"	f	typeref:typename:bool
ImGui_ImplOpenGL3_Data	./backends/imgui_impl_opengl3.cpp	/^    ImGui_ImplOpenGL3_Data() { memset((void*)this, 0, sizeof(*this)); }$/;"	f	struct:ImGui_ImplOpenGL3_Data	file:
ImGui_ImplOpenGL3_Data	./backends/imgui_impl_opengl3.cpp	/^struct ImGui_ImplOpenGL3_Data$/;"	s	file:
ImGui_ImplOpenGL3_DestroyDeviceObjects	./backends/imgui_impl_opengl3.cpp	/^void    ImGui_ImplOpenGL3_DestroyDeviceObjects()$/;"	f	typeref:typename:void
ImGui_ImplOpenGL3_DestroyFontsTexture	./backends/imgui_impl_opengl3.cpp	/^void ImGui_ImplOpenGL3_DestroyFontsTexture()$/;"	f	typeref:typename:void
ImGui_ImplOpenGL3_GetBackendData	./backends/imgui_impl_opengl3.cpp	/^static ImGui_ImplOpenGL3_Data* ImGui_ImplOpenGL3_GetBackendData()$/;"	f	typeref:typename:ImGui_ImplOpenGL3_Data *	file:
ImGui_ImplOpenGL3_Init	./backends/imgui_impl_opengl3.cpp	/^bool    ImGui_ImplOpenGL3_Init(const char* glsl_version)$/;"	f	typeref:typename:bool
ImGui_ImplOpenGL3_NewFrame	./backends/imgui_impl_opengl3.cpp	/^void    ImGui_ImplOpenGL3_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplOpenGL3_RenderDrawData	./backends/imgui_impl_opengl3.cpp	/^void    ImGui_ImplOpenGL3_RenderDrawData(ImDrawData* draw_data)$/;"	f	typeref:typename:void
ImGui_ImplOpenGL3_SetupRenderState	./backends/imgui_impl_opengl3.cpp	/^static void ImGui_ImplOpenGL3_SetupRenderState(ImDrawData* draw_data, int fb_width, int fb_heigh/;"	f	typeref:typename:void	file:
ImGui_ImplOpenGL3_Shutdown	./backends/imgui_impl_opengl3.cpp	/^void    ImGui_ImplOpenGL3_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplOpenGL3_VtxAttribState	./backends/imgui_impl_opengl3.cpp	/^struct ImGui_ImplOpenGL3_VtxAttribState$/;"	s	file:
ImGui_ImplSDL2_CloseGamepads	./backends/imgui_impl_sdl2.cpp	/^static void ImGui_ImplSDL2_CloseGamepads()$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_Data	./backends/imgui_impl_sdl2.cpp	/^    ImGui_ImplSDL2_Data()   { memset((void*)this, 0, sizeof(*this)); }$/;"	f	struct:ImGui_ImplSDL2_Data	file:
ImGui_ImplSDL2_Data	./backends/imgui_impl_sdl2.cpp	/^struct ImGui_ImplSDL2_Data$/;"	s	file:
ImGui_ImplSDL2_GamepadMode	./backends/imgui_impl_sdl2.h	/^enum ImGui_ImplSDL2_GamepadMode { ImGui_ImplSDL2_GamepadMode_AutoFirst, ImGui_ImplSDL2_GamepadMo/;"	g
ImGui_ImplSDL2_GamepadMode_AutoAll	./backends/imgui_impl_sdl2.h	/^enum ImGui_ImplSDL2_GamepadMode { ImGui_ImplSDL2_GamepadMode_AutoFirst, ImGui_ImplSDL2_GamepadMo/;"	e	enum:ImGui_ImplSDL2_GamepadMode
ImGui_ImplSDL2_GamepadMode_AutoFirst	./backends/imgui_impl_sdl2.h	/^enum ImGui_ImplSDL2_GamepadMode { ImGui_ImplSDL2_GamepadMode_AutoFirst, ImGui_ImplSDL2_GamepadMo/;"	e	enum:ImGui_ImplSDL2_GamepadMode
ImGui_ImplSDL2_GamepadMode_Manual	./backends/imgui_impl_sdl2.h	/^enum ImGui_ImplSDL2_GamepadMode { ImGui_ImplSDL2_GamepadMode_AutoFirst, ImGui_ImplSDL2_GamepadMo/;"	e	enum:ImGui_ImplSDL2_GamepadMode
ImGui_ImplSDL2_GetBackendData	./backends/imgui_impl_sdl2.cpp	/^static ImGui_ImplSDL2_Data* ImGui_ImplSDL2_GetBackendData()$/;"	f	typeref:typename:ImGui_ImplSDL2_Data *	file:
ImGui_ImplSDL2_GetClipboardText	./backends/imgui_impl_sdl2.cpp	/^static const char* ImGui_ImplSDL2_GetClipboardText(ImGuiContext*)$/;"	f	typeref:typename:const char *	file:
ImGui_ImplSDL2_GetViewportForWindowID	./backends/imgui_impl_sdl2.cpp	/^static ImGuiViewport* ImGui_ImplSDL2_GetViewportForWindowID(Uint32 window_id)$/;"	f	typeref:typename:ImGuiViewport *	file:
ImGui_ImplSDL2_Init	./backends/imgui_impl_sdl2.cpp	/^static bool ImGui_ImplSDL2_Init(SDL_Window* window, SDL_Renderer* renderer, void* sdl_gl_context/;"	f	typeref:typename:bool	file:
ImGui_ImplSDL2_InitForD3D	./backends/imgui_impl_sdl2.cpp	/^bool ImGui_ImplSDL2_InitForD3D(SDL_Window* window)$/;"	f	typeref:typename:bool
ImGui_ImplSDL2_InitForMetal	./backends/imgui_impl_sdl2.cpp	/^bool ImGui_ImplSDL2_InitForMetal(SDL_Window* window)$/;"	f	typeref:typename:bool
ImGui_ImplSDL2_InitForOpenGL	./backends/imgui_impl_sdl2.cpp	/^bool ImGui_ImplSDL2_InitForOpenGL(SDL_Window* window, void* sdl_gl_context)$/;"	f	typeref:typename:bool
ImGui_ImplSDL2_InitForOther	./backends/imgui_impl_sdl2.cpp	/^bool ImGui_ImplSDL2_InitForOther(SDL_Window* window)$/;"	f	typeref:typename:bool
ImGui_ImplSDL2_InitForSDLRenderer	./backends/imgui_impl_sdl2.cpp	/^bool ImGui_ImplSDL2_InitForSDLRenderer(SDL_Window* window, SDL_Renderer* renderer)$/;"	f	typeref:typename:bool
ImGui_ImplSDL2_InitForVulkan	./backends/imgui_impl_sdl2.cpp	/^bool ImGui_ImplSDL2_InitForVulkan(SDL_Window* window)$/;"	f	typeref:typename:bool
ImGui_ImplSDL2_KeyEventToImGuiKey	./backends/imgui_impl_sdl2.cpp	/^static ImGuiKey ImGui_ImplSDL2_KeyEventToImGuiKey(SDL_Keycode keycode, SDL_Scancode scancode)$/;"	f	typeref:typename:ImGuiKey	file:
ImGui_ImplSDL2_NewFrame	./backends/imgui_impl_sdl2.cpp	/^void ImGui_ImplSDL2_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplSDL2_PlatformSetImeData	./backends/imgui_impl_sdl2.cpp	/^static void ImGui_ImplSDL2_PlatformSetImeData(ImGuiContext*, ImGuiViewport*, ImGuiPlatformImeDat/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_ProcessEvent	./backends/imgui_impl_sdl2.cpp	/^bool ImGui_ImplSDL2_ProcessEvent(const SDL_Event* event)$/;"	f	typeref:typename:bool
ImGui_ImplSDL2_SetClipboardText	./backends/imgui_impl_sdl2.cpp	/^static void ImGui_ImplSDL2_SetClipboardText(ImGuiContext*, const char* text)$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_SetGamepadMode	./backends/imgui_impl_sdl2.cpp	/^void ImGui_ImplSDL2_SetGamepadMode(ImGui_ImplSDL2_GamepadMode mode, struct _SDL_GameController**/;"	f	typeref:typename:void
ImGui_ImplSDL2_Shutdown	./backends/imgui_impl_sdl2.cpp	/^void ImGui_ImplSDL2_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplSDL2_UpdateGamepadAnalog	./backends/imgui_impl_sdl2.cpp	/^static void ImGui_ImplSDL2_UpdateGamepadAnalog(ImGui_ImplSDL2_Data* bd, ImGuiIO& io, ImGuiKey ke/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_UpdateGamepadButton	./backends/imgui_impl_sdl2.cpp	/^static void ImGui_ImplSDL2_UpdateGamepadButton(ImGui_ImplSDL2_Data* bd, ImGuiIO& io, ImGuiKey ke/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_UpdateGamepads	./backends/imgui_impl_sdl2.cpp	/^static void ImGui_ImplSDL2_UpdateGamepads()$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_UpdateKeyModifiers	./backends/imgui_impl_sdl2.cpp	/^static void ImGui_ImplSDL2_UpdateKeyModifiers(SDL_Keymod sdl_key_mods)$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_UpdateMouseCursor	./backends/imgui_impl_sdl2.cpp	/^static void ImGui_ImplSDL2_UpdateMouseCursor()$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_UpdateMouseData	./backends/imgui_impl_sdl2.cpp	/^static void ImGui_ImplSDL2_UpdateMouseData()$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL3_CloseGamepads	./backends/imgui_impl_sdl3.cpp	/^static void ImGui_ImplSDL3_CloseGamepads()$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL3_Data	./backends/imgui_impl_sdl3.cpp	/^    ImGui_ImplSDL3_Data()   { memset((void*)this, 0, sizeof(*this)); }$/;"	f	struct:ImGui_ImplSDL3_Data	file:
ImGui_ImplSDL3_Data	./backends/imgui_impl_sdl3.cpp	/^struct ImGui_ImplSDL3_Data$/;"	s	file:
ImGui_ImplSDL3_GamepadMode	./backends/imgui_impl_sdl3.h	/^enum ImGui_ImplSDL3_GamepadMode { ImGui_ImplSDL3_GamepadMode_AutoFirst, ImGui_ImplSDL3_GamepadMo/;"	g
ImGui_ImplSDL3_GamepadMode_AutoAll	./backends/imgui_impl_sdl3.h	/^enum ImGui_ImplSDL3_GamepadMode { ImGui_ImplSDL3_GamepadMode_AutoFirst, ImGui_ImplSDL3_GamepadMo/;"	e	enum:ImGui_ImplSDL3_GamepadMode
ImGui_ImplSDL3_GamepadMode_AutoFirst	./backends/imgui_impl_sdl3.h	/^enum ImGui_ImplSDL3_GamepadMode { ImGui_ImplSDL3_GamepadMode_AutoFirst, ImGui_ImplSDL3_GamepadMo/;"	e	enum:ImGui_ImplSDL3_GamepadMode
ImGui_ImplSDL3_GamepadMode_Manual	./backends/imgui_impl_sdl3.h	/^enum ImGui_ImplSDL3_GamepadMode { ImGui_ImplSDL3_GamepadMode_AutoFirst, ImGui_ImplSDL3_GamepadMo/;"	e	enum:ImGui_ImplSDL3_GamepadMode
ImGui_ImplSDL3_GetBackendData	./backends/imgui_impl_sdl3.cpp	/^static ImGui_ImplSDL3_Data* ImGui_ImplSDL3_GetBackendData()$/;"	f	typeref:typename:ImGui_ImplSDL3_Data *	file:
ImGui_ImplSDL3_GetClipboardText	./backends/imgui_impl_sdl3.cpp	/^static const char* ImGui_ImplSDL3_GetClipboardText(ImGuiContext*)$/;"	f	typeref:typename:const char *	file:
ImGui_ImplSDL3_GetViewportForWindowID	./backends/imgui_impl_sdl3.cpp	/^static ImGuiViewport* ImGui_ImplSDL3_GetViewportForWindowID(SDL_WindowID window_id)$/;"	f	typeref:typename:ImGuiViewport *	file:
ImGui_ImplSDL3_Init	./backends/imgui_impl_sdl3.cpp	/^static bool ImGui_ImplSDL3_Init(SDL_Window* window, SDL_Renderer* renderer, void* sdl_gl_context/;"	f	typeref:typename:bool	file:
ImGui_ImplSDL3_InitForD3D	./backends/imgui_impl_sdl3.cpp	/^bool ImGui_ImplSDL3_InitForD3D(SDL_Window* window)$/;"	f	typeref:typename:bool
ImGui_ImplSDL3_InitForMetal	./backends/imgui_impl_sdl3.cpp	/^bool ImGui_ImplSDL3_InitForMetal(SDL_Window* window)$/;"	f	typeref:typename:bool
ImGui_ImplSDL3_InitForOpenGL	./backends/imgui_impl_sdl3.cpp	/^bool ImGui_ImplSDL3_InitForOpenGL(SDL_Window* window, void* sdl_gl_context)$/;"	f	typeref:typename:bool
ImGui_ImplSDL3_InitForOther	./backends/imgui_impl_sdl3.cpp	/^bool ImGui_ImplSDL3_InitForOther(SDL_Window* window)$/;"	f	typeref:typename:bool
ImGui_ImplSDL3_InitForSDLRenderer	./backends/imgui_impl_sdl3.cpp	/^bool ImGui_ImplSDL3_InitForSDLRenderer(SDL_Window* window, SDL_Renderer* renderer)$/;"	f	typeref:typename:bool
ImGui_ImplSDL3_InitForVulkan	./backends/imgui_impl_sdl3.cpp	/^bool ImGui_ImplSDL3_InitForVulkan(SDL_Window* window)$/;"	f	typeref:typename:bool
ImGui_ImplSDL3_KeyEventToImGuiKey	./backends/imgui_impl_sdl3.cpp	/^static ImGuiKey ImGui_ImplSDL3_KeyEventToImGuiKey(SDL_Keycode keycode, SDL_Scancode scancode)$/;"	f	typeref:typename:ImGuiKey	file:
ImGui_ImplSDL3_NewFrame	./backends/imgui_impl_sdl3.cpp	/^void ImGui_ImplSDL3_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplSDL3_PlatformSetImeData	./backends/imgui_impl_sdl3.cpp	/^static void ImGui_ImplSDL3_PlatformSetImeData(ImGuiContext*, ImGuiViewport* viewport, ImGuiPlatf/;"	f	typeref:typename:void	file:
ImGui_ImplSDL3_ProcessEvent	./backends/imgui_impl_sdl3.cpp	/^bool ImGui_ImplSDL3_ProcessEvent(const SDL_Event* event)$/;"	f	typeref:typename:bool
ImGui_ImplSDL3_SetClipboardText	./backends/imgui_impl_sdl3.cpp	/^static void ImGui_ImplSDL3_SetClipboardText(ImGuiContext*, const char* text)$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL3_SetGamepadMode	./backends/imgui_impl_sdl3.cpp	/^void ImGui_ImplSDL3_SetGamepadMode(ImGui_ImplSDL3_GamepadMode mode, SDL_Gamepad** manual_gamepad/;"	f	typeref:typename:void
ImGui_ImplSDL3_SetupPlatformHandles	./backends/imgui_impl_sdl3.cpp	/^static void ImGui_ImplSDL3_SetupPlatformHandles(ImGuiViewport* viewport, SDL_Window* window)$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL3_Shutdown	./backends/imgui_impl_sdl3.cpp	/^void ImGui_ImplSDL3_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplSDL3_UpdateGamepadAnalog	./backends/imgui_impl_sdl3.cpp	/^static void ImGui_ImplSDL3_UpdateGamepadAnalog(ImGui_ImplSDL3_Data* bd, ImGuiIO& io, ImGuiKey ke/;"	f	typeref:typename:void	file:
ImGui_ImplSDL3_UpdateGamepadButton	./backends/imgui_impl_sdl3.cpp	/^static void ImGui_ImplSDL3_UpdateGamepadButton(ImGui_ImplSDL3_Data* bd, ImGuiIO& io, ImGuiKey ke/;"	f	typeref:typename:void	file:
ImGui_ImplSDL3_UpdateGamepads	./backends/imgui_impl_sdl3.cpp	/^static void ImGui_ImplSDL3_UpdateGamepads()$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL3_UpdateKeyModifiers	./backends/imgui_impl_sdl3.cpp	/^static void ImGui_ImplSDL3_UpdateKeyModifiers(SDL_Keymod sdl_key_mods)$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL3_UpdateMouseCursor	./backends/imgui_impl_sdl3.cpp	/^static void ImGui_ImplSDL3_UpdateMouseCursor()$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL3_UpdateMouseData	./backends/imgui_impl_sdl3.cpp	/^static void ImGui_ImplSDL3_UpdateMouseData()$/;"	f	typeref:typename:void	file:
ImGui_ImplSDLRenderer2_CreateDeviceObjects	./backends/imgui_impl_sdlrenderer2.cpp	/^bool ImGui_ImplSDLRenderer2_CreateDeviceObjects()$/;"	f	typeref:typename:bool
ImGui_ImplSDLRenderer2_CreateFontsTexture	./backends/imgui_impl_sdlrenderer2.cpp	/^bool ImGui_ImplSDLRenderer2_CreateFontsTexture()$/;"	f	typeref:typename:bool
ImGui_ImplSDLRenderer2_Data	./backends/imgui_impl_sdlrenderer2.cpp	/^    ImGui_ImplSDLRenderer2_Data()   { memset((void*)this, 0, sizeof(*this)); }$/;"	f	struct:ImGui_ImplSDLRenderer2_Data	file:
ImGui_ImplSDLRenderer2_Data	./backends/imgui_impl_sdlrenderer2.cpp	/^struct ImGui_ImplSDLRenderer2_Data$/;"	s	file:
ImGui_ImplSDLRenderer2_DestroyDeviceObjects	./backends/imgui_impl_sdlrenderer2.cpp	/^void ImGui_ImplSDLRenderer2_DestroyDeviceObjects()$/;"	f	typeref:typename:void
ImGui_ImplSDLRenderer2_DestroyFontsTexture	./backends/imgui_impl_sdlrenderer2.cpp	/^void ImGui_ImplSDLRenderer2_DestroyFontsTexture()$/;"	f	typeref:typename:void
ImGui_ImplSDLRenderer2_GetBackendData	./backends/imgui_impl_sdlrenderer2.cpp	/^static ImGui_ImplSDLRenderer2_Data* ImGui_ImplSDLRenderer2_GetBackendData()$/;"	f	typeref:typename:ImGui_ImplSDLRenderer2_Data *	file:
ImGui_ImplSDLRenderer2_Init	./backends/imgui_impl_sdlrenderer2.cpp	/^bool ImGui_ImplSDLRenderer2_Init(SDL_Renderer* renderer)$/;"	f	typeref:typename:bool
ImGui_ImplSDLRenderer2_NewFrame	./backends/imgui_impl_sdlrenderer2.cpp	/^void ImGui_ImplSDLRenderer2_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplSDLRenderer2_RenderDrawData	./backends/imgui_impl_sdlrenderer2.cpp	/^void ImGui_ImplSDLRenderer2_RenderDrawData(ImDrawData* draw_data, SDL_Renderer* renderer)$/;"	f	typeref:typename:void
ImGui_ImplSDLRenderer2_SetupRenderState	./backends/imgui_impl_sdlrenderer2.cpp	/^static void ImGui_ImplSDLRenderer2_SetupRenderState(SDL_Renderer* renderer)$/;"	f	typeref:typename:void	file:
ImGui_ImplSDLRenderer2_Shutdown	./backends/imgui_impl_sdlrenderer2.cpp	/^void ImGui_ImplSDLRenderer2_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplSDLRenderer3_CreateDeviceObjects	./backends/imgui_impl_sdlrenderer3.cpp	/^bool ImGui_ImplSDLRenderer3_CreateDeviceObjects()$/;"	f	typeref:typename:bool
ImGui_ImplSDLRenderer3_CreateFontsTexture	./backends/imgui_impl_sdlrenderer3.cpp	/^bool ImGui_ImplSDLRenderer3_CreateFontsTexture()$/;"	f	typeref:typename:bool
ImGui_ImplSDLRenderer3_Data	./backends/imgui_impl_sdlrenderer3.cpp	/^    ImGui_ImplSDLRenderer3_Data()   { memset((void*)this, 0, sizeof(*this)); }$/;"	f	struct:ImGui_ImplSDLRenderer3_Data	file:
ImGui_ImplSDLRenderer3_Data	./backends/imgui_impl_sdlrenderer3.cpp	/^struct ImGui_ImplSDLRenderer3_Data$/;"	s	file:
ImGui_ImplSDLRenderer3_DestroyDeviceObjects	./backends/imgui_impl_sdlrenderer3.cpp	/^void ImGui_ImplSDLRenderer3_DestroyDeviceObjects()$/;"	f	typeref:typename:void
ImGui_ImplSDLRenderer3_DestroyFontsTexture	./backends/imgui_impl_sdlrenderer3.cpp	/^void ImGui_ImplSDLRenderer3_DestroyFontsTexture()$/;"	f	typeref:typename:void
ImGui_ImplSDLRenderer3_GetBackendData	./backends/imgui_impl_sdlrenderer3.cpp	/^static ImGui_ImplSDLRenderer3_Data* ImGui_ImplSDLRenderer3_GetBackendData()$/;"	f	typeref:typename:ImGui_ImplSDLRenderer3_Data *	file:
ImGui_ImplSDLRenderer3_Init	./backends/imgui_impl_sdlrenderer3.cpp	/^bool ImGui_ImplSDLRenderer3_Init(SDL_Renderer* renderer)$/;"	f	typeref:typename:bool
ImGui_ImplSDLRenderer3_NewFrame	./backends/imgui_impl_sdlrenderer3.cpp	/^void ImGui_ImplSDLRenderer3_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplSDLRenderer3_RenderDrawData	./backends/imgui_impl_sdlrenderer3.cpp	/^void ImGui_ImplSDLRenderer3_RenderDrawData(ImDrawData* draw_data, SDL_Renderer* renderer)$/;"	f	typeref:typename:void
ImGui_ImplSDLRenderer3_SetupRenderState	./backends/imgui_impl_sdlrenderer3.cpp	/^static void ImGui_ImplSDLRenderer3_SetupRenderState(SDL_Renderer* renderer)$/;"	f	typeref:typename:void	file:
ImGui_ImplSDLRenderer3_Shutdown	./backends/imgui_impl_sdlrenderer3.cpp	/^void ImGui_ImplSDLRenderer3_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplVulkanH_CreateOrResizeWindow	./backends/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkanH_CreateOrResizeWindow(VkInstance instance, VkPhysicalDevice physical_devic/;"	f	typeref:typename:void
ImGui_ImplVulkanH_CreateWindowCommandBuffers	./backends/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkanH_CreateWindowCommandBuffers(VkPhysicalDevice physical_device, VkDevice dev/;"	f	typeref:typename:void
ImGui_ImplVulkanH_CreateWindowSwapChain	./backends/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkanH_CreateWindowSwapChain(VkPhysicalDevice physical_device, VkDevice device, /;"	f	typeref:typename:void
ImGui_ImplVulkanH_DestroyFrame	./backends/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkanH_DestroyFrame(VkDevice device, ImGui_ImplVulkanH_Frame* fd, const VkAlloca/;"	f	typeref:typename:void
ImGui_ImplVulkanH_DestroyFrameSemaphores	./backends/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkanH_DestroyFrameSemaphores(VkDevice device, ImGui_ImplVulkanH_FrameSemaphores/;"	f	typeref:typename:void
ImGui_ImplVulkanH_DestroyWindow	./backends/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkanH_DestroyWindow(VkInstance instance, VkDevice device, ImGui_ImplVulkanH_Win/;"	f	typeref:typename:void
ImGui_ImplVulkanH_Frame	./backends/imgui_impl_vulkan.h	/^struct ImGui_ImplVulkanH_Frame$/;"	s
ImGui_ImplVulkanH_FrameSemaphores	./backends/imgui_impl_vulkan.h	/^struct ImGui_ImplVulkanH_FrameSemaphores$/;"	s
ImGui_ImplVulkanH_GetMinImageCountFromPresentMode	./backends/imgui_impl_vulkan.cpp	/^int ImGui_ImplVulkanH_GetMinImageCountFromPresentMode(VkPresentModeKHR present_mode)$/;"	f	typeref:typename:int
ImGui_ImplVulkanH_SelectPresentMode	./backends/imgui_impl_vulkan.cpp	/^VkPresentModeKHR ImGui_ImplVulkanH_SelectPresentMode(VkPhysicalDevice physical_device, VkSurface/;"	f	typeref:typename:VkPresentModeKHR
ImGui_ImplVulkanH_SelectSurfaceFormat	./backends/imgui_impl_vulkan.cpp	/^VkSurfaceFormatKHR ImGui_ImplVulkanH_SelectSurfaceFormat(VkPhysicalDevice physical_device, VkSur/;"	f	typeref:typename:VkSurfaceFormatKHR
ImGui_ImplVulkanH_Window	./backends/imgui_impl_vulkan.h	/^    ImGui_ImplVulkanH_Window()$/;"	f	struct:ImGui_ImplVulkanH_Window
ImGui_ImplVulkanH_Window	./backends/imgui_impl_vulkan.h	/^struct ImGui_ImplVulkanH_Window$/;"	s
ImGui_ImplVulkan_AddTexture	./backends/imgui_impl_vulkan.cpp	/^VkDescriptorSet ImGui_ImplVulkan_AddTexture(VkSampler sampler, VkImageView image_view, VkImageLa/;"	f	typeref:typename:VkDescriptorSet
ImGui_ImplVulkan_CreateDeviceObjects	./backends/imgui_impl_vulkan.cpp	/^bool ImGui_ImplVulkan_CreateDeviceObjects()$/;"	f	typeref:typename:bool
ImGui_ImplVulkan_CreateFontsTexture	./backends/imgui_impl_vulkan.cpp	/^bool ImGui_ImplVulkan_CreateFontsTexture()$/;"	f	typeref:typename:bool
ImGui_ImplVulkan_CreatePipeline	./backends/imgui_impl_vulkan.cpp	/^static void ImGui_ImplVulkan_CreatePipeline(VkDevice device, const VkAllocationCallbacks* alloca/;"	f	typeref:typename:void	file:
ImGui_ImplVulkan_CreateShaderModules	./backends/imgui_impl_vulkan.cpp	/^static void ImGui_ImplVulkan_CreateShaderModules(VkDevice device, const VkAllocationCallbacks* a/;"	f	typeref:typename:void	file:
ImGui_ImplVulkan_Data	./backends/imgui_impl_vulkan.cpp	/^    ImGui_ImplVulkan_Data()$/;"	f	struct:ImGui_ImplVulkan_Data	file:
ImGui_ImplVulkan_Data	./backends/imgui_impl_vulkan.cpp	/^struct ImGui_ImplVulkan_Data$/;"	s	file:
ImGui_ImplVulkan_DestroyDeviceObjects	./backends/imgui_impl_vulkan.cpp	/^void    ImGui_ImplVulkan_DestroyDeviceObjects()$/;"	f	typeref:typename:void
ImGui_ImplVulkan_DestroyFontsTexture	./backends/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkan_DestroyFontsTexture()$/;"	f	typeref:typename:void
ImGui_ImplVulkan_DestroyFrameRenderBuffers	./backends/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkan_DestroyFrameRenderBuffers(VkDevice device, ImGui_ImplVulkan_FrameRenderBuf/;"	f	typeref:typename:void
ImGui_ImplVulkan_DestroyWindowRenderBuffers	./backends/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkan_DestroyWindowRenderBuffers(VkDevice device, ImGui_ImplVulkan_WindowRenderB/;"	f	typeref:typename:void
ImGui_ImplVulkan_FrameRenderBuffers	./backends/imgui_impl_vulkan.cpp	/^struct ImGui_ImplVulkan_FrameRenderBuffers$/;"	s	file:
ImGui_ImplVulkan_GetBackendData	./backends/imgui_impl_vulkan.cpp	/^static ImGui_ImplVulkan_Data* ImGui_ImplVulkan_GetBackendData()$/;"	f	typeref:typename:ImGui_ImplVulkan_Data *	file:
ImGui_ImplVulkan_Init	./backends/imgui_impl_vulkan.cpp	/^bool    ImGui_ImplVulkan_Init(ImGui_ImplVulkan_InitInfo* info)$/;"	f	typeref:typename:bool
ImGui_ImplVulkan_InitInfo	./backends/imgui_impl_vulkan.h	/^struct ImGui_ImplVulkan_InitInfo$/;"	s
ImGui_ImplVulkan_LoadFunctions	./backends/imgui_impl_vulkan.cpp	/^bool    ImGui_ImplVulkan_LoadFunctions(PFN_vkVoidFunction(*loader_func)(const char* function_nam/;"	f	typeref:typename:bool
ImGui_ImplVulkan_MemoryType	./backends/imgui_impl_vulkan.cpp	/^static uint32_t ImGui_ImplVulkan_MemoryType(VkMemoryPropertyFlags properties, uint32_t type_bits/;"	f	typeref:typename:uint32_t	file:
ImGui_ImplVulkan_NewFrame	./backends/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkan_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplVulkan_RemoveTexture	./backends/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkan_RemoveTexture(VkDescriptorSet descriptor_set)$/;"	f	typeref:typename:void
ImGui_ImplVulkan_RenderDrawData	./backends/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkan_RenderDrawData(ImDrawData* draw_data, VkCommandBuffer command_buffer, VkPi/;"	f	typeref:typename:void
ImGui_ImplVulkan_SetMinImageCount	./backends/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkan_SetMinImageCount(uint32_t min_image_count)$/;"	f	typeref:typename:void
ImGui_ImplVulkan_SetupRenderState	./backends/imgui_impl_vulkan.cpp	/^static void ImGui_ImplVulkan_SetupRenderState(ImDrawData* draw_data, VkPipeline pipeline, VkComm/;"	f	typeref:typename:void	file:
ImGui_ImplVulkan_Shutdown	./backends/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkan_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplVulkan_WindowRenderBuffers	./backends/imgui_impl_vulkan.cpp	/^struct ImGui_ImplVulkan_WindowRenderBuffers$/;"	s	file:
ImGui_ImplWGPU_CreateDeviceObjects	./backends/imgui_impl_wgpu.cpp	/^bool ImGui_ImplWGPU_CreateDeviceObjects()$/;"	f	typeref:typename:bool
ImGui_ImplWGPU_CreateFontsTexture	./backends/imgui_impl_wgpu.cpp	/^static void ImGui_ImplWGPU_CreateFontsTexture()$/;"	f	typeref:typename:void	file:
ImGui_ImplWGPU_CreateImageBindGroup	./backends/imgui_impl_wgpu.cpp	/^static WGPUBindGroup ImGui_ImplWGPU_CreateImageBindGroup(WGPUBindGroupLayout layout, WGPUTexture/;"	f	typeref:typename:WGPUBindGroup	file:
ImGui_ImplWGPU_CreateShaderModule	./backends/imgui_impl_wgpu.cpp	/^static WGPUProgrammableStageDescriptor ImGui_ImplWGPU_CreateShaderModule(const char* wgsl_source/;"	f	typeref:typename:WGPUProgrammableStageDescriptor	file:
ImGui_ImplWGPU_CreateUniformBuffer	./backends/imgui_impl_wgpu.cpp	/^static void ImGui_ImplWGPU_CreateUniformBuffer()$/;"	f	typeref:typename:void	file:
ImGui_ImplWGPU_Data	./backends/imgui_impl_wgpu.cpp	/^struct ImGui_ImplWGPU_Data$/;"	s	file:
ImGui_ImplWGPU_GetBackendData	./backends/imgui_impl_wgpu.cpp	/^static ImGui_ImplWGPU_Data* ImGui_ImplWGPU_GetBackendData()$/;"	f	typeref:typename:ImGui_ImplWGPU_Data *	file:
ImGui_ImplWGPU_Init	./backends/imgui_impl_wgpu.cpp	/^bool ImGui_ImplWGPU_Init(ImGui_ImplWGPU_InitInfo* init_info)$/;"	f	typeref:typename:bool
ImGui_ImplWGPU_InitInfo	./backends/imgui_impl_wgpu.h	/^    ImGui_ImplWGPU_InitInfo()$/;"	f	struct:ImGui_ImplWGPU_InitInfo
ImGui_ImplWGPU_InitInfo	./backends/imgui_impl_wgpu.h	/^struct ImGui_ImplWGPU_InitInfo$/;"	s
ImGui_ImplWGPU_InvalidateDeviceObjects	./backends/imgui_impl_wgpu.cpp	/^void ImGui_ImplWGPU_InvalidateDeviceObjects()$/;"	f	typeref:typename:void
ImGui_ImplWGPU_NewFrame	./backends/imgui_impl_wgpu.cpp	/^void ImGui_ImplWGPU_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplWGPU_RenderDrawData	./backends/imgui_impl_wgpu.cpp	/^void ImGui_ImplWGPU_RenderDrawData(ImDrawData* draw_data, WGPURenderPassEncoder pass_encoder)$/;"	f	typeref:typename:void
ImGui_ImplWGPU_SetupRenderState	./backends/imgui_impl_wgpu.cpp	/^static void ImGui_ImplWGPU_SetupRenderState(ImDrawData* draw_data, WGPURenderPassEncoder ctx, Fr/;"	f	typeref:typename:void	file:
ImGui_ImplWGPU_Shutdown	./backends/imgui_impl_wgpu.cpp	/^void ImGui_ImplWGPU_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplWin32_AddKeyEvent	./backends/imgui_impl_win32.cpp	/^static void ImGui_ImplWin32_AddKeyEvent(ImGuiKey key, bool down, int native_keycode, int native_/;"	f	typeref:typename:void	file:
ImGui_ImplWin32_Data	./backends/imgui_impl_win32.cpp	/^    ImGui_ImplWin32_Data()      { memset((void*)this, 0, sizeof(*this)); }$/;"	f	struct:ImGui_ImplWin32_Data	file:
ImGui_ImplWin32_Data	./backends/imgui_impl_win32.cpp	/^struct ImGui_ImplWin32_Data$/;"	s	file:
ImGui_ImplWin32_EnableAlphaCompositing	./backends/imgui_impl_win32.cpp	/^void ImGui_ImplWin32_EnableAlphaCompositing(void* hwnd)$/;"	f	typeref:typename:void
ImGui_ImplWin32_EnableDpiAwareness	./backends/imgui_impl_win32.cpp	/^void ImGui_ImplWin32_EnableDpiAwareness()$/;"	f	typeref:typename:void
ImGui_ImplWin32_GetBackendData	./backends/imgui_impl_win32.cpp	/^static ImGui_ImplWin32_Data* ImGui_ImplWin32_GetBackendData()$/;"	f	typeref:typename:ImGui_ImplWin32_Data *	file:
ImGui_ImplWin32_GetDpiScaleForHwnd	./backends/imgui_impl_win32.cpp	/^float ImGui_ImplWin32_GetDpiScaleForHwnd(void* hwnd)$/;"	f	typeref:typename:float
ImGui_ImplWin32_GetDpiScaleForMonitor	./backends/imgui_impl_win32.cpp	/^float ImGui_ImplWin32_GetDpiScaleForMonitor(void* monitor)$/;"	f	typeref:typename:float
ImGui_ImplWin32_Init	./backends/imgui_impl_win32.cpp	/^IMGUI_IMPL_API bool     ImGui_ImplWin32_Init(void* hwnd)$/;"	f	typeref:typename:IMGUI_IMPL_API bool
ImGui_ImplWin32_InitEx	./backends/imgui_impl_win32.cpp	/^static bool ImGui_ImplWin32_InitEx(void* hwnd, bool platform_has_own_dc)$/;"	f	typeref:typename:bool	file:
ImGui_ImplWin32_InitForOpenGL	./backends/imgui_impl_win32.cpp	/^IMGUI_IMPL_API bool     ImGui_ImplWin32_InitForOpenGL(void* hwnd)$/;"	f	typeref:typename:IMGUI_IMPL_API bool
ImGui_ImplWin32_NewFrame	./backends/imgui_impl_win32.cpp	/^void    ImGui_ImplWin32_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplWin32_ProcessKeyEventsWorkarounds	./backends/imgui_impl_win32.cpp	/^static void ImGui_ImplWin32_ProcessKeyEventsWorkarounds()$/;"	f	typeref:typename:void	file:
ImGui_ImplWin32_Shutdown	./backends/imgui_impl_win32.cpp	/^void    ImGui_ImplWin32_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplWin32_UpdateGamepads	./backends/imgui_impl_win32.cpp	/^static void ImGui_ImplWin32_UpdateGamepads()$/;"	f	typeref:typename:void	file:
ImGui_ImplWin32_UpdateKeyModifiers	./backends/imgui_impl_win32.cpp	/^static void ImGui_ImplWin32_UpdateKeyModifiers()$/;"	f	typeref:typename:void	file:
ImGui_ImplWin32_UpdateKeyboardCodePage	./backends/imgui_impl_win32.cpp	/^static void ImGui_ImplWin32_UpdateKeyboardCodePage()$/;"	f	typeref:typename:void	file:
ImGui_ImplWin32_UpdateMouseCursor	./backends/imgui_impl_win32.cpp	/^static bool ImGui_ImplWin32_UpdateMouseCursor()$/;"	f	typeref:typename:bool	file:
ImGui_ImplWin32_UpdateMouseData	./backends/imgui_impl_win32.cpp	/^static void ImGui_ImplWin32_UpdateMouseData()$/;"	f	typeref:typename:void	file:
ImGui_ImplWin32_VirtualKeyToImGuiKey	./backends/imgui_impl_win32.cpp	/^static ImGuiKey ImGui_ImplWin32_VirtualKeyToImGuiKey(WPARAM wParam)$/;"	f	typeref:typename:ImGuiKey	file:
ImGui_ImplWin32_WndProcHandler	./backends/imgui_impl_win32.cpp	/^IMGUI_IMPL_API LRESULT ImGui_ImplWin32_WndProcHandler(HWND hwnd, UINT msg, WPARAM wParam, LPARAM/;"	f	typeref:typename:IMGUI_IMPL_API LRESULT
ImHashData	./imgui.cpp	/^ImGuiID ImHashData(const void* data_p, size_t data_size, ImGuiID seed)$/;"	f	typeref:typename:ImGuiID
ImHashStr	./imgui.cpp	/^ImGuiID ImHashStr(const char* data_p, size_t data_size, ImGuiID seed)$/;"	f	typeref:typename:ImGuiID
ImInvLength	./imgui_internal.h	/^static inline float  ImInvLength(const ImVec2& lhs, float fail_value)           { float d = (lhs/;"	f	typeref:typename:float
ImIsFloatAboveGuaranteedIntegerPrecision	./imgui_internal.h	/^static inline bool   ImIsFloatAboveGuaranteedIntegerPrecision(float f)          { return f <= -1/;"	f	typeref:typename:bool
ImIsPowerOfTwo	./imgui_internal.h	/^static inline bool      ImIsPowerOfTwo(ImU64 v)         { return v != 0 && (v & (v - 1)) == 0; }$/;"	f	typeref:typename:bool
ImIsPowerOfTwo	./imgui_internal.h	/^static inline bool      ImIsPowerOfTwo(int v)           { return v != 0 && (v & (v - 1)) == 0; }$/;"	f	typeref:typename:bool
ImLengthSqr	./imgui_internal.h	/^static inline float  ImLengthSqr(const ImVec2& lhs)                             { return (lhs.x /;"	f	typeref:typename:float
ImLengthSqr	./imgui_internal.h	/^static inline float  ImLengthSqr(const ImVec4& lhs)                             { return (lhs.x /;"	f	typeref:typename:float
ImLerp	./imgui_internal.h	/^static inline ImVec2 ImLerp(const ImVec2& a, const ImVec2& b, const ImVec2& t)  { return ImVec2(/;"	f	typeref:typename:ImVec2
ImLerp	./imgui_internal.h	/^static inline ImVec2 ImLerp(const ImVec2& a, const ImVec2& b, float t)          { return ImVec2(/;"	f	typeref:typename:ImVec2
ImLerp	./imgui_internal.h	/^static inline ImVec4 ImLerp(const ImVec4& a, const ImVec4& b, float t)          { return ImVec4(/;"	f	typeref:typename:ImVec4
ImLerp	./imgui_internal.h	/^template<typename T> static inline T ImLerp(T a, T b, float t)                  { return (T)(a +/;"	f	typeref:typename:T
ImLineClosestPoint	./imgui.cpp	/^ImVec2 ImLineClosestPoint(const ImVec2& a, const ImVec2& b, const ImVec2& p)$/;"	f	typeref:typename:ImVec2
ImLinearRemapClamp	./imgui_internal.h	/^static inline float  ImLinearRemapClamp(float s0, float s1, float d0, float d1, float x) { retur/;"	f	typeref:typename:float
ImLinearSweep	./imgui_internal.h	/^static inline float  ImLinearSweep(float current, float target, float speed)    { if (current < /;"	f	typeref:typename:float
ImLog	./imgui_internal.h	/^static inline double ImLog(double x)            { return log(x); }$/;"	f	typeref:typename:double
ImLog	./imgui_internal.h	/^static inline float  ImLog(float x)             { return logf(x); }             \/\/ DragBehavio/;"	f	typeref:typename:float
ImLowerBound	./imgui.cpp	/^ImGuiStoragePair* ImLowerBound(ImGuiStoragePair* in_begin, ImGuiStoragePair* in_end, ImGuiID key/;"	f	typeref:typename:ImGuiStoragePair *
ImMax	./imgui_internal.h	/^static inline ImVec2 ImMax(const ImVec2& lhs, const ImVec2& rhs)                { return ImVec2(/;"	f	typeref:typename:ImVec2
ImMax	./imgui_internal.h	/^template<typename T> static inline T ImMax(T lhs, T rhs)                        { return lhs >= /;"	f	typeref:typename:T
ImMin	./imgui_internal.h	/^static inline ImVec2 ImMin(const ImVec2& lhs, const ImVec2& rhs)                { return ImVec2(/;"	f	typeref:typename:ImVec2
ImMin	./imgui_internal.h	/^template<typename T> static inline T ImMin(T lhs, T rhs)                        { return lhs < r/;"	f	typeref:typename:T
ImModPositive	./imgui_internal.h	/^static inline int    ImModPositive(int a, int b)                                { return (a + b)/;"	f	typeref:typename:int
ImMul	./imgui_internal.h	/^static inline ImVec2 ImMul(const ImVec2& lhs, const ImVec2& rhs)                { return ImVec2(/;"	f	typeref:typename:ImVec2
ImNewWrapper	./imgui.h	/^struct ImNewWrapper {};$/;"	s
ImParseFormatFindEnd	./imgui_widgets.cpp	/^const char* ImParseFormatFindEnd(const char* fmt)$/;"	f	typeref:typename:const char *
ImParseFormatFindStart	./imgui_widgets.cpp	/^const char* ImParseFormatFindStart(const char* fmt)$/;"	f	typeref:typename:const char *
ImParseFormatPrecision	./imgui_widgets.cpp	/^int ImParseFormatPrecision(const char* fmt, int default_precision)$/;"	f	typeref:typename:int
ImParseFormatSanitizeForPrinting	./imgui_widgets.cpp	/^void ImParseFormatSanitizeForPrinting(const char* fmt_in, char* fmt_out, size_t fmt_out_size)$/;"	f	typeref:typename:void
ImParseFormatSanitizeForScanning	./imgui_widgets.cpp	/^const char* ImParseFormatSanitizeForScanning(const char* fmt_in, char* fmt_out, size_t fmt_out_s/;"	f	typeref:typename:const char *
ImParseFormatTrimDecorations	./imgui_widgets.cpp	/^const char* ImParseFormatTrimDecorations(const char* fmt, char* buf, size_t buf_size)$/;"	f	typeref:typename:const char *
ImPool	./imgui_internal.h	/^    ImPool()    { FreeIdx = AliveCount = 0; }$/;"	f	struct:ImPool
ImPool	./imgui_internal.h	/^struct ImPool$/;"	s
ImPoolIdx	./imgui_internal.h	/^typedef int ImPoolIdx;$/;"	t	typeref:typename:int
ImPow	./imgui_internal.h	/^static inline double ImPow(double x, double y)  { return pow(x, y); }$/;"	f	typeref:typename:double
ImPow	./imgui_internal.h	/^static inline float  ImPow(float x, float y)    { return powf(x, y); }          \/\/ DragBehavio/;"	f	typeref:typename:IM_MSVC_RUNTIME_CHECKS_OFF float
ImQsort	./imgui_internal.h	/^static inline void      ImQsort(void* base, size_t count, size_t size_of_element, int(IMGUI_CDEC/;"	f	typeref:typename:void
ImRect	./imgui_internal.h	/^    constexpr ImRect()                                        : Min(0.0f, 0.0f), Max(0.0f, 0.0f)/;"	f	struct:ImRect
ImRect	./imgui_internal.h	/^    constexpr ImRect(const ImVec2& min, const ImVec2& max)    : Min(min), Max(max)              /;"	f	struct:ImRect
ImRect	./imgui_internal.h	/^    constexpr ImRect(const ImVec4& v)                         : Min(v.x, v.y), Max(v.z, v.w)    /;"	f	struct:ImRect
ImRect	./imgui_internal.h	/^    constexpr ImRect(float x1, float y1, float x2, float y2)  : Min(x1, y1), Max(x2, y2)        /;"	f	struct:ImRect
ImRect	./imgui_internal.h	/^struct IMGUI_API ImRect$/;"	s
ImRotate	./imgui_internal.h	/^static inline ImVec2 ImRotate(const ImVec2& v, float cos_a, float sin_a)        { return ImVec2(/;"	f	typeref:typename:ImVec2
ImRsqrt	./imgui_internal.h	/^static inline double ImRsqrt(double x)          { return 1.0 \/ sqrt(x); }$/;"	f	typeref:typename:double
ImRsqrt	./imgui_internal.h	/^static inline float  ImRsqrt(float x)           { return 1.0f \/ sqrtf(x); }$/;"	f	typeref:typename:float
ImRsqrt	./imgui_internal.h	/^static inline float  ImRsqrt(float x)           { return _mm_cvtss_f32(_mm_rsqrt_ss(_mm_set_ss(x/;"	f	typeref:typename:float
ImS16	./imgui.h	/^typedef signed short        ImS16;  \/\/ 16-bit signed integer$/;"	t	typeref:typename:signed short
ImS32	./imgui.h	/^typedef signed int          ImS32;  \/\/ 32-bit signed integer == int$/;"	t	typeref:typename:signed int
ImS64	./imgui.h	/^typedef signed   long long  ImS64;  \/\/ 64-bit signed integer$/;"	t	typeref:typename:signed long long
ImS8	./imgui.h	/^typedef signed char         ImS8;   \/\/ 8-bit signed integer$/;"	t	typeref:typename:signed char
ImSaturate	./imgui_internal.h	/^static inline float  ImSaturate(float f)                                        { return (f < 0./;"	f	typeref:typename:float
ImSign	./imgui_internal.h	/^static inline double ImSign(double x)           { return (x < 0.0) ? -1.0 : (x > 0.0) ? 1.0 : 0./;"	f	typeref:typename:double
ImSign	./imgui_internal.h	/^static inline float  ImSign(float x)            { return (x < 0.0f) ? -1.0f : (x > 0.0f) ? 1.0f /;"	f	typeref:typename:float
ImSin	./imgui_internal.h	/^#define ImSin(/;"	d
ImSpan	./imgui_internal.h	/^    inline ImSpan()                                 { Data = DataEnd = NULL; }$/;"	f	struct:ImSpan
ImSpan	./imgui_internal.h	/^    inline ImSpan(T* data, T* data_end)             { Data = data; DataEnd = data_end; }$/;"	f	struct:ImSpan
ImSpan	./imgui_internal.h	/^    inline ImSpan(T* data, int size)                { Data = data; DataEnd = data + size; }$/;"	f	struct:ImSpan
ImSpan	./imgui_internal.h	/^struct ImSpan$/;"	s
ImSpanAllocator	./imgui_internal.h	/^    ImSpanAllocator()                               { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImSpanAllocator
ImSpanAllocator	./imgui_internal.h	/^struct ImSpanAllocator$/;"	s
ImSqrt	./imgui_internal.h	/^#define ImSqrt(/;"	d
ImStb	./imgui_internal.h	/^namespace ImStb$/;"	n
ImStb	./imgui_widgets.cpp	/^namespace ImStb$/;"	n	file:
ImStrSkipBlank	./imgui.cpp	/^const char* ImStrSkipBlank(const char* str)$/;"	f	typeref:typename:const char *
ImStrTrimBlanks	./imgui.cpp	/^void ImStrTrimBlanks(char* buf)$/;"	f	typeref:typename:void
ImStrbolW	./imgui.cpp	/^const ImWchar* ImStrbolW(const ImWchar* buf_mid_line, const ImWchar* buf_begin) \/\/ find beginn/;"	f	typeref:typename:const ImWchar *
ImStrchrRange	./imgui.cpp	/^const char* ImStrchrRange(const char* str, const char* str_end, char c)$/;"	f	typeref:typename:const char *
ImStrdup	./imgui.cpp	/^char* ImStrdup(const char* str)$/;"	f	typeref:typename:char *
ImStrdupcpy	./imgui.cpp	/^char* ImStrdupcpy(char* dst, size_t* p_dst_size, const char* src)$/;"	f	typeref:typename:char *
ImStreolRange	./imgui.cpp	/^const char* ImStreolRange(const char* str, const char* str_end)$/;"	f	typeref:typename:const char *
ImStricmp	./imgui.cpp	/^int ImStricmp(const char* str1, const char* str2)$/;"	f	typeref:typename:int
ImStrimatchlen	./imgui_widgets.cpp	/^static int ImStrimatchlen(const char* s1, const char* s1_end, const char* s2)$/;"	f	typeref:typename:int	file:
ImStristr	./imgui.cpp	/^const char* ImStristr(const char* haystack, const char* haystack_end, const char* needle, const /;"	f	typeref:typename:const char *
ImStrlenW	./imgui.cpp	/^int ImStrlenW(const ImWchar* str)$/;"	f	typeref:typename:int
ImStrncpy	./imgui.cpp	/^void ImStrncpy(char* dst, const char* src, size_t count)$/;"	f	typeref:typename:void
ImStrnicmp	./imgui.cpp	/^int ImStrnicmp(const char* str1, const char* str2, size_t count)$/;"	f	typeref:typename:int
ImSubClampOverflow	./imgui_internal.h	/^template<typename T> static inline T ImSubClampOverflow(T a, T b, T mn, T mx)   { if (b > 0 && (/;"	f	typeref:typename:T
ImSwap	./imgui_internal.h	/^template<typename T> static inline void ImSwap(T& a, T& b)                      { T tmp = a; a =/;"	f	typeref:typename:void
ImTextCharFromUtf8	./imgui.cpp	/^int ImTextCharFromUtf8(unsigned int* out_char, const char* in_text, const char* in_text_end)$/;"	f	typeref:typename:IM_MSVC_RUNTIME_CHECKS_OFF int
ImTextCharToUtf8	./imgui.cpp	/^const char* ImTextCharToUtf8(char out_buf[5], unsigned int c)$/;"	f	typeref:typename:const char *
ImTextCharToUtf8_inline	./imgui.cpp	/^static inline int ImTextCharToUtf8_inline(char* buf, int buf_size, unsigned int c)$/;"	f	typeref:typename:int	file:
ImTextCountCharsFromUtf8	./imgui.cpp	/^int ImTextCountCharsFromUtf8(const char* in_text, const char* in_text_end)$/;"	f	typeref:typename:int
ImTextCountLines	./imgui.cpp	/^int ImTextCountLines(const char* in_text, const char* in_text_end)$/;"	f	typeref:typename:int
ImTextCountUtf8BytesFromChar	./imgui.cpp	/^int ImTextCountUtf8BytesFromChar(const char* in_text, const char* in_text_end)$/;"	f	typeref:typename:int
ImTextCountUtf8BytesFromChar	./imgui.cpp	/^static inline int ImTextCountUtf8BytesFromChar(unsigned int c)$/;"	f	typeref:typename:int	file:
ImTextCountUtf8BytesFromStr	./imgui.cpp	/^int ImTextCountUtf8BytesFromStr(const ImWchar* in_text, const ImWchar* in_text_end)$/;"	f	typeref:typename:int
ImTextFindPreviousUtf8Codepoint	./imgui.cpp	/^const char* ImTextFindPreviousUtf8Codepoint(const char* in_text_start, const char* in_text_curr)$/;"	f	typeref:typename:const char *
ImTextStrFromUtf8	./imgui.cpp	/^int ImTextStrFromUtf8(ImWchar* buf, int buf_size, const char* in_text, const char* in_text_end, /;"	f	typeref:typename:int
ImTextStrToUtf8	./imgui.cpp	/^int ImTextStrToUtf8(char* out_buf, int out_buf_size, const ImWchar* in_text, const ImWchar* in_t/;"	f	typeref:typename:int
ImTextureID	./imgui.h	/^typedef void* ImTextureID;          \/\/ Default: store a pointer or an integer fitting in a poi/;"	t	typeref:typename:void *
ImToUpper	./imgui_internal.h	/^static inline char      ImToUpper(char c)               { return (c >= 'a' && c <= 'z') ? c &= ~/;"	f	typeref:typename:IM_MSVC_RUNTIME_CHECKS_OFF char
ImTriangleArea	./imgui_internal.h	/^inline float         ImTriangleArea(const ImVec2& a, const ImVec2& b, const ImVec2& c)          /;"	f	typeref:typename:float
ImTriangleBarycentricCoords	./imgui.cpp	/^void ImTriangleBarycentricCoords(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2/;"	f	typeref:typename:void
ImTriangleClosestPoint	./imgui.cpp	/^ImVec2 ImTriangleClosestPoint(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& p/;"	f	typeref:typename:ImVec2
ImTriangleContainsPoint	./imgui.cpp	/^bool ImTriangleContainsPoint(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& p)$/;"	f	typeref:typename:bool
ImTriangleIsClockwise	./imgui_internal.h	/^inline bool          ImTriangleIsClockwise(const ImVec2& a, const ImVec2& b, const ImVec2& c)   /;"	f	typeref:typename:bool
ImTriangulator	./imgui_draw.cpp	/^struct ImTriangulator$/;"	s	file:
ImTriangulatorNode	./imgui_draw.cpp	/^struct ImTriangulatorNode$/;"	s	file:
ImTriangulatorNodeSpan	./imgui_draw.cpp	/^struct ImTriangulatorNodeSpan$/;"	s	file:
ImTriangulatorNodeType	./imgui_draw.cpp	/^enum ImTriangulatorNodeType$/;"	g	file:
ImTriangulatorNodeType_Convex	./imgui_draw.cpp	/^    ImTriangulatorNodeType_Convex,$/;"	e	enum:ImTriangulatorNodeType	file:
ImTriangulatorNodeType_Ear	./imgui_draw.cpp	/^    ImTriangulatorNodeType_Ear,$/;"	e	enum:ImTriangulatorNodeType	file:
ImTriangulatorNodeType_Reflex	./imgui_draw.cpp	/^    ImTriangulatorNodeType_Reflex$/;"	e	enum:ImTriangulatorNodeType	file:
ImTrunc	./imgui_internal.h	/^static inline ImVec2 ImTrunc(const ImVec2& v)                                   { return ImVec2(/;"	f	typeref:typename:ImVec2
ImTrunc	./imgui_internal.h	/^static inline float  ImTrunc(float f)                                           { return (float)/;"	f	typeref:typename:float
ImU16	./imgui.h	/^typedef unsigned short      ImU16;  \/\/ 16-bit unsigned integer$/;"	t	typeref:typename:unsigned short
ImU32	./imgui.h	/^typedef unsigned int        ImU32;  \/\/ 32-bit unsigned integer (often used to store packed col/;"	t	typeref:typename:unsigned int
ImU64	./imgui.h	/^typedef unsigned long long  ImU64;  \/\/ 64-bit unsigned integer$/;"	t	typeref:typename:unsigned long long
ImU8	./imgui.h	/^typedef unsigned char       ImU8;   \/\/ 8-bit unsigned integer$/;"	t	typeref:typename:unsigned char
ImUpperPowerOfTwo	./imgui_internal.h	/^static inline int       ImUpperPowerOfTwo(int v)        { v--; v |= v >> 1; v |= v >> 2; v |= v /;"	f	typeref:typename:int
ImVec1	./imgui_internal.h	/^    constexpr ImVec1()         : x(0.0f) { }$/;"	f	struct:ImVec1
ImVec1	./imgui_internal.h	/^    constexpr ImVec1(float _x) : x(_x) { }$/;"	f	struct:ImVec1
ImVec1	./imgui_internal.h	/^struct ImVec1$/;"	s
ImVec2	./imgui.h	/^    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }$/;"	f	struct:ImVec2
ImVec2	./imgui.h	/^    constexpr ImVec2(float _x, float _y)    : x(_x), y(_y) { }$/;"	f	struct:ImVec2
ImVec2	./imgui.h	/^struct ImVec2$/;"	s
ImVec2ih	./imgui_internal.h	/^    constexpr ImVec2ih()                           : x(0), y(0) {}$/;"	f	struct:ImVec2ih
ImVec2ih	./imgui_internal.h	/^    constexpr ImVec2ih(short _x, short _y)         : x(_x), y(_y) {}$/;"	f	struct:ImVec2ih
ImVec2ih	./imgui_internal.h	/^    constexpr explicit ImVec2ih(const ImVec2& rhs) : x((short)rhs.x), y((short)rhs.y) {}$/;"	f	struct:ImVec2ih
ImVec2ih	./imgui_internal.h	/^struct ImVec2ih$/;"	s
ImVec4	./imgui.h	/^    constexpr ImVec4()                                        : x(0.0f), y(0.0f), z(0.0f), w(0.0/;"	f	struct:ImVec4
ImVec4	./imgui.h	/^    constexpr ImVec4(float _x, float _y, float _z, float _w)  : x(_x), y(_y), z(_z), w(_w) { }$/;"	f	struct:ImVec4
ImVec4	./imgui.h	/^struct ImVec4$/;"	s
ImVector	./imgui.h	/^    inline ImVector()                                       { Size = Capacity = 0; Data = NULL; /;"	f	struct:ImVector
ImVector	./imgui.h	/^    inline ImVector(const ImVector<T>& src)                 { Size = Capacity = 0; Data = NULL; /;"	f	struct:ImVector
ImVector	./imgui.h	/^struct ImVector$/;"	s
ImWchar	./imgui.h	/^typedef ImWchar16 ImWchar;$/;"	t	typeref:typename:ImWchar16
ImWchar	./imgui.h	/^typedef ImWchar32 ImWchar;$/;"	t	typeref:typename:ImWchar32
ImWchar16	./imgui.h	/^typedef unsigned short ImWchar16;   \/\/ A single decoded U16 character\/code point. We encode t/;"	t	typeref:typename:unsigned short
ImWchar32	./imgui.h	/^typedef unsigned int ImWchar32;     \/\/ A single decoded U32 character\/code point. We encode t/;"	t	typeref:typename:unsigned int
Image	./imgui_widgets.cpp	/^void ImGui::Image(ImTextureID user_texture_id, const ImVec2& image_size, const ImVec2& uv0, cons/;"	f	class:ImGui	typeref:typename:void
ImageAcquiredSemaphore	./backends/imgui_impl_vulkan.h	/^    VkSemaphore         ImageAcquiredSemaphore;$/;"	m	struct:ImGui_ImplVulkanH_FrameSemaphores	typeref:typename:VkSemaphore
ImageBindGroup	./backends/imgui_impl_wgpu.cpp	/^    WGPUBindGroup       ImageBindGroup = nullptr;       \/\/ Default font-resource of Dear ImGui$/;"	m	struct:RenderResources	typeref:typename:WGPUBindGroup	file:
ImageBindGroupLayout	./backends/imgui_impl_wgpu.cpp	/^    WGPUBindGroupLayout ImageBindGroupLayout = nullptr; \/\/ Cache layout used for the image bin/;"	m	struct:RenderResources	typeref:typename:WGPUBindGroupLayout	file:
ImageBindGroups	./backends/imgui_impl_wgpu.cpp	/^    ImGuiStorage        ImageBindGroups;                \/\/ Resources bind-group to bind the fo/;"	m	struct:RenderResources	typeref:typename:ImGuiStorage	file:
ImageButton	./imgui_widgets.cpp	/^bool ImGui::ImageButton(const char* str_id, ImTextureID user_texture_id, const ImVec2& image_siz/;"	f	class:ImGui	typeref:typename:bool
ImageButtonEx	./imgui_widgets.cpp	/^bool ImGui::ImageButtonEx(ImGuiID id, ImTextureID texture_id, const ImVec2& image_size, const Im/;"	f	class:ImGui	typeref:typename:bool
ImageCount	./backends/imgui_impl_vulkan.h	/^    uint32_t                        ImageCount;                   \/\/ >= MinImageCount$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:uint32_t
ImageCount	./backends/imgui_impl_vulkan.h	/^    uint32_t            ImageCount;             \/\/ Number of simultaneous in-flight frames (re/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:uint32_t
ImeWindow	./backends/imgui_impl_sdl3.cpp	/^    SDL_Window*             ImeWindow;$/;"	m	struct:ImGui_ImplSDL3_Data	typeref:typename:SDL_Window *	file:
InFlags	./imgui_internal.h	/^    ImGuiItemFlags          InFlags;            \/\/ See ImGuiItemFlags_$/;"	m	struct:ImGuiLastItemData	typeref:typename:ImGuiItemFlags
InFlags	./imgui_internal.h	/^    ImGuiItemFlags          InFlags;    \/\/ Used for nav landing$/;"	m	struct:ImGuiTreeNodeStackData	typeref:typename:ImGuiItemFlags
InFlags	./imgui_internal.h	/^    ImGuiItemFlags      InFlags;        \/\/ ????,Move    \/\/ Best candidate item flags$/;"	m	struct:ImGuiNavItemData	typeref:typename:ImGuiItemFlags
IncludeItemByIndex	./imgui.h	/^    inline void     IncludeItemByIndex(int item_index)                  { IncludeItemsByIndex(it/;"	f	struct:ImGuiListClipper	typeref:typename:void
IncludeItemsByIndex	./imgui.cpp	/^void ImGuiListClipper::IncludeItemsByIndex(int item_begin, int item_end)$/;"	f	class:ImGuiListClipper	typeref:typename:void
IncludeRangeByIndices	./imgui.h	/^    inline void IncludeRangeByIndices(int item_begin, int item_end)      { IncludeItemsByIndex(i/;"	f	struct:ImGuiListClipper	typeref:typename:void
Indent	./imgui.cpp	/^void ImGui::Indent(float indent_w)$/;"	f	class:ImGui	typeref:typename:void
Indent	./imgui_internal.h	/^    ImVec1                  Indent;                 \/\/ Indentation \/ start position from left/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec1
IndentSpacing	./imgui.h	/^    float       IndentSpacing;              \/\/ Horizontal indentation when e.g. entering a tre/;"	m	struct:ImGuiStyle	typeref:typename:float
Index	./backends/imgui_impl_vulkan.cpp	/^    uint32_t            Index;$/;"	m	struct:ImGui_ImplVulkan_WindowRenderBuffers	typeref:typename:uint32_t	file:
Index	./docs/CONTRIBUTING.md	/^## Index$/;"	s	chapter:Contributing Guidelines
Index	./docs/FAQ.md	/^## Index$/;"	s	chapter:FAQ (Frequently Asked Questions)
Index	./docs/FONTS.md	/^## Index$/;"	s
Index	./imgui_draw.cpp	/^    int                     Index;$/;"	m	struct:ImTriangulatorNode	typeref:typename:int	file:
Index	./imgui_internal.h	/^    ImGuiKeyRoutingIndex            Index[ImGuiKey_NamedKey_COUNT]; \/\/ Index of first entry in/;"	m	struct:ImGuiKeyRoutingTable	typeref:typename:ImGuiKeyRoutingIndex[]
Index	./imgui_internal.h	/^    ImGuiTableColumnIdx         Index;      \/\/ Column index$/;"	m	struct:ImGuiTableHeaderData	typeref:typename:ImGuiTableColumnIdx
Index	./imgui_internal.h	/^    ImGuiTableColumnIdx     Index;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImGuiTableColumnIdx
Index	./imgui_internal.h	/^    int         Index;          \/\/ Usually index in a main pool.$/;"	m	struct:ImGuiPtrOrIndex	typeref:typename:int
Index	./imgui_internal.h	/^    int         Index;$/;"	m	struct:ImGuiShrinkWidthItem	typeref:typename:int
IndexAdvanceX	./imgui.h	/^    ImVector<float>             IndexAdvanceX;      \/\/ 12-16 \/\/ out \/\/            \/\/ Spa/;"	m	struct:ImFont	typeref:typename:ImVector<float>
IndexBuffer	./backends/imgui_impl_dx10.cpp	/^        ID3D10Buffer*               IndexBuffer, *VertexBuffer, *VSConstantBuffer;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:ID3D10Buffer *	file:
IndexBuffer	./backends/imgui_impl_dx11.cpp	/^        ID3D11Buffer*               IndexBuffer, *VertexBuffer, *VSConstantBuffer;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11Buffer *	file:
IndexBuffer	./backends/imgui_impl_dx12.cpp	/^    ID3D12Resource*     IndexBuffer;$/;"	m	struct:ImGui_ImplDX12_RenderBuffers	typeref:typename:ID3D12Resource *	file:
IndexBuffer	./backends/imgui_impl_vulkan.cpp	/^    VkBuffer            IndexBuffer;$/;"	m	struct:ImGui_ImplVulkan_FrameRenderBuffers	typeref:typename:VkBuffer	file:
IndexBuffer	./backends/imgui_impl_wgpu.cpp	/^    WGPUBuffer  IndexBuffer;$/;"	m	struct:FrameResources	typeref:typename:WGPUBuffer	file:
IndexBufferFormat	./backends/imgui_impl_dx10.cpp	/^        DXGI_FORMAT                 IndexBufferFormat;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:DXGI_FORMAT	file:
IndexBufferFormat	./backends/imgui_impl_dx11.cpp	/^        DXGI_FORMAT                 IndexBufferFormat;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:DXGI_FORMAT	file:
IndexBufferHost	./backends/imgui_impl_wgpu.cpp	/^    ImDrawIdx*  IndexBufferHost;$/;"	m	struct:FrameResources	typeref:typename:ImDrawIdx *	file:
IndexBufferMemory	./backends/imgui_impl_vulkan.cpp	/^    VkDeviceMemory      IndexBufferMemory;$/;"	m	struct:ImGui_ImplVulkan_FrameRenderBuffers	typeref:typename:VkDeviceMemory	file:
IndexBufferOffset	./backends/imgui_impl_dx10.cpp	/^        UINT                        IndexBufferOffset, VertexBufferStride, VertexBufferOffset;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:UINT	file:
IndexBufferOffset	./backends/imgui_impl_dx11.cpp	/^        UINT                        IndexBufferOffset, VertexBufferStride, VertexBufferOffset;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:UINT	file:
IndexBufferSize	./backends/imgui_impl_dx10.cpp	/^    int                         IndexBufferSize;$/;"	m	struct:ImGui_ImplDX10_Data	typeref:typename:int	file:
IndexBufferSize	./backends/imgui_impl_dx11.cpp	/^    int                         IndexBufferSize;$/;"	m	struct:ImGui_ImplDX11_Data	typeref:typename:int	file:
IndexBufferSize	./backends/imgui_impl_dx12.cpp	/^    int                 IndexBufferSize;$/;"	m	struct:ImGui_ImplDX12_RenderBuffers	typeref:typename:int	file:
IndexBufferSize	./backends/imgui_impl_dx9.cpp	/^    int                         IndexBufferSize;$/;"	m	struct:ImGui_ImplDX9_Data	typeref:typename:int	file:
IndexBufferSize	./backends/imgui_impl_opengl3.cpp	/^    GLsizeiptr      IndexBufferSize;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLsizeiptr	file:
IndexBufferSize	./backends/imgui_impl_vulkan.cpp	/^    VkDeviceSize        IndexBufferSize;$/;"	m	struct:ImGui_ImplVulkan_FrameRenderBuffers	typeref:typename:VkDeviceSize	file:
IndexBufferSize	./backends/imgui_impl_wgpu.cpp	/^    int         IndexBufferSize;$/;"	m	struct:FrameResources	typeref:typename:int	file:
IndexDuringLayout	./imgui_internal.h	/^    ImS16               IndexDuringLayout;      \/\/ Index only used during TabBarLayout(). Tabs/;"	m	struct:ImGuiTabItem	typeref:typename:ImS16
IndexInParent	./imgui_demo.cpp	/^    unsigned short              IndexInParent = 0;  \/\/ Maintaining this allows us to implement/;"	m	struct:ExampleTreeNode	typeref:typename:unsigned short	file:
IndexLookup	./imgui.h	/^    ImVector<ImWchar>           IndexLookup;        \/\/ 12-16 \/\/ out \/\/            \/\/ Spa/;"	m	struct:ImFont	typeref:typename:ImVector<ImWchar>
IndexWithinEnabledSet	./imgui_internal.h	/^    ImGuiTableColumnIdx     IndexWithinEnabledSet;          \/\/ Index within enabled\/visible s/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableColumnIdx
Info	./misc/freetype/imgui_freetype.cpp	/^        FontInfo        Info;               \/\/ Font descriptor of the current font.$/;"	m	struct:__anon21d590df0111::FreeTypeFont	typeref:typename:FontInfo	file:
Info	./misc/freetype/imgui_freetype.cpp	/^    GlyphInfo           Info;$/;"	m	struct:ImFontBuildSrcGlyphFT	typeref:typename:GlyphInfo	file:
IniFilename	./imgui.h	/^    const char* IniFilename;                    \/\/ = "imgui.ini"    \/\/ Path to .ini file (im/;"	m	struct:ImGuiIO	typeref:typename:const char *
IniSavingRate	./imgui.h	/^    float       IniSavingRate;                  \/\/ = 5.0f           \/\/ Minimum time between /;"	m	struct:ImGuiIO	typeref:typename:float
Init	./examples/example_android_opengl3/main.cpp	/^void Init(struct android_app* app)$/;"	f	typeref:typename:void
Init	./imgui_draw.cpp	/^void ImTriangulator::Init(const ImVec2* points, int points_count, void* scratch_buffer)$/;"	f	class:ImTriangulator	typeref:typename:void
InitFont	./misc/freetype/imgui_freetype.cpp	/^    bool FreeTypeFont::InitFont(FT_Library ft_library, const ImFontConfig& cfg, unsigned int ext/;"	f	class:__anon21d590df0111::FreeTypeFont	typeref:typename:bool
InitOrLoadWindowSettings	./imgui.cpp	/^static void InitOrLoadWindowSettings(ImGuiWindow* window, ImGuiWindowSettings* settings)$/;"	f	typeref:typename:void	file:
InitStretchWeightOrWidth	./imgui_internal.h	/^    float                   InitStretchWeightOrWidth;       \/\/ Value passed to TableSetupColum/;"	m	struct:ImGuiTableColumn	typeref:typename:float
InitViewportDrawData	./imgui.cpp	/^static void InitViewportDrawData(ImGuiViewportP* viewport)$/;"	f	typeref:typename:void	file:
InitWGPU	./examples/example_glfw_wgpu/main.cpp	/^static bool InitWGPU(GLFWwindow* window)$/;"	f	typeref:typename:bool	file:
InitialFlags	./imgui_internal.h	/^    ImDrawListFlags InitialFlags;               \/\/ Initial flags at the beginning of the frame/;"	m	struct:ImDrawListSharedData	typeref:typename:ImDrawListFlags
InitialTextA	./imgui_internal.h	/^    ImVector<char>          InitialTextA;           \/\/ value to revert to when pressing Escape/;"	m	struct:ImGuiInputTextState	typeref:typename:ImVector<char>
InitialWidth	./imgui_internal.h	/^    float       InitialWidth;$/;"	m	struct:ImGuiShrinkWidthItem	typeref:typename:float
Initialize	./imgui.cpp	/^void ImGui::Initialize()$/;"	f	class:ImGui	typeref:typename:void
Initialized	./imgui_internal.h	/^    bool                    Initialized;$/;"	m	struct:ImGuiContext	typeref:typename:bool
InnerClipRect	./imgui_internal.h	/^    ImRect                      InnerClipRect;$/;"	m	struct:ImGuiTable	typeref:typename:ImRect
InnerClipRect	./imgui_internal.h	/^    ImRect                  InnerClipRect;                      \/\/ == InnerRect shrunk by Wind/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
InnerDir	./imgui.cpp	/^    ImVec2  InnerDir;               \/\/ Normal toward inside$/;"	m	struct:ImGuiResizeBorderDef	typeref:typename:ImVec2	file:
InnerDir	./imgui.cpp	/^    ImVec2  InnerDir;$/;"	m	struct:ImGuiResizeGripDef	typeref:typename:ImVec2	file:
InnerRect	./imgui_internal.h	/^    ImRect                      InnerRect;                  \/\/ InnerRect but without decoratio/;"	m	struct:ImGuiTable	typeref:typename:ImRect
InnerRect	./imgui_internal.h	/^    ImRect                  InnerRect;                          \/\/ Inner rectangle (omit title/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
InnerWidth	./imgui_internal.h	/^    float                       InnerWidth;                 \/\/ User value passed to BeginTable/;"	m	struct:ImGuiTable	typeref:typename:float
InnerWindow	./imgui_internal.h	/^    ImGuiWindow*                InnerWindow;                \/\/ Window holding the table data (/;"	m	struct:ImGuiTable	typeref:typename:ImGuiWindow *
InputBuf	./imgui.h	/^    char                    InputBuf[256];$/;"	m	struct:ImGuiTextFilter	typeref:typename:char[256]
InputBuf	./imgui_demo.cpp	/^    char                  InputBuf[256];$/;"	m	struct:ExampleAppConsole	typeref:typename:char[256]	file:
InputContext	./backends/imgui_impl_osx.mm	/^    NSTextInputContext*         InputContext;$/;"	E	struct:ImGui_ImplOSX_Data
InputDouble	./imgui_widgets.cpp	/^bool ImGui::InputDouble(const char* label, double* v, double step, double step_fast, const char*/;"	f	class:ImGui	typeref:typename:bool
InputEventsNextEventId	./imgui_internal.h	/^    ImU32                   InputEventsNextEventId;$/;"	m	struct:ImGuiContext	typeref:typename:ImU32
InputEventsNextMouseSource	./imgui_internal.h	/^    ImGuiMouseSource        InputEventsNextMouseSource;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiMouseSource
InputEventsQueue	./imgui_internal.h	/^    ImVector<ImGuiInputEvent> InputEventsQueue;                 \/\/ Input events which will be /;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiInputEvent>
InputEventsTrail	./imgui_internal.h	/^    ImVector<ImGuiInputEvent> InputEventsTrail;                 \/\/ Past input events processed/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiInputEvent>
InputFloat	./imgui_widgets.cpp	/^bool ImGui::InputFloat(const char* label, float* v, float step, float step_fast, const char* for/;"	f	class:ImGui	typeref:typename:bool
InputFloat2	./imgui_widgets.cpp	/^bool ImGui::InputFloat2(const char* label, float v[2], const char* format, ImGuiInputTextFlags f/;"	f	class:ImGui	typeref:typename:bool
InputFloat3	./imgui_widgets.cpp	/^bool ImGui::InputFloat3(const char* label, float v[3], const char* format, ImGuiInputTextFlags f/;"	f	class:ImGui	typeref:typename:bool
InputFloat4	./imgui_widgets.cpp	/^bool ImGui::InputFloat4(const char* label, float v[4], const char* format, ImGuiInputTextFlags f/;"	f	class:ImGui	typeref:typename:bool
InputInt	./imgui_widgets.cpp	/^bool ImGui::InputInt(const char* label, int* v, int step, int step_fast, ImGuiInputTextFlags fla/;"	f	class:ImGui	typeref:typename:bool
InputInt2	./imgui_widgets.cpp	/^bool ImGui::InputInt2(const char* label, int v[2], ImGuiInputTextFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
InputInt3	./imgui_widgets.cpp	/^bool ImGui::InputInt3(const char* label, int v[3], ImGuiInputTextFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
InputInt4	./imgui_widgets.cpp	/^bool ImGui::InputInt4(const char* label, int v[4], ImGuiInputTextFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
InputLayout	./backends/imgui_impl_dx10.cpp	/^        ID3D10InputLayout*          InputLayout;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:ID3D10InputLayout *	file:
InputLayout	./backends/imgui_impl_dx11.cpp	/^        ID3D11InputLayout*          InputLayout;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11InputLayout *	file:
InputLineHeight	./imgui.h	/^    float   InputLineHeight;    \/\/ Line height$/;"	m	struct:ImGuiPlatformImeData	typeref:typename:float
InputPos	./imgui.h	/^    ImVec2  InputPos;           \/\/ Position of the input cursor$/;"	m	struct:ImGuiPlatformImeData	typeref:typename:ImVec2
InputQueueCharacters	./imgui.h	/^    ImVector<ImWchar> InputQueueCharacters;         \/\/ Queue of _characters_ input (obtained b/;"	m	struct:ImGuiIO	typeref:typename:ImVector<ImWchar>
InputQueueSurrogate	./imgui.h	/^    ImWchar16   InputQueueSurrogate;                \/\/ For AddInputCharacterUTF16()$/;"	m	struct:ImGuiIO	typeref:typename:ImWchar16
InputScalar	./imgui_widgets.cpp	/^bool ImGui::InputScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_/;"	f	class:ImGui	typeref:typename:bool
InputScalarN	./imgui_widgets.cpp	/^bool ImGui::InputScalarN(const char* label, ImGuiDataType data_type, void* p_data, int component/;"	f	class:ImGui	typeref:typename:bool
InputText	./imgui_widgets.cpp	/^bool ImGui::InputText(const char* label, char* buf, size_t buf_size, ImGuiInputTextFlags flags, /;"	f	class:ImGui	typeref:typename:bool
InputText	./misc/cpp/imgui_stdlib.cpp	/^bool ImGui::InputText(const char* label, std::string* str, ImGuiInputTextFlags flags, ImGuiInput/;"	f	class:ImGui	typeref:typename:bool
InputTextCalcTextLenAndLineCount	./imgui_widgets.cpp	/^static int InputTextCalcTextLenAndLineCount(const char* text_begin, const char** out_text_end)$/;"	f	typeref:typename:int	file:
InputTextCalcTextSizeW	./imgui_widgets.cpp	/^static ImVec2 InputTextCalcTextSizeW(ImGuiContext* ctx, const ImWchar* text_begin, const ImWchar/;"	f	typeref:typename:ImVec2	file:
InputTextCallback	./misc/cpp/imgui_stdlib.cpp	/^static int InputTextCallback(ImGuiInputTextCallbackData* data)$/;"	f	typeref:typename:int	file:
InputTextCallback_UserData	./misc/cpp/imgui_stdlib.cpp	/^struct InputTextCallback_UserData$/;"	s	file:
InputTextDeactivateHook	./imgui_widgets.cpp	/^void ImGui::InputTextDeactivateHook(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
InputTextDeactivatedState	./imgui_internal.h	/^    ImGuiInputTextDeactivatedState InputTextDeactivatedState;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiInputTextDeactivatedState
InputTextEx	./imgui_widgets.cpp	/^bool ImGui::InputTextEx(const char* label, const char* hint, char* buf, int buf_size, const ImVe/;"	f	class:ImGui	typeref:typename:bool
InputTextFilterCharacter	./imgui_widgets.cpp	/^static bool InputTextFilterCharacter(ImGuiContext* ctx, unsigned int* p_char, ImGuiInputTextFlag/;"	f	typeref:typename:bool	file:
InputTextMultiline	./imgui_widgets.cpp	/^bool ImGui::InputTextMultiline(const char* label, char* buf, size_t buf_size, const ImVec2& size/;"	f	class:ImGui	typeref:typename:bool
InputTextMultiline	./misc/cpp/imgui_stdlib.cpp	/^bool ImGui::InputTextMultiline(const char* label, std::string* str, const ImVec2& size, ImGuiInp/;"	f	class:ImGui	typeref:typename:bool
InputTextPasswordFont	./imgui_internal.h	/^    ImFont                  InputTextPasswordFont;$/;"	m	struct:ImGuiContext	typeref:typename:ImFont
InputTextReconcileUndoStateAfterUserCallback	./imgui_widgets.cpp	/^static void InputTextReconcileUndoStateAfterUserCallback(ImGuiInputTextState* state, const char*/;"	f	typeref:typename:void	file:
InputTextState	./imgui_internal.h	/^    ImGuiInputTextState     InputTextState;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiInputTextState
InputTextWithHint	./imgui_widgets.cpp	/^bool ImGui::InputTextWithHint(const char* label, const char* hint, char* buf, size_t buf_size, I/;"	f	class:ImGui	typeref:typename:bool
InputTextWithHint	./misc/cpp/imgui_stdlib.cpp	/^bool ImGui::InputTextWithHint(const char* label, const char* hint, std::string* str, ImGuiInputT/;"	f	class:ImGui	typeref:typename:bool
InsertChars	./imgui_widgets.cpp	/^void ImGuiInputTextCallbackData::InsertChars(int pos, const char* new_text, const char* new_text/;"	f	class:ImGuiInputTextCallbackData	typeref:typename:void
InstalledCallbacks	./backends/imgui_impl_glfw.cpp	/^    bool                    InstalledCallbacks;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:bool	file:
Instance	./backends/imgui_impl_vulkan.h	/^    VkInstance                      Instance;$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:VkInstance
InstanceCurrent	./imgui_internal.h	/^    ImS16                       InstanceCurrent;            \/\/ Count of BeginTable() calls wit/;"	m	struct:ImGuiTable	typeref:typename:ImS16
InstanceDataExtra	./imgui_internal.h	/^    ImVector<ImGuiTableInstanceData>    InstanceDataExtra;  \/\/ FIXME-OPT: Using a small-vector/;"	m	struct:ImGuiTable	typeref:typename:ImVector<ImGuiTableInstanceData>
InstanceDataFirst	./imgui_internal.h	/^    ImGuiTableInstanceData      InstanceDataFirst;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableInstanceData
InstanceInteracted	./imgui_internal.h	/^    ImS16                       InstanceInteracted;         \/\/ Mark which instance (generally /;"	m	struct:ImGuiTable	typeref:typename:ImS16
Integrating backends	./docs/BACKENDS.md	/^### Integrating backends$/;"	S	section:Dear ImGui: Backends
Introduction	./examples/example_apple_metal/README.md	/^## Introduction$/;"	s	chapter:iOS / OSX Metal example
InvRasterizationDensity	./misc/freetype/imgui_freetype.cpp	/^        float           InvRasterizationDensity;$/;"	m	struct:__anon21d590df0111::FreeTypeFont	typeref:typename:float	file:
InvisibleButton	./imgui_widgets.cpp	/^bool ImGui::InvisibleButton(const char* str_id, const ImVec2& size_arg, ImGuiButtonFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsActive	./imgui.h	/^    bool                IsActive() const { return !Filters.empty(); }$/;"	f	struct:ImGuiTextFilter	typeref:typename:bool
IsActive	./imgui_internal.h	/^    bool                    IsActive;$/;"	m	struct:ImGuiBoxSelectState	typeref:typename:bool
IsActiveIdAliveBeforeTable	./imgui_internal.h	/^    bool                        IsActiveIdAliveBeforeTable;$/;"	m	struct:ImGuiTable	typeref:typename:bool
IsActiveIdInTable	./imgui_internal.h	/^    bool                        IsActiveIdInTable;$/;"	m	struct:ImGuiTable	typeref:typename:bool
IsActiveIdUsingNavDir	./imgui_internal.h	/^    inline bool             IsActiveIdUsingNavDir(ImGuiDir dir)                         { ImGuiC/;"	f	namespace:ImGui	typeref:typename:bool
IsAliasKey	./imgui_internal.h	/^    inline bool             IsAliasKey(ImGuiKey key)                    { return key >= ImGuiKey/;"	f	namespace:ImGui	typeref:typename:bool
IsAnyItemActive	./imgui.cpp	/^bool ImGui::IsAnyItemActive()$/;"	f	class:ImGui	typeref:typename:bool
IsAnyItemFocused	./imgui.cpp	/^bool ImGui::IsAnyItemFocused()$/;"	f	class:ImGui	typeref:typename:bool
IsAnyItemHovered	./imgui.cpp	/^bool ImGui::IsAnyItemHovered()$/;"	f	class:ImGui	typeref:typename:bool
IsAnyMouseDown	./imgui.cpp	/^bool ImGui::IsAnyMouseDown()$/;"	f	class:ImGui	typeref:typename:bool
IsBeingResized	./imgui_internal.h	/^    bool                IsBeingResized;$/;"	m	struct:ImGuiOldColumns	typeref:typename:bool
IsBuilt	./imgui.h	/^    bool                        IsBuilt() const             { return Fonts.Size > 0 && TexReady;/;"	f	struct:ImFontAtlas	typeref:typename:bool
IsChild	./imgui_internal.h	/^    bool        IsChild;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:bool
IsClippedEx	./imgui.cpp	/^bool ImGui::IsClippedEx(const ImRect& bb, ImGuiID id)$/;"	f	class:ImGui	typeref:typename:bool
IsColored	./misc/freetype/imgui_freetype.cpp	/^        bool        IsColored;          \/\/ The glyph is colored$/;"	m	struct:__anon21d590df0111::GlyphInfo	typeref:typename:bool	file:
IsContextPopupOpen	./imgui_internal.h	/^    bool                        IsContextPopupOpen;         \/\/ Set when default context menu i/;"	m	struct:ImGuiTable	typeref:typename:bool
IsDataType	./imgui.h	/^    bool IsDataType(const char* type) const { return DataFrameCount != -1 && strcmp(type, DataTy/;"	f	struct:ImGuiPayload	typeref:typename:bool
IsDefaultDisplayOrder	./imgui_internal.h	/^    bool                        IsDefaultDisplayOrder;      \/\/ Set when display order is uncha/;"	m	struct:ImGuiTable	typeref:typename:bool
IsDefaultSizingPolicy	./imgui_internal.h	/^    bool                        IsDefaultSizingPolicy;      \/\/ Set if user didn't explicitly s/;"	m	struct:ImGuiTable	typeref:typename:bool
IsDelivery	./imgui.h	/^    bool IsDelivery() const                 { return Delivery; }$/;"	f	struct:ImGuiPayload	typeref:typename:bool
IsDragDropActive	./imgui.cpp	/^bool ImGui::IsDragDropActive()$/;"	f	class:ImGui	typeref:typename:bool
IsDragDropPayloadBeingAccepted	./imgui.cpp	/^bool ImGui::IsDragDropPayloadBeingAccepted()$/;"	f	class:ImGui	typeref:typename:bool
IsEar	./imgui_draw.cpp	/^bool ImTriangulator::IsEar(int i0, int i1, int i2, const ImVec2& v0, const ImVec2& v1, const ImV/;"	f	class:ImTriangulator	typeref:typename:bool
IsEnabled	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLISENABLEDPROC                IsEnabled;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLISENABLEDPROC
IsEnabled	./imgui_internal.h	/^    ImU8                    IsEnabled : 1; \/\/ "Visible" in ini file$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImU8:1
IsEnabled	./imgui_internal.h	/^    bool                    IsEnabled;                      \/\/ IsUserEnabled && (Flags & ImGui/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsEndIO	./imgui_internal.h	/^    bool                    IsEndIO;            \/\/ Set when switching IO from BeginMultiSelect/;"	m	struct:ImGuiMultiSelectTempData	typeref:typename:bool
IsExplicitChild	./imgui_internal.h	/^    bool                    IsExplicitChild;                    \/\/ Set when passed _ChildWindo/;"	m	struct:ImGuiWindow	typeref:typename:bool
IsExtensionAvailable	./examples/example_glfw_vulkan/main.cpp	/^static bool IsExtensionAvailable(const ImVector<VkExtensionProperties>& properties, const char* /;"	f	typeref:typename:bool	file:
IsExtensionAvailable	./examples/example_sdl2_vulkan/main.cpp	/^static bool IsExtensionAvailable(const ImVector<VkExtensionProperties>& properties, const char* /;"	f	typeref:typename:bool	file:
IsFallbackWindow	./imgui_internal.h	/^    bool                    IsFallbackWindow;                   \/\/ Set on the "Debug##Default"/;"	m	struct:ImGuiWindow	typeref:typename:bool
IsFirstFrame	./imgui_internal.h	/^    bool                IsFirstFrame;$/;"	m	struct:ImGuiOldColumns	typeref:typename:bool
IsFocused	./imgui_internal.h	/^    bool                    IsFocused;          \/\/ Set if currently focusing the selection sco/;"	m	struct:ImGuiMultiSelectTempData	typeref:typename:bool
IsGamepadKey	./imgui_internal.h	/^    inline bool             IsGamepadKey(ImGuiKey key)                  { return key >= ImGuiKey/;"	f	namespace:ImGui	typeref:typename:bool
IsGlyphRangeUnused	./imgui_draw.cpp	/^bool ImFont::IsGlyphRangeUnused(unsigned int c_begin, unsigned int c_last)$/;"	f	class:ImFont	typeref:typename:bool
IsInitializing	./imgui_internal.h	/^    bool                        IsInitializing;$/;"	m	struct:ImGuiTable	typeref:typename:bool
IsInsideRow	./imgui_internal.h	/^    bool                        IsInsideRow;                \/\/ Set when inside TableBeginRow()/;"	m	struct:ImGuiTable	typeref:typename:bool
IsInverted	./imgui_internal.h	/^    bool        IsInverted() const                  { return Min.x > Max.x || Min.y > Max.y; }$/;"	f	struct:ImRect	typeref:typename:bool
IsItemActivated	./imgui.cpp	/^bool ImGui::IsItemActivated()$/;"	f	class:ImGui	typeref:typename:bool
IsItemActive	./imgui.cpp	/^bool ImGui::IsItemActive()$/;"	f	class:ImGui	typeref:typename:bool
IsItemClicked	./imgui.cpp	/^bool ImGui::IsItemClicked(ImGuiMouseButton mouse_button)$/;"	f	class:ImGui	typeref:typename:bool
IsItemDeactivated	./imgui.cpp	/^bool ImGui::IsItemDeactivated()$/;"	f	class:ImGui	typeref:typename:bool
IsItemDeactivatedAfterEdit	./imgui.cpp	/^bool ImGui::IsItemDeactivatedAfterEdit()$/;"	f	class:ImGui	typeref:typename:bool
IsItemEdited	./imgui.cpp	/^bool ImGui::IsItemEdited()$/;"	f	class:ImGui	typeref:typename:bool
IsItemFocused	./imgui.cpp	/^bool ImGui::IsItemFocused()$/;"	f	class:ImGui	typeref:typename:bool
IsItemHovered	./imgui.cpp	/^bool ImGui::IsItemHovered(ImGuiHoveredFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsItemToggledOpen	./imgui.cpp	/^bool ImGui::IsItemToggledOpen()$/;"	f	class:ImGui	typeref:typename:bool
IsItemToggledSelection	./imgui.cpp	/^bool ImGui::IsItemToggledSelection()$/;"	f	class:ImGui	typeref:typename:bool
IsItemVisible	./imgui.cpp	/^bool ImGui::IsItemVisible()$/;"	f	class:ImGui	typeref:typename:bool
IsKeyChordPotentiallyCharInput	./imgui.cpp	/^static bool IsKeyChordPotentiallyCharInput(ImGuiKeyChord key_chord)$/;"	f	typeref:typename:bool	file:
IsKeyChordPressed	./imgui.cpp	/^bool ImGui::IsKeyChordPressed(ImGuiKeyChord key_chord)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyChordPressed	./imgui.cpp	/^bool ImGui::IsKeyChordPressed(ImGuiKeyChord key_chord, ImGuiInputFlags flags, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyDown	./imgui.cpp	/^bool ImGui::IsKeyDown(ImGuiKey key)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyDown	./imgui.cpp	/^bool ImGui::IsKeyDown(ImGuiKey key, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyPressed	./imgui.cpp	/^bool ImGui::IsKeyPressed(ImGuiKey key, ImGuiInputFlags flags, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyPressed	./imgui.cpp	/^bool ImGui::IsKeyPressed(ImGuiKey key, bool repeat)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyReleased	./imgui.cpp	/^bool ImGui::IsKeyReleased(ImGuiKey key)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyReleased	./imgui.cpp	/^bool ImGui::IsKeyReleased(ImGuiKey key, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyboardKey	./imgui_internal.h	/^    inline bool             IsKeyboardKey(ImGuiKey key)                 { return key >= ImGuiKey/;"	f	namespace:ImGui	typeref:typename:bool
IsKeyboardSetRange	./imgui_internal.h	/^    bool                    IsKeyboardSetRange; \/\/ Set by BeginMultiSelect() when using Shift+/;"	m	struct:ImGuiMultiSelectTempData	typeref:typename:bool
IsLRModKey	./imgui_internal.h	/^    inline bool             IsLRModKey(ImGuiKey key)                    { return key >= ImGuiKey/;"	f	namespace:ImGui	typeref:typename:bool
IsLayoutLocked	./imgui_internal.h	/^    bool                        IsLayoutLocked;             \/\/ Set by TableUpdateLayout() whic/;"	m	struct:ImGuiTable	typeref:typename:bool
IsLegacyKey	./imgui_internal.h	/^    inline bool             IsLegacyKey(ImGuiKey key)                   { return key >= ImGuiKey/;"	f	namespace:ImGui	typeref:typename:bool
IsLegacyNativeDupe	./imgui.cpp	/^            struct funcs { static bool IsLegacyNativeDupe(ImGuiKey key) { return key >= 0 && key/;"	f	struct:ImGui::ShowMetricsWindow::funcs	typeref:typename:bool	file:
IsLegacyNativeDupe	./imgui.cpp	/^            struct funcs { static bool IsLegacyNativeDupe(ImGuiKey) { return false; } };$/;"	f	struct:ImGui::ShowMetricsWindow::funcs	typeref:typename:bool	file:
IsLegacyNativeDupe	./imgui_demo.cpp	/^            struct funcs { static bool IsLegacyNativeDupe(ImGuiKey key) { return key >= 0 && key/;"	f	struct:ShowDemoWindowInputs::funcs	typeref:typename:bool	file:
IsLegacyNativeDupe	./imgui_demo.cpp	/^            struct funcs { static bool IsLegacyNativeDupe(ImGuiKey) { return false; } };$/;"	f	struct:ShowDemoWindowInputs::funcs	typeref:typename:bool	file:
IsLoaded	./imgui.h	/^    bool                        IsLoaded() const                    { return ContainerAtlas != N/;"	f	struct:ImFont	typeref:typename:bool
IsMouseClicked	./imgui.cpp	/^bool ImGui::IsMouseClicked(ImGuiMouseButton button, ImGuiInputFlags flags, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseClicked	./imgui.cpp	/^bool ImGui::IsMouseClicked(ImGuiMouseButton button, bool repeat)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDoubleClicked	./imgui.cpp	/^bool ImGui::IsMouseDoubleClicked(ImGuiMouseButton button)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDoubleClicked	./imgui.cpp	/^bool ImGui::IsMouseDoubleClicked(ImGuiMouseButton button, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDown	./imgui.cpp	/^bool ImGui::IsMouseDown(ImGuiMouseButton button)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDown	./imgui.cpp	/^bool ImGui::IsMouseDown(ImGuiMouseButton button, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDragPastThreshold	./imgui.cpp	/^bool ImGui::IsMouseDragPastThreshold(ImGuiMouseButton button, float lock_threshold)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDragging	./imgui.cpp	/^bool ImGui::IsMouseDragging(ImGuiMouseButton button, float lock_threshold)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseHoveringRect	./imgui.cpp	/^bool ImGui::IsMouseHoveringRect(const ImVec2& r_min, const ImVec2& r_max, bool clip)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseKey	./imgui_internal.h	/^    inline bool             IsMouseKey(ImGuiKey key)                    { return key >= ImGuiKey/;"	f	namespace:ImGui	typeref:typename:bool
IsMousePosValid	./imgui.cpp	/^bool ImGui::IsMousePosValid(const ImVec2* mouse_pos)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseReleased	./imgui.cpp	/^bool ImGui::IsMouseReleased(ImGuiMouseButton button)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseReleased	./imgui.cpp	/^bool ImGui::IsMouseReleased(ImGuiMouseButton button, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
IsNamedKey	./imgui_internal.h	/^    inline bool             IsNamedKey(ImGuiKey key)                    { return key >= ImGuiKey/;"	f	namespace:ImGui	typeref:typename:bool
IsNamedKeyOrMod	./imgui_internal.h	/^    inline bool             IsNamedKeyOrMod(ImGuiKey key)               { return (key >= ImGuiKe/;"	f	namespace:ImGui	typeref:typename:bool
IsPacked	./imgui.h	/^    bool IsPacked() const           { return X != 0xFFFF; }$/;"	f	struct:ImFontAtlasCustomRect	typeref:typename:bool
IsPopupOpen	./imgui.cpp	/^bool ImGui::IsPopupOpen(ImGuiID id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:bool
IsPopupOpen	./imgui.cpp	/^bool ImGui::IsPopupOpen(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:bool
IsPreserveWidthAuto	./imgui_internal.h	/^    bool                    IsPreserveWidthAuto;$/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsPreview	./imgui.h	/^    bool IsPreview() const                  { return Preview; }$/;"	f	struct:ImGuiPayload	typeref:typename:bool
IsProgram	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLISPROGRAMPROC                IsProgram;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLISPROGRAMPROC
IsRectVisible	./imgui.cpp	/^bool ImGui::IsRectVisible(const ImVec2& rect_min, const ImVec2& rect_max)$/;"	f	class:ImGui	typeref:typename:bool
IsRectVisible	./imgui.cpp	/^bool ImGui::IsRectVisible(const ImVec2& size)$/;"	f	class:ImGui	typeref:typename:bool
IsRequestOutput	./imgui_internal.h	/^    bool                    IsRequestOutput;                \/\/ Return value for TableSetColumn/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsResetAllRequest	./imgui_internal.h	/^    bool                        IsResetAllRequest;$/;"	m	struct:ImGuiTable	typeref:typename:bool
IsResetDisplayOrderRequest	./imgui_internal.h	/^    bool                        IsResetDisplayOrderRequest;$/;"	m	struct:ImGuiTable	typeref:typename:bool
IsRootOfOpenMenuSet	./imgui_widgets.cpp	/^static bool IsRootOfOpenMenuSet()$/;"	f	typeref:typename:bool	file:
IsSameLine	./imgui_internal.h	/^    bool                    IsSameLine;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
IsSetPos	./imgui_internal.h	/^    bool                    IsSetPos;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
IsSettingsDirty	./imgui_internal.h	/^    bool                        IsSettingsDirty;            \/\/ Set when table settings have ch/;"	m	struct:ImGuiTable	typeref:typename:bool
IsSettingsRequestLoad	./imgui_internal.h	/^    bool                        IsSettingsRequestLoad;$/;"	m	struct:ImGuiTable	typeref:typename:bool
IsSkipItems	./imgui_internal.h	/^    bool                    IsSkipItems;                    \/\/ Do we want item submissions to /;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsSortSpecsDirty	./imgui_internal.h	/^    bool                        IsSortSpecsDirty;$/;"	m	struct:ImGuiTable	typeref:typename:bool
IsStartedFromVoid	./imgui_internal.h	/^    bool                    IsStartedFromVoid;  \/\/ Starting click was not from an item.$/;"	m	struct:ImGuiBoxSelectState	typeref:typename:bool
IsStartedSetNavIdOnce	./imgui_internal.h	/^    bool                    IsStartedSetNavIdOnce;$/;"	m	struct:ImGuiBoxSelectState	typeref:typename:bool
IsStarting	./imgui_internal.h	/^    bool                    IsStarting;$/;"	m	struct:ImGuiBoxSelectState	typeref:typename:bool
IsStretch	./imgui_internal.h	/^    ImU8                    IsStretch : 1;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImU8:1
IsUnfrozenRows	./imgui_internal.h	/^    bool                        IsUnfrozenRows;             \/\/ Set when we got past the frozen/;"	m	struct:ImGuiTable	typeref:typename:bool
IsUserEnabled	./imgui_internal.h	/^    bool                    IsUserEnabled;                  \/\/ Is the column not marked Hidden/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsUserEnabledNextFrame	./imgui_internal.h	/^    bool                    IsUserEnabledNextFrame;$/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsUsingHeaders	./imgui_internal.h	/^    bool                        IsUsingHeaders;             \/\/ Set when the first row had the /;"	m	struct:ImGuiTable	typeref:typename:bool
IsVisibleX	./imgui_internal.h	/^    bool                    IsVisibleX;                     \/\/ Is actually in view (e.g. overl/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsVisibleY	./imgui_internal.h	/^    bool                    IsVisibleY;$/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsVkDown	./backends/imgui_impl_win32.cpp	/^static bool IsVkDown(int vk)$/;"	f	typeref:typename:bool	file:
IsWindowAbove	./imgui.cpp	/^bool ImGui::IsWindowAbove(ImGuiWindow* potential_above, ImGuiWindow* potential_below)$/;"	f	class:ImGui	typeref:typename:bool
IsWindowActiveAndVisible	./imgui.cpp	/^static bool IsWindowActiveAndVisible(ImGuiWindow* window)$/;"	f	typeref:typename:bool	file:
IsWindowAppearing	./imgui.cpp	/^bool ImGui::IsWindowAppearing()$/;"	f	class:ImGui	typeref:typename:bool
IsWindowChildOf	./imgui.cpp	/^bool ImGui::IsWindowChildOf(ImGuiWindow* window, ImGuiWindow* potential_parent, bool popup_hiera/;"	f	class:ImGui	typeref:typename:bool
IsWindowCollapsed	./imgui.cpp	/^bool ImGui::IsWindowCollapsed()$/;"	f	class:ImGui	typeref:typename:bool
IsWindowContentHoverable	./imgui.cpp	/^bool ImGui::IsWindowContentHoverable(ImGuiWindow* window, ImGuiHoveredFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsWindowFocused	./imgui.cpp	/^bool ImGui::IsWindowFocused(ImGuiFocusedFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsWindowHovered	./imgui.cpp	/^bool ImGui::IsWindowHovered(ImGuiHoveredFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsWindowNavFocusable	./imgui.cpp	/^bool ImGui::IsWindowNavFocusable(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:bool
IsWindowWithinBeginStackOf	./imgui.cpp	/^bool ImGui::IsWindowWithinBeginStackOf(ImGuiWindow* window, ImGuiWindow* potential_parent)$/;"	f	class:ImGui	typeref:typename:bool
ItemAdd	./imgui.cpp	/^bool ImGui::ItemAdd(const ImRect& bb, ImGuiID id, const ImRect* nav_bb_arg, ImGuiItemFlags extra/;"	f	class:ImGui	typeref:typename:IM_MSVC_RUNTIME_CHECKS_OFF bool
ItemFlags	./imgui_internal.h	/^    ImGuiItemFlags              ItemFlags;          \/\/ Currently only tested\/used for ImGuiIt/;"	m	struct:ImGuiNextItemData	typeref:typename:ImGuiItemFlags
ItemFlagsStack	./imgui_internal.h	/^    ImVector<ImGuiItemFlags>        ItemFlagsStack;             \/\/ Stack for PushItemFlag()\/P/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiItemFlags>
ItemHandleShortcut	./imgui.cpp	/^void ImGui::ItemHandleShortcut(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
ItemHoverable	./imgui.cpp	/^bool ImGui::ItemHoverable(const ImRect& bb, ImGuiID id, ImGuiItemFlags item_flags)$/;"	f	class:ImGui	typeref:typename:bool
ItemInnerSpacing	./imgui.h	/^    ImVec2      ItemInnerSpacing;           \/\/ Horizontal and vertical spacing between within /;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
ItemSize	./imgui.cpp	/^void ImGui::ItemSize(const ImVec2& size, float text_baseline_y)$/;"	f	class:ImGui	typeref:typename:IM_MSVC_RUNTIME_CHECKS_RESTORE IM_MSVC_RUNTIME_CHECKS_OFF void
ItemSize	./imgui_internal.h	/^    inline void             ItemSize(const ImRect& bb, float text_baseline_y = -1.0f) { ItemSize/;"	f	namespace:ImGui	typeref:typename:void
ItemSpacing	./imgui.h	/^    ImVec2      ItemSpacing;                \/\/ Horizontal and vertical spacing between widgets/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
ItemSpacingY	./imgui_internal.h	/^    float               ItemSpacingY;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ItemUnclipByLog	./imgui_internal.h	/^    bool                    ItemUnclipByLog;                    \/\/ Disable ItemAdd() clipping,/;"	m	struct:ImGuiContext	typeref:typename:bool
ItemWidth	./imgui_internal.h	/^    float                   ItemWidth;                      \/\/ Current item width for the colu/;"	m	struct:ImGuiTableColumn	typeref:typename:float
ItemWidth	./imgui_internal.h	/^    float                   ItemWidth;              \/\/ Current item width (>0.0: width in pixe/;"	m	struct:ImGuiWindowTempData	typeref:typename:float
ItemWidthDefault	./imgui_internal.h	/^    float                   ItemWidthDefault;$/;"	m	struct:ImGuiWindow	typeref:typename:float
ItemWidthStack	./imgui_internal.h	/^    ImVector<float>         ItemWidthStack;         \/\/ Store item widths to restore (attention/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVector<float>
Items	./imgui_demo.cpp	/^    ImVector<ExampleAsset> Items;               \/\/ Our items$/;"	m	struct:ExampleAssetsBrowser	typeref:typename:ImVector<ExampleAsset>	file:
Items	./imgui_demo.cpp	/^    ImVector<ImGuiID>           Items[2];               \/\/ ID is index into ExampleName[]$/;"	m	struct:ExampleDualListBox	typeref:typename:ImVector<ImGuiID>[2]	file:
Items	./imgui_demo.cpp	/^    ImVector<char*>       Items;$/;"	m	struct:ExampleAppConsole	typeref:typename:ImVector<char * >	file:
ItemsCount	./imgui.h	/^    int                         ItemsCount;     \/\/  ms:w, app:r     \/        app:r   \/\/ 'in/;"	m	struct:ImGuiMultiSelectIO	typeref:typename:int
ItemsCount	./imgui.h	/^    int             ItemsCount;         \/\/ [Internal] Number of items$/;"	m	struct:ImGuiListClipper	typeref:typename:int
ItemsFrozen	./imgui_internal.h	/^    int                             ItemsFrozen;$/;"	m	struct:ImGuiListClipperData	typeref:typename:int
ItemsHeight	./imgui.h	/^    float           ItemsHeight;        \/\/ [Internal] Height of item after a first step and it/;"	m	struct:ImGuiListClipper	typeref:typename:float
Items_ArrayGetter	./imgui_widgets.cpp	/^static const char* Items_ArrayGetter(void* data, int idx)$/;"	f	typeref:typename:const char *	file:
Items_SingleStringGetter	./imgui_widgets.cpp	/^static const char* Items_SingleStringGetter(void* data, int idx)$/;"	f	typeref:typename:const char *	file:
KeepAliveID	./imgui.cpp	/^void ImGui::KeepAliveID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
Key	./imgui.cpp	/^    struct KeyLayoutData { int Row, Col; const char* Label; ImGuiKey Key; };$/;"	m	struct:ImGui::DebugRenderKeyboardPreview::KeyLayoutData	typeref:typename:ImGuiKey	file:
Key	./imgui_internal.h	/^        ImGuiInputEventKey          Key;            \/\/ if Type == ImGuiInputEventType_Key$/;"	m	union:ImGuiInputEvent::__anon869d752f020a	typeref:typename:ImGuiInputEventKey
Key	./imgui_internal.h	/^    ImGuiLocKey     Key;$/;"	m	struct:ImGuiLocEntry	typeref:typename:ImGuiLocKey
Key	./imgui_internal.h	/^struct ImGuiInputEventKey           { ImGuiKey Key; bool Down; float AnalogValue; };$/;"	m	struct:ImGuiInputEventKey	typeref:typename:ImGuiKey
KeyAlt	./imgui.h	/^    bool        KeyAlt;                             \/\/ Keyboard modifier down: Alt$/;"	m	struct:ImGuiIO	typeref:typename:bool
KeyCtrl	./imgui.h	/^    bool        KeyCtrl;                            \/\/ Keyboard modifier down: Control$/;"	m	struct:ImGuiIO	typeref:typename:bool
KeyEventResponder	./backends/imgui_impl_osx.mm	/^    KeyEventResponder*          KeyEventResponder;$/;"	E	struct:ImGui_ImplOSX_Data
KeyEventResponder	./backends/imgui_impl_osx.mm	/^@implementation KeyEventResponder$/;"	I
KeyEventResponder	./backends/imgui_impl_osx.mm	/^@interface KeyEventResponder: NSView<NSTextInputClient>$/;"	i	protocols:NSTextInputClient
KeyLayoutData	./imgui.cpp	/^    struct KeyLayoutData { int Row, Col; const char* Label; ImGuiKey Key; };$/;"	s	function:ImGui::DebugRenderKeyboardPreview	file:
KeyMap	./imgui.h	/^    int         KeyMap[ImGuiKey_COUNT];             \/\/ [LEGACY] Input: map of indices into the/;"	m	struct:ImGuiIO	typeref:typename:int[]
KeyMods	./imgui.h	/^    ImGuiKeyChord KeyMods;                          \/\/ Key mods flags (any of ImGuiMod_Ctrl\/I/;"	m	struct:ImGuiIO	typeref:typename:ImGuiKeyChord
KeyMods	./imgui_internal.h	/^    ImGuiKeyChord           KeyMods : 16;       \/\/ Latched key-mods for box-select logic.$/;"	m	struct:ImGuiBoxSelectState	typeref:typename:ImGuiKeyChord:16
KeyMods	./imgui_internal.h	/^    ImGuiKeyChord           KeyMods;$/;"	m	struct:ImGuiMultiSelectTempData	typeref:typename:ImGuiKeyChord
KeyRepeatDelay	./imgui.h	/^    float       KeyRepeatDelay;                 \/\/ = 0.275f         \/\/ When holding a key\/b/;"	m	struct:ImGuiIO	typeref:typename:float
KeyRepeatRate	./imgui.h	/^    float       KeyRepeatRate;                  \/\/ = 0.050f         \/\/ When holding a key\/b/;"	m	struct:ImGuiIO	typeref:typename:float
KeyShift	./imgui.h	/^    bool        KeyShift;                           \/\/ Keyboard modifier down: Shift$/;"	m	struct:ImGuiIO	typeref:typename:bool
KeySuper	./imgui.h	/^    bool        KeySuper;                           \/\/ Keyboard modifier down: Cmd\/Super\/Win/;"	m	struct:ImGuiIO	typeref:typename:bool
KeyboardCodePage	./backends/imgui_impl_win32.cpp	/^    UINT32                      KeyboardCodePage;$/;"	m	struct:ImGui_ImplWin32_Data	typeref:typename:UINT32	file:
KeysData	./imgui.h	/^    ImGuiKeyData  KeysData[ImGuiKey_KeysData_SIZE]; \/\/ Key state for all known keys. Use IsKey/;"	m	struct:ImGuiIO	typeref:typename:ImGuiKeyData[]
KeysDown	./imgui.h	/^    bool        KeysDown[ImGuiKey_COUNT];           \/\/ [LEGACY] Input: Keyboard keys that are /;"	m	struct:ImGuiIO	typeref:typename:bool[]
KeysMayBeCharInput	./imgui_internal.h	/^    ImBitArrayForNamedKeys  KeysMayBeCharInput;                 \/\/ Lookup to tell if a key can/;"	m	struct:ImGuiContext	typeref:typename:ImBitArrayForNamedKeys
KeysOwnerData	./imgui_internal.h	/^    ImGuiKeyOwnerData       KeysOwnerData[ImGuiKey_NamedKey_COUNT];$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKeyOwnerData[]
KeysRoutingTable	./imgui_internal.h	/^    ImGuiKeyRoutingTable    KeysRoutingTable;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKeyRoutingTable
Known issues	./misc/freetype/README.md	/^### Known issues$/;"	S	chapter:imgui_freetype
LIBRARIES	./examples/example_glfw_vulkan/CMakeLists.txt	/^set(LIBRARIES "glfw;Vulkan::Vulkan")$/;"	v
LIBRARIES	./examples/example_glfw_wgpu/CMakeLists.txt	/^  set(LIBRARIES glfw)$/;"	v
LIBRARIES	./examples/example_glfw_wgpu/CMakeLists.txt	/^  set(LIBRARIES webgpu_dawn webgpu_cpp webgpu_glfw glfw)$/;"	v
LIBS	./examples/example_glfw_metal/Makefile	/^LIBS = -framework Metal -framework MetalKit -framework Cocoa -framework IOKit -framework CoreVid/;"	m
LIBS	./examples/example_glfw_opengl2/Makefile	/^LIBS =$/;"	m
LIBS	./examples/example_glfw_opengl2/build_win32.bat	/^@set LIBS=\/LIBPATH:..\\libs\\glfw\\lib-vc2010-32 glfw3.lib opengl32.lib gdi32.lib shell32.lib$/;"	v
LIBS	./examples/example_glfw_opengl3/Makefile	/^LIBS =$/;"	m
LIBS	./examples/example_glfw_opengl3/build_win32.bat	/^@set LIBS=\/LIBPATH:..\\libs\\glfw\\lib-vc2010-32 glfw3.lib opengl32.lib gdi32.lib shell32.lib$/;"	v
LIBS	./examples/example_glfw_vulkan/build_win32.bat	/^@set LIBS=\/LIBPATH:..\\libs\\glfw\\lib-vc2010-32 \/libpath:%VULKAN_SDK%\\lib32 glfw3.lib opengl/;"	v
LIBS	./examples/example_glfw_vulkan/build_win64.bat	/^@set LIBS=\/LIBPATH:..\\libs\\glfw\\lib-vc2010-64 \/libpath:%VULKAN_SDK%\\lib glfw3.lib opengl32/;"	v
LIBS	./examples/example_glut_opengl2/Makefile	/^LIBS =$/;"	m
LIBS	./examples/example_null/Makefile	/^LIBS =$/;"	m
LIBS	./examples/example_sdl2_directx11/build_win32.bat	/^@set LIBS=\/LIBPATH:%SDL2_DIR%\\lib\\x86 SDL2.lib SDL2main.lib \/LIBPATH:"%DXSDK_DIR%\/Lib\/x86"/;"	v
LIBS	./examples/example_sdl2_metal/Makefile	/^LIBS = -framework Metal -framework MetalKit -framework Cocoa -framework IOKit -framework CoreVid/;"	m
LIBS	./examples/example_sdl2_opengl2/Makefile	/^LIBS =$/;"	m
LIBS	./examples/example_sdl2_opengl2/build_win32.bat	/^@set LIBS=\/LIBPATH:%SDL2_DIR%\\lib\\x86 SDL2.lib SDL2main.lib opengl32.lib shell32.lib$/;"	v
LIBS	./examples/example_sdl2_opengl3/Makefile	/^LIBS =$/;"	m
LIBS	./examples/example_sdl2_opengl3/build_win32.bat	/^@set LIBS=\/LIBPATH:%SDL2_DIR%\\lib\\x86 SDL2.lib SDL2main.lib opengl32.lib shell32.lib$/;"	v
LIBS	./examples/example_sdl2_sdlrenderer2/Makefile	/^LIBS =$/;"	m
LIBS	./examples/example_sdl2_sdlrenderer2/build_win32.bat	/^@set LIBS=\/LIBPATH:%SDL2_DIR%\\lib\\x86 SDL2.lib SDL2main.lib$/;"	v
LIBS	./examples/example_sdl2_vulkan/build_win32.bat	/^@set LIBS=\/LIBPATH:%SDL2_DIR%\\lib\\x86 \/libpath:%VULKAN_SDK%\\lib32 SDL2.lib SDL2main.lib she/;"	v
LIBS	./examples/example_sdl3_opengl3/Makefile	/^LIBS =$/;"	m
LIBS	./examples/example_sdl3_opengl3/build_win32.bat	/^@set LIBS=\/LIBPATH:%SDL3_DIR%\\lib\\x86 SDL3.lib opengl32.lib shell32.lib$/;"	v
LIBS	./examples/example_sdl3_sdlrenderer3/Makefile	/^LIBS =$/;"	m
LIBS	./examples/example_sdl3_sdlrenderer3/build_win32.bat	/^@set LIBS=\/LIBPATH:%SDL3_DIR%\\lib\\x86 SDL3.lib$/;"	v
LIBS	./examples/example_win32_directx10/build_win32.bat	/^@set LIBS=\/LIBPATH:"%DXSDK_DIR%\/Lib\/x86" d3d10.lib d3dcompiler.lib$/;"	v
LIBS	./examples/example_win32_directx11/build_win32.bat	/^@set LIBS=\/LIBPATH:"%DXSDK_DIR%\/Lib\/x86" d3d11.lib d3dcompiler.lib$/;"	v
LIBS	./examples/example_win32_directx12/build_win32.bat	/^@set LIBS=d3d12.lib d3dcompiler.lib dxgi.lib$/;"	v
LIBS	./examples/example_win32_directx9/build_win32.bat	/^@set LIBS=\/LIBPATH:"%DXSDK_DIR%\/Lib\/x86" d3d9.lib$/;"	v
LIBS	./examples/example_win32_opengl3/build_win32.bat	/^@set LIBS=opengl32.lib$/;"	v
LINUX_GL_LIBS	./examples/example_glfw_opengl3/Makefile	/^LINUX_GL_LIBS = -lGL$/;"	m
LINUX_GL_LIBS	./examples/example_sdl2_opengl3/Makefile	/^LINUX_GL_LIBS = -lGL$/;"	m
LINUX_GL_LIBS	./examples/example_sdl3_opengl3/Makefile	/^LINUX_GL_LIBS = -lGL$/;"	m
LINUX_GL_LIBS	./examples/example_sdl3_sdlrenderer3/Makefile	/^LINUX_GL_LIBS = -lGL$/;"	m
LSMinimumSystemVersion	./examples/example_apple_metal/macOS/Info-macOS.plist	/^	<key>LSMinimumSystemVersion<\/key>$/;"	k
LSRequiresIPhoneOS	./examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>LSRequiresIPhoneOS<\/key>$/;"	k
Label	./imgui.cpp	/^    struct KeyLayoutData { int Row, Col; const char* Label; ImGuiKey Key; };$/;"	m	struct:ImGui::DebugRenderKeyboardPreview::KeyLayoutData	typeref:typename:const char *	file:
LabelText	./imgui_widgets.cpp	/^void ImGui::LabelText(const char* label, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
LabelTextV	./imgui_widgets.cpp	/^void ImGui::LabelTextV(const char* label, const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
LastActiveFrame	./imgui_internal.h	/^    int                     LastActiveFrame;$/;"	m	struct:ImGuiIDStackTool	typeref:typename:int
LastActiveId	./imgui_internal.h	/^    ImGuiID                 LastActiveId;                       \/\/ Store the last non-zero Act/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
LastActiveIdTimer	./imgui_internal.h	/^    float                   LastActiveIdTimer;                  \/\/ Store the last non-zero Act/;"	m	struct:ImGuiContext	typeref:typename:float
LastEntriesBuf	./imgui_internal.h	/^    ImGuiDebugAllocEntry LastEntriesBuf[6]; \/\/ Track last 6 frames that had allocations$/;"	m	struct:ImGuiDebugAllocInfo	typeref:typename:ImGuiDebugAllocEntry[6]
LastEntriesIdx	./imgui_internal.h	/^    ImS16       LastEntriesIdx;             \/\/ Current index in buffer$/;"	m	struct:ImGuiDebugAllocInfo	typeref:typename:ImS16
LastFrameActive	./imgui_internal.h	/^    int                         LastFrameActive;$/;"	m	struct:ImGuiTable	typeref:typename:int
LastFrameActive	./imgui_internal.h	/^    int                     LastFrameActive;                    \/\/ Last frame number the windo/;"	m	struct:ImGuiWindow	typeref:typename:int
LastFrameActive	./imgui_internal.h	/^    int                     LastFrameActive;    \/\/ Last used frame-count, for GC.$/;"	m	struct:ImGuiMultiSelectState	typeref:typename:int
LastFrameSelected	./imgui_internal.h	/^    int                 LastFrameSelected;      \/\/ This allows us to infer an ordered list of /;"	m	struct:ImGuiTabItem	typeref:typename:int
LastFrameVisible	./imgui_internal.h	/^    int                 LastFrameVisible;$/;"	m	struct:ImGuiTabItem	typeref:typename:int
LastFrozenHeight	./imgui_internal.h	/^    float                       LastFrozenHeight;           \/\/ Height of frozen section from l/;"	m	struct:ImGuiTableInstanceData	typeref:typename:float
LastItemData	./imgui_internal.h	/^    ImGuiLastItemData       LastItemData;                       \/\/ Storage for last submitted /;"	m	struct:ImGuiContext	typeref:typename:ImGuiLastItemData
LastKeyModsChangeFromNoneTime	./imgui_internal.h	/^    double                  LastKeyModsChangeFromNoneTime;      \/\/ Record the last time key mo/;"	m	struct:ImGuiContext	typeref:typename:double
LastKeyModsChangeTime	./imgui_internal.h	/^    double                  LastKeyModsChangeTime;              \/\/ Record the last time key mo/;"	m	struct:ImGuiContext	typeref:typename:double
LastKeyboardKeyPressTime	./imgui_internal.h	/^    double                  LastKeyboardKeyPressTime;           \/\/ Record the last time a keyb/;"	m	struct:ImGuiContext	typeref:typename:double
LastMouseCursor	./backends/imgui_impl_win32.cpp	/^    ImGuiMouseCursor            LastMouseCursor;$/;"	m	struct:ImGui_ImplWin32_Data	typeref:typename:ImGuiMouseCursor	file:
LastOuterHeight	./imgui_internal.h	/^    float                       LastOuterHeight;            \/\/ Outer height from last frame$/;"	m	struct:ImGuiTableInstanceData	typeref:typename:float
LastRequestFrame	./imgui_internal.h	/^    int             LastRequestFrame = 0;$/;"	m	struct:ImGuiTypingSelectState	typeref:typename:int
LastRequestTime	./imgui_internal.h	/^    float           LastRequestTime = 0.0f;$/;"	m	struct:ImGuiTypingSelectState	typeref:typename:float
LastResizedColumn	./imgui_internal.h	/^    ImGuiTableColumnIdx         LastResizedColumn;          \/\/ Index of column being resized f/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
LastRowFlags	./imgui_internal.h	/^    ImGuiTableRowFlags          LastRowFlags : 16;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableRowFlags:16
LastSelectionSize	./imgui_internal.h	/^    int                     LastSelectionSize;  \/\/ Set by BeginMultiSelect() based on optional/;"	m	struct:ImGuiMultiSelectState	typeref:typename:int
LastSubmittedItem	./imgui_internal.h	/^    ImGuiSelectionUserData  LastSubmittedItem;  \/\/ Copy of last submitted item data, used to m/;"	m	struct:ImGuiMultiSelectTempData	typeref:typename:ImGuiSelectionUserData
LastTabItemIdx	./imgui_internal.h	/^    ImS16               LastTabItemIdx;         \/\/ Index of last BeginTabItem() tab for use by/;"	m	struct:ImGuiTabBar	typeref:typename:ImS16
LastTimeActive	./imgui_internal.h	/^    float                       LastTimeActive;             \/\/ Last timestamp this structure w/;"	m	struct:ImGuiTableTempData	typeref:typename:float
LastTimeActive	./imgui_internal.h	/^    float                   LastTimeActive;                     \/\/ Last timestamp the window w/;"	m	struct:ImGuiWindow	typeref:typename:float
LastTopHeadersRowHeight	./imgui_internal.h	/^    float                       LastTopHeadersRowHeight;    \/\/ Height of first consecutive hea/;"	m	struct:ImGuiTableInstanceData	typeref:typename:float
LastValidMousePos	./backends/imgui_impl_glfw.cpp	/^    ImVec2                  LastValidMousePos;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:ImVec2	file:
LayerData1	./imgui_internal.h	/^    ImVector<ImDrawList*>   LayerData1;$/;"	m	struct:ImDrawDataBuilder	typeref:typename:ImVector<ImDrawList * >
Layers	./imgui_internal.h	/^    ImVector<ImDrawList*>*  Layers[2];      \/\/ Pointers to global layers for: regular, tooltip/;"	m	struct:ImDrawDataBuilder	typeref:typename:ImVector<ImDrawList * > * [2]
LayoutColumnCount	./imgui_demo.cpp	/^    int             LayoutColumnCount = 0;$/;"	m	struct:ExampleAssetsBrowser	typeref:typename:int	file:
LayoutItemSize	./imgui_demo.cpp	/^    ImVec2          LayoutItemSize;$/;"	m	struct:ExampleAssetsBrowser	typeref:typename:ImVec2	file:
LayoutItemSpacing	./imgui_demo.cpp	/^    float           LayoutItemSpacing = 0.0f;$/;"	m	struct:ExampleAssetsBrowser	typeref:typename:float	file:
LayoutItemStep	./imgui_demo.cpp	/^    ImVec2          LayoutItemStep;             \/\/ == LayoutItemSize + LayoutItemSpacing$/;"	m	struct:ExampleAssetsBrowser	typeref:typename:ImVec2	file:
LayoutLineCount	./imgui_demo.cpp	/^    int             LayoutLineCount = 0;$/;"	m	struct:ExampleAssetsBrowser	typeref:typename:int	file:
LayoutOuterPadding	./imgui_demo.cpp	/^    float           LayoutOuterPadding = 0.0f;$/;"	m	struct:ExampleAssetsBrowser	typeref:typename:float	file:
LayoutSelectableSpacing	./imgui_demo.cpp	/^    float           LayoutSelectableSpacing = 0.0f;$/;"	m	struct:ExampleAssetsBrowser	typeref:typename:float	file:
LayoutType	./imgui_internal.h	/^    ImGuiLayoutType         LayoutType;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiLayoutType
LeftMostEnabledColumn	./imgui_internal.h	/^    ImGuiTableColumnIdx         LeftMostEnabledColumn;      \/\/ Index of left-most non-hidden c/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
LeftMostStretchedColumn	./imgui_internal.h	/^    ImGuiTableColumnIdx         LeftMostStretchedColumn;    \/\/ Index of left-most stretched co/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
License	./docs/README.md	/^License$/;"	s	chapter:Dear ImGui
LineGap	./misc/freetype/imgui_freetype.cpp	/^        float       LineGap;            \/\/ The spacing in pixels between one row's descent and/;"	m	struct:__anon21d590df0111::FontInfo	typeref:typename:float	file:
LineMaxY	./imgui_internal.h	/^    float               LineMinY, LineMaxY;$/;"	m	struct:ImGuiOldColumns	typeref:typename:float
LineMinY	./imgui_internal.h	/^    float               LineMinY, LineMaxY;$/;"	m	struct:ImGuiOldColumns	typeref:typename:float
LineOffsets	./imgui_demo.cpp	/^    ImVector<int>       LineOffsets; \/\/ Index to lines offset. We maintain this with AddLog() /;"	m	struct:ExampleAppLog	typeref:typename:ImVector<int>	file:
LineOffsets	./imgui_internal.h	/^    ImVector<int>   LineOffsets;$/;"	m	struct:ImGuiTextIndex	typeref:typename:ImVector<int>
LineSpacing	./misc/freetype/imgui_freetype.cpp	/^        float       LineSpacing;        \/\/ The baseline-to-baseline distance. Note that it usu/;"	m	struct:__anon21d590df0111::FontInfo	typeref:typename:float	file:
LinkProgram	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLLINKPROGRAMPROC              LinkProgram;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLLINKPROGRAMPROC
Linux and similar Unixes	./examples/example_sdl2_opengl3/README.md	/^## Linux and similar Unixes$/;"	s	chapter:How to Build
Linux and similar Unixes	./examples/example_sdl3_opengl3/README.md	/^## Linux and similar Unixes$/;"	s	chapter:How to Build
List of backends	./docs/BACKENDS.md	/^### List of backends$/;"	S	section:Dear ImGui: Backends
ListBox	./imgui_widgets.cpp	/^bool ImGui::ListBox(const char* label, int* current_item, bool (*old_getter)(void*, int, const c/;"	f	class:ImGui	typeref:typename:bool
ListBox	./imgui_widgets.cpp	/^bool ImGui::ListBox(const char* label, int* current_item, const char* (*getter)(void* user_data,/;"	f	class:ImGui	typeref:typename:bool
ListBox	./imgui_widgets.cpp	/^bool ImGui::ListBox(const char* label, int* current_item, const char* const items[], int items_c/;"	f	class:ImGui	typeref:typename:bool
ListClipper	./imgui_internal.h	/^    ImGuiListClipper*               ListClipper;$/;"	m	struct:ImGuiListClipperData	typeref:typename:ImGuiListClipper *
LoadFlags	./misc/freetype/imgui_freetype.cpp	/^        FT_Int32        LoadFlags;$/;"	m	struct:__anon21d590df0111::FreeTypeFont	typeref:typename:FT_Int32	file:
LoadGlyph	./misc/freetype/imgui_freetype.cpp	/^    const FT_Glyph_Metrics* FreeTypeFont::LoadGlyph(uint32_t codepoint)$/;"	f	class:__anon21d590df0111::FreeTypeFont	typeref:typename:const FT_Glyph_Metrics *
LoadIniSettingsFromDisk	./imgui.cpp	/^void ImGui::LoadIniSettingsFromDisk(const char* ini_filename)$/;"	f	class:ImGui	typeref:typename:void
LoadIniSettingsFromMemory	./imgui.cpp	/^void ImGui::LoadIniSettingsFromMemory(const char* ini_data, size_t ini_size)$/;"	f	class:ImGui	typeref:typename:void
Loading Font Data Embedded In Source Code	./docs/FONTS.md	/^## Loading Font Data Embedded In Source Code$/;"	s
Loading Font Data from Memory	./docs/FONTS.md	/^## Loading Font Data from Memory$/;"	s
LocalizationTable	./imgui_internal.h	/^    const char*             LocalizationTable[ImGuiLocKey_COUNT];$/;"	m	struct:ImGuiContext	typeref:typename:const char * []
LocalizeGetMsg	./imgui_internal.h	/^    inline const char*      LocalizeGetMsg(ImGuiLocKey key) { ImGuiContext& g = *GImGui; const c/;"	f	namespace:ImGui	typeref:typename:const char *
LocalizeRegisterEntries	./imgui.cpp	/^void ImGui::LocalizeRegisterEntries(const ImGuiLocEntry* entries, int count)$/;"	f	class:ImGui	typeref:typename:void
LockMarkEdited	./imgui_internal.h	/^    short                   LockMarkEdited;$/;"	m	struct:ImGuiContext	typeref:typename:short
LockThisFrame	./imgui_internal.h	/^    bool        LockThisFrame;      \/\/ Reading this key requires explicit owner id (until end /;"	m	struct:ImGuiKeyOwnerData	typeref:typename:bool
LockUntilRelease	./imgui_internal.h	/^    bool        LockUntilRelease;   \/\/ Reading this key requires explicit owner id (until key /;"	m	struct:ImGuiKeyOwnerData	typeref:typename:bool
LockWheelingWindow	./imgui.cpp	/^static void LockWheelingWindow(ImGuiWindow* window, float wheel_amount)$/;"	f	typeref:typename:void	file:
Locked	./imgui.h	/^    bool                        Locked;             \/\/ Marked as Locked by ImGui::NewFrame() s/;"	m	struct:ImFontAtlas	typeref:typename:bool
LogBegin	./imgui.cpp	/^void ImGui::LogBegin(ImGuiLogType type, int auto_open_depth)$/;"	f	class:ImGui	typeref:typename:void
LogBuffer	./imgui_internal.h	/^    ImGuiTextBuffer         LogBuffer;                          \/\/ Accumulation buffer when lo/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTextBuffer
LogButtons	./imgui.cpp	/^void ImGui::LogButtons()$/;"	f	class:ImGui	typeref:typename:void
LogDepthRef	./imgui_internal.h	/^    int                     LogDepthRef;$/;"	m	struct:ImGuiContext	typeref:typename:int
LogDepthToExpand	./imgui_internal.h	/^    int                     LogDepthToExpand;$/;"	m	struct:ImGuiContext	typeref:typename:int
LogDepthToExpandDefault	./imgui_internal.h	/^    int                     LogDepthToExpandDefault;            \/\/ Default\/stored value for L/;"	m	struct:ImGuiContext	typeref:typename:int
LogEnabled	./imgui_internal.h	/^    bool                    LogEnabled;                         \/\/ Currently capturing$/;"	m	struct:ImGuiContext	typeref:typename:bool
LogFile	./imgui_internal.h	/^    ImFileHandle            LogFile;                            \/\/ If != NULL log to stdout\/ /;"	m	struct:ImGuiContext	typeref:typename:ImFileHandle
LogFilename	./imgui.h	/^    const char* LogFilename;                    \/\/ = "imgui_log.txt"\/\/ Path to .log file (de/;"	m	struct:ImGuiIO	typeref:typename:const char *
LogFinish	./imgui.cpp	/^void ImGui::LogFinish()$/;"	f	class:ImGui	typeref:typename:void
LogLineFirstItem	./imgui_internal.h	/^    bool                    LogLineFirstItem;$/;"	m	struct:ImGuiContext	typeref:typename:bool
LogLinePosY	./imgui_internal.h	/^    float                   LogLinePosY;$/;"	m	struct:ImGuiContext	typeref:typename:float
LogNextPrefix	./imgui_internal.h	/^    const char*             LogNextPrefix;$/;"	m	struct:ImGuiContext	typeref:typename:const char *
LogNextSuffix	./imgui_internal.h	/^    const char*             LogNextSuffix;$/;"	m	struct:ImGuiContext	typeref:typename:const char *
LogRenderedText	./imgui.cpp	/^void ImGui::LogRenderedText(const ImVec2* ref_pos, const char* text, const char* text_end)$/;"	f	class:ImGui	typeref:typename:void
LogSetNextTextDecoration	./imgui.cpp	/^void ImGui::LogSetNextTextDecoration(const char* prefix, const char* suffix)$/;"	f	class:ImGui	typeref:typename:void
LogSliderDeadzone	./imgui.h	/^    float       LogSliderDeadzone;          \/\/ The size in pixels of the dead-zone around zero/;"	m	struct:ImGuiStyle	typeref:typename:float
LogText	./imgui.cpp	/^void ImGui::LogText(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
LogTextV	./imgui.cpp	/^static inline void LogTextV(ImGuiContext& g, const char* fmt, va_list args)$/;"	f	typeref:typename:void	file:
LogTextV	./imgui.cpp	/^void ImGui::LogTextV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
LogToBuffer	./imgui.cpp	/^void ImGui::LogToBuffer(int auto_open_depth)$/;"	f	class:ImGui	typeref:typename:void
LogToClipboard	./imgui.cpp	/^void ImGui::LogToClipboard(int auto_open_depth)$/;"	f	class:ImGui	typeref:typename:void
LogToFile	./imgui.cpp	/^void ImGui::LogToFile(int auto_open_depth, const char* filename)$/;"	f	class:ImGui	typeref:typename:void
LogToTTY	./imgui.cpp	/^void ImGui::LogToTTY(int auto_open_depth)$/;"	f	class:ImGui	typeref:typename:void
LogType	./imgui_internal.h	/^    ImGuiLogType            LogType;                            \/\/ Capture target$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiLogType
LoopRequestSetAll	./imgui_internal.h	/^    ImS8                    LoopRequestSetAll;  \/\/ -1: no operation, 0: clear all, 1: select a/;"	m	struct:ImGuiMultiSelectTempData	typeref:typename:ImS8
LossynessOffset	./imgui_internal.h	/^    float                           LossynessOffset;$/;"	m	struct:ImGuiListClipperData	typeref:typename:float
LunasvgPortState	./misc/freetype/imgui_freetype.cpp	/^struct LunasvgPortState$/;"	s	file:
MAP_ANALOG	./backends/imgui_impl_glfw.cpp	/^    #define MAP_ANALOG(/;"	d	file:
MAP_ANALOG	./backends/imgui_impl_win32.cpp	/^    #define MAP_ANALOG(/;"	d	file:
MAP_BUTTON	./backends/imgui_impl_glfw.cpp	/^    #define MAP_BUTTON(/;"	d	file:
MAP_BUTTON	./backends/imgui_impl_win32.cpp	/^    #define MAP_BUTTON(/;"	d	file:
MAP_LEGACY_NAV_INPUT_TO_KEY1	./imgui.cpp	/^        #define MAP_LEGACY_NAV_INPUT_TO_KEY1(/;"	d	file:
MAP_LEGACY_NAV_INPUT_TO_KEY2	./imgui.cpp	/^        #define MAP_LEGACY_NAV_INPUT_TO_KEY2(/;"	d	file:
MDT_ANGULAR_DPI	./backends/imgui_impl_win32.cpp	/^typedef enum { MDT_EFFECTIVE_DPI = 0, MDT_ANGULAR_DPI = 1, MDT_RAW_DPI = 2, MDT_DEFAULT = MDT_EF/;"	e	enum:__anon42ac1dbb0203	file:
MDT_DEFAULT	./backends/imgui_impl_win32.cpp	/^typedef enum { MDT_EFFECTIVE_DPI = 0, MDT_ANGULAR_DPI = 1, MDT_RAW_DPI = 2, MDT_DEFAULT = MDT_EF/;"	e	enum:__anon42ac1dbb0203	file:
MDT_EFFECTIVE_DPI	./backends/imgui_impl_win32.cpp	/^typedef enum { MDT_EFFECTIVE_DPI = 0, MDT_ANGULAR_DPI = 1, MDT_RAW_DPI = 2, MDT_DEFAULT = MDT_EF/;"	e	enum:__anon42ac1dbb0203	file:
MDT_RAW_DPI	./backends/imgui_impl_win32.cpp	/^typedef enum { MDT_EFFECTIVE_DPI = 0, MDT_ANGULAR_DPI = 1, MDT_RAW_DPI = 2, MDT_DEFAULT = MDT_EF/;"	e	enum:__anon42ac1dbb0203	file:
MEMALIGN	./backends/imgui_impl_wgpu.cpp	/^#define MEMALIGN(/;"	d	file:
MONITOR_DPI_TYPE	./backends/imgui_impl_win32.cpp	/^typedef enum { MDT_EFFECTIVE_DPI = 0, MDT_ANGULAR_DPI = 1, MDT_RAW_DPI = 2, MDT_DEFAULT = MDT_EF/;"	t	typeref:enum:__anon42ac1dbb0203	file:
MONOSPACE FONTS	./docs/FONTS.md	/^#### MONOSPACE FONTS$/;"	t	section:Font Links
MSAASamples	./backends/imgui_impl_vulkan.h	/^    VkSampleCountFlagBits           MSAASamples;                  \/\/ 0 defaults to VK_SAMPLE_C/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:VkSampleCountFlagBits
MTKViewDelegate	./examples/example_apple_metal/main.mm	/^@interface AppViewController () <MTKViewDelegate>$/;"	C	interface:AppViewController
MTL	./backends/imgui_impl_metal.h	/^IMGUI_IMPL_API bool ImGui_ImplMetal_CreateDeviceObjects(MTL::Device* device);$/;"	C	protocol:MTLDevice
MTL	./backends/imgui_impl_metal.h	/^IMGUI_IMPL_API bool ImGui_ImplMetal_CreateFontsTexture(MTL::Device* device);$/;"	C	protocol:MTLDevice
MTL	./backends/imgui_impl_metal.h	/^IMGUI_IMPL_API bool ImGui_ImplMetal_Init(MTL::Device* device);$/;"	C	protocol:MTLDevice
MTL	./backends/imgui_impl_metal.h	/^IMGUI_IMPL_API void ImGui_ImplMetal_NewFrame(MTL::RenderPassDescriptor* renderPassDescriptor);$/;"	C	protocol:MTLDevice
MTLDevice	./backends/imgui_impl_metal.h	/^@protocol MTLDevice, MTLCommandBuffer, MTLRenderCommandEncoder;$/;"	P	category:id	category:IMGUI_IMPL_API	category:MTLRenderPassDescriptor	category:ImDrawData	category:id	category:IMGUI_IMPL_API	category:id	category:endif	category:MTL	category:IMGUI_IMPL_API	category:MTL	category:ImDrawData	category:MTL	category:IMGUI_IMPL_API	category:MTL	category:endif
MTLRenderPassDescriptor	./backends/imgui_impl_metal.h	/^IMGUI_IMPL_API void ImGui_ImplMetal_NewFrame(MTLRenderPassDescriptor* renderPassDescriptor);$/;"	C	protocol:MTLDevice
MVP	./backends/imgui_impl_wgpu.cpp	/^    float MVP[4][4];$/;"	m	struct:Uniforms	typeref:typename:float[4][4]	file:
MainActivity	./examples/example_android_opengl3/android/app/src/main/java/MainActivity.kt	/^class MainActivity : NativeActivity() {$/;"	c	package:imgui.example.android
MainLoopForEmscripten	./examples/libs/emscripten/emscripten_mainloop_stub.h	/^static void MainLoopForEmscripten()     { MainLoopForEmscriptenP(); }$/;"	f	typeref:typename:void
MainLoopForEmscriptenP	./examples/libs/emscripten/emscripten_mainloop_stub.h	/^static std::function<void()>            MainLoopForEmscriptenP;$/;"	v	typeref:typename:std::function<void ()>
MainLoopStep	./examples/example_android_opengl3/main.cpp	/^void MainLoopStep()$/;"	f	typeref:typename:void
MainLoopStep	./examples/example_glut_opengl2/main.cpp	/^void MainLoopStep()$/;"	f	typeref:typename:void
MainWindowRenderBuffers	./backends/imgui_impl_vulkan.cpp	/^    ImGui_ImplVulkan_WindowRenderBuffers MainWindowRenderBuffers;$/;"	m	struct:ImGui_ImplVulkan_Data	typeref:typename:ImGui_ImplVulkan_WindowRenderBuffers	file:
MallocWrapper	./imgui.cpp	/^static void*   MallocWrapper(size_t size, void* user_data)    { IM_UNUSED(user_data); IM_UNUSED(/;"	f	typeref:typename:void *	file:
MallocWrapper	./imgui.cpp	/^static void*   MallocWrapper(size_t size, void* user_data)    { IM_UNUSED(user_data); return mal/;"	f	typeref:typename:void *	file:
Map	./imgui_internal.h	/^    ImGuiStorage    Map;        \/\/ ID->Index$/;"	m	struct:ImPool	typeref:typename:ImGuiStorage
MarkIniSettingsDirty	./imgui.cpp	/^void ImGui::MarkIniSettingsDirty()$/;"	f	class:ImGui	typeref:typename:void
MarkIniSettingsDirty	./imgui.cpp	/^void ImGui::MarkIniSettingsDirty(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
MarkItemEdited	./imgui.cpp	/^void ImGui::MarkItemEdited(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
Max	./imgui_internal.h	/^    ImVec2      Max;    \/\/ Lower-right$/;"	m	struct:ImRect	typeref:typename:ImVec2
Max	./imgui_internal.h	/^    int     Max;$/;"	m	struct:ImGuiListClipperRange	typeref:typename:int
MaxAdvanceWidth	./misc/freetype/imgui_freetype.cpp	/^        float       MaxAdvanceWidth;    \/\/ This field gives the maximum horizontal cursor adva/;"	m	struct:__anon21d590df0111::FontInfo	typeref:typename:float	file:
MaxX	./imgui_internal.h	/^    float                   MaxX;$/;"	m	struct:ImGuiTableColumn	typeref:typename:float
MemAlloc	./imgui.cpp	/^void* ImGui::MemAlloc(size_t size)$/;"	f	class:ImGui	typeref:typename:void *
MemFree	./imgui.cpp	/^void ImGui::MemFree(void* ptr)$/;"	f	class:ImGui	typeref:typename:void
MemoryCompacted	./imgui_internal.h	/^    bool                        MemoryCompacted;$/;"	m	struct:ImGuiTable	typeref:typename:bool
MemoryCompacted	./imgui_internal.h	/^    bool                    MemoryCompacted;                    \/\/ Set when window extraneous /;"	m	struct:ImGuiWindow	typeref:typename:bool
MemoryDrawListIdxCapacity	./imgui_internal.h	/^    int                     MemoryDrawListIdxCapacity;          \/\/ Backup of last idx\/vtx cou/;"	m	struct:ImGuiWindow	typeref:typename:int
MemoryDrawListVtxCapacity	./imgui_internal.h	/^    int                     MemoryDrawListVtxCapacity;$/;"	m	struct:ImGuiWindow	typeref:typename:int
MenuBarAppending	./imgui_internal.h	/^    bool                    MenuBarAppending;       \/\/ FIXME: Remove this$/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
MenuBarHeight	./imgui_internal.h	/^    float                   TitleBarHeight, MenuBarHeight;$/;"	m	struct:ImGuiWindow	typeref:typename:float
MenuBarOffset	./imgui_internal.h	/^    ImVec2                  MenuBarOffset;          \/\/ MenuBarOffset.x is sort of equivalent o/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
MenuBarOffsetMinVal	./imgui_internal.h	/^    ImVec2                      MenuBarOffsetMinVal;    \/\/ (Always on) This is not exposed pub/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
MenuBarRect	./imgui_internal.h	/^    ImRect      MenuBarRect() const     { float y1 = Pos.y + TitleBarHeight; return ImRect(Pos.x/;"	f	struct:ImGuiWindow	typeref:typename:ImRect
MenuColumns	./imgui_internal.h	/^    ImGuiMenuColumns        MenuColumns;            \/\/ Simplified columns storage for menu ite/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiMenuColumns
MenuItem	./imgui_widgets.cpp	/^bool ImGui::MenuItem(const char* label, const char* shortcut, bool selected, bool enabled)$/;"	f	class:ImGui	typeref:typename:bool
MenuItem	./imgui_widgets.cpp	/^bool ImGui::MenuItem(const char* label, const char* shortcut, bool* p_selected, bool enabled)$/;"	f	class:ImGui	typeref:typename:bool
MenuItemEx	./imgui_widgets.cpp	/^bool ImGui::MenuItemEx(const char* label, const char* icon, const char* shortcut, bool selected,/;"	f	class:ImGui	typeref:typename:bool
MenusIdSubmittedThisFrame	./imgui_internal.h	/^    ImVector<ImGuiID>       MenusIdSubmittedThisFrame;          \/\/ A list of menu IDs that wer/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiID>
Merge	./imgui_draw.cpp	/^void ImDrawListSplitter::Merge(ImDrawList* draw_list)$/;"	f	class:ImDrawListSplitter	typeref:typename:void
MergeGroup	./imgui_tables.cpp	/^    struct MergeGroup$/;"	s	function:ImGui::TableMergeDrawChannels	file:
MergeMode	./imgui.h	/^    bool            MergeMode;              \/\/ false    \/\/ Merge into previous ImFont, so yo/;"	m	struct:ImFontConfig	typeref:typename:bool
MetalBuffer	./backends/imgui_impl_metal.mm	/^@implementation MetalBuffer$/;"	I	struct:ImGui_ImplMetal_Data
MetalBuffer	./backends/imgui_impl_metal.mm	/^@interface MetalBuffer : NSObject$/;"	i
MetalContext	./backends/imgui_impl_metal.mm	/^@implementation MetalContext$/;"	I
MetalContext	./backends/imgui_impl_metal.mm	/^@interface MetalContext : NSObject$/;"	i
Metrics/Debugger->Fonts	./docs/FONTS.md	/^#### Metrics\/Debugger->Fonts$/;"	t	section:Debug Tools
MetricsActiveWindows	./imgui.h	/^    int         MetricsActiveWindows;               \/\/ Number of active windows$/;"	m	struct:ImGuiIO	typeref:typename:int
MetricsHelpMarker	./imgui.cpp	/^static void MetricsHelpMarker(const char* desc)$/;"	f	typeref:typename:void	file:
MetricsRenderIndices	./imgui.h	/^    int         MetricsRenderIndices;               \/\/ Indices output during last call to Rend/;"	m	struct:ImGuiIO	typeref:typename:int
MetricsRenderVertices	./imgui.h	/^    int         MetricsRenderVertices;              \/\/ Vertices output during last call to Ren/;"	m	struct:ImGuiIO	typeref:typename:int
MetricsRenderWindows	./imgui.h	/^    int         MetricsRenderWindows;               \/\/ Number of visible windows$/;"	m	struct:ImGuiIO	typeref:typename:int
MetricsTotalSurface	./imgui.h	/^    int                         MetricsTotalSurface;\/\/ 4     \/\/ out \/\/            \/\/ Tot/;"	m	struct:ImFont	typeref:typename:int
Min	./imgui_internal.h	/^    ImVec2      Min;    \/\/ Upper-left$/;"	m	struct:ImRect	typeref:typename:ImVec2
Min	./imgui_internal.h	/^    int     Min;$/;"	m	struct:ImGuiListClipperRange	typeref:typename:int
MinAllocationSize	./backends/imgui_impl_vulkan.h	/^    VkDeviceSize                    MinAllocationSize;      \/\/ Minimum allocation size. Set to/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:VkDeviceSize
MinColumnWidth	./imgui_internal.h	/^    float                       MinColumnWidth;$/;"	m	struct:ImGuiTable	typeref:typename:float
MinImageCount	./backends/imgui_impl_vulkan.h	/^    uint32_t                        MinImageCount;                \/\/ >= 2$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:uint32_t
MinX	./imgui_internal.h	/^    float                   MinX;                           \/\/ Absolute positions$/;"	m	struct:ImGuiTableColumn	typeref:typename:float
Miscellaneous	./docs/EXAMPLES.md	/^### Miscellaneous$/;"	S	section:Dear ImGui: Examples
ModalDimBgColor	./imgui_internal.h	/^    ImU32                   ModalDimBgColor;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImU32
Mode	./imgui_demo.cpp	/^            enum Mode$/;"	g	function:ShowDemoWindowWidgets	file:
Mode_Copy	./imgui_demo.cpp	/^                Mode_Copy,$/;"	e	enum:ShowDemoWindowWidgets::Mode	file:
Mode_Move	./imgui_demo.cpp	/^                Mode_Move,$/;"	e	enum:ShowDemoWindowWidgets::Mode	file:
Mode_Swap	./imgui_demo.cpp	/^                Mode_Swap$/;"	e	enum:ShowDemoWindowWidgets::Mode	file:
Mods	./imgui_internal.h	/^    ImU16                           Mods;               \/\/ Technically we'd only need 4-bits b/;"	m	struct:ImGuiKeyRoutingData	typeref:typename:ImU16
Monitor	./backends/imgui_impl_osx.mm	/^    id                          Monitor;$/;"	E	struct:ImGui_ImplOSX_Data
MouseButton	./imgui_internal.h	/^        ImGuiInputEventMouseButton  MouseButton;    \/\/ if Type == ImGuiInputEventType_MouseBut/;"	m	union:ImGuiInputEvent::__anon869d752f020a	typeref:typename:ImGuiInputEventMouseButton
MouseButtonToKey	./imgui_internal.h	/^    inline ImGuiKey         MouseButtonToKey(ImGuiMouseButton button)                   { IM_ASS/;"	f	namespace:ImGui	typeref:typename:ImGuiKey
MouseButtonsDown	./backends/imgui_impl_sdl2.cpp	/^    int                     MouseButtonsDown;$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:int	file:
MouseButtonsDown	./backends/imgui_impl_sdl3.cpp	/^    int                     MouseButtonsDown;$/;"	m	struct:ImGui_ImplSDL3_Data	typeref:typename:int	file:
MouseButtonsDown	./backends/imgui_impl_win32.cpp	/^    int                         MouseButtonsDown;$/;"	m	struct:ImGui_ImplWin32_Data	typeref:typename:int	file:
MouseCanUseGlobalState	./backends/imgui_impl_sdl2.cpp	/^    bool                    MouseCanUseGlobalState;$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:bool	file:
MouseCanUseGlobalState	./backends/imgui_impl_sdl3.cpp	/^    bool                    MouseCanUseGlobalState;$/;"	m	struct:ImGui_ImplSDL3_Data	typeref:typename:bool	file:
MouseClicked	./imgui.h	/^    bool        MouseClicked[5];                    \/\/ Mouse button went from !Down to Down (s/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseClickedCount	./imgui.h	/^    ImU16       MouseClickedCount[5];               \/\/ == 0 (not clicked), == 1 (same as Mouse/;"	m	struct:ImGuiIO	typeref:typename:ImU16[5]
MouseClickedLastCount	./imgui.h	/^    ImU16       MouseClickedLastCount[5];           \/\/ Count successive number of clicks. Stay/;"	m	struct:ImGuiIO	typeref:typename:ImU16[5]
MouseClickedPos	./imgui.h	/^    ImVec2      MouseClickedPos[5];                 \/\/ Position at time of clicking$/;"	m	struct:ImGuiIO	typeref:typename:ImVec2[5]
MouseClickedTime	./imgui.h	/^    double      MouseClickedTime[5];                \/\/ Time of last click (used to figure out /;"	m	struct:ImGuiIO	typeref:typename:double[5]
MouseCtrlLeftAsRightClick	./imgui.h	/^    bool        MouseCtrlLeftAsRightClick;          \/\/ (OSX) Set to true when the current clic/;"	m	struct:ImGuiIO	typeref:typename:bool
MouseCursor	./imgui_internal.h	/^    ImGuiMouseCursor        MouseCursor;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiMouseCursor
MouseCursorHidden	./backends/imgui_impl_osx.mm	/^    bool                        MouseCursorHidden;$/;"	E	struct:ImGui_ImplOSX_Data
MouseCursorInvisible	./backends/imgui_impl_allegro5.cpp	/^    ALLEGRO_MOUSE_CURSOR*       MouseCursorInvisible;$/;"	m	struct:ImGui_ImplAllegro5_Data	typeref:typename:ALLEGRO_MOUSE_CURSOR *	file:
MouseCursorScale	./imgui.h	/^    float       MouseCursorScale;           \/\/ Scale software rendered mouse cursor (when io.M/;"	m	struct:ImGuiStyle	typeref:typename:float
MouseCursors	./backends/imgui_impl_glfw.cpp	/^    GLFWcursor*             MouseCursors[ImGuiMouseCursor_COUNT];$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWcursor * []	file:
MouseCursors	./backends/imgui_impl_osx.mm	/^    NSCursor*                   MouseCursors[ImGuiMouseCursor_COUNT];$/;"	E	struct:ImGui_ImplOSX_Data
MouseCursors	./backends/imgui_impl_sdl2.cpp	/^    SDL_Cursor*             MouseCursors[ImGuiMouseCursor_COUNT];$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:SDL_Cursor * []	file:
MouseCursors	./backends/imgui_impl_sdl3.cpp	/^    SDL_Cursor*             MouseCursors[ImGuiMouseCursor_COUNT];$/;"	m	struct:ImGui_ImplSDL3_Data	typeref:typename:SDL_Cursor * []	file:
MouseDelta	./imgui.h	/^    ImVec2      MouseDelta;                         \/\/ Mouse delta. Note that this is zero if /;"	m	struct:ImGuiIO	typeref:typename:ImVec2
MouseDoubleClickMaxDist	./imgui.h	/^    float       MouseDoubleClickMaxDist;        \/\/ = 6.0f           \/\/ Distance threshold to/;"	m	struct:ImGuiIO	typeref:typename:float
MouseDoubleClickTime	./imgui.h	/^    float       MouseDoubleClickTime;           \/\/ = 0.30f          \/\/ Time for a double-cli/;"	m	struct:ImGuiIO	typeref:typename:float
MouseDoubleClicked	./imgui.h	/^    bool        MouseDoubleClicked[5];              \/\/ Has mouse button been double-clicked? (/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseDown	./imgui.h	/^    bool        MouseDown[5];                       \/\/ Mouse buttons: 0=left, 1=right, 2=middl/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseDownDuration	./imgui.h	/^    float       MouseDownDuration[5];               \/\/ Duration the mouse button has been down/;"	m	struct:ImGuiIO	typeref:typename:float[5]
MouseDownDurationPrev	./imgui.h	/^    float       MouseDownDurationPrev[5];           \/\/ Previous time the mouse button has been/;"	m	struct:ImGuiIO	typeref:typename:float[5]
MouseDownOwned	./imgui.h	/^    bool        MouseDownOwned[5];                  \/\/ Track if button was clicked inside a de/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseDownOwnedUnlessPopupClose	./imgui.h	/^    bool        MouseDownOwnedUnlessPopupClose[5];  \/\/ Track if button was clicked inside a de/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseDragMaxDistanceSqr	./imgui.h	/^    float       MouseDragMaxDistanceSqr[5];         \/\/ Squared maximum distance of how much mo/;"	m	struct:ImGuiIO	typeref:typename:float[5]
MouseDragThreshold	./imgui.h	/^    float       MouseDragThreshold;             \/\/ = 6.0f           \/\/ Distance threshold be/;"	m	struct:ImGuiIO	typeref:typename:float
MouseDrawCursor	./imgui.h	/^    bool        MouseDrawCursor;                \/\/ = false          \/\/ Request ImGui to draw/;"	m	struct:ImGuiIO	typeref:typename:bool
MouseHwnd	./backends/imgui_impl_win32.cpp	/^    HWND                        MouseHwnd;$/;"	m	struct:ImGui_ImplWin32_Data	typeref:typename:HWND	file:
MouseLastCursor	./backends/imgui_impl_sdl2.cpp	/^    SDL_Cursor*             MouseLastCursor;$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:SDL_Cursor *	file:
MouseLastCursor	./backends/imgui_impl_sdl3.cpp	/^    SDL_Cursor*             MouseLastCursor;$/;"	m	struct:ImGui_ImplSDL3_Data	typeref:typename:SDL_Cursor *	file:
MouseLastLeaveFrame	./backends/imgui_impl_sdl2.cpp	/^    int                     MouseLastLeaveFrame;$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:int	file:
MouseLastValidPos	./imgui_internal.h	/^    ImVec2                  MouseLastValidPos;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
MousePendingLeaveFrame	./backends/imgui_impl_sdl3.cpp	/^    int                     MousePendingLeaveFrame;$/;"	m	struct:ImGui_ImplSDL3_Data	typeref:typename:int	file:
MousePos	./imgui.h	/^    ImVec2      MousePos;                           \/\/ Mouse position, in pixels. Set to ImVec/;"	m	struct:ImGuiIO	typeref:typename:ImVec2
MousePos	./imgui_internal.h	/^        ImGuiInputEventMousePos     MousePos;       \/\/ if Type == ImGuiInputEventType_MousePos$/;"	m	union:ImGuiInputEvent::__anon869d752f020a	typeref:typename:ImGuiInputEventMousePos
MousePosPrev	./imgui.h	/^    ImVec2      MousePosPrev;                       \/\/ Previous mouse position (note that Mous/;"	m	struct:ImGuiIO	typeref:typename:ImVec2
MouseReleased	./imgui.h	/^    bool        MouseReleased[5];                   \/\/ Mouse button went from Down to !Down$/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseSource	./imgui.h	/^    ImGuiMouseSource MouseSource;                   \/\/ Mouse actual input peripheral (Mouse\/T/;"	m	struct:ImGuiIO	typeref:typename:ImGuiMouseSource
MouseSource	./imgui_internal.h	/^struct ImGuiInputEventMouseButton   { int Button; bool Down; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMouseButton	typeref:typename:ImGuiMouseSource
MouseSource	./imgui_internal.h	/^struct ImGuiInputEventMousePos      { float PosX, PosY; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMousePos	typeref:typename:ImGuiMouseSource
MouseSource	./imgui_internal.h	/^struct ImGuiInputEventMouseWheel    { float WheelX, WheelY; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMouseWheel	typeref:typename:ImGuiMouseSource
MouseStationaryTimer	./imgui_internal.h	/^    float                   MouseStationaryTimer;               \/\/ Time the mouse has been sta/;"	m	struct:ImGuiContext	typeref:typename:float
MouseTrackedArea	./backends/imgui_impl_win32.cpp	/^    int                         MouseTrackedArea;   \/\/ 0: not tracked, 1: client are, 2: non-c/;"	m	struct:ImGui_ImplWin32_Data	typeref:typename:int	file:
MouseWheel	./imgui.h	/^    float       MouseWheel;                         \/\/ Mouse wheel Vertical: 1 unit scrolls ab/;"	m	struct:ImGuiIO	typeref:typename:float
MouseWheel	./imgui_internal.h	/^        ImGuiInputEventMouseWheel   MouseWheel;     \/\/ if Type == ImGuiInputEventType_MouseWhe/;"	m	union:ImGuiInputEvent::__anon869d752f020a	typeref:typename:ImGuiInputEventMouseWheel
MouseWheelH	./imgui.h	/^    float       MouseWheelH;                        \/\/ Mouse wheel Horizontal. >0 scrolls Left/;"	m	struct:ImGuiIO	typeref:typename:float
MouseWheelRequestAxisSwap	./imgui.h	/^    bool        MouseWheelRequestAxisSwap;          \/\/ On a non-Mac system, holding SHIFT requ/;"	m	struct:ImGuiIO	typeref:typename:bool
MouseWindow	./backends/imgui_impl_glfw.cpp	/^    GLFWwindow*             MouseWindow;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWwindow *	file:
MouseWindowID	./backends/imgui_impl_sdl2.cpp	/^    Uint32                  MouseWindowID;$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:Uint32	file:
MouseWindowID	./backends/imgui_impl_sdl3.cpp	/^    Uint32                  MouseWindowID;$/;"	m	struct:ImGui_ImplSDL3_Data	typeref:typename:Uint32	file:
MoveAll	./imgui_demo.cpp	/^    void MoveAll(int src, int dst)$/;"	f	struct:ExampleDualListBox	typeref:typename:void	file:
MoveId	./imgui_internal.h	/^    ImGuiID                 MoveId;                             \/\/ == window->GetID("#MOVE")$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
MoveSelected	./imgui_demo.cpp	/^    void MoveSelected(int src, int dst)$/;"	f	struct:ExampleDualListBox	typeref:typename:void	file:
MovingWindow	./imgui_internal.h	/^    ImGuiWindow*            MovingWindow;                       \/\/ Track the window we clicked/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
MultiSelectAddSetAll	./imgui_widgets.cpp	/^void ImGui::MultiSelectAddSetAll(ImGuiMultiSelectTempData* ms, bool selected)$/;"	f	class:ImGui	typeref:typename:void
MultiSelectAddSetRange	./imgui_widgets.cpp	/^void ImGui::MultiSelectAddSetRange(ImGuiMultiSelectTempData* ms, bool selected, int range_dir, I/;"	f	class:ImGui	typeref:typename:void
MultiSelectItemFooter	./imgui_widgets.cpp	/^void ImGui::MultiSelectItemFooter(ImGuiID id, bool* p_selected, bool* p_pressed)$/;"	f	class:ImGui	typeref:typename:void
MultiSelectItemHeader	./imgui_widgets.cpp	/^void ImGui::MultiSelectItemHeader(ImGuiID id, bool* p_selected, ImGuiButtonFlags* p_button_flags/;"	f	class:ImGui	typeref:typename:void
MultiSelectStorage	./imgui_internal.h	/^    ImPool<ImGuiMultiSelectState>   MultiSelectStorage;$/;"	m	struct:ImGuiContext	typeref:typename:ImPool<ImGuiMultiSelectState>
MultiSelectTempData	./imgui_internal.h	/^    ImVector<ImGuiMultiSelectTempData> MultiSelectTempData;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiMultiSelectTempData>
MultiSelectTempDataStacked	./imgui_internal.h	/^    int                             MultiSelectTempDataStacked; \/\/ Temporary multi-select data/;"	m	struct:ImGuiContext	typeref:typename:int
MyCallback	./imgui_demo.cpp	/^                static int MyCallback(ImGuiInputTextCallbackData* data)$/;"	f	struct:ShowDemoWindowWidgets::Funcs	typeref:typename:int	file:
MyDocument	./imgui_demo.cpp	/^    MyDocument(int uid, const char* name, bool open = true, const ImVec4& color = ImVec4(1.0f, 1/;"	f	struct:MyDocument	file:
MyDocument	./imgui_demo.cpp	/^struct MyDocument$/;"	s	file:
MyInputTextMultiline	./imgui_demo.cpp	/^                static bool MyInputTextMultiline(const char* label, ImVector<char>* my_str, cons/;"	f	struct:ShowDemoWindowWidgets::Funcs	typeref:typename:bool	file:
MyItem	./imgui_demo.cpp	/^struct MyItem$/;"	s	namespace:__anon38b7fb720511	file:
MyItemColumnID	./imgui_demo.cpp	/^enum MyItemColumnID$/;"	g	namespace:__anon38b7fb720511	file:
MyItemColumnID_Action	./imgui_demo.cpp	/^    MyItemColumnID_Action,$/;"	e	enum:__anon38b7fb720511::MyItemColumnID	file:
MyItemColumnID_Description	./imgui_demo.cpp	/^    MyItemColumnID_Description$/;"	e	enum:__anon38b7fb720511::MyItemColumnID	file:
MyItemColumnID_ID	./imgui_demo.cpp	/^    MyItemColumnID_ID,$/;"	e	enum:__anon38b7fb720511::MyItemColumnID	file:
MyItemColumnID_Name	./imgui_demo.cpp	/^    MyItemColumnID_Name,$/;"	e	enum:__anon38b7fb720511::MyItemColumnID	file:
MyItemColumnID_Quantity	./imgui_demo.cpp	/^    MyItemColumnID_Quantity,$/;"	e	enum:__anon38b7fb720511::MyItemColumnID	file:
MyResizeCallback	./imgui_demo.cpp	/^                static int MyResizeCallback(ImGuiInputTextCallbackData* data)$/;"	f	struct:ShowDemoWindowWidgets::Funcs	typeref:typename:int	file:
MyTreeNode	./imgui_demo.cpp	/^            struct MyTreeNode$/;"	s	function:ShowDemoWindowTables	file:
NAV_ACTIVATE_HIGHLIGHT_TIMER	./imgui.cpp	/^static const float NAV_ACTIVATE_HIGHLIGHT_TIMER             = 0.10f;    \/\/ Time to highlight a/;"	v	typeref:typename:const float	file:
NAV_WINDOWING_HIGHLIGHT_DELAY	./imgui.cpp	/^static const float NAV_WINDOWING_HIGHLIGHT_DELAY            = 0.20f;    \/\/ Time before the hig/;"	v	typeref:typename:const float	file:
NAV_WINDOWING_LIST_APPEAR_DELAY	./imgui.cpp	/^static const float NAV_WINDOWING_LIST_APPEAR_DELAY          = 0.15f;    \/\/ Time before the win/;"	v	typeref:typename:const float	file:
NOMINMAX	./backends/imgui_impl_vulkan.h	/^#define NOMINMAX$/;"	d
NOMINMAX	./imgui.cpp	/^#define NOMINMAX$/;"	d	file:
NSCursor	./backends/imgui_impl_osx.mm	/^@interface NSCursor()$/;"	i	struct:ImGui_ImplOSX_Data	category:id
NSMainStoryboardFile	./examples/example_apple_metal/macOS/Info-macOS.plist	/^	<key>NSMainStoryboardFile<\/key>$/;"	k
NSPrincipalClass	./examples/example_apple_metal/macOS/Info-macOS.plist	/^	<key>NSPrincipalClass<\/key>$/;"	k
NUM_BACK_BUFFERS	./examples/example_win32_directx12/main.cpp	/^static int const                    NUM_BACK_BUFFERS = 3;$/;"	v	typeref:typename:int const	file:
NUM_FRAMES_IN_FLIGHT	./examples/example_win32_directx12/main.cpp	/^static int const                    NUM_FRAMES_IN_FLIGHT = 3;$/;"	v	typeref:typename:int const	file:
Name	./imgui.h	/^    char            Name[40];               \/\/ Name (strictly to ease debugging)$/;"	m	struct:ImFontConfig	typeref:typename:char[40]
Name	./imgui_demo.cpp	/^                const char*     Name;$/;"	m	struct:ShowDemoWindowTables::MyTreeNode	typeref:typename:const char *	file:
Name	./imgui_demo.cpp	/^    char                        Name[28] = "";$/;"	m	struct:ExampleTreeNode	typeref:typename:char[28]	file:
Name	./imgui_demo.cpp	/^    char        Name[32];   \/\/ Document title$/;"	m	struct:MyDocument	typeref:typename:char[32]	file:
Name	./imgui_demo.cpp	/^    const char*     Name;       \/\/ Member name$/;"	m	struct:ExampleMemberInfo	typeref:typename:const char *	file:
Name	./imgui_demo.cpp	/^    const char* Name;$/;"	m	struct:__anon38b7fb720511::MyItem	typeref:typename:const char *	file:
Name	./imgui_demo.cpp	/^    struct EnumDesc { ImGuiTableFlags Value; const char* Name; const char* Tooltip; };$/;"	m	struct:EditTableSizingFlags::EnumDesc	typeref:typename:const char *	file:
Name	./imgui_internal.h	/^    char*                   Name;                               \/\/ Window name, owned by the w/;"	m	struct:ImGuiWindow	typeref:typename:char *
Name	./imgui_internal.h	/^    const char* Name;           \/\/ Short descriptive name for the type, for debugging$/;"	m	struct:ImGuiDataTypeInfo	typeref:typename:const char *
NameBufLen	./imgui_internal.h	/^    int                     NameBufLen;                         \/\/ Size of buffer storing Name/;"	m	struct:ImGuiWindow	typeref:typename:int
NameOffset	./imgui_internal.h	/^    ImS16                   NameOffset;                     \/\/ Offset into parent ColumnsNames/;"	m	struct:ImGuiTableColumn	typeref:typename:ImS16
NameOffset	./imgui_internal.h	/^    ImS32               NameOffset;             \/\/ When Window==NULL, offset to name within pa/;"	m	struct:ImGuiTabItem	typeref:typename:ImS32
NavActivateDownId	./imgui_internal.h	/^    ImGuiID                 NavActivateDownId;                  \/\/ ~~ IsKeyDown(ImGuiKey_Space/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavActivateFlags	./imgui_internal.h	/^    ImGuiActivateFlags      NavActivateFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiActivateFlags
NavActivateId	./imgui_internal.h	/^    ImGuiID                 NavActivateId;                      \/\/ ~~ (g.ActiveId == 0) && (Is/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavActivatePressedId	./imgui_internal.h	/^    ImGuiID                 NavActivatePressedId;               \/\/ ~~ IsKeyPressed(ImGuiKey_Sp/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavActive	./imgui.h	/^    bool        NavActive;                          \/\/ Keyboard\/Gamepad navigation is current/;"	m	struct:ImGuiIO	typeref:typename:bool
NavAnyRequest	./imgui_internal.h	/^    bool                    NavAnyRequest;                      \/\/ ~~ NavMoveRequest || NavIni/;"	m	struct:ImGuiContext	typeref:typename:bool
NavApplyItemToResult	./imgui.cpp	/^static void ImGui::NavApplyItemToResult(ImGuiNavItemData* result)$/;"	f	class:ImGui	typeref:typename:void	file:
NavBiasScoringRect	./imgui.cpp	/^static void NavBiasScoringRect(ImRect& r, ImVec2& preferred_pos_rel, ImGuiDir move_dir, ImGuiNav/;"	f	typeref:typename:void	file:
NavCalcPreferredRefPos	./imgui.cpp	/^static ImVec2 ImGui::NavCalcPreferredRefPos()$/;"	f	class:ImGui	typeref:typename:ImVec2	file:
NavClearPreferredPosForAxis	./imgui.cpp	/^void ImGui::NavClearPreferredPosForAxis(ImGuiAxis axis)$/;"	f	class:ImGui	typeref:typename:void
NavDisableHighlight	./imgui_internal.h	/^    bool                    NavDisableHighlight;                \/\/ When user starts using mous/;"	m	struct:ImGuiContext	typeref:typename:bool
NavDisableMouseHover	./imgui_internal.h	/^    bool                    NavDisableMouseHover;               \/\/ When user starts using game/;"	m	struct:ImGuiContext	typeref:typename:bool
NavEndFrame	./imgui.cpp	/^static void ImGui::NavEndFrame()$/;"	f	class:ImGui	typeref:typename:void	file:
NavFocusRoute	./imgui_internal.h	/^    ImVector<ImGuiFocusScopeData> NavFocusRoute;                \/\/ Reversed copy focus scope s/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiFocusScopeData>
NavFocusScopeId	./imgui_internal.h	/^    ImGuiID                 NavFocusScopeId;                    \/\/ Focused focus scope (e.g. s/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavHideHighlightOneFrame	./imgui_internal.h	/^    bool                    NavHideHighlightOneFrame;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
NavHighlightActivated	./imgui.cpp	/^void ImGui::NavHighlightActivated(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
NavHighlightActivatedId	./imgui_internal.h	/^    ImGuiID                 NavHighlightActivatedId;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavHighlightActivatedTimer	./imgui_internal.h	/^    float                   NavHighlightActivatedTimer;$/;"	m	struct:ImGuiContext	typeref:typename:float
NavId	./imgui_internal.h	/^    ImGuiID                 NavId;                              \/\/ Focused item for navigation$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavIdIsAlive	./imgui_internal.h	/^    bool                    NavIdIsAlive;                       \/\/ Nav widget has been seen th/;"	m	struct:ImGuiContext	typeref:typename:bool
NavIdItem	./imgui.h	/^    ImGuiSelectionUserData      NavIdItem;      \/\/  ms:w, app:r     \/                \/\/ (If/;"	m	struct:ImGuiMultiSelectIO	typeref:typename:ImGuiSelectionUserData
NavIdItem	./imgui_internal.h	/^    ImGuiSelectionUserData  NavIdItem;          \/\/ SetNextItemSelectionUserData() value for Na/;"	m	struct:ImGuiMultiSelectState	typeref:typename:ImGuiSelectionUserData
NavIdPassedBy	./imgui_internal.h	/^    bool                    NavIdPassedBy;$/;"	m	struct:ImGuiMultiSelectTempData	typeref:typename:bool
NavIdSelected	./imgui.h	/^    bool                        NavIdSelected;  \/\/  ms:w, app:r     \/        app:r   \/\/ (If/;"	m	struct:ImGuiMultiSelectIO	typeref:typename:bool
NavIdSelected	./imgui_internal.h	/^    ImS8                    NavIdSelected;      \/\/ -1 (don't have) or true\/false$/;"	m	struct:ImGuiMultiSelectState	typeref:typename:ImS8
NavInitRequest	./imgui_internal.h	/^    bool                    NavInitRequest;                     \/\/ Init request for appearing /;"	m	struct:ImGuiContext	typeref:typename:bool
NavInitRequestApplyResult	./imgui.cpp	/^void ImGui::NavInitRequestApplyResult()$/;"	f	class:ImGui	typeref:typename:void
NavInitRequestFromMove	./imgui_internal.h	/^    bool                    NavInitRequestFromMove;$/;"	m	struct:ImGuiContext	typeref:typename:bool
NavInitResult	./imgui_internal.h	/^    ImGuiNavItemData        NavInitResult;                      \/\/ Init request result (first /;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavItemData
NavInitWindow	./imgui.cpp	/^void ImGui::NavInitWindow(ImGuiWindow* window, bool force_reinit)$/;"	f	class:ImGui	typeref:typename:void
NavInputSource	./imgui_internal.h	/^    ImGuiInputSource        NavInputSource;                     \/\/ Keyboard or Gamepad mode? T/;"	m	struct:ImGuiContext	typeref:typename:ImGuiInputSource
NavInputs	./imgui.h	/^    float       NavInputs[ImGuiNavInput_COUNT];     \/\/ [LEGACY] Since 1.88, NavInputs[] was re/;"	m	struct:ImGuiIO	typeref:typename:float[]
NavIsScrollPushableX	./imgui_internal.h	/^    bool                    NavIsScrollPushableX;   \/\/ Set when current work location may be s/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
NavJustMovedFromFocusScopeId	./imgui_internal.h	/^    ImGuiID                 NavJustMovedFromFocusScopeId;       \/\/ Just navigated from this fo/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavJustMovedToFocusScopeId	./imgui_internal.h	/^    ImGuiID                 NavJustMovedToFocusScopeId;         \/\/ Just navigated to this focu/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavJustMovedToHasSelectionData	./imgui_internal.h	/^    bool                    NavJustMovedToHasSelectionData;     \/\/ Copy of move result's InFla/;"	m	struct:ImGuiContext	typeref:typename:bool
NavJustMovedToId	./imgui_internal.h	/^    ImGuiID                 NavJustMovedToId;                   \/\/ Just navigated to this id (/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavJustMovedToIsTabbing	./imgui_internal.h	/^    bool                    NavJustMovedToIsTabbing;            \/\/ Copy of ImGuiNavMoveFlags_I/;"	m	struct:ImGuiContext	typeref:typename:bool
NavJustMovedToKeyMods	./imgui_internal.h	/^    ImGuiKeyChord           NavJustMovedToKeyMods;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKeyChord
NavLastChildNavWindow	./imgui_internal.h	/^    ImGuiWindow*            NavLastChildNavWindow;              \/\/ When going to the menu bar,/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
NavLastIds	./imgui_internal.h	/^    ImGuiID                 NavLastIds[ImGuiNavLayer_COUNT];    \/\/ Last known NavId for this w/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID[]
NavLastValidSelectionUserData	./imgui_internal.h	/^    ImGuiSelectionUserData  NavLastValidSelectionUserData;      \/\/ Last valid data passed to S/;"	m	struct:ImGuiContext	typeref:typename:ImGuiSelectionUserData
NavLayer	./imgui_internal.h	/^    ImGuiNavLayer           NavLayer;                           \/\/ Focused layer (main scrolli/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavLayer
NavLayerCurrent	./imgui_internal.h	/^    ImGuiNavLayer           NavLayerCurrent;        \/\/ Current layer, 0..31 (we currently only/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiNavLayer
NavLayerCurrent	./imgui_internal.h	/^    ImS8                    NavLayerCurrent;                \/\/ ImGuiNavLayer in 1 byte$/;"	m	struct:ImGuiTableColumn	typeref:typename:ImS8
NavLayersActiveMask	./imgui_internal.h	/^    short                   NavLayersActiveMask;    \/\/ Which layers have been written to (resu/;"	m	struct:ImGuiWindowTempData	typeref:typename:short
NavLayersActiveMaskNext	./imgui_internal.h	/^    short                   NavLayersActiveMaskNext;\/\/ Which layers have been written to (accu/;"	m	struct:ImGuiWindowTempData	typeref:typename:short
NavMousePosDirty	./imgui_internal.h	/^    bool                    NavMousePosDirty;                   \/\/ When set we will update mou/;"	m	struct:ImGuiContext	typeref:typename:bool
NavMoveClipDir	./imgui_internal.h	/^    ImGuiDir                NavMoveClipDir;                     \/\/ FIXME-NAV: Describe the pur/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDir
NavMoveDir	./imgui_internal.h	/^    ImGuiDir                NavMoveDir;                         \/\/ Direction of the move reque/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDir
NavMoveDirForDebug	./imgui_internal.h	/^    ImGuiDir                NavMoveDirForDebug;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDir
NavMoveFlags	./imgui_internal.h	/^    ImGuiNavMoveFlags       NavMoveFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavMoveFlags
NavMoveForwardToNextFrame	./imgui_internal.h	/^    bool                    NavMoveForwardToNextFrame;$/;"	m	struct:ImGuiContext	typeref:typename:bool
NavMoveKeyMods	./imgui_internal.h	/^    ImGuiKeyChord           NavMoveKeyMods;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKeyChord
NavMoveRequestApplyResult	./imgui.cpp	/^void ImGui::NavMoveRequestApplyResult()$/;"	f	class:ImGui	typeref:typename:void
NavMoveRequestButNoResultYet	./imgui.cpp	/^bool ImGui::NavMoveRequestButNoResultYet()$/;"	f	class:ImGui	typeref:typename:bool
NavMoveRequestCancel	./imgui.cpp	/^void ImGui::NavMoveRequestCancel()$/;"	f	class:ImGui	typeref:typename:void
NavMoveRequestForward	./imgui.cpp	/^void ImGui::NavMoveRequestForward(ImGuiDir move_dir, ImGuiDir clip_dir, ImGuiNavMoveFlags move_f/;"	f	class:ImGui	typeref:typename:void
NavMoveRequestResolveWithLastItem	./imgui.cpp	/^void ImGui::NavMoveRequestResolveWithLastItem(ImGuiNavItemData* result)$/;"	f	class:ImGui	typeref:typename:void
NavMoveRequestResolveWithPastTreeNode	./imgui.cpp	/^void ImGui::NavMoveRequestResolveWithPastTreeNode(ImGuiNavItemData* result, ImGuiTreeNodeStackDa/;"	f	class:ImGui	typeref:typename:void
NavMoveRequestSubmit	./imgui.cpp	/^void ImGui::NavMoveRequestSubmit(ImGuiDir move_dir, ImGuiDir clip_dir, ImGuiNavMoveFlags move_fl/;"	f	class:ImGui	typeref:typename:void
NavMoveRequestTryWrapping	./imgui.cpp	/^void ImGui::NavMoveRequestTryWrapping(ImGuiWindow* window, ImGuiNavMoveFlags wrap_flags)$/;"	f	class:ImGui	typeref:typename:void
NavMoveResultLocal	./imgui_internal.h	/^    ImGuiNavItemData        NavMoveResultLocal;                 \/\/ Best move request candidate/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavItemData
NavMoveResultLocalVisible	./imgui_internal.h	/^    ImGuiNavItemData        NavMoveResultLocalVisible;          \/\/ Best move request candidate/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavItemData
NavMoveResultOther	./imgui_internal.h	/^    ImGuiNavItemData        NavMoveResultOther;                 \/\/ Best move request candidate/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavItemData
NavMoveScoringItems	./imgui_internal.h	/^    bool                    NavMoveScoringItems;                \/\/ Move request submitted, sti/;"	m	struct:ImGuiContext	typeref:typename:bool
NavMoveScrollFlags	./imgui_internal.h	/^    ImGuiScrollFlags        NavMoveScrollFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiScrollFlags
NavMoveSubmitted	./imgui_internal.h	/^    bool                    NavMoveSubmitted;                   \/\/ Move request submitted, wil/;"	m	struct:ImGuiContext	typeref:typename:bool
NavNextActivateFlags	./imgui_internal.h	/^    ImGuiActivateFlags      NavNextActivateFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiActivateFlags
NavNextActivateId	./imgui_internal.h	/^    ImGuiID                 NavNextActivateId;                  \/\/ Set by ActivateItem(), queu/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavPreferredScoringPosRel	./imgui_internal.h	/^    ImVec2                  NavPreferredScoringPosRel[ImGuiNavLayer_COUNT]; \/\/ Preferred X\/Y /;"	m	struct:ImGuiWindow	typeref:typename:ImVec2[]
NavProcessItem	./imgui.cpp	/^static void ImGui::NavProcessItem()$/;"	f	class:ImGui	typeref:typename:void	file:
NavProcessItemForTabbingRequest	./imgui.cpp	/^void ImGui::NavProcessItemForTabbingRequest(ImGuiID id, ImGuiItemFlags item_flags, ImGuiNavMoveF/;"	f	class:ImGui	typeref:typename:void
NavRect	./imgui_internal.h	/^    ImRect                  NavRect;            \/\/ Navigation scoring rectangle (not displayed/;"	m	struct:ImGuiLastItemData	typeref:typename:ImRect
NavRect	./imgui_internal.h	/^    ImRect                  NavRect;    \/\/ Used for nav landing$/;"	m	struct:ImGuiTreeNodeStackData	typeref:typename:ImRect
NavRectRel	./imgui_internal.h	/^    ImRect                  NavRectRel[ImGuiNavLayer_COUNT];    \/\/ Reference rectangle, in win/;"	m	struct:ImGuiWindow	typeref:typename:ImRect[]
NavRestoreHighlightAfterMove	./imgui.cpp	/^void ImGui::NavRestoreHighlightAfterMove()$/;"	f	class:ImGui	typeref:typename:void
NavRestoreLastChildNavWindow	./imgui.cpp	/^static ImGuiWindow* ImGui::NavRestoreLastChildNavWindow(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *	file:
NavRestoreLayer	./imgui.cpp	/^void ImGui::NavRestoreLayer(ImGuiNavLayer layer)$/;"	f	class:ImGui	typeref:typename:void
NavRootFocusScopeId	./imgui_internal.h	/^    ImGuiID                 NavRootFocusScopeId;                \/\/ Focus Scope ID at the time /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
NavSaveLastChildNavWindowIntoParent	./imgui.cpp	/^static void ImGui::NavSaveLastChildNavWindowIntoParent(ImGuiWindow* nav_window)$/;"	f	class:ImGui	typeref:typename:void	file:
NavScoreItem	./imgui.cpp	/^static bool ImGui::NavScoreItem(ImGuiNavItemData* result)$/;"	f	class:ImGui	typeref:typename:bool	file:
NavScoreItemDistInterval	./imgui.cpp	/^static float inline NavScoreItemDistInterval(float cand_min, float cand_max, float curr_min, flo/;"	f	typeref:typename:float	file:
NavScoringDebugCount	./imgui_internal.h	/^    int                     NavScoringDebugCount;               \/\/ Metrics for debugging$/;"	m	struct:ImGuiContext	typeref:typename:int
NavScoringNoClipRect	./imgui_internal.h	/^    ImRect                  NavScoringNoClipRect;               \/\/ Some nav operations (such a/;"	m	struct:ImGuiContext	typeref:typename:ImRect
NavScoringRect	./imgui_internal.h	/^    ImRect                  NavScoringRect;                     \/\/ Rectangle used for scoring,/;"	m	struct:ImGuiContext	typeref:typename:ImRect
NavTabbingCounter	./imgui_internal.h	/^    int                     NavTabbingCounter;                  \/\/ >0 when counting items for /;"	m	struct:ImGuiContext	typeref:typename:int
NavTabbingDir	./imgui_internal.h	/^    int                     NavTabbingDir;                      \/\/ Generally -1 or +1, 0 when /;"	m	struct:ImGuiContext	typeref:typename:int
NavTabbingResultFirst	./imgui_internal.h	/^    ImGuiNavItemData        NavTabbingResultFirst;              \/\/ First tabbing request candi/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavItemData
NavUpdate	./imgui.cpp	/^static void ImGui::NavUpdate()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdateAnyRequestFlag	./imgui.cpp	/^static inline void ImGui::NavUpdateAnyRequestFlag()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdateCancelRequest	./imgui.cpp	/^static void ImGui::NavUpdateCancelRequest()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdateCreateMoveRequest	./imgui.cpp	/^void ImGui::NavUpdateCreateMoveRequest()$/;"	f	class:ImGui	typeref:typename:void
NavUpdateCreateTabbingRequest	./imgui.cpp	/^void ImGui::NavUpdateCreateTabbingRequest()$/;"	f	class:ImGui	typeref:typename:void
NavUpdateCreateWrappingRequest	./imgui.cpp	/^static void ImGui::NavUpdateCreateWrappingRequest()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdateCurrentWindowIsScrollPushableX	./imgui.cpp	/^void ImGui::NavUpdateCurrentWindowIsScrollPushableX()$/;"	f	class:ImGui	typeref:typename:void
NavUpdatePageUpPageDown	./imgui.cpp	/^static float ImGui::NavUpdatePageUpPageDown()$/;"	f	class:ImGui	typeref:typename:float	file:
NavUpdateWindowing	./imgui.cpp	/^static void ImGui::NavUpdateWindowing()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdateWindowingHighlightWindow	./imgui.cpp	/^static void NavUpdateWindowingHighlightWindow(int focus_change_dir)$/;"	f	typeref:typename:void	file:
NavUpdateWindowingOverlay	./imgui.cpp	/^void ImGui::NavUpdateWindowingOverlay()$/;"	f	class:ImGui	typeref:typename:void
NavVisible	./imgui.h	/^    bool        NavVisible;                         \/\/ Keyboard\/Gamepad navigation is visible/;"	m	struct:ImGuiIO	typeref:typename:bool
NavWindow	./imgui_internal.h	/^    ImGuiWindow*            NavWindow;                          \/\/ Focused window for navigati/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
NavWindowHasScrollY	./imgui_internal.h	/^    bool                    NavWindowHasScrollY;    \/\/ Set per window when scrolling can be us/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
NavWindowingAccumDeltaPos	./imgui_internal.h	/^    ImVec2                  NavWindowingAccumDeltaPos;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
NavWindowingAccumDeltaSize	./imgui_internal.h	/^    ImVec2                  NavWindowingAccumDeltaSize;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
NavWindowingHighlightAlpha	./imgui_internal.h	/^    float                   NavWindowingHighlightAlpha;$/;"	m	struct:ImGuiContext	typeref:typename:float
NavWindowingListWindow	./imgui_internal.h	/^    ImGuiWindow*            NavWindowingListWindow;             \/\/ Internal window actually li/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
NavWindowingTarget	./imgui_internal.h	/^    ImGuiWindow*            NavWindowingTarget;                 \/\/ Target window when doing CT/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
NavWindowingTargetAnim	./imgui_internal.h	/^    ImGuiWindow*            NavWindowingTargetAnim;             \/\/ Record of last valid NavWin/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
NavWindowingTimer	./imgui_internal.h	/^    float                   NavWindowingTimer;$/;"	m	struct:ImGuiContext	typeref:typename:float
NavWindowingToggleKey	./imgui_internal.h	/^    ImGuiKey                NavWindowingToggleKey;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKey
NavWindowingToggleLayer	./imgui_internal.h	/^    bool                    NavWindowingToggleLayer;$/;"	m	struct:ImGuiContext	typeref:typename:bool
NewFrame	./imgui.cpp	/^void ImGui::NewFrame()$/;"	f	class:ImGui	typeref:typename:void
NewLine	./imgui_widgets.cpp	/^void ImGui::NewLine()$/;"	f	class:ImGui	typeref:typename:void
Next	./imgui_draw.cpp	/^    ImTriangulatorNode*     Next;$/;"	m	struct:ImTriangulatorNode	typeref:typename:ImTriangulatorNode *	file:
NextColumn	./imgui_tables.cpp	/^void ImGui::NextColumn()$/;"	f	class:ImGui	typeref:typename:void
NextEnabledColumn	./imgui_internal.h	/^    ImGuiTableColumnIdx     NextEnabledColumn;              \/\/ Index of next enabled\/visible /;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableColumnIdx
NextEntryIndex	./imgui_internal.h	/^    ImGuiKeyRoutingIndex            NextEntryIndex;$/;"	m	struct:ImGuiKeyRoutingData	typeref:typename:ImGuiKeyRoutingIndex
NextItemData	./imgui_internal.h	/^    ImGuiNextItemData       NextItemData;                       \/\/ Storage for SetNextItem** f/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNextItemData
NextItemId	./imgui_demo.cpp	/^    ImGuiID         NextItemId = 0;             \/\/ Unique identifier when creating new items$/;"	m	struct:ExampleAssetsBrowser	typeref:typename:ImGuiID	file:
NextSelectedTabId	./imgui_internal.h	/^    ImGuiID             NextSelectedTabId;      \/\/ Next selected tab\/window. Will also trigge/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
NextTotalWidth	./imgui_internal.h	/^    ImU32       NextTotalWidth;$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU32
NextWindowData	./imgui_internal.h	/^    ImGuiNextWindowData     NextWindowData;                     \/\/ Storage for SetNextWindow**/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNextWindowData
Normalized	./backends/imgui_impl_opengl3.cpp	/^    GLint   Enabled, Size, Type, Normalized, Stride;$/;"	m	struct:ImGui_ImplOpenGL3_VtxAttribState	typeref:typename:GLint	file:
NotifyOfDocumentsClosedElsewhere	./imgui_demo.cpp	/^    void NotifyOfDocumentsClosedElsewhere()$/;"	f	struct:ExampleAppDocuments	typeref:typename:void	file:
NumFramesInFlight	./backends/imgui_impl_wgpu.h	/^    int                     NumFramesInFlight = 3;$/;"	m	struct:ImGui_ImplWGPU_InitInfo	typeref:typename:int
OBJS	./examples/example_glfw_metal/Makefile	/^OBJS = $(addsuffix .o, $(basename $(notdir $(SOURCES))))$/;"	m
OBJS	./examples/example_glfw_opengl2/Makefile	/^OBJS = $(addsuffix .o, $(basename $(notdir $(SOURCES))))$/;"	m
OBJS	./examples/example_glfw_opengl3/Makefile	/^OBJS = $(addsuffix .o, $(basename $(notdir $(SOURCES))))$/;"	m
OBJS	./examples/example_glut_opengl2/Makefile	/^OBJS = $(addsuffix .o, $(basename $(notdir $(SOURCES))))$/;"	m
OBJS	./examples/example_null/Makefile	/^OBJS = $(addsuffix .o, $(basename $(notdir $(SOURCES))))$/;"	m
OBJS	./examples/example_sdl2_metal/Makefile	/^OBJS = $(addsuffix .o, $(basename $(notdir $(SOURCES))))$/;"	m
OBJS	./examples/example_sdl2_opengl2/Makefile	/^OBJS = $(addsuffix .o, $(basename $(notdir $(SOURCES))))$/;"	m
OBJS	./examples/example_sdl2_opengl3/Makefile	/^OBJS = $(addsuffix .o, $(basename $(notdir $(SOURCES))))$/;"	m
OBJS	./examples/example_sdl2_sdlrenderer2/Makefile	/^OBJS = $(addsuffix .o, $(basename $(notdir $(SOURCES))))$/;"	m
OBJS	./examples/example_sdl3_opengl3/Makefile	/^OBJS = $(addsuffix .o, $(basename $(notdir $(SOURCES))))$/;"	m
OBJS	./examples/example_sdl3_sdlrenderer3/Makefile	/^OBJS = $(addsuffix .o, $(basename $(notdir $(SOURCES))))$/;"	m
OUT_DIR	./examples/example_glfw_opengl2/build_win32.bat	/^@set OUT_DIR=Debug$/;"	v
OUT_DIR	./examples/example_glfw_opengl3/build_win32.bat	/^@set OUT_DIR=Debug$/;"	v
OUT_DIR	./examples/example_glfw_vulkan/build_win32.bat	/^@set OUT_DIR=Debug$/;"	v
OUT_DIR	./examples/example_glfw_vulkan/build_win32.bat	/^@set OUT_DIR=Release$/;"	v
OUT_DIR	./examples/example_glfw_vulkan/build_win64.bat	/^@set OUT_DIR=Debug$/;"	v
OUT_DIR	./examples/example_glfw_vulkan/build_win64.bat	/^@set OUT_DIR=Release$/;"	v
OUT_DIR	./examples/example_sdl2_directx11/build_win32.bat	/^@set OUT_DIR=Debug$/;"	v
OUT_DIR	./examples/example_sdl2_opengl2/build_win32.bat	/^@set OUT_DIR=Debug$/;"	v
OUT_DIR	./examples/example_sdl2_opengl3/build_win32.bat	/^@set OUT_DIR=Debug$/;"	v
OUT_DIR	./examples/example_sdl2_sdlrenderer2/build_win32.bat	/^@set OUT_DIR=Debug$/;"	v
OUT_DIR	./examples/example_sdl2_vulkan/build_win32.bat	/^@set OUT_DIR=Debug$/;"	v
OUT_DIR	./examples/example_sdl3_opengl3/build_win32.bat	/^@set OUT_DIR=Debug$/;"	v
OUT_DIR	./examples/example_sdl3_sdlrenderer3/build_win32.bat	/^@set OUT_DIR=Debug$/;"	v
OUT_DIR	./examples/example_win32_directx10/build_win32.bat	/^@set OUT_DIR=Debug$/;"	v
OUT_DIR	./examples/example_win32_directx11/build_win32.bat	/^@set OUT_DIR=Debug$/;"	v
OUT_DIR	./examples/example_win32_directx12/build_win32.bat	/^@set OUT_DIR=Debug$/;"	v
OUT_DIR	./examples/example_win32_directx9/build_win32.bat	/^@set OUT_DIR=Debug$/;"	v
OUT_DIR	./examples/example_win32_opengl3/build_win32.bat	/^@set OUT_DIR=Debug$/;"	v
OUT_EXE	./examples/example_glfw_opengl2/build_win32.bat	/^@set OUT_EXE=example_glfw_opengl2$/;"	v
OUT_EXE	./examples/example_glfw_opengl3/build_win32.bat	/^@set OUT_EXE=example_glfw_opengl3$/;"	v
OUT_EXE	./examples/example_glfw_vulkan/build_win32.bat	/^@set OUT_EXE=example_glfw_vulkan$/;"	v
OUT_EXE	./examples/example_sdl2_directx11/build_win32.bat	/^@set OUT_EXE=example_sdl2_directx11$/;"	v
OUT_EXE	./examples/example_sdl2_opengl2/build_win32.bat	/^@set OUT_EXE=example_sdl2_opengl2$/;"	v
OUT_EXE	./examples/example_sdl2_opengl3/build_win32.bat	/^@set OUT_EXE=example_sdl2_opengl3$/;"	v
OUT_EXE	./examples/example_sdl2_sdlrenderer2/build_win32.bat	/^@set OUT_EXE=example_sdl2_sdlrenderer_$/;"	v
OUT_EXE	./examples/example_sdl2_vulkan/build_win32.bat	/^@set OUT_EXE=example_sdl2_vulkan$/;"	v
OUT_EXE	./examples/example_sdl3_opengl3/build_win32.bat	/^@set OUT_EXE=example_sdl3_opengl3$/;"	v
OUT_EXE	./examples/example_sdl3_sdlrenderer3/build_win32.bat	/^@set OUT_EXE=example_sdl3_sdlrenderer3$/;"	v
OUT_EXE	./examples/example_win32_directx10/build_win32.bat	/^@set OUT_EXE=example_win32_directx10$/;"	v
OUT_EXE	./examples/example_win32_directx11/build_win32.bat	/^@set OUT_EXE=example_win32_directx11$/;"	v
OUT_EXE	./examples/example_win32_directx12/build_win32.bat	/^@set OUT_EXE=example_win32_directx12$/;"	v
OUT_EXE	./examples/example_win32_directx9/build_win32.bat	/^@set OUT_EXE=example_win32_directx9$/;"	v
OUT_EXE	./examples/example_win32_opengl3/build_win32.bat	/^@set OUT_EXE=example_win32_opengl3$/;"	v
Observer	./backends/imgui_impl_osx.mm	/^    ImGuiObserver*              Observer;$/;"	E	struct:ImGui_ImplOSX_Data
OffMaxX	./imgui_internal.h	/^    float               OffMinX, OffMaxX;       \/\/ Offsets from HostWorkRect.Min.x$/;"	m	struct:ImGuiOldColumns	typeref:typename:float
OffMinX	./imgui_internal.h	/^    float               OffMinX, OffMaxX;       \/\/ Offsets from HostWorkRect.Min.x$/;"	m	struct:ImGuiOldColumns	typeref:typename:float
Offset	./imgui_demo.cpp	/^    int             Offset;     \/\/ Offset inside parent structure$/;"	m	struct:ExampleMemberInfo	typeref:typename:int	file:
Offset	./imgui_internal.h	/^    ImU32           Offset;     \/\/ Offset in parent structure$/;"	m	struct:ImGuiDataVarInfo	typeref:typename:ImU32
Offset	./imgui_internal.h	/^    float               Offset;                 \/\/ Position relative to beginning of tab$/;"	m	struct:ImGuiTabItem	typeref:typename:float
OffsetIcon	./imgui_internal.h	/^    ImU16       OffsetIcon;         \/\/ Always zero for now$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU16
OffsetLabel	./imgui_internal.h	/^    ImU16       OffsetLabel;        \/\/ Offsets are locked in Update()$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU16
OffsetMark	./imgui_internal.h	/^    ImU16       OffsetMark;$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU16
OffsetNorm	./imgui_internal.h	/^    float               OffsetNorm;             \/\/ Column start offset, normalized 0.0 (far le/;"	m	struct:ImGuiOldColumnData	typeref:typename:float
OffsetNormBeforeResize	./imgui_internal.h	/^    float               OffsetNormBeforeResize;$/;"	m	struct:ImGuiOldColumnData	typeref:typename:float
OffsetShortcut	./imgui_internal.h	/^    ImU16       OffsetShortcut;$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU16
OffsetX	./misc/freetype/imgui_freetype.cpp	/^        FT_Int      OffsetX;            \/\/ The distance from the origin ("pen position") to th/;"	m	struct:__anon21d590df0111::GlyphInfo	typeref:typename:FT_Int	file:
OffsetY	./misc/freetype/imgui_freetype.cpp	/^        FT_Int      OffsetY;            \/\/ The distance from the origin to the top of the glyp/;"	m	struct:__anon21d590df0111::GlyphInfo	typeref:typename:FT_Int	file:
Offsets	./imgui_internal.h	/^    int     Offsets[CHUNKS];$/;"	m	struct:ImSpanAllocator	typeref:typename:int[]
OldCallback	./imgui_widgets.cpp	/^struct ImGuiGetNameFromIndexOldToNewCallbackData { void* UserData; bool (*OldCallback)(void*, in/;"	m	struct:ImGuiGetNameFromIndexOldToNewCallbackData	typeref:typename:bool (*)(void *,int,const char **)	file:
On Ubuntu 14.04+ and macOS	./examples/example_allegro5/README.md	/^### On Ubuntu 14.04+ and macOS$/;"	S	chapter:How to Build
On Windows with Visual Studio's CLI	./examples/example_allegro5/README.md	/^### On Windows with Visual Studio's CLI$/;"	S	chapter:How to Build
OnKeyPressed	./imgui_widgets.cpp	/^void ImGuiInputTextState::OnKeyPressed(int key)$/;"	f	class:ImGuiInputTextState	typeref:typename:void
Open	./imgui_demo.cpp	/^    bool        Open;       \/\/ Set when open (we keep an array of all available documents to s/;"	m	struct:MyDocument	typeref:typename:bool	file:
OpenCond	./imgui_internal.h	/^    ImU8                        OpenCond;           \/\/ Set by SetNextItemOpen()$/;"	m	struct:ImGuiNextItemData	typeref:typename:ImU8
OpenFrameCount	./imgui_internal.h	/^    int                 OpenFrameCount; \/\/ Set on OpenPopup()$/;"	m	struct:ImGuiPopupData	typeref:typename:int
OpenMousePos	./imgui_internal.h	/^    ImVec2              OpenMousePos;   \/\/ Set on OpenPopup(), copy of mouse position at the t/;"	m	struct:ImGuiPopupData	typeref:typename:ImVec2
OpenParentId	./imgui_internal.h	/^    ImGuiID             OpenParentId;   \/\/ Set on OpenPopup(), we need this to differentiate m/;"	m	struct:ImGuiPopupData	typeref:typename:ImGuiID
OpenPopup	./imgui.cpp	/^void ImGui::OpenPopup(ImGuiID id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:void
OpenPopup	./imgui.cpp	/^void ImGui::OpenPopup(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:void
OpenPopupEx	./imgui.cpp	/^void ImGui::OpenPopupEx(ImGuiID id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:void
OpenPopupOnItemClick	./imgui.cpp	/^void ImGui::OpenPopupOnItemClick(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:void
OpenPopupPos	./imgui_internal.h	/^    ImVec2              OpenPopupPos;   \/\/ Set on OpenPopup(), preferred popup position (typic/;"	m	struct:ImGuiPopupData	typeref:typename:ImVec2
OpenPopupStack	./imgui_internal.h	/^    ImVector<ImGuiPopupData>        OpenPopupStack;             \/\/ Which popups are open (pers/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiPopupData>
OpenPrev	./imgui_demo.cpp	/^    bool        OpenPrev;   \/\/ Copy of Open from last update.$/;"	m	struct:MyDocument	typeref:typename:bool	file:
OpenVal	./imgui_internal.h	/^    bool                        OpenVal;            \/\/ Set by SetNextItemOpen()$/;"	m	struct:ImGuiNextItemData	typeref:typename:bool
OptKeepSorted	./imgui_demo.cpp	/^    bool                        OptKeepSorted = true;$/;"	m	struct:ExampleDualListBox	typeref:typename:bool	file:
OuterAngle	./imgui.cpp	/^    float   OuterAngle;             \/\/ Angle toward outside$/;"	m	struct:ImGuiResizeBorderDef	typeref:typename:float	file:
OuterPaddingX	./imgui_internal.h	/^    float                       OuterPaddingX;$/;"	m	struct:ImGuiTable	typeref:typename:float
OuterRect	./imgui_internal.h	/^    ImRect                      OuterRect;                  \/\/ Note: for non-scrolling table, /;"	m	struct:ImGuiTable	typeref:typename:ImRect
OuterRectClipped	./imgui_internal.h	/^    ImRect                  OuterRectClipped;                   \/\/ == Window->Rect() just afte/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
OuterWindow	./imgui_internal.h	/^    ImGuiWindow*                OuterWindow;                \/\/ Parent window for the table$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiWindow *
Overlaps	./imgui_internal.h	/^    bool        Overlaps(const ImRect& r) const     { return r.Min.y <  Max.y && r.Max.y >  Min./;"	f	struct:ImRect	typeref:typename:bool
OversampleH	./imgui.h	/^    int             OversampleH;            \/\/ 2        \/\/ Rasterize at higher quality for s/;"	m	struct:ImFontConfig	typeref:typename:int
OversampleV	./imgui.h	/^    int             OversampleV;            \/\/ 1        \/\/ Rasterize at higher quality for s/;"	m	struct:ImFontConfig	typeref:typename:int
Owner	./imgui_internal.h	/^    ImGuiID                     Owner;$/;"	m	struct:ImGuiContextHook	typeref:typename:ImGuiID
OwnerCurr	./imgui_internal.h	/^    ImGuiID     OwnerCurr;$/;"	m	struct:ImGuiKeyOwnerData	typeref:typename:ImGuiID
OwnerNext	./imgui_internal.h	/^    ImGuiID     OwnerNext;$/;"	m	struct:ImGuiKeyOwnerData	typeref:typename:ImGuiID
OwnerViewport	./imgui.h	/^    ImGuiViewport*      OwnerViewport;      \/\/ Viewport carrying the ImDrawData instance, migh/;"	m	struct:ImDrawData	typeref:typename:ImGuiViewport *
PFNGLACTIVETEXTUREPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLACTIVETEXTUREPROC) (GLenum texture);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum texture)
PFNGLATTACHSHADERPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLATTACHSHADERPROC) (GLuint program, GLuint shader);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLuint shader)
PFNGLBINDBUFFERPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLBINDBUFFERPROC) (GLenum target, GLuint buffer);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint buffer)
PFNGLBINDSAMPLERPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLBINDSAMPLERPROC) (GLuint unit, GLuint sampler);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint unit,GLuint sampler)
PFNGLBINDTEXTUREPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLBINDTEXTUREPROC) (GLenum target, GLuint texture);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint texture)
PFNGLBINDVERTEXARRAYPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLBINDVERTEXARRAYPROC) (GLuint array);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint array)
PFNGLBLENDEQUATIONPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLBLENDEQUATIONPROC) (GLenum mode);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode)
PFNGLBLENDEQUATIONSEPARATEPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEPROC) (GLenum modeRGB, GLenum modeAlpha);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum modeRGB,GLenum modeAlpha)
PFNGLBLENDFUNCSEPARATEPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenu/;"	t	typeref:typename:void (APIENTRYP)(GLenum sfactorRGB,GLenum dfactorRGB,GLenum sfactorAlpha,GLenum dfactorAlpha)
PFNGLBUFFERDATAPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLBUFFERDATAPROC) (GLenum target, GLsizeiptr size, const void *data, /;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLsizeiptr size,const void * data,GLenum usage)
PFNGLBUFFERSUBDATAPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLintptr offset,GLsizeiptr size,const void * data)
PFNGLCLEARCOLORPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLCLEARCOLORPROC) (GLfloat red, GLfloat green, GLfloat blue, GLfloat /;"	t	typeref:typename:void (APIENTRYP)(GLfloat red,GLfloat green,GLfloat blue,GLfloat alpha)
PFNGLCLEARPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLCLEARPROC) (GLbitfield mask);$/;"	t	typeref:typename:void (APIENTRYP)(GLbitfield mask)
PFNGLCOMPILESHADERPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLCOMPILESHADERPROC) (GLuint shader);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint shader)
PFNGLCREATEPROGRAMPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef GLuint (APIENTRYP PFNGLCREATEPROGRAMPROC) (void);$/;"	t	typeref:typename:GLuint (APIENTRYP)(void)
PFNGLCREATESHADERPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef GLuint (APIENTRYP PFNGLCREATESHADERPROC) (GLenum type);$/;"	t	typeref:typename:GLuint (APIENTRYP)(GLenum type)
PFNGLDELETEBUFFERSPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLDELETEBUFFERSPROC) (GLsizei n, const GLuint *buffers);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,const GLuint * buffers)
PFNGLDELETEPROGRAMPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLDELETEPROGRAMPROC) (GLuint program);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program)
PFNGLDELETESHADERPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLDELETESHADERPROC) (GLuint shader);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint shader)
PFNGLDELETETEXTURESPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLDELETETEXTURESPROC) (GLsizei n, const GLuint *textures);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,const GLuint * textures)
PFNGLDELETEVERTEXARRAYSPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLDELETEVERTEXARRAYSPROC) (GLsizei n, const GLuint *arrays);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,const GLuint * arrays)
PFNGLDETACHSHADERPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLDETACHSHADERPROC) (GLuint program, GLuint shader);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLuint shader)
PFNGLDISABLEPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLDISABLEPROC) (GLenum cap);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum cap)
PFNGLDISABLEVERTEXATTRIBARRAYPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBARRAYPROC) (GLuint index);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index)
PFNGLDRAWELEMENTSBASEVERTEXPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum typ/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode,GLsizei count,GLenum type,const void * indices,GLint basevertex)
PFNGLDRAWELEMENTSPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSPROC) (GLenum mode, GLsizei count, GLenum type, const v/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode,GLsizei count,GLenum type,const void * indices)
PFNGLENABLEPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLENABLEPROC) (GLenum cap);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum cap)
PFNGLENABLEVERTEXATTRIBARRAYPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBARRAYPROC) (GLuint index);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index)
PFNGLFLUSHPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLFLUSHPROC) (void);$/;"	t	typeref:typename:void (APIENTRYP)(void)
PFNGLGENBUFFERSPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGENBUFFERSPROC) (GLsizei n, GLuint *buffers);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,GLuint * buffers)
PFNGLGENTEXTURESPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGENTEXTURESPROC) (GLsizei n, GLuint *textures);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,GLuint * textures)
PFNGLGENVERTEXARRAYSPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGENVERTEXARRAYSPROC) (GLsizei n, GLuint *arrays);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,GLuint * arrays)
PFNGLGETATTRIBLOCATIONPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef GLint (APIENTRYP PFNGLGETATTRIBLOCATIONPROC) (GLuint program, const GLchar *name);$/;"	t	typeref:typename:GLint (APIENTRYP)(GLuint program,const GLchar * name)
PFNGLGETBOOLEANI_VPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETBOOLEANI_VPROC) (GLenum target, GLuint index, GLboolean *data);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint index,GLboolean * data)
PFNGLGETDOUBLEI_VEXTPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETDOUBLEI_VEXTPROC) (GLenum pname, GLuint index, GLdouble *params)/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLuint index,GLdouble * params)
PFNGLGETDOUBLEI_VPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETDOUBLEI_VPROC) (GLenum target, GLuint index, GLdouble *data);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint index,GLdouble * data)
PFNGLGETERRORPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef GLenum (APIENTRYP PFNGLGETERRORPROC) (void);$/;"	t	typeref:typename:GLenum (APIENTRYP)(void)
PFNGLGETFLOATI_VEXTPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETFLOATI_VEXTPROC) (GLenum pname, GLuint index, GLfloat *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLuint index,GLfloat * params)
PFNGLGETFLOATI_VPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETFLOATI_VPROC) (GLenum target, GLuint index, GLfloat *data);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint index,GLfloat * data)
PFNGLGETINTEGER64I_VPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETINTEGER64I_VPROC) (GLenum target, GLuint index, GLint64 *data);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint index,GLint64 * data)
PFNGLGETINTEGERI_VPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETINTEGERI_VPROC) (GLenum target, GLuint index, GLint *data);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint index,GLint * data)
PFNGLGETINTEGERUI64I_VNVPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETINTEGERUI64I_VNVPROC) (GLenum value, GLuint index, GLuint64EXT */;"	t	typeref:typename:void (APIENTRYP)(GLenum value,GLuint index,GLuint64EXT * result)
PFNGLGETINTEGERVPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETINTEGERVPROC) (GLenum pname, GLint *data);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLint * data)
PFNGLGETPOINTERI_VEXTPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETPOINTERI_VEXTPROC) (GLenum pname, GLuint index, void **params);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLuint index,void ** params)
PFNGLGETPROGRAMINFOLOGPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMINFOLOGPROC) (GLuint program, GLsizei bufSize, GLsizei *l/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLsizei bufSize,GLsizei * length,GLchar * infoLog)
PFNGLGETPROGRAMIVPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMIVPROC) (GLuint program, GLenum pname, GLint *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLenum pname,GLint * params)
PFNGLGETSHADERINFOLOGPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETSHADERINFOLOGPROC) (GLuint shader, GLsizei bufSize, GLsizei *len/;"	t	typeref:typename:void (APIENTRYP)(GLuint shader,GLsizei bufSize,GLsizei * length,GLchar * infoLog)
PFNGLGETSHADERIVPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETSHADERIVPROC) (GLuint shader, GLenum pname, GLint *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint shader,GLenum pname,GLint * params)
PFNGLGETSTRINGIPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef const GLubyte *(APIENTRYP PFNGLGETSTRINGIPROC) (GLenum name, GLuint index);$/;"	t	typeref:typename:const GLubyte * (APIENTRYP)(GLenum name,GLuint index)
PFNGLGETSTRINGPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef const GLubyte *(APIENTRYP PFNGLGETSTRINGPROC) (GLenum name);$/;"	t	typeref:typename:const GLubyte * (APIENTRYP)(GLenum name)
PFNGLGETTRANSFORMFEEDBACKI64_VPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKI64_VPROC) (GLuint xfb, GLenum pname, GLuint in/;"	t	typeref:typename:void (APIENTRYP)(GLuint xfb,GLenum pname,GLuint index,GLint64 * param)
PFNGLGETTRANSFORMFEEDBACKI_VPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKI_VPROC) (GLuint xfb, GLenum pname, GLuint inde/;"	t	typeref:typename:void (APIENTRYP)(GLuint xfb,GLenum pname,GLuint index,GLint * param)
PFNGLGETUNIFORMLOCATIONPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef GLint (APIENTRYP PFNGLGETUNIFORMLOCATIONPROC) (GLuint program, const GLchar *name);$/;"	t	typeref:typename:GLint (APIENTRYP)(GLuint program,const GLchar * name)
PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC) (GLuint vaobj, GLuint index, GLenu/;"	t	typeref:typename:void (APIENTRYP)(GLuint vaobj,GLuint index,GLenum pname,GLint * param)
PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC) (GLuint vaobj, GLuint index, GLenu/;"	t	typeref:typename:void (APIENTRYP)(GLuint vaobj,GLuint index,GLenum pname,void ** param)
PFNGLGETVERTEXATTRIBIVPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVPROC) (GLuint index, GLenum pname, GLint *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLenum pname,GLint * params)
PFNGLGETVERTEXATTRIBPOINTERVPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVPROC) (GLuint index, GLenum pname, void **po/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLenum pname,void ** pointer)
PFNGLISENABLEDPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef GLboolean (APIENTRYP PFNGLISENABLEDPROC) (GLenum cap);$/;"	t	typeref:typename:GLboolean (APIENTRYP)(GLenum cap)
PFNGLISPROGRAMPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef GLboolean (APIENTRYP PFNGLISPROGRAMPROC) (GLuint program);$/;"	t	typeref:typename:GLboolean (APIENTRYP)(GLuint program)
PFNGLLINKPROGRAMPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLLINKPROGRAMPROC) (GLuint program);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program)
PFNGLPIXELSTOREIPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLPIXELSTOREIPROC) (GLenum pname, GLint param);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLint param)
PFNGLPOLYGONMODEPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLPOLYGONMODEPROC) (GLenum face, GLenum mode);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum face,GLenum mode)
PFNGLREADPIXELSPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLREADPIXELSPROC) (GLint x, GLint y, GLsizei width, GLsizei height, G/;"	t	typeref:typename:void (APIENTRYP)(GLint x,GLint y,GLsizei width,GLsizei height,GLenum format,GLenum type,void * pixels)
PFNGLSCISSORPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLSCISSORPROC) (GLint x, GLint y, GLsizei width, GLsizei height);$/;"	t	typeref:typename:void (APIENTRYP)(GLint x,GLint y,GLsizei width,GLsizei height)
PFNGLSHADERSOURCEPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLSHADERSOURCEPROC) (GLuint shader, GLsizei count, const GLchar *cons/;"	t	typeref:typename:void (APIENTRYP)(GLuint shader,GLsizei count,const GLchar * const * string,const GLint * length)
PFNGLTEXIMAGE2DPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLTEXIMAGE2DPROC) (GLenum target, GLint level, GLint internalformat, /;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLint internalformat,GLsizei width,GLsizei height,GLint border,GLenum format,GLenum type,const void * pixels)
PFNGLTEXPARAMETERIPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERIPROC) (GLenum target, GLenum pname, GLint param);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum pname,GLint param)
PFNGLUNIFORM1IPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLUNIFORM1IPROC) (GLint location, GLint v0);$/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLint v0)
PFNGLUNIFORMMATRIX4FVPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX4FVPROC) (GLint location, GLsizei count, GLboolean tra/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)
PFNGLUSEPROGRAMPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLUSEPROGRAMPROC) (GLuint program);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program)
PFNGLVERTEXATTRIBPOINTERPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERPROC) (GLuint index, GLint size, GLenum type, GL/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLint size,GLenum type,GLboolean normalized,GLsizei stride,const void * pointer)
PFNGLVIEWPORTPROC	./backends/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLVIEWPORTPROC) (GLint x, GLint y, GLsizei width, GLsizei height);$/;"	t	typeref:typename:void (APIENTRYP)(GLint x,GLint y,GLsizei width,GLsizei height)
PFN_GetDpiForMonitor	./backends/imgui_impl_win32.cpp	/^typedef HRESULT(WINAPI* PFN_GetDpiForMonitor)(HMONITOR, MONITOR_DPI_TYPE, UINT*, UINT*);        /;"	t	typeref:typename:HRESULT (WINAPI *)(HMONITOR,MONITOR_DPI_TYPE,UINT *,UINT *)	file:
PFN_RtlVerifyVersionInfo	./backends/imgui_impl_win32.cpp	/^    typedef LONG(WINAPI* PFN_RtlVerifyVersionInfo)(OSVERSIONINFOEXW*, ULONG, ULONGLONG);$/;"	t	function:_IsWindowsVersionOrGreater	typeref:typename:LONG (WINAPI *)(OSVERSIONINFOEXW *,ULONG,ULONGLONG)	file:
PFN_SetProcessDpiAwareness	./backends/imgui_impl_win32.cpp	/^typedef HRESULT(WINAPI* PFN_SetProcessDpiAwareness)(PROCESS_DPI_AWARENESS);                     /;"	t	typeref:typename:HRESULT (WINAPI *)(PROCESS_DPI_AWARENESS)	file:
PFN_SetThreadDpiAwarenessContext	./backends/imgui_impl_win32.cpp	/^typedef DPI_AWARENESS_CONTEXT(WINAPI* PFN_SetThreadDpiAwarenessContext)(DPI_AWARENESS_CONTEXT); /;"	t	typeref:typename:DPI_AWARENESS_CONTEXT (WINAPI *)(DPI_AWARENESS_CONTEXT)	file:
PFN_XInputGetCapabilities	./backends/imgui_impl_win32.cpp	/^typedef DWORD(WINAPI* PFN_XInputGetCapabilities)(DWORD, DWORD, XINPUT_CAPABILITIES*);$/;"	t	typeref:typename:DWORD (WINAPI *)(DWORD,DWORD,XINPUT_CAPABILITIES *)	file:
PFN_XInputGetState	./backends/imgui_impl_win32.cpp	/^typedef DWORD(WINAPI* PFN_XInputGetState)(DWORD, XINPUT_STATE*);$/;"	t	typeref:typename:DWORD (WINAPI *)(DWORD,XINPUT_STATE *)	file:
PRId64	./imgui_demo.cpp	/^#define PRId64 /;"	d	file:
PRIu64	./imgui_demo.cpp	/^#define PRIu64 /;"	d	file:
PROCESS_DPI_AWARENESS	./backends/imgui_impl_win32.cpp	/^typedef enum { PROCESS_DPI_UNAWARE = 0, PROCESS_SYSTEM_DPI_AWARE = 1, PROCESS_PER_MONITOR_DPI_AW/;"	t	typeref:enum:__anon42ac1dbb0103	file:
PROCESS_DPI_UNAWARE	./backends/imgui_impl_win32.cpp	/^typedef enum { PROCESS_DPI_UNAWARE = 0, PROCESS_SYSTEM_DPI_AWARE = 1, PROCESS_PER_MONITOR_DPI_AW/;"	e	enum:__anon42ac1dbb0103	file:
PROCESS_PER_MONITOR_DPI_AWARE	./backends/imgui_impl_win32.cpp	/^typedef enum { PROCESS_DPI_UNAWARE = 0, PROCESS_SYSTEM_DPI_AWARE = 1, PROCESS_PER_MONITOR_DPI_AW/;"	e	enum:__anon42ac1dbb0103	file:
PROCESS_SYSTEM_DPI_AWARE	./backends/imgui_impl_win32.cpp	/^typedef enum { PROCESS_DPI_UNAWARE = 0, PROCESS_SYSTEM_DPI_AWARE = 1, PROCESS_PER_MONITOR_DPI_AW/;"	e	enum:__anon42ac1dbb0103	file:
PS	./backends/imgui_impl_dx10.cpp	/^        ID3D10PixelShader*          PS;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:ID3D10PixelShader *	file:
PS	./backends/imgui_impl_dx11.cpp	/^        ID3D11PixelShader*          PS;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11PixelShader *	file:
PSInstances	./backends/imgui_impl_dx11.cpp	/^        ID3D11ClassInstance         *PSInstances[256], *VSInstances[256], *GSInstances[256];   \//;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11ClassInstance * [256]	file:
PSInstancesCount	./backends/imgui_impl_dx11.cpp	/^        UINT                        PSInstancesCount, VSInstancesCount, GSInstancesCount;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:UINT	file:
PSSampler	./backends/imgui_impl_dx10.cpp	/^        ID3D10SamplerState*         PSSampler;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:ID3D10SamplerState *	file:
PSSampler	./backends/imgui_impl_dx11.cpp	/^        ID3D11SamplerState*         PSSampler;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11SamplerState *	file:
PSShaderResource	./backends/imgui_impl_dx10.cpp	/^        ID3D10ShaderResourceView*   PSShaderResource;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:ID3D10ShaderResourceView *	file:
PSShaderResource	./backends/imgui_impl_dx11.cpp	/^        ID3D11ShaderResourceView*   PSShaderResource;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11ShaderResourceView *	file:
PackIdLines	./imgui.h	/^    int                         PackIdLines;        \/\/ Custom texture rectangle ID for baked a/;"	m	struct:ImFontAtlas	typeref:typename:int
PackIdMouseCursors	./imgui.h	/^    int                         PackIdMouseCursors; \/\/ Custom texture rectangle ID for white p/;"	m	struct:ImFontAtlas	typeref:typename:int
PackRange	./imgui_draw.cpp	/^    stbtt_pack_range    PackRange;          \/\/ Hold the list of codepoints to pack (essentiall/;"	m	struct:ImFontBuildSrcData	typeref:typename:stbtt_pack_range	file:
PackedChars	./imgui_draw.cpp	/^    stbtt_packedchar*   PackedChars;        \/\/ Output glyphs$/;"	m	struct:ImFontBuildSrcData	typeref:typename:stbtt_packedchar *	file:
PairComparerByID	./imgui.cpp	/^static int IMGUI_CDECL PairComparerByID(const void* lhs, const void* rhs)$/;"	f	typeref:typename:IM_MSVC_RUNTIME_CHECKS_OFF int IMGUI_CDECL	file:
PairComparerByValueInt	./imgui_widgets.cpp	/^static int IMGUI_CDECL PairComparerByValueInt(const void* lhs, const void* rhs)$/;"	f	typeref:typename:int IMGUI_CDECL	file:
Parent	./imgui_demo.cpp	/^    ExampleTreeNode*            Parent = NULL;$/;"	m	struct:ExampleTreeNode	typeref:typename:ExampleTreeNode *	file:
ParentLastItemDataBackup	./imgui_internal.h	/^    ImGuiLastItemData   ParentLastItemDataBackup;$/;"	m	struct:ImGuiWindowStackData	typeref:typename:ImGuiLastItemData
ParentLayoutType	./imgui_internal.h	/^    ImGuiLayoutType         ParentLayoutType;       \/\/ Layout type of parent window at the tim/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiLayoutType
ParentNavLayer	./imgui_internal.h	/^    int                 ParentNavLayer; \/\/ Resolved on BeginPopup(). Actually a ImGuiNavLayer /;"	m	struct:ImGuiPopupData	typeref:typename:int
ParentWindow	./imgui_internal.h	/^    ImGuiWindow*            ParentWindow;                       \/\/ If we are a child _or_ popu/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
ParentWindowForFocusRoute	./imgui_internal.h	/^    ImGuiWindow*            ParentWindowForFocusRoute;          \/\/ Set to manual link a window/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
ParentWindowInBeginStack	./imgui_internal.h	/^    ImGuiWindow*            ParentWindowInBeginStack;$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
ParentWorkRect	./imgui_internal.h	/^    ImRect                  ParentWorkRect;                     \/\/ Backup of WorkRect before e/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
PassFilter	./imgui.cpp	/^bool ImGuiTextFilter::PassFilter(const char* text, const char* text_end) const$/;"	f	class:ImGuiTextFilter	typeref:typename:bool
PathArcTo	./imgui_draw.cpp	/^void ImDrawList::PathArcTo(const ImVec2& center, float radius, float a_min, float a_max, int num/;"	f	class:ImDrawList	typeref:typename:void
PathArcToFast	./imgui_draw.cpp	/^void ImDrawList::PathArcToFast(const ImVec2& center, float radius, int a_min_of_12, int a_max_of/;"	f	class:ImDrawList	typeref:typename:void
PathBezierCubicCurveTo	./imgui_draw.cpp	/^void ImDrawList::PathBezierCubicCurveTo(const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, in/;"	f	class:ImDrawList	typeref:typename:void
PathBezierCubicCurveToCasteljau	./imgui_draw.cpp	/^static void PathBezierCubicCurveToCasteljau(ImVector<ImVec2>* path, float x1, float y1, float x2/;"	f	typeref:typename:void	file:
PathBezierQuadraticCurveTo	./imgui_draw.cpp	/^void ImDrawList::PathBezierQuadraticCurveTo(const ImVec2& p2, const ImVec2& p3, int num_segments/;"	f	class:ImDrawList	typeref:typename:void
PathBezierQuadraticCurveToCasteljau	./imgui_draw.cpp	/^static void PathBezierQuadraticCurveToCasteljau(ImVector<ImVec2>* path, float x1, float y1, floa/;"	f	typeref:typename:void	file:
PathClear	./imgui.h	/^    inline    void  PathClear()                                                 { _Path.Size = 0/;"	f	struct:ImDrawList	typeref:typename:void
PathConcaveShape	./imgui_demo.cpp	/^static void PathConcaveShape(ImDrawList* draw_list, float x, float y, float sz)$/;"	f	typeref:typename:void	file:
PathEllipticalArcTo	./imgui_draw.cpp	/^void ImDrawList::PathEllipticalArcTo(const ImVec2& center, const ImVec2& radius, float rot, floa/;"	f	class:ImDrawList	typeref:typename:void
PathFillConcave	./imgui.h	/^    inline    void  PathFillConcave(ImU32 col)                                  { AddConcavePoly/;"	f	struct:ImDrawList	typeref:typename:void
PathFillConvex	./imgui.h	/^    inline    void  PathFillConvex(ImU32 col)                                   { AddConvexPolyF/;"	f	struct:ImDrawList	typeref:typename:void
PathLineTo	./imgui.h	/^    inline    void  PathLineTo(const ImVec2& pos)                               { _Path.push_bac/;"	f	struct:ImDrawList	typeref:typename:void
PathLineToMergeDuplicate	./imgui.h	/^    inline    void  PathLineToMergeDuplicate(const ImVec2& pos)                 { if (_Path.Size/;"	f	struct:ImDrawList	typeref:typename:void
PathRect	./imgui_draw.cpp	/^void ImDrawList::PathRect(const ImVec2& a, const ImVec2& b, float rounding, ImDrawFlags flags)$/;"	f	class:ImDrawList	typeref:typename:void
PathStroke	./imgui.h	/^    inline    void  PathStroke(ImU32 col, ImDrawFlags flags = 0, float thickness = 1.0f) { AddPo/;"	f	struct:ImDrawList	typeref:typename:void
PenPressure	./imgui.h	/^    float       PenPressure;                        \/\/ Touch\/Pen pressure (0.0f to 1.0f, shou/;"	m	struct:ImGuiIO	typeref:typename:float
PhysicalDevice	./backends/imgui_impl_vulkan.h	/^    VkPhysicalDevice                PhysicalDevice;$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:VkPhysicalDevice
Pipeline	./backends/imgui_impl_vulkan.cpp	/^    VkPipeline                  Pipeline;$/;"	m	struct:ImGui_ImplVulkan_Data	typeref:typename:VkPipeline	file:
Pipeline	./backends/imgui_impl_vulkan.h	/^    VkPipeline          Pipeline;               \/\/ The window pipeline may uses a different Vk/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:VkPipeline
PipelineCache	./backends/imgui_impl_vulkan.h	/^    VkPipelineCache                 PipelineCache;$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:VkPipelineCache
PipelineCreateFlags	./backends/imgui_impl_vulkan.cpp	/^    VkPipelineCreateFlags       PipelineCreateFlags;$/;"	m	struct:ImGui_ImplVulkan_Data	typeref:typename:VkPipelineCreateFlags	file:
PipelineLayout	./backends/imgui_impl_vulkan.cpp	/^    VkPipelineLayout            PipelineLayout;$/;"	m	struct:ImGui_ImplVulkan_Data	typeref:typename:VkPipelineLayout	file:
PipelineMultisampleState	./backends/imgui_impl_wgpu.h	/^    WGPUMultisampleState    PipelineMultisampleState = {};$/;"	m	struct:ImGui_ImplWGPU_InitInfo	typeref:typename:WGPUMultisampleState
PipelineRenderingCreateInfo	./backends/imgui_impl_vulkan.h	/^    VkPipelineRenderingCreateInfoKHR PipelineRenderingCreateInfo;$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:VkPipelineRenderingCreateInfoKHR
PixelHeight	./misc/freetype/imgui_freetype.cpp	/^        uint32_t    PixelHeight;        \/\/ Size this font was generated with.$/;"	m	struct:__anon21d590df0111::FontInfo	typeref:typename:uint32_t	file:
PixelSnapH	./imgui.h	/^    bool            PixelSnapH;             \/\/ false    \/\/ Align every glyph to pixel bounda/;"	m	struct:ImFontConfig	typeref:typename:bool
PixelStorei	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLPIXELSTOREIPROC              PixelStorei;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLPIXELSTOREIPROC
PlatformHandle	./imgui.h	/^    void*               PlatformHandle;         \/\/ void* to hold higher-level, platform window/;"	m	struct:ImGuiViewport	typeref:typename:void *
PlatformHandleRaw	./imgui.h	/^    void*               PlatformHandleRaw;      \/\/ void* to hold lower-level, platform-native /;"	m	struct:ImGuiViewport	typeref:typename:void *
PlatformIO	./imgui_internal.h	/^    ImGuiPlatformIO         PlatformIO;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiPlatformIO
PlatformImeData	./imgui_internal.h	/^    ImGuiPlatformImeData    PlatformImeData;                    \/\/ Data updated by current fra/;"	m	struct:ImGuiContext	typeref:typename:ImGuiPlatformImeData
PlatformImeDataPrev	./imgui_internal.h	/^    ImGuiPlatformImeData    PlatformImeDataPrev;                \/\/ Previous frame data. When c/;"	m	struct:ImGuiContext	typeref:typename:ImGuiPlatformImeData
Platform_ClipboardUserData	./imgui.h	/^    void*       Platform_ClipboardUserData;$/;"	m	struct:ImGuiPlatformIO	typeref:typename:void *
Platform_GetClipboardTextFn	./imgui.h	/^    const char* (*Platform_GetClipboardTextFn)(ImGuiContext* ctx);$/;"	m	struct:ImGuiPlatformIO	typeref:typename:const char * (*)(ImGuiContext * ctx)
Platform_GetClipboardTextFn_DefaultImpl	./imgui.cpp	/^static const char* Platform_GetClipboardTextFn_DefaultImpl(ImGuiContext* ctx)$/;"	f	typeref:typename:const char *	file:
Platform_ImeUserData	./imgui.h	/^    void*       Platform_ImeUserData;$/;"	m	struct:ImGuiPlatformIO	typeref:typename:void *
Platform_LocaleDecimalPoint	./imgui.h	/^    ImWchar     Platform_LocaleDecimalPoint;     \/\/ '.'$/;"	m	struct:ImGuiPlatformIO	typeref:typename:ImWchar
Platform_OpenInShellFn	./imgui.h	/^    bool        (*Platform_OpenInShellFn)(ImGuiContext* ctx, const char* path);$/;"	m	struct:ImGuiPlatformIO	typeref:typename:bool (*)(ImGuiContext * ctx,const char * path)
Platform_OpenInShellFn_DefaultImpl	./imgui.cpp	/^static bool Platform_OpenInShellFn_DefaultImpl(ImGuiContext*, const char* path)$/;"	f	typeref:typename:bool	file:
Platform_OpenInShellFn_DefaultImpl	./imgui.cpp	/^static bool Platform_OpenInShellFn_DefaultImpl(ImGuiContext*, const char*) { return false; }$/;"	f	typeref:typename:bool	file:
Platform_OpenInShellUserData	./imgui.h	/^    void*       Platform_OpenInShellUserData;$/;"	m	struct:ImGuiPlatformIO	typeref:typename:void *
Platform_SetClipboardTextFn	./imgui.h	/^    void        (*Platform_SetClipboardTextFn)(ImGuiContext* ctx, const char* text);$/;"	m	struct:ImGuiPlatformIO	typeref:typename:void (*)(ImGuiContext * ctx,const char * text)
Platform_SetClipboardTextFn_DefaultImpl	./imgui.cpp	/^static void Platform_SetClipboardTextFn_DefaultImpl(ImGuiContext* ctx, const char* text)$/;"	f	typeref:typename:void	file:
Platform_SetClipboardTextFn_DefaultImpl	./imgui.cpp	/^static void Platform_SetClipboardTextFn_DefaultImpl(ImGuiContext*, const char* text)$/;"	f	typeref:typename:void	file:
Platform_SetImeDataFn	./imgui.h	/^    void        (*Platform_SetImeDataFn)(ImGuiContext* ctx, ImGuiViewport* viewport, ImGuiPlatfo/;"	m	struct:ImGuiPlatformIO	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiViewport * viewport,ImGuiPlatformImeData * data)
Platform_SetImeDataFn_DefaultImpl	./imgui.cpp	/^static void Platform_SetImeDataFn_DefaultImpl(ImGuiContext*, ImGuiViewport* viewport, ImGuiPlatf/;"	f	typeref:typename:void	file:
Platform_SetImeDataFn_DefaultImpl	./imgui.cpp	/^static void Platform_SetImeDataFn_DefaultImpl(ImGuiContext*, ImGuiViewport*, ImGuiPlatformImeDat/;"	f	typeref:typename:void	file:
PlotEx	./imgui_widgets.cpp	/^int ImGui::PlotEx(ImGuiPlotType plot_type, const char* label, float (*values_getter)(void* data,/;"	f	class:ImGui	typeref:typename:int
PlotHistogram	./imgui_widgets.cpp	/^void ImGui::PlotHistogram(const char* label, const float* values, int values_count, int values_o/;"	f	class:ImGui	typeref:typename:void
PlotHistogram	./imgui_widgets.cpp	/^void ImGui::PlotHistogram(const char* label, float (*values_getter)(void* data, int idx), void* /;"	f	class:ImGui	typeref:typename:void
PlotLines	./imgui_widgets.cpp	/^void ImGui::PlotLines(const char* label, const float* values, int values_count, int values_offse/;"	f	class:ImGui	typeref:typename:void
PlotLines	./imgui_widgets.cpp	/^void ImGui::PlotLines(const char* label, float (*values_getter)(void* data, int idx), void* data/;"	f	class:ImGui	typeref:typename:void
Plot_ArrayGetter	./imgui_widgets.cpp	/^static float Plot_ArrayGetter(void* data, int idx)$/;"	f	typeref:typename:float	file:
PollUnicodeChars	./examples/example_android_opengl3/main.cpp	/^static int PollUnicodeChars()$/;"	f	typeref:typename:int	file:
PolygonMode	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLPOLYGONMODEPROC              PolygonMode;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLPOLYGONMODEPROC
PopAllowKeyboardFocus	./imgui.h	/^    static inline void  PopAllowKeyboardFocus()                                 { PopItemFlag();/;"	f	namespace:ImGui	typeref:typename:void
PopButtonRepeat	./imgui.h	/^    static inline void  PopButtonRepeat()                                       { PopItemFlag();/;"	f	namespace:ImGui	typeref:typename:void
PopClipRect	./imgui.cpp	/^void ImGui::PopClipRect()$/;"	f	class:ImGui	typeref:typename:void
PopClipRect	./imgui_draw.cpp	/^void ImDrawList::PopClipRect()$/;"	f	class:ImDrawList	typeref:typename:void
PopColumnsBackground	./imgui_tables.cpp	/^void ImGui::PopColumnsBackground()$/;"	f	class:ImGui	typeref:typename:void
PopFocusScope	./imgui.cpp	/^void ImGui::PopFocusScope()$/;"	f	class:ImGui	typeref:typename:void
PopFont	./imgui.cpp	/^void  ImGui::PopFont()$/;"	f	class:ImGui	typeref:typename:void
PopID	./imgui.cpp	/^void ImGui::PopID()$/;"	f	class:ImGui	typeref:typename:void
PopItemFlag	./imgui.cpp	/^void ImGui::PopItemFlag()$/;"	f	class:ImGui	typeref:typename:void
PopItemWidth	./imgui.cpp	/^void ImGui::PopItemWidth()$/;"	f	class:ImGui	typeref:typename:void
PopStyleColor	./imgui.cpp	/^void ImGui::PopStyleColor(int count)$/;"	f	class:ImGui	typeref:typename:void
PopStyleCompact	./imgui_demo.cpp	/^static void PopStyleCompact()$/;"	f	typeref:typename:void	file:
PopStyleVar	./imgui.cpp	/^void ImGui::PopStyleVar(int count)$/;"	f	class:ImGui	typeref:typename:void
PopTabStop	./imgui.h	/^    static inline void  PopTabStop()                                            { PopItemFlag();/;"	f	namespace:ImGui	typeref:typename:void
PopTextWrapPos	./imgui.cpp	/^void ImGui::PopTextWrapPos()$/;"	f	class:ImGui	typeref:typename:void
PopTextureID	./imgui_draw.cpp	/^void ImDrawList::PopTextureID()$/;"	f	class:ImDrawList	typeref:typename:void
PopupBorderSize	./imgui.h	/^    float       PopupBorderSize;            \/\/ Thickness of border around popup\/tooltip windo/;"	m	struct:ImGuiStyle	typeref:typename:float
PopupId	./imgui_internal.h	/^    ImGuiID                 PopupId;                            \/\/ ID in the popup stack when /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
PopupId	./imgui_internal.h	/^    ImGuiID             PopupId;        \/\/ Set on OpenPopup()$/;"	m	struct:ImGuiPopupData	typeref:typename:ImGuiID
PopupRounding	./imgui.h	/^    float       PopupRounding;              \/\/ Radius of popup window corners rounding. (Note /;"	m	struct:ImGuiStyle	typeref:typename:float
Pos	./imgui.h	/^    ImVec2              Pos;                    \/\/ Main Area: Position of the viewport (Dear I/;"	m	struct:ImGuiViewport	typeref:typename:ImVec2
Pos	./imgui.h	/^    ImVec2  Pos;            \/\/ Read-only.   Window position, for reference.$/;"	m	struct:ImGuiSizeCallbackData	typeref:typename:ImVec2
Pos	./imgui_draw.cpp	/^    ImVec2                  Pos;$/;"	m	struct:ImTriangulatorNode	typeref:typename:ImVec2	file:
Pos	./imgui_internal.h	/^    ImVec2                  Pos;                                \/\/ Position (always rounded-up/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
Pos	./imgui_internal.h	/^    ImVec2ih    Pos;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:ImVec2ih
PosCond	./imgui_internal.h	/^    ImGuiCond                   PosCond;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiCond
PosPivotVal	./imgui_internal.h	/^    ImVec2                      PosPivotVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
PosToIndexConvert	./imgui_internal.h	/^    bool    PosToIndexConvert;      \/\/ Begin\/End are absolute position (will be converted to /;"	m	struct:ImGuiListClipperRange	typeref:typename:bool
PosToIndexOffsetMax	./imgui_internal.h	/^    ImS8    PosToIndexOffsetMax;    \/\/ Add to Min after converting to indices$/;"	m	struct:ImGuiListClipperRange	typeref:typename:ImS8
PosToIndexOffsetMin	./imgui_internal.h	/^    ImS8    PosToIndexOffsetMin;    \/\/ Add to Min after converting to indices$/;"	m	struct:ImGuiListClipperRange	typeref:typename:ImS8
PosVal	./imgui_internal.h	/^    ImVec2                      PosVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
PosX	./imgui_internal.h	/^struct ImGuiInputEventMousePos      { float PosX, PosY; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMousePos	typeref:typename:float
PosY	./imgui_internal.h	/^struct ImGuiInputEventMousePos      { float PosX, PosY; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMousePos	typeref:typename:float
PresentMode	./backends/imgui_impl_vulkan.h	/^    VkPresentModeKHR    PresentMode;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:VkPresentModeKHR
PreserveOrder	./imgui.h	/^    bool            PreserveOrder;  \/\/ = false  \/\/ GetNextSelectedItem() will return ordered/;"	m	struct:ImGuiSelectionBasicStorage	typeref:typename:bool
Prev	./imgui_draw.cpp	/^    ImTriangulatorNode*     Prev;$/;"	m	struct:ImTriangulatorNode	typeref:typename:ImTriangulatorNode *	file:
PrevEnabledColumn	./imgui_internal.h	/^    ImGuiTableColumnIdx     PrevEnabledColumn;              \/\/ Index of prev enabled\/visible /;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableColumnIdx
PrevFrameVisible	./imgui_internal.h	/^    int                 PrevFrameVisible;$/;"	m	struct:ImGuiTabBar	typeref:typename:int
PrevLineSize	./imgui_internal.h	/^    ImVec2                  PrevLineSize;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
PrevLineTextBaseOffset	./imgui_internal.h	/^    float                   PrevLineTextBaseOffset;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:float
PrevTabsContentsHeight	./imgui_internal.h	/^    float               PrevTabsContentsHeight; \/\/ Record the height of contents submitted bel/;"	m	struct:ImGuiTabBar	typeref:typename:float
PrevUserCallbackChar	./backends/imgui_impl_glfw.cpp	/^    GLFWcharfun             PrevUserCallbackChar;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWcharfun	file:
PrevUserCallbackCursorEnter	./backends/imgui_impl_glfw.cpp	/^    GLFWcursorenterfun      PrevUserCallbackCursorEnter;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWcursorenterfun	file:
PrevUserCallbackCursorPos	./backends/imgui_impl_glfw.cpp	/^    GLFWcursorposfun        PrevUserCallbackCursorPos;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWcursorposfun	file:
PrevUserCallbackKey	./backends/imgui_impl_glfw.cpp	/^    GLFWkeyfun              PrevUserCallbackKey;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWkeyfun	file:
PrevUserCallbackMonitor	./backends/imgui_impl_glfw.cpp	/^    GLFWmonitorfun          PrevUserCallbackMonitor;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWmonitorfun	file:
PrevUserCallbackMousebutton	./backends/imgui_impl_glfw.cpp	/^    GLFWmousebuttonfun      PrevUserCallbackMousebutton;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWmousebuttonfun	file:
PrevUserCallbackScroll	./backends/imgui_impl_glfw.cpp	/^    GLFWscrollfun           PrevUserCallbackScroll;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWscrollfun	file:
PrevUserCallbackWindowFocus	./backends/imgui_impl_glfw.cpp	/^    GLFWwindowfocusfun      PrevUserCallbackWindowFocus;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWwindowfocusfun	file:
PrevWndProc	./backends/imgui_impl_glfw.cpp	/^    WNDPROC                 PrevWndProc;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:WNDPROC	file:
Preview	./imgui.h	/^    bool            Preview;            \/\/ Set when AcceptDragDropPayload() was called and mou/;"	m	struct:ImGuiPayload	typeref:typename:bool
PreviewRect	./imgui_internal.h	/^    ImRect          PreviewRect;$/;"	m	struct:ImGuiComboPreviewData	typeref:typename:ImRect
PrimQuadUV	./imgui_draw.cpp	/^void ImDrawList::PrimQuadUV(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, /;"	f	class:ImDrawList	typeref:typename:void
PrimRect	./imgui_draw.cpp	/^void ImDrawList::PrimRect(const ImVec2& a, const ImVec2& c, ImU32 col)$/;"	f	class:ImDrawList	typeref:typename:void
PrimRectUV	./imgui_draw.cpp	/^void ImDrawList::PrimRectUV(const ImVec2& a, const ImVec2& c, const ImVec2& uv_a, const ImVec2& /;"	f	class:ImDrawList	typeref:typename:void
PrimReserve	./imgui_draw.cpp	/^void ImDrawList::PrimReserve(int idx_count, int vtx_count)$/;"	f	class:ImDrawList	typeref:typename:void
PrimUnreserve	./imgui_draw.cpp	/^void ImDrawList::PrimUnreserve(int idx_count, int vtx_count)$/;"	f	class:ImDrawList	typeref:typename:void
PrimVtx	./imgui.h	/^    inline    void  PrimVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col)         { PrimWriteI/;"	f	struct:ImDrawList	typeref:typename:void
PrimWriteIdx	./imgui.h	/^    inline    void  PrimWriteIdx(ImDrawIdx idx)                                     { *_IdxWrite/;"	f	struct:ImDrawList	typeref:typename:void
PrimWriteVtx	./imgui.h	/^    inline    void  PrimWriteVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col)    { _VtxWriteP/;"	f	struct:ImDrawList	typeref:typename:void
PrimitiveTopology	./backends/imgui_impl_dx10.cpp	/^        D3D10_PRIMITIVE_TOPOLOGY    PrimitiveTopology;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:D3D10_PRIMITIVE_TOPOLOGY	file:
PrimitiveTopology	./backends/imgui_impl_dx11.cpp	/^        D3D11_PRIMITIVE_TOPOLOGY    PrimitiveTopology;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:D3D11_PRIMITIVE_TOPOLOGY	file:
PrintFmt	./imgui_internal.h	/^    const char* PrintFmt;       \/\/ Default printf format for the type$/;"	m	struct:ImGuiDataTypeInfo	typeref:typename:const char *
ProgressBar	./imgui_widgets.cpp	/^void ImGui::ProgressBar(float fraction, const ImVec2& size_arg, const char* overlay)$/;"	f	class:ImGui	typeref:typename:void
Pseudo-code:	./docs/FONTS.md	/^#### Pseudo-code:$/;"	t	section:Using Custom Colorful Icons
Ptr	./backends/imgui_impl_opengl3.cpp	/^    GLvoid* Ptr;$/;"	m	struct:ImGui_ImplOpenGL3_VtxAttribState	typeref:typename:GLvoid *	file:
Ptr	./imgui_internal.h	/^    void*       Ptr;            \/\/ Either field can be set, not both. e.g. Dock node tab bars /;"	m	struct:ImGuiPtrOrIndex	typeref:typename:void *
PushAllowKeyboardFocus	./imgui.h	/^    static inline void  PushAllowKeyboardFocus(bool tab_stop)                   { PushItemFlag(I/;"	f	namespace:ImGui	typeref:typename:void
PushButtonRepeat	./imgui.h	/^    static inline void  PushButtonRepeat(bool repeat)                           { PushItemFlag(I/;"	f	namespace:ImGui	typeref:typename:void
PushClipRect	./imgui.cpp	/^void ImGui::PushClipRect(const ImVec2& clip_rect_min, const ImVec2& clip_rect_max, bool intersec/;"	f	class:ImGui	typeref:typename:void
PushClipRect	./imgui_draw.cpp	/^void ImDrawList::PushClipRect(const ImVec2& cr_min, const ImVec2& cr_max, bool intersect_with_cu/;"	f	class:ImDrawList	typeref:typename:void
PushClipRectFullScreen	./imgui_draw.cpp	/^void ImDrawList::PushClipRectFullScreen()$/;"	f	class:ImDrawList	typeref:typename:void
PushColumnClipRect	./imgui_tables.cpp	/^void ImGui::PushColumnClipRect(int column_index)$/;"	f	class:ImGui	typeref:typename:void
PushColumnsBackground	./imgui_tables.cpp	/^void ImGui::PushColumnsBackground()$/;"	f	class:ImGui	typeref:typename:void
PushFocusScope	./imgui.cpp	/^void ImGui::PushFocusScope(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
PushFont	./imgui.cpp	/^void ImGui::PushFont(ImFont* font)$/;"	f	class:ImGui	typeref:typename:void
PushID	./imgui.cpp	/^void ImGui::PushID(const char* str_id)$/;"	f	class:ImGui	typeref:typename:void
PushID	./imgui.cpp	/^void ImGui::PushID(const char* str_id_begin, const char* str_id_end)$/;"	f	class:ImGui	typeref:typename:void
PushID	./imgui.cpp	/^void ImGui::PushID(const void* ptr_id)$/;"	f	class:ImGui	typeref:typename:void
PushID	./imgui.cpp	/^void ImGui::PushID(int int_id)$/;"	f	class:ImGui	typeref:typename:void
PushItemFlag	./imgui.cpp	/^void ImGui::PushItemFlag(ImGuiItemFlags option, bool enabled)$/;"	f	class:ImGui	typeref:typename:void
PushItemWidth	./imgui.cpp	/^void ImGui::PushItemWidth(float item_width)$/;"	f	class:ImGui	typeref:typename:void
PushMultiItemsWidths	./imgui.cpp	/^void ImGui::PushMultiItemsWidths(int components, float w_full)$/;"	f	class:ImGui	typeref:typename:void
PushOverrideID	./imgui.cpp	/^void ImGui::PushOverrideID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
PushStyleColor	./imgui.cpp	/^void ImGui::PushStyleColor(ImGuiCol idx, ImU32 col)$/;"	f	class:ImGui	typeref:typename:void
PushStyleColor	./imgui.cpp	/^void ImGui::PushStyleColor(ImGuiCol idx, const ImVec4& col)$/;"	f	class:ImGui	typeref:typename:void
PushStyleCompact	./imgui_demo.cpp	/^static void PushStyleCompact()$/;"	f	typeref:typename:void	file:
PushStyleVar	./imgui.cpp	/^void ImGui::PushStyleVar(ImGuiStyleVar idx, const ImVec2& val)$/;"	f	class:ImGui	typeref:typename:void
PushStyleVar	./imgui.cpp	/^void ImGui::PushStyleVar(ImGuiStyleVar idx, float val)$/;"	f	class:ImGui	typeref:typename:void
PushStyleVarX	./imgui.cpp	/^void ImGui::PushStyleVarX(ImGuiStyleVar idx, float val_x)$/;"	f	class:ImGui	typeref:typename:void
PushStyleVarY	./imgui.cpp	/^void ImGui::PushStyleVarY(ImGuiStyleVar idx, float val_y)$/;"	f	class:ImGui	typeref:typename:void
PushTabStop	./imgui.h	/^    static inline void  PushTabStop(bool tab_stop)                              { PushItemFlag(I/;"	f	namespace:ImGui	typeref:typename:void
PushTextWrapPos	./imgui.cpp	/^void ImGui::PushTextWrapPos(float wrap_pos_x)$/;"	f	class:ImGui	typeref:typename:void
PushTextureID	./imgui_draw.cpp	/^void ImDrawList::PushTextureID(ImTextureID texture_id)$/;"	f	class:ImDrawList	typeref:typename:void
Q&A: Basics	./docs/FAQ.md	/^# Q&A: Basics$/;"	c
Q&A: Community	./docs/FAQ.md	/^# Q&A: Community$/;"	c
Q&A: Concerns	./docs/FAQ.md	/^# Q&A: Concerns$/;"	c
Q&A: Fonts, Text	./docs/FAQ.md	/^# Q&A: Fonts, Text$/;"	c
Q&A: Integration	./docs/FAQ.md	/^# Q&A: Integration$/;"	c
Q&A: Usage	./docs/FAQ.md	/^# Q&A: Usage$/;"	c
Q. What is this library called?	./docs/FAQ.md	/^### Q. What is this library called?$/;"	S	chapter:Q&A: Basics
Q: About the ID Stack system...	./docs/FAQ.md	/^### Q: About the ID Stack system...$/;"	S	chapter:Q&A: Usage
Q: Can you create elaborate/serious tools with Dear ImGui?	./docs/FAQ.md	/^### Q: Can you create elaborate\/serious tools with Dear ImGui?$/;"	S	chapter:Q&A: Concerns
Q: Can you reskin the look of Dear ImGui?	./docs/FAQ.md	/^### Q: Can you reskin the look of Dear ImGui?$/;"	S	chapter:Q&A: Concerns
Q: How can I display an image? What is ImTextureID, how does it work?	./docs/FAQ.md	/^### Q: How can I display an image? What is ImTextureID, how does it work?$/;"	S	chapter:Q&A: Usage
Q: How can I display and input non-Latin characters such as Chinese, Japanese, Korean, Cyrillic?	./docs/FAQ.md	/^### Q: How can I display and input non-Latin characters such as Chinese, Japanese, Korean, Cyril/;"	S	chapter:Q&A: Fonts, Text
Q: How can I display custom shapes? (using low-level ImDrawList API)	./docs/FAQ.md	/^### Q: How can I display custom shapes? (using low-level ImDrawList API)$/;"	S	chapter:Q&A: Usage
Q: How can I easily use icons in my application?	./docs/FAQ.md	/^### Q: How can I easily use icons in my application?$/;"	S	chapter:Q&A: Fonts, Text
Q: How can I enable keyboard or gamepad controls?	./docs/FAQ.md	/^### Q: How can I enable keyboard or gamepad controls?$/;"	S	chapter:Q&A: Integration
Q: How can I have multiple widgets with the same label?	./docs/FAQ.md	/^### Q: How can I have multiple widgets with the same label?$/;"	S	chapter:Q&A: Usage
Q: How can I have multiple windows with the same label?	./docs/FAQ.md	/^### Q: How can I have multiple windows with the same label?$/;"	S	chapter:Q&A: Usage
Q: How can I have widgets with an empty label?	./docs/FAQ.md	/^### Q: How can I have widgets with an empty label?$/;"	S	chapter:Q&A: Usage
Q: How can I help?	./docs/FAQ.md	/^### Q: How can I help?$/;"	S	chapter:Q&A: Community
Q: How can I interact with standard C++ types (such as std::string and std::vector)?	./docs/FAQ.md	/^### Q: How can I interact with standard C++ types (such as std::string and std::vector)?$/;"	S	chapter:Q&A: Usage
Q: How can I load a different font than the default?	./docs/FAQ.md	/^### Q: How can I load a different font than the default?$/;"	S	chapter:Q&A: Fonts, Text
Q: How can I load multiple fonts?	./docs/FAQ.md	/^### Q: How can I load multiple fonts?$/;"	S	chapter:Q&A: Fonts, Text
Q: How can I tell whether to dispatch mouse/keyboard to Dear ImGui or my application?	./docs/FAQ.md	/^### Q: How can I tell whether to dispatch mouse\/keyboard to Dear ImGui or my application?$/;"	S	chapter:Q&A: Integration
Q: How can I use maths operators with ImVec2?	./docs/FAQ.md	/^### Q: How can I use maths operators with ImVec2?$/;"	S	chapter:Q&A: Usage
Q: How can I use my own maths types instead of ImVec2/ImVec4?	./docs/FAQ.md	/^### Q: How can I use my own maths types instead of ImVec2\/ImVec4?$/;"	S	chapter:Q&A: Usage
Q: How can I use this on a machine without mouse, keyboard or screen? (input share, remote display)	./docs/FAQ.md	/^### Q: How can I use this on a machine without mouse, keyboard or screen? (input share, remote d/;"	S	chapter:Q&A: Integration
Q: How should I handle DPI in my application?	./docs/FAQ.md	/^### Q: How should I handle DPI in my application?$/;"	S	chapter:Q&A: Fonts, Text
Q: How to get started?	./docs/FAQ.md	/^### Q: How to get started?$/;"	S	chapter:Q&A: Integration
Q: I integrated Dear ImGui in my engine and little squares are showing instead of text...	./docs/FAQ.md	/^### Q: I integrated Dear ImGui in my engine and little squares are showing instead of text...$/;"	S	chapter:Q&A: Integration
Q: I integrated Dear ImGui in my engine and some elements are clipping or disappearing when I move windows around...	./docs/FAQ.md	/^### Q: I integrated Dear ImGui in my engine and some elements are clipping or disappearing when /;"	S	chapter:Q&A: Integration
Q: I integrated Dear ImGui in my engine and some elements are displaying outside their expected windows boundaries...	./docs/FAQ.md	/^### Q: I integrated Dear ImGui in my engine and some elements are displaying outside their expec/;"	S	chapter:Q&A: Integration
Q: Where is the documentation?	./docs/FAQ.md	/^### Q: Where is the documentation?$/;"	S	chapter:Q&A: Basics
Q: Which version should I get?	./docs/FAQ.md	/^### Q: Which version should I get?$/;"	S	chapter:Q&A: Basics
Q: Who uses Dear ImGui?	./docs/FAQ.md	/^### Q: Who uses Dear ImGui?$/;"	S	chapter:Q&A: Concerns
Q: Why is my widget not reacting when I click on it?	./docs/FAQ.md	/^### Q: Why is my widget not reacting when I click on it?$/;"	S	chapter:Q&A: Usage
Q: Why is the wrong widget reacting when I click on one?	./docs/FAQ.md	/^### Q: Why is the wrong widget reacting when I click on one?$/;"	S	chapter:Q&A: Usage
Q: Why using C++ (as opposed to C)?	./docs/FAQ.md	/^### Q: Why using C++ (as opposed to C)?$/;"	S	chapter:Q&A: Concerns
Quantity	./imgui_demo.cpp	/^    int         Quantity;$/;"	m	struct:__anon38b7fb720511::MyItem	typeref:typename:int	file:
QueryFrameCount	./imgui_internal.h	/^    ImS8                    QueryFrameCount;            \/\/ >= 1: Query in progress$/;"	m	struct:ImGuiStackLevelInfo	typeref:typename:ImS8
QueryId	./imgui_internal.h	/^    ImGuiID                 QueryId;                    \/\/ ID to query details for$/;"	m	struct:ImGuiIDStackTool	typeref:typename:ImGuiID
QuerySuccess	./imgui_internal.h	/^    bool                    QuerySuccess;               \/\/ Obtained result from DebugHookIdInf/;"	m	struct:ImGuiStackLevelInfo	typeref:typename:bool
Queue	./backends/imgui_impl_vulkan.h	/^    VkQueue                         Queue;$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:VkQueue
QueueFamily	./backends/imgui_impl_vulkan.h	/^    uint32_t                        QueueFamily;$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:uint32_t
REGULAR FONTS	./docs/FONTS.md	/^#### REGULAR FONTS$/;"	t	section:Font Links
RS	./backends/imgui_impl_dx10.cpp	/^        ID3D10RasterizerState*      RS;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:ID3D10RasterizerState *	file:
RS	./backends/imgui_impl_dx11.cpp	/^        ID3D11RasterizerState*      RS;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11RasterizerState *	file:
RTVFormat	./backends/imgui_impl_dx12.cpp	/^    DXGI_FORMAT                 RTVFormat;$/;"	m	struct:ImGui_ImplDX12_Data	typeref:typename:DXGI_FORMAT	file:
RadioButton	./imgui_widgets.cpp	/^bool ImGui::RadioButton(const char* label, bool active)$/;"	f	class:ImGui	typeref:typename:bool
RadioButton	./imgui_widgets.cpp	/^bool ImGui::RadioButton(const char* label, int* v, int v_button)$/;"	f	class:ImGui	typeref:typename:bool
RangeDirection	./imgui.h	/^    ImS8                        RangeDirection; \/\/                  \/  ms:w  app:r   \/\/ Par/;"	m	struct:ImGuiSelectionRequest	typeref:typename:ImS8
RangeDstPassedBy	./imgui_internal.h	/^    bool                    RangeDstPassedBy;   \/\/ Set by the item that matches NavJustMovedTo/;"	m	struct:ImGuiMultiSelectTempData	typeref:typename:bool
RangeFirstItem	./imgui.h	/^    ImGuiSelectionUserData      RangeFirstItem; \/\/                  \/  ms:w, app:r   \/\/ Par/;"	m	struct:ImGuiSelectionRequest	typeref:typename:ImGuiSelectionUserData
RangeLastItem	./imgui.h	/^    ImGuiSelectionUserData      RangeLastItem;  \/\/                  \/  ms:w, app:r   \/\/ Par/;"	m	struct:ImGuiSelectionRequest	typeref:typename:ImGuiSelectionUserData
RangeSelected	./imgui_internal.h	/^    ImS8                    RangeSelected;      \/\/ -1 (don't have) or true\/false$/;"	m	struct:ImGuiMultiSelectState	typeref:typename:ImS8
RangeSrcItem	./imgui.h	/^    ImGuiSelectionUserData      RangeSrcItem;   \/\/  ms:w  app:r     \/                \/\/ (If/;"	m	struct:ImGuiMultiSelectIO	typeref:typename:ImGuiSelectionUserData
RangeSrcItem	./imgui_internal.h	/^    ImGuiSelectionUserData  RangeSrcItem;       \/\/$/;"	m	struct:ImGuiMultiSelectState	typeref:typename:ImGuiSelectionUserData
RangeSrcPassedBy	./imgui_internal.h	/^    bool                    RangeSrcPassedBy;   \/\/ Set by the item that matches RangeSrcItem.$/;"	m	struct:ImGuiMultiSelectTempData	typeref:typename:bool
RangeSrcReset	./imgui.h	/^    bool                        RangeSrcReset;  \/\/        app:w     \/  ms:r          \/\/ (If/;"	m	struct:ImGuiMultiSelectIO	typeref:typename:bool
Ranges	./imgui_internal.h	/^    ImVector<ImGuiListClipperRange> Ranges;$/;"	m	struct:ImGuiListClipperData	typeref:typename:ImVector<ImGuiListClipperRange>
RasterizationDensity	./misc/freetype/imgui_freetype.cpp	/^        float           RasterizationDensity;$/;"	m	struct:__anon21d590df0111::FreeTypeFont	typeref:typename:float	file:
RasterizerDensity	./imgui.h	/^    float           RasterizerDensity;      \/\/ 1.0f     \/\/ DPI scale for rasterization, not /;"	m	struct:ImFontConfig	typeref:typename:float
RasterizerMultiply	./imgui.h	/^    float           RasterizerMultiply;     \/\/ 1.0f     \/\/ Linearly brighten (>1.0f) or dark/;"	m	struct:ImFontConfig	typeref:typename:float
RawData	./imgui_internal.h	/^    void*                       RawData;                    \/\/ Single allocation to hold Colum/;"	m	struct:ImGuiTable	typeref:typename:void *
ReadInitFn	./imgui_internal.h	/^    void        (*ReadInitFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler);                /;"	m	struct:ImGuiSettingsHandler	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler)
ReadLineFn	./imgui_internal.h	/^    void        (*ReadLineFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, void* entry, con/;"	m	struct:ImGuiSettingsHandler	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler,void * entry,const char * line)
ReadOpenFn	./imgui_internal.h	/^    void*       (*ReadOpenFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, const char* name/;"	m	struct:ImGuiSettingsHandler	typeref:typename:void * (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler,const char * name)
ReadPixels	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLREADPIXELSPROC               ReadPixels;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLREADPIXELSPROC
ReclassifyNode	./imgui_draw.cpp	/^void ImTriangulator::ReclassifyNode(ImTriangulatorNode* n1)$/;"	f	class:ImTriangulator	typeref:typename:void
Recommended Backends	./docs/BACKENDS.md	/^### Recommended Backends$/;"	S	section:Dear ImGui: Backends
Rect	./imgui_internal.h	/^    ImRect                  Rect;               \/\/ Full rectangle$/;"	m	struct:ImGuiLastItemData	typeref:typename:ImRect
Rect	./imgui_internal.h	/^    ImRect      Rect() const            { return ImRect(Pos.x, Pos.y, Pos.x + Size.x, Pos.y + Si/;"	f	struct:ImGuiWindow	typeref:typename:ImRect
RectRel	./imgui_internal.h	/^    ImRect              RectRel;        \/\/ Init,Move    \/\/ Best candidate bounding box in wi/;"	m	struct:ImGuiNavItemData	typeref:typename:ImRect
Rects	./imgui_draw.cpp	/^    stbrp_rect*         Rects;              \/\/ Rectangle to pack. We first fill in their size /;"	m	struct:ImFontBuildSrcData	typeref:typename:stbrp_rect *	file:
Rects	./misc/freetype/imgui_freetype.cpp	/^    stbrp_rect*         Rects;              \/\/ Rectangle to pack. We first fill in their size /;"	m	struct:ImFontBuildSrcDataFT	typeref:typename:stbrp_rect *	file:
RefFrame	./imgui.h	/^    mutable int RefFrame;$/;"	m	struct:ImGuiOnceUponAFrame	typeref:typename:int
RefScale	./imgui_internal.h	/^    float                       RefScale;                   \/\/ Reference scale to be able to r/;"	m	struct:ImGuiTable	typeref:typename:float
RefScale	./imgui_internal.h	/^    float                       RefScale;               \/\/ Reference scale to be able to resca/;"	m	struct:ImGuiTableSettings	typeref:typename:float
RefVal	./imgui_internal.h	/^    ImGuiDataTypeStorage        RefVal;             \/\/ Not exposed yet, for ImGuiInputTextFlag/;"	m	struct:ImGuiNextItemData	typeref:typename:ImGuiDataTypeStorage
RefreshFlagsVal	./imgui_internal.h	/^    ImGuiWindowRefreshFlags     RefreshFlagsVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiWindowRefreshFlags
Releases & Changelogs	./docs/README.md	/^### Releases & Changelogs$/;"	S	chapter:Dear ImGui
ReloadSelectionEnd	./imgui_internal.h	/^    int                     ReloadSelectionEnd;$/;"	m	struct:ImGuiInputTextState	typeref:typename:int
ReloadSelectionStart	./imgui_internal.h	/^    int                     ReloadSelectionStart;   \/\/ POSITIONS ARE IN IMWCHAR units *NOT* UT/;"	m	struct:ImGuiInputTextState	typeref:typename:int
ReloadUserBuf	./imgui_internal.h	/^    bool                    ReloadUserBuf;          \/\/ force a reload of user buf so it may be/;"	m	struct:ImGuiInputTextState	typeref:typename:bool
ReloadUserBufAndKeepSelection	./imgui_internal.h	/^    void        ReloadUserBufAndKeepSelection() { ReloadUserBuf = true; ReloadSelectionStart = S/;"	f	struct:ImGuiInputTextState	typeref:typename:void
ReloadUserBufAndMoveToEnd	./imgui_internal.h	/^    void        ReloadUserBufAndMoveToEnd()     { ReloadUserBuf = true; ReloadSelectionStart = R/;"	f	struct:ImGuiInputTextState	typeref:typename:void
ReloadUserBufAndSelectAll	./imgui_internal.h	/^    void        ReloadUserBufAndSelectAll()     { ReloadUserBuf = true; ReloadSelectionStart = 0/;"	f	struct:ImGuiInputTextState	typeref:typename:void
Remove	./imgui_internal.h	/^    void        Remove(ImGuiID key, ImPoolIdx idx)  { Buf[idx].~T(); *(int*)&Buf[idx] = FreeIdx;/;"	f	struct:ImPool	typeref:typename:void
Remove	./imgui_internal.h	/^    void        Remove(ImGuiID key, const T* p)     { Remove(key, GetIndex(p)); }$/;"	f	struct:ImPool	typeref:typename:void
RemoveContextHook	./imgui.cpp	/^void ImGui::RemoveContextHook(ImGuiContext* ctx, ImGuiID hook_id)$/;"	f	class:ImGui	typeref:typename:void
RemoveSettingsHandler	./imgui.cpp	/^void ImGui::RemoveSettingsHandler(const char* type_name)$/;"	f	class:ImGui	typeref:typename:void
RenamingDoc	./imgui_demo.cpp	/^    MyDocument*             RenamingDoc = NULL;$/;"	m	struct:ExampleAppDocuments	typeref:typename:MyDocument *	file:
RenamingStarted	./imgui_demo.cpp	/^    bool                    RenamingStarted = false;$/;"	m	struct:ExampleAppDocuments	typeref:typename:bool	file:
Render	./imgui.cpp	/^void ImGui::Render()$/;"	f	class:ImGui	typeref:typename:void
RenderArrow	./imgui_draw.cpp	/^void ImGui::RenderArrow(ImDrawList* draw_list, ImVec2 pos, ImU32 col, ImGuiDir dir, float scale)$/;"	f	class:ImGui	typeref:typename:void
RenderArrowPointingAt	./imgui_draw.cpp	/^void ImGui::RenderArrowPointingAt(ImDrawList* draw_list, ImVec2 pos, ImVec2 half_sz, ImGuiDir di/;"	f	class:ImGui	typeref:typename:void
RenderArrowsForVerticalBar	./imgui_widgets.cpp	/^static void RenderArrowsForVerticalBar(ImDrawList* draw_list, ImVec2 pos, ImVec2 half_sz, float /;"	f	typeref:typename:void	file:
RenderBullet	./imgui_draw.cpp	/^void ImGui::RenderBullet(ImDrawList* draw_list, ImVec2 pos, ImU32 col)$/;"	f	class:ImGui	typeref:typename:void
RenderChar	./imgui_draw.cpp	/^void ImFont::RenderChar(ImDrawList* draw_list, float size, const ImVec2& pos, ImU32 col, ImWchar/;"	f	class:ImFont	typeref:typename:void
RenderCheckMark	./imgui_draw.cpp	/^void ImGui::RenderCheckMark(ImDrawList* draw_list, ImVec2 pos, ImU32 col, float sz)$/;"	f	class:ImGui	typeref:typename:void
RenderColorRectWithAlphaCheckerboard	./imgui_draw.cpp	/^void ImGui::RenderColorRectWithAlphaCheckerboard(ImDrawList* draw_list, ImVec2 p_min, ImVec2 p_m/;"	f	class:ImGui	typeref:typename:void
RenderCompleteSemaphore	./backends/imgui_impl_vulkan.h	/^    VkSemaphore         RenderCompleteSemaphore;$/;"	m	struct:ImGui_ImplVulkanH_FrameSemaphores	typeref:typename:VkSemaphore
RenderDimmedBackgroundBehindWindow	./imgui.cpp	/^static void ImGui::RenderDimmedBackgroundBehindWindow(ImGuiWindow* window, ImU32 col)$/;"	f	class:ImGui	typeref:typename:void	file:
RenderDimmedBackgrounds	./imgui.cpp	/^static void ImGui::RenderDimmedBackgrounds()$/;"	f	class:ImGui	typeref:typename:void	file:
RenderDragDropTargetRect	./imgui.cpp	/^void ImGui::RenderDragDropTargetRect(const ImRect& bb, const ImRect& item_clip_rect)$/;"	f	class:ImGui	typeref:typename:void
RenderFrame	./imgui.cpp	/^void ImGui::RenderFrame(ImVec2 p_min, ImVec2 p_max, ImU32 fill_col, bool border, float rounding)$/;"	f	class:ImGui	typeref:typename:void
RenderFrameBorder	./imgui.cpp	/^void ImGui::RenderFrameBorder(ImVec2 p_min, ImVec2 p_max, float rounding)$/;"	f	class:ImGui	typeref:typename:void
RenderGlyphAndGetInfo	./misc/freetype/imgui_freetype.cpp	/^    const FT_Bitmap* FreeTypeFont::RenderGlyphAndGetInfo(GlyphInfo* out_glyph_info)$/;"	f	class:__anon21d590df0111::FreeTypeFont	typeref:typename:const FT_Bitmap *
RenderMode	./misc/freetype/imgui_freetype.cpp	/^        FT_Render_Mode  RenderMode;$/;"	m	struct:__anon21d590df0111::FreeTypeFont	typeref:typename:FT_Render_Mode	file:
RenderMouseCursor	./imgui.cpp	/^void ImGui::RenderMouseCursor(ImVec2 base_pos, float base_scale, ImGuiMouseCursor mouse_cursor, /;"	f	class:ImGui	typeref:typename:void
RenderNavHighlight	./imgui.cpp	/^void ImGui::RenderNavHighlight(const ImRect& bb, ImGuiID id, ImGuiNavHighlightFlags flags)$/;"	f	class:ImGui	typeref:typename:void
RenderPass	./backends/imgui_impl_vulkan.h	/^    VkRenderPass                    RenderPass;                   \/\/ Ignored if using dynamic /;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:VkRenderPass
RenderPass	./backends/imgui_impl_vulkan.h	/^    VkRenderPass        RenderPass;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:VkRenderPass
RenderRectFilledRangeH	./imgui_draw.cpp	/^void ImGui::RenderRectFilledRangeH(ImDrawList* draw_list, const ImRect& rect, ImU32 col, float x/;"	f	class:ImGui	typeref:typename:void
RenderRectFilledWithHole	./imgui_draw.cpp	/^void ImGui::RenderRectFilledWithHole(ImDrawList* draw_list, const ImRect& outer, const ImRect& i/;"	f	class:ImGui	typeref:typename:void
RenderResources	./backends/imgui_impl_wgpu.cpp	/^struct RenderResources$/;"	s	file:
RenderTargetFormat	./backends/imgui_impl_wgpu.h	/^    WGPUTextureFormat       RenderTargetFormat = WGPUTextureFormat_Undefined;$/;"	m	struct:ImGui_ImplWGPU_InitInfo	typeref:typename:WGPUTextureFormat
RenderText	./imgui.cpp	/^void ImGui::RenderText(ImVec2 pos, const char* text, const char* text_end, bool hide_text_after_/;"	f	class:ImGui	typeref:typename:void
RenderText	./imgui_draw.cpp	/^void ImFont::RenderText(ImDrawList* draw_list, float size, const ImVec2& pos, ImU32 col, const I/;"	f	class:ImFont	typeref:typename:void
RenderTextClipped	./imgui.cpp	/^void ImGui::RenderTextClipped(const ImVec2& pos_min, const ImVec2& pos_max, const char* text, co/;"	f	class:ImGui	typeref:typename:void
RenderTextClippedEx	./imgui.cpp	/^void ImGui::RenderTextClippedEx(ImDrawList* draw_list, const ImVec2& pos_min, const ImVec2& pos_/;"	f	class:ImGui	typeref:typename:void
RenderTextEllipsis	./imgui.cpp	/^void ImGui::RenderTextEllipsis(ImDrawList* draw_list, const ImVec2& pos_min, const ImVec2& pos_m/;"	f	class:ImGui	typeref:typename:void
RenderTextWrapped	./imgui.cpp	/^void ImGui::RenderTextWrapped(ImVec2 pos, const char* text, const char* text_end, float wrap_wid/;"	f	class:ImGui	typeref:typename:void
RenderViewportsThumbnails	./imgui.cpp	/^static void RenderViewportsThumbnails()$/;"	f	typeref:typename:void	file:
RenderWindowDecorations	./imgui.cpp	/^void ImGui::RenderWindowDecorations(ImGuiWindow* window, const ImRect& title_bar_rect, bool titl/;"	f	class:ImGui	typeref:typename:void
RenderWindowOuterBorders	./imgui.cpp	/^static void ImGui::RenderWindowOuterBorders(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void	file:
RenderWindowOuterSingleBorder	./imgui.cpp	/^static void RenderWindowOuterSingleBorder(ImGuiWindow* window, int border_n, ImU32 border_col, f/;"	f	typeref:typename:void	file:
RenderWindowTitleBarContents	./imgui.cpp	/^void ImGui::RenderWindowTitleBarContents(ImGuiWindow* window, const ImRect& title_bar_rect, cons/;"	f	class:ImGui	typeref:typename:void
Renderer	./backends/imgui_impl_sdl2.cpp	/^    SDL_Renderer*           Renderer;$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:SDL_Renderer *	file:
Renderer	./backends/imgui_impl_sdl3.cpp	/^    SDL_Renderer*           Renderer;$/;"	m	struct:ImGui_ImplSDL3_Data	typeref:typename:SDL_Renderer *	file:
Renderer	./backends/imgui_impl_sdlrenderer2.cpp	/^    SDL_Renderer*   Renderer;       \/\/ Main viewport's renderer$/;"	m	struct:ImGui_ImplSDLRenderer2_Data	typeref:typename:SDL_Renderer *	file:
Renderer	./backends/imgui_impl_sdlrenderer3.cpp	/^    SDL_Renderer*           Renderer;       \/\/ Main viewport's renderer$/;"	m	struct:ImGui_ImplSDLRenderer3_Data	typeref:typename:SDL_Renderer *	file:
ReorderColumn	./imgui_internal.h	/^    ImGuiTableColumnIdx         ReorderColumn;              \/\/ Index of column being reordered/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
ReorderColumnDir	./imgui_internal.h	/^    ImGuiTableColumnIdx         ReorderColumnDir;           \/\/ -1 or +1$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
ReorderRequestOffset	./imgui_internal.h	/^    ImS16               ReorderRequestOffset;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImS16
ReorderRequestTabId	./imgui_internal.h	/^    ImGuiID             ReorderRequestTabId;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
Request	./imgui_internal.h	/^    ImGuiTypingSelectRequest Request;           \/\/ User-facing data$/;"	m	struct:ImGuiTypingSelectState	typeref:typename:ImGuiTypingSelectRequest
RequestAdapter	./examples/example_glfw_wgpu/main.cpp	/^static WGPUAdapter RequestAdapter(WGPUInstance instance)$/;"	f	typeref:typename:WGPUAdapter	file:
RequestClear	./imgui_internal.h	/^    bool                    RequestClear;$/;"	m	struct:ImGuiBoxSelectState	typeref:typename:bool
RequestDelete	./imgui_demo.cpp	/^    bool            RequestDelete = false;      \/\/ Deferred deletion request$/;"	m	struct:ExampleAssetsBrowser	typeref:typename:bool	file:
RequestDevice	./examples/example_glfw_wgpu/main.cpp	/^static WGPUDevice RequestDevice(WGPUAdapter& adapter)$/;"	f	typeref:typename:WGPUDevice	file:
RequestSort	./imgui_demo.cpp	/^    bool            RequestSort = false;        \/\/ Deferred sort request$/;"	m	struct:ExampleAssetsBrowser	typeref:typename:bool	file:
RequestedWidth	./imgui_internal.h	/^    float               RequestedWidth;         \/\/ Width optionally requested by caller, -1.0f/;"	m	struct:ImGuiTabItem	typeref:typename:float
Requests	./imgui.h	/^    ImVector<ImGuiSelectionRequest> Requests;   \/\/  ms:w, app:r     \/  ms:w  app:r   \/\/ Req/;"	m	struct:ImGuiMultiSelectIO	typeref:typename:ImVector<ImGuiSelectionRequest>
Reserve	./imgui_internal.h	/^    inline void  Reserve(int n, size_t sz, int a=4) { IM_ASSERT(n == CurrIdx && n < CHUNKS); Cur/;"	f	struct:ImSpanAllocator	typeref:typename:void
Reserve	./imgui_internal.h	/^    void        Reserve(int capacity)               { Buf.reserve(capacity); Map.Data.reserve(ca/;"	f	struct:ImPool	typeref:typename:void
Reset	./imgui_internal.h	/^    void                            Reset(ImGuiListClipper* clipper) { ListClipper = clipper; St/;"	f	struct:ImGuiListClipperData	typeref:typename:void
ResetDevice	./examples/example_win32_directx9/main.cpp	/^void ResetDevice()$/;"	f	typeref:typename:void
ResetMouseDragDelta	./imgui.cpp	/^void ImGui::ResetMouseDragDelta(ImGuiMouseButton button)$/;"	f	class:ImGui	typeref:typename:void
ResizeBorderHeld	./imgui_internal.h	/^    signed char             ResizeBorderHeld;                   \/\/ Current border being held f/;"	m	struct:ImGuiWindow	typeref:typename:signed char
ResizeBorderHovered	./imgui_internal.h	/^    signed char             ResizeBorderHovered;                \/\/ Current border being hovere/;"	m	struct:ImGuiWindow	typeref:typename:signed char
ResizeLockMinContentsX2	./imgui_internal.h	/^    float                       ResizeLockMinContentsX2;    \/\/ Lock minimum contents width whi/;"	m	struct:ImGuiTable	typeref:typename:float
ResizedColumn	./imgui_internal.h	/^    ImGuiTableColumnIdx         ResizedColumn;              \/\/ Index of column being resized. /;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
ResizedColumnNextWidth	./imgui_internal.h	/^    float                       ResizedColumnNextWidth;$/;"	m	struct:ImGuiTable	typeref:typename:float
RestoreNavWindow	./imgui_internal.h	/^    ImGuiWindow*        RestoreNavWindow;\/\/ Set on OpenPopup(), a NavWindow that will be resto/;"	m	struct:ImGuiPopupData	typeref:typename:ImGuiWindow *
Results	./imgui_internal.h	/^    ImVector<ImGuiStackLevelInfo> Results;$/;"	m	struct:ImGuiIDStackTool	typeref:typename:ImVector<ImGuiStackLevelInfo>
RightMostEnabledColumn	./imgui_internal.h	/^    ImGuiTableColumnIdx         RightMostEnabledColumn;     \/\/ Index of right-most non-hidden /;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
RightMostStretchedColumn	./imgui_internal.h	/^    ImGuiTableColumnIdx         RightMostStretchedColumn;   \/\/ Index of right-most stretched c/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
RootWindow	./imgui_internal.h	/^    ImGuiWindow*            RootWindow;                         \/\/ Point to ourself or first a/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
RootWindowForNav	./imgui_internal.h	/^    ImGuiWindow*            RootWindowForNav;                   \/\/ Point to ourself or first a/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
RootWindowForTitleBarHighlight	./imgui_internal.h	/^    ImGuiWindow*            RootWindowForTitleBarHighlight;     \/\/ Point to ourself or first a/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
RootWindowPopupTree	./imgui_internal.h	/^    ImGuiWindow*            RootWindowPopupTree;                \/\/ Point to ourself or first a/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
RoundScalarWithFormatT	./imgui_widgets.cpp	/^TYPE ImGui::RoundScalarWithFormatT(const char* format, ImGuiDataType data_type, TYPE v)$/;"	f	class:ImGui	typeref:typename:TYPE
RoutingCurr	./imgui_internal.h	/^    ImGuiID                         RoutingCurr;$/;"	m	struct:ImGuiKeyRoutingData	typeref:typename:ImGuiID
RoutingCurrScore	./imgui_internal.h	/^    ImU8                            RoutingCurrScore;   \/\/ [DEBUG] For debug display$/;"	m	struct:ImGuiKeyRoutingData	typeref:typename:ImU8
RoutingNext	./imgui_internal.h	/^    ImGuiID                         RoutingNext;$/;"	m	struct:ImGuiKeyRoutingData	typeref:typename:ImGuiID
RoutingNextScore	./imgui_internal.h	/^    ImU8                            RoutingNextScore;   \/\/ Lower is better (0: perfect score)$/;"	m	struct:ImGuiKeyRoutingData	typeref:typename:ImU8
Row	./imgui.cpp	/^    struct KeyLayoutData { int Row, Col; const char* Label; ImGuiKey Key; };$/;"	m	struct:ImGui::DebugRenderKeyboardPreview::KeyLayoutData	typeref:typename:int	file:
RowBgColor	./imgui_internal.h	/^    ImU32                       RowBgColor[2];              \/\/ Background color override for c/;"	m	struct:ImGuiTable	typeref:typename:ImU32[2]
RowBgColorCounter	./imgui_internal.h	/^    int                         RowBgColorCounter;          \/\/ Counter for alternating backgro/;"	m	struct:ImGuiTable	typeref:typename:int
RowCellData	./imgui_internal.h	/^    ImSpan<ImGuiTableCellData>  RowCellData;                \/\/ Point within RawData[]. Store c/;"	m	struct:ImGuiTable	typeref:typename:ImSpan<ImGuiTableCellData>
RowCellDataCurrent	./imgui_internal.h	/^    ImGuiTableColumnIdx         RowCellDataCurrent;         \/\/ Index of current RowCellData[] /;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
RowCellPaddingY	./imgui_internal.h	/^    float                       RowCellPaddingY;            \/\/ Top and bottom padding. Reloade/;"	m	struct:ImGuiTable	typeref:typename:float
RowFlags	./imgui_internal.h	/^    ImGuiTableRowFlags          RowFlags : 16;              \/\/ Current row flags, see ImGuiTab/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableRowFlags:16
RowIndentOffsetX	./imgui_internal.h	/^    float                       RowIndentOffsetX;$/;"	m	struct:ImGuiTable	typeref:typename:float
RowMinHeight	./imgui_internal.h	/^    float                       RowMinHeight;               \/\/ Height submitted to TableNextRo/;"	m	struct:ImGuiTable	typeref:typename:float
RowPosY1	./imgui_internal.h	/^    float                       RowPosY1;$/;"	m	struct:ImGuiTable	typeref:typename:float
RowPosY2	./imgui_internal.h	/^    float                       RowPosY2;$/;"	m	struct:ImGuiTable	typeref:typename:float
RowTextBaseline	./imgui_internal.h	/^    float                       RowTextBaseline;$/;"	m	struct:ImGuiTable	typeref:typename:float
SDLK_APOSTROPHE	./backends/imgui_impl_sdl3.cpp	/^#define SDLK_APOSTROPHE /;"	d	file:
SDLK_GRAVE	./backends/imgui_impl_sdl3.cpp	/^#define SDLK_GRAVE /;"	d	file:
SDL_Event	./backends/imgui_impl_sdl2.h	/^typedef union SDL_Event SDL_Event;$/;"	t	typeref:union:SDL_Event
SDL_Event	./backends/imgui_impl_sdl3.h	/^typedef union SDL_Event SDL_Event;$/;"	t	typeref:union:SDL_Event
SDL_HAS_CAPTURE_AND_GLOBAL_MOUSE	./backends/imgui_impl_sdl2.cpp	/^#define SDL_HAS_CAPTURE_AND_GLOBAL_MOUSE /;"	d	file:
SDL_HAS_CAPTURE_AND_GLOBAL_MOUSE	./backends/imgui_impl_sdl3.cpp	/^#define SDL_HAS_CAPTURE_AND_GLOBAL_MOUSE /;"	d	file:
SDL_HAS_VULKAN	./backends/imgui_impl_sdl2.cpp	/^#define SDL_HAS_VULKAN /;"	d	file:
SDL_RenderGeometryRaw8BitColor	./backends/imgui_impl_sdlrenderer3.cpp	/^static int SDL_RenderGeometryRaw8BitColor(SDL_Renderer* renderer, ImVector<SDL_FColor>& colors_o/;"	f	typeref:typename:int	file:
SOURCES	./examples/example_glfw_metal/Makefile	/^SOURCES = main.mm$/;"	m
SOURCES	./examples/example_glfw_opengl2/Makefile	/^SOURCES = main.cpp$/;"	m
SOURCES	./examples/example_glfw_opengl2/build_win32.bat	/^@set SOURCES=main.cpp ..\\..\\backends\\imgui_impl_opengl2.cpp ..\\..\\backends\\imgui_impl_glfw/;"	v
SOURCES	./examples/example_glfw_opengl3/Makefile	/^SOURCES = main.cpp$/;"	m
SOURCES	./examples/example_glfw_opengl3/build_win32.bat	/^@set SOURCES=main.cpp ..\\..\\backends\\imgui_impl_glfw.cpp ..\\..\\backends\\imgui_impl_opengl3/;"	v
SOURCES	./examples/example_glfw_vulkan/build_win32.bat	/^@set SOURCES=main.cpp ..\\..\\backends\\imgui_impl_vulkan.cpp ..\\..\\backends\\imgui_impl_glfw./;"	v
SOURCES	./examples/example_glfw_vulkan/build_win64.bat	/^@set SOURCES=main.cpp ..\\..\\backends\\imgui_impl_vulkan.cpp ..\\..\\backends\\imgui_impl_glfw./;"	v
SOURCES	./examples/example_glut_opengl2/Makefile	/^SOURCES = main.cpp$/;"	m
SOURCES	./examples/example_null/Makefile	/^SOURCES = main.cpp$/;"	m
SOURCES	./examples/example_sdl2_directx11/build_win32.bat	/^@set SOURCES=main.cpp ..\\..\\backends\\imgui_impl_sdl2.cpp ..\\..\\backends\\imgui_impl_dx11.cp/;"	v
SOURCES	./examples/example_sdl2_metal/Makefile	/^SOURCES = main.mm$/;"	m
SOURCES	./examples/example_sdl2_opengl2/Makefile	/^SOURCES = main.cpp$/;"	m
SOURCES	./examples/example_sdl2_opengl2/build_win32.bat	/^@set SOURCES=main.cpp ..\\..\\backends\\imgui_impl_sdl2.cpp ..\\..\\backends\\imgui_impl_opengl2/;"	v
SOURCES	./examples/example_sdl2_opengl3/Makefile	/^SOURCES = main.cpp$/;"	m
SOURCES	./examples/example_sdl2_opengl3/build_win32.bat	/^@set SOURCES=main.cpp ..\\..\\backends\\imgui_impl_sdl2.cpp ..\\..\\backends\\imgui_impl_opengl3/;"	v
SOURCES	./examples/example_sdl2_sdlrenderer2/Makefile	/^SOURCES = main.cpp$/;"	m
SOURCES	./examples/example_sdl2_sdlrenderer2/build_win32.bat	/^@set SOURCES=main.cpp ..\\..\\backends\\imgui_impl_sdl2.cpp ..\\..\\backends\\imgui_impl_sdlrend/;"	v
SOURCES	./examples/example_sdl2_vulkan/build_win32.bat	/^@set SOURCES=main.cpp ..\\..\\backends\\imgui_impl_sdl2.cpp ..\\..\\backends\\imgui_impl_vulkan./;"	v
SOURCES	./examples/example_sdl3_opengl3/Makefile	/^SOURCES = main.cpp$/;"	m
SOURCES	./examples/example_sdl3_opengl3/build_win32.bat	/^@set SOURCES=main.cpp ..\\..\\backends\\imgui_impl_sdl3.cpp ..\\..\\backends\\imgui_impl_opengl3/;"	v
SOURCES	./examples/example_sdl3_sdlrenderer3/Makefile	/^SOURCES = main.cpp$/;"	m
SOURCES	./examples/example_sdl3_sdlrenderer3/build_win32.bat	/^@set SOURCES=main.cpp ..\\..\\backends\\imgui_impl_sdl3.cpp ..\\..\\backends\\imgui_impl_sdlrend/;"	v
SOURCES	./examples/example_win32_directx10/build_win32.bat	/^@set SOURCES=main.cpp ..\\..\\backends\\imgui_impl_win32.cpp ..\\..\\backends\\imgui_impl_dx10.c/;"	v
SOURCES	./examples/example_win32_directx11/build_win32.bat	/^@set SOURCES=main.cpp ..\\..\\backends\\imgui_impl_dx11.cpp ..\\..\\backends\\imgui_impl_win32.c/;"	v
SOURCES	./examples/example_win32_directx12/build_win32.bat	/^@set SOURCES=main.cpp ..\\..\\backends\\imgui_impl_dx12.cpp ..\\..\\backends\\imgui_impl_win32.c/;"	v
SOURCES	./examples/example_win32_directx9/build_win32.bat	/^@set SOURCES=main.cpp ..\\..\\backends\\imgui_impl_dx9.cpp ..\\..\\backends\\imgui_impl_win32.cp/;"	v
SOURCES	./examples/example_win32_opengl3/build_win32.bat	/^@set SOURCES=main.cpp ..\\..\\backends\\imgui_impl_opengl3.cpp ..\\..\\backends\\imgui_impl_win3/;"	v
STBRP_ASSERT	./imgui_draw.cpp	/^#define STBRP_ASSERT(/;"	d	file:
STBRP_ASSERT	./imstb_rectpack.h	/^#define STBRP_ASSERT /;"	d
STBRP_ASSERT	./misc/freetype/imgui_freetype.cpp	/^#define STBRP_ASSERT(/;"	d	file:
STBRP_DEF	./imstb_rectpack.h	/^#define STBRP_DEF /;"	d
STBRP_HEURISTIC_Skyline_BF_sortHeight	./imstb_rectpack.h	/^   STBRP_HEURISTIC_Skyline_BF_sortHeight$/;"	e	enum:__anon804ea3c30103
STBRP_HEURISTIC_Skyline_BL_sortHeight	./imstb_rectpack.h	/^   STBRP_HEURISTIC_Skyline_BL_sortHeight = STBRP_HEURISTIC_Skyline_default,$/;"	e	enum:__anon804ea3c30103
STBRP_HEURISTIC_Skyline_default	./imstb_rectpack.h	/^   STBRP_HEURISTIC_Skyline_default=0,$/;"	e	enum:__anon804ea3c30103
STBRP_SORT	./imgui_draw.cpp	/^#define STBRP_SORT /;"	d	file:
STBRP_SORT	./imstb_rectpack.h	/^#define STBRP_SORT /;"	d
STBRP_STATIC	./imgui_draw.cpp	/^#define STBRP_STATIC$/;"	d	file:
STBRP_STATIC	./misc/freetype/imgui_freetype.cpp	/^#define STBRP_STATIC$/;"	d	file:
STBRP__CDECL	./imstb_rectpack.h	/^#define STBRP__CDECL /;"	d
STBRP__CDECL	./imstb_rectpack.h	/^#define STBRP__CDECL$/;"	d
STBRP__INIT_skyline	./imstb_rectpack.h	/^   STBRP__INIT_skyline = 1$/;"	e	enum:__anon804ea3c30203
STBRP__MAXVAL	./imstb_rectpack.h	/^#define STBRP__MAXVAL /;"	d
STBRP__NOTUSED	./imstb_rectpack.h	/^#define STBRP__NOTUSED(/;"	d
STBTT_DEF	./imstb_truetype.h	/^#define STBTT_DEF /;"	d
STBTT_FIX	./imstb_truetype.h	/^#define STBTT_FIX        (1 << STBTT_FIXS/;"	d
STBTT_FIXMASK	./imstb_truetype.h	/^#define STBTT_FIXMASK /;"	d
STBTT_FIXSHIFT	./imstb_truetype.h	/^#define STBTT_FIXSHIFT /;"	d
STBTT_GPOS_TODO_assert	./imstb_truetype.h	/^#define STBTT_GPOS_TODO_assert(/;"	d
STBTT_MACSTYLE_BOLD	./imstb_truetype.h	/^#define STBTT_MACSTYLE_BOLD /;"	d
STBTT_MACSTYLE_DONTCARE	./imstb_truetype.h	/^#define STBTT_MACSTYLE_DONTCARE /;"	d
STBTT_MACSTYLE_ITALIC	./imstb_truetype.h	/^#define STBTT_MACSTYLE_ITALIC /;"	d
STBTT_MACSTYLE_NONE	./imstb_truetype.h	/^#define STBTT_MACSTYLE_NONE /;"	d
STBTT_MACSTYLE_UNDERSCORE	./imstb_truetype.h	/^#define STBTT_MACSTYLE_UNDERSCORE /;"	d
STBTT_MAC_EID_ARABIC	./imstb_truetype.h	/^   STBTT_MAC_EID_ROMAN        =0,   STBTT_MAC_EID_ARABIC       =4,$/;"	e	enum:__anon97bae1980c03
STBTT_MAC_EID_CHINESE_TRAD	./imstb_truetype.h	/^   STBTT_MAC_EID_CHINESE_TRAD =2,   STBTT_MAC_EID_GREEK        =6,$/;"	e	enum:__anon97bae1980c03
STBTT_MAC_EID_GREEK	./imstb_truetype.h	/^   STBTT_MAC_EID_CHINESE_TRAD =2,   STBTT_MAC_EID_GREEK        =6,$/;"	e	enum:__anon97bae1980c03
STBTT_MAC_EID_HEBREW	./imstb_truetype.h	/^   STBTT_MAC_EID_JAPANESE     =1,   STBTT_MAC_EID_HEBREW       =5,$/;"	e	enum:__anon97bae1980c03
STBTT_MAC_EID_JAPANESE	./imstb_truetype.h	/^   STBTT_MAC_EID_JAPANESE     =1,   STBTT_MAC_EID_HEBREW       =5,$/;"	e	enum:__anon97bae1980c03
STBTT_MAC_EID_KOREAN	./imstb_truetype.h	/^   STBTT_MAC_EID_KOREAN       =3,   STBTT_MAC_EID_RUSSIAN      =7$/;"	e	enum:__anon97bae1980c03
STBTT_MAC_EID_ROMAN	./imstb_truetype.h	/^   STBTT_MAC_EID_ROMAN        =0,   STBTT_MAC_EID_ARABIC       =4,$/;"	e	enum:__anon97bae1980c03
STBTT_MAC_EID_RUSSIAN	./imstb_truetype.h	/^   STBTT_MAC_EID_KOREAN       =3,   STBTT_MAC_EID_RUSSIAN      =7$/;"	e	enum:__anon97bae1980c03
STBTT_MAC_LANG_ARABIC	./imstb_truetype.h	/^   STBTT_MAC_LANG_ARABIC       =12,   STBTT_MAC_LANG_KOREAN       =23,$/;"	e	enum:__anon97bae1980e03
STBTT_MAC_LANG_CHINESE_SIMPLIFIED	./imstb_truetype.h	/^   STBTT_MAC_LANG_HEBREW       =10,   STBTT_MAC_LANG_CHINESE_SIMPLIFIED =33,$/;"	e	enum:__anon97bae1980e03
STBTT_MAC_LANG_CHINESE_TRAD	./imstb_truetype.h	/^   STBTT_MAC_LANG_ITALIAN      =3 ,   STBTT_MAC_LANG_CHINESE_TRAD =19$/;"	e	enum:__anon97bae1980e03
STBTT_MAC_LANG_DUTCH	./imstb_truetype.h	/^   STBTT_MAC_LANG_DUTCH        =4 ,   STBTT_MAC_LANG_RUSSIAN      =32,$/;"	e	enum:__anon97bae1980e03
STBTT_MAC_LANG_ENGLISH	./imstb_truetype.h	/^   STBTT_MAC_LANG_ENGLISH      =0 ,   STBTT_MAC_LANG_JAPANESE     =11,$/;"	e	enum:__anon97bae1980e03
STBTT_MAC_LANG_FRENCH	./imstb_truetype.h	/^   STBTT_MAC_LANG_FRENCH       =1 ,   STBTT_MAC_LANG_SPANISH      =6 ,$/;"	e	enum:__anon97bae1980e03
STBTT_MAC_LANG_GERMAN	./imstb_truetype.h	/^   STBTT_MAC_LANG_GERMAN       =2 ,   STBTT_MAC_LANG_SWEDISH      =5 ,$/;"	e	enum:__anon97bae1980e03
STBTT_MAC_LANG_HEBREW	./imstb_truetype.h	/^   STBTT_MAC_LANG_HEBREW       =10,   STBTT_MAC_LANG_CHINESE_SIMPLIFIED =33,$/;"	e	enum:__anon97bae1980e03
STBTT_MAC_LANG_ITALIAN	./imstb_truetype.h	/^   STBTT_MAC_LANG_ITALIAN      =3 ,   STBTT_MAC_LANG_CHINESE_TRAD =19$/;"	e	enum:__anon97bae1980e03
STBTT_MAC_LANG_JAPANESE	./imstb_truetype.h	/^   STBTT_MAC_LANG_ENGLISH      =0 ,   STBTT_MAC_LANG_JAPANESE     =11,$/;"	e	enum:__anon97bae1980e03
STBTT_MAC_LANG_KOREAN	./imstb_truetype.h	/^   STBTT_MAC_LANG_ARABIC       =12,   STBTT_MAC_LANG_KOREAN       =23,$/;"	e	enum:__anon97bae1980e03
STBTT_MAC_LANG_RUSSIAN	./imstb_truetype.h	/^   STBTT_MAC_LANG_DUTCH        =4 ,   STBTT_MAC_LANG_RUSSIAN      =32,$/;"	e	enum:__anon97bae1980e03
STBTT_MAC_LANG_SPANISH	./imstb_truetype.h	/^   STBTT_MAC_LANG_FRENCH       =1 ,   STBTT_MAC_LANG_SPANISH      =6 ,$/;"	e	enum:__anon97bae1980e03
STBTT_MAC_LANG_SWEDISH	./imstb_truetype.h	/^   STBTT_MAC_LANG_GERMAN       =2 ,   STBTT_MAC_LANG_SWEDISH      =5 ,$/;"	e	enum:__anon97bae1980e03
STBTT_MAX_OVERSAMPLE	./imstb_truetype.h	/^#define STBTT_MAX_OVERSAMPLE /;"	d
STBTT_MS_EID_SHIFTJIS	./imstb_truetype.h	/^   STBTT_MS_EID_SHIFTJIS      =2,$/;"	e	enum:__anon97bae1980b03
STBTT_MS_EID_SYMBOL	./imstb_truetype.h	/^   STBTT_MS_EID_SYMBOL        =0,$/;"	e	enum:__anon97bae1980b03
STBTT_MS_EID_UNICODE_BMP	./imstb_truetype.h	/^   STBTT_MS_EID_UNICODE_BMP   =1,$/;"	e	enum:__anon97bae1980b03
STBTT_MS_EID_UNICODE_FULL	./imstb_truetype.h	/^   STBTT_MS_EID_UNICODE_FULL  =10$/;"	e	enum:__anon97bae1980b03
STBTT_MS_LANG_CHINESE	./imstb_truetype.h	/^   STBTT_MS_LANG_CHINESE     =0x0804,   STBTT_MS_LANG_JAPANESE    =0x0411,$/;"	e	enum:__anon97bae1980d03
STBTT_MS_LANG_DUTCH	./imstb_truetype.h	/^   STBTT_MS_LANG_DUTCH       =0x0413,   STBTT_MS_LANG_KOREAN      =0x0412,$/;"	e	enum:__anon97bae1980d03
STBTT_MS_LANG_ENGLISH	./imstb_truetype.h	/^   STBTT_MS_LANG_ENGLISH     =0x0409,   STBTT_MS_LANG_ITALIAN     =0x0410,$/;"	e	enum:__anon97bae1980d03
STBTT_MS_LANG_FRENCH	./imstb_truetype.h	/^   STBTT_MS_LANG_FRENCH      =0x040c,   STBTT_MS_LANG_RUSSIAN     =0x0419,$/;"	e	enum:__anon97bae1980d03
STBTT_MS_LANG_GERMAN	./imstb_truetype.h	/^   STBTT_MS_LANG_GERMAN      =0x0407,   STBTT_MS_LANG_SPANISH     =0x0409,$/;"	e	enum:__anon97bae1980d03
STBTT_MS_LANG_HEBREW	./imstb_truetype.h	/^   STBTT_MS_LANG_HEBREW      =0x040d,   STBTT_MS_LANG_SWEDISH     =0x041D$/;"	e	enum:__anon97bae1980d03
STBTT_MS_LANG_ITALIAN	./imstb_truetype.h	/^   STBTT_MS_LANG_ENGLISH     =0x0409,   STBTT_MS_LANG_ITALIAN     =0x0410,$/;"	e	enum:__anon97bae1980d03
STBTT_MS_LANG_JAPANESE	./imstb_truetype.h	/^   STBTT_MS_LANG_CHINESE     =0x0804,   STBTT_MS_LANG_JAPANESE    =0x0411,$/;"	e	enum:__anon97bae1980d03
STBTT_MS_LANG_KOREAN	./imstb_truetype.h	/^   STBTT_MS_LANG_DUTCH       =0x0413,   STBTT_MS_LANG_KOREAN      =0x0412,$/;"	e	enum:__anon97bae1980d03
STBTT_MS_LANG_RUSSIAN	./imstb_truetype.h	/^   STBTT_MS_LANG_FRENCH      =0x040c,   STBTT_MS_LANG_RUSSIAN     =0x0419,$/;"	e	enum:__anon97bae1980d03
STBTT_MS_LANG_SPANISH	./imstb_truetype.h	/^   STBTT_MS_LANG_GERMAN      =0x0407,   STBTT_MS_LANG_SPANISH     =0x0409,$/;"	e	enum:__anon97bae1980d03
STBTT_MS_LANG_SWEDISH	./imstb_truetype.h	/^   STBTT_MS_LANG_HEBREW      =0x040d,   STBTT_MS_LANG_SWEDISH     =0x041D$/;"	e	enum:__anon97bae1980d03
STBTT_PLATFORM_ID_ISO	./imstb_truetype.h	/^   STBTT_PLATFORM_ID_ISO       =2,$/;"	e	enum:__anon97bae1980903
STBTT_PLATFORM_ID_MAC	./imstb_truetype.h	/^   STBTT_PLATFORM_ID_MAC       =1,$/;"	e	enum:__anon97bae1980903
STBTT_PLATFORM_ID_MICROSOFT	./imstb_truetype.h	/^   STBTT_PLATFORM_ID_MICROSOFT =3$/;"	e	enum:__anon97bae1980903
STBTT_PLATFORM_ID_UNICODE	./imstb_truetype.h	/^   STBTT_PLATFORM_ID_UNICODE   =0,$/;"	e	enum:__anon97bae1980903
STBTT_POINT_SIZE	./imstb_truetype.h	/^#define STBTT_POINT_SIZE(/;"	d
STBTT_RASTERIZER_VERSION	./imstb_truetype.h	/^#define STBTT_RASTERIZER_VERSION /;"	d
STBTT_STATIC	./imgui_draw.cpp	/^#define STBTT_STATIC$/;"	d	file:
STBTT_UNICODE_EID_ISO_10646	./imstb_truetype.h	/^   STBTT_UNICODE_EID_ISO_10646      =2,$/;"	e	enum:__anon97bae1980a03
STBTT_UNICODE_EID_UNICODE_1_0	./imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_1_0    =0,$/;"	e	enum:__anon97bae1980a03
STBTT_UNICODE_EID_UNICODE_1_1	./imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_1_1    =1,$/;"	e	enum:__anon97bae1980a03
STBTT_UNICODE_EID_UNICODE_2_0_BMP	./imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_2_0_BMP=3,$/;"	e	enum:__anon97bae1980a03
STBTT_UNICODE_EID_UNICODE_2_0_FULL	./imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_2_0_FULL=4$/;"	e	enum:__anon97bae1980a03
STBTT__COMPARE	./imstb_truetype.h	/^#define STBTT__COMPARE(/;"	d
STBTT__CSCTX_INIT	./imstb_truetype.h	/^#define STBTT__CSCTX_INIT(/;"	d
STBTT__CSERR	./imstb_truetype.h	/^#define STBTT__CSERR(/;"	d
STBTT__NOTUSED	./imstb_truetype.h	/^#define STBTT__NOTUSED(/;"	d
STBTT__OVER_MASK	./imstb_truetype.h	/^#define STBTT__OVER_MASK /;"	d
STBTT_acos	./imstb_truetype.h	/^   #define STBTT_acos(/;"	d
STBTT_assert	./imgui_draw.cpp	/^#define STBTT_assert(/;"	d	file:
STBTT_assert	./imstb_truetype.h	/^   #define STBTT_assert(/;"	d
STBTT_cos	./imstb_truetype.h	/^   #define STBTT_cos(/;"	d
STBTT_fabs	./imgui_draw.cpp	/^#define STBTT_fabs(/;"	d	file:
STBTT_fabs	./imstb_truetype.h	/^   #define STBTT_fabs(/;"	d
STBTT_fmod	./imgui_draw.cpp	/^#define STBTT_fmod(/;"	d	file:
STBTT_fmod	./imstb_truetype.h	/^   #define STBTT_fmod(/;"	d
STBTT_free	./imgui_draw.cpp	/^#define STBTT_free(/;"	d	file:
STBTT_free	./imstb_truetype.h	/^   #define STBTT_free(/;"	d
STBTT_iceil	./imgui_draw.cpp	/^#define STBTT_iceil(/;"	d	file:
STBTT_iceil	./imstb_truetype.h	/^   #define STBTT_iceil(/;"	d
STBTT_ifloor	./imgui_draw.cpp	/^#define STBTT_ifloor(/;"	d	file:
STBTT_ifloor	./imstb_truetype.h	/^   #define STBTT_ifloor(/;"	d
STBTT_malloc	./imgui_draw.cpp	/^#define STBTT_malloc(/;"	d	file:
STBTT_malloc	./imstb_truetype.h	/^   #define STBTT_malloc(/;"	d
STBTT_max	./imstb_truetype.h	/^#define STBTT_max(/;"	d
STBTT_memcpy	./imstb_truetype.h	/^   #define STBTT_memcpy /;"	d
STBTT_memset	./imstb_truetype.h	/^   #define STBTT_memset /;"	d
STBTT_min	./imstb_truetype.h	/^#define STBTT_min(/;"	d
STBTT_pow	./imgui_draw.cpp	/^#define STBTT_pow(/;"	d	file:
STBTT_pow	./imstb_truetype.h	/^   #define STBTT_pow(/;"	d
STBTT_sqrt	./imgui_draw.cpp	/^#define STBTT_sqrt(/;"	d	file:
STBTT_sqrt	./imstb_truetype.h	/^   #define STBTT_sqrt(/;"	d
STBTT_strlen	./imstb_truetype.h	/^   #define STBTT_strlen(/;"	d
STBTT_vcubic	./imstb_truetype.h	/^      STBTT_vcubic$/;"	e	enum:__anon97bae1980603
STBTT_vcurve	./imstb_truetype.h	/^      STBTT_vcurve,$/;"	e	enum:__anon97bae1980603
STBTT_vline	./imstb_truetype.h	/^      STBTT_vline,$/;"	e	enum:__anon97bae1980603
STBTT_vmove	./imstb_truetype.h	/^      STBTT_vmove=1,$/;"	e	enum:__anon97bae1980603
STB_INCLUDE_STB_RECT_PACK_H	./imstb_rectpack.h	/^#define STB_INCLUDE_STB_RECT_PACK_H$/;"	d
STB_RECT_PACK_IMPLEMENTATION	./imgui_draw.cpp	/^#define STB_RECT_PACK_IMPLEMENTATION$/;"	d	file:
STB_RECT_PACK_IMPLEMENTATION	./misc/freetype/imgui_freetype.cpp	/^#define STB_RECT_PACK_IMPLEMENTATION$/;"	d	file:
STB_RECT_PACK_VERSION	./imstb_rectpack.h	/^#define STB_RECT_PACK_VERSION /;"	d
STB_SPRINTF_IMPLEMENTATION	./imgui.cpp	/^#define STB_SPRINTF_IMPLEMENTATION$/;"	d	file:
STB_TEXTEDIT_DELETECHARS	./imgui_widgets.cpp	/^static void STB_TEXTEDIT_DELETECHARS(ImGuiInputTextState* obj, int pos, int n)$/;"	f	namespace:ImStb	typeref:typename:void	file:
STB_TEXTEDIT_GETCHAR	./imgui_widgets.cpp	/^static ImWchar STB_TEXTEDIT_GETCHAR(const ImGuiInputTextState* obj, int idx)                    /;"	f	namespace:ImStb	typeref:typename:ImWchar	file:
STB_TEXTEDIT_GETWIDTH	./imgui_widgets.cpp	/^static float   STB_TEXTEDIT_GETWIDTH(ImGuiInputTextState* obj, int line_start_idx, int char_idx)/;"	f	namespace:ImStb	typeref:typename:float	file:
STB_TEXTEDIT_INSERTCHARS	./imgui_widgets.cpp	/^static bool STB_TEXTEDIT_INSERTCHARS(ImGuiInputTextState* obj, int pos, const ImWchar* new_text,/;"	f	namespace:ImStb	typeref:typename:bool	file:
STB_TEXTEDIT_KEYTOTEXT	./imgui_widgets.cpp	/^static int     STB_TEXTEDIT_KEYTOTEXT(int key)                                                  /;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_KEYTYPE	./imstb_textedit.h	/^#define STB_TEXTEDIT_KEYTYPE /;"	d
STB_TEXTEDIT_K_BACKSPACE	./imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_BACKSPACE /;"	d	file:
STB_TEXTEDIT_K_DELETE	./imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_DELETE /;"	d	file:
STB_TEXTEDIT_K_DOWN	./imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_DOWN /;"	d	file:
STB_TEXTEDIT_K_LEFT	./imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_LEFT /;"	d	file:
STB_TEXTEDIT_K_LINEEND	./imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_LINEEND /;"	d	file:
STB_TEXTEDIT_K_LINESTART	./imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_LINESTART /;"	d	file:
STB_TEXTEDIT_K_PGDOWN	./imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_PGDOWN /;"	d	file:
STB_TEXTEDIT_K_PGUP	./imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_PGUP /;"	d	file:
STB_TEXTEDIT_K_REDO	./imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_REDO /;"	d	file:
STB_TEXTEDIT_K_RIGHT	./imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_RIGHT /;"	d	file:
STB_TEXTEDIT_K_SHIFT	./imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_SHIFT /;"	d	file:
STB_TEXTEDIT_K_TEXTEND	./imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_TEXTEND /;"	d	file:
STB_TEXTEDIT_K_TEXTSTART	./imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_TEXTSTART /;"	d	file:
STB_TEXTEDIT_K_UNDO	./imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_UNDO /;"	d	file:
STB_TEXTEDIT_K_UP	./imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_UP /;"	d	file:
STB_TEXTEDIT_K_WORDLEFT	./imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_WORDLEFT /;"	d	file:
STB_TEXTEDIT_K_WORDRIGHT	./imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_WORDRIGHT /;"	d	file:
STB_TEXTEDIT_LAYOUTROW	./imgui_widgets.cpp	/^static void    STB_TEXTEDIT_LAYOUTROW(StbTexteditRow* r, ImGuiInputTextState* obj, int line_star/;"	f	namespace:ImStb	typeref:typename:void	file:
STB_TEXTEDIT_MOVEWORDLEFT	./imgui_widgets.cpp	/^#define STB_TEXTEDIT_MOVEWORDLEFT   STB_TEXTEDIT_MOVEWORDLEFT_/;"	d	file:
STB_TEXTEDIT_MOVEWORDLEFT	./imstb_textedit.h	/^#define STB_TEXTEDIT_MOVEWORDLEFT /;"	d
STB_TEXTEDIT_MOVEWORDLEFT_IMPL	./imgui_widgets.cpp	/^static int  STB_TEXTEDIT_MOVEWORDLEFT_IMPL(ImGuiInputTextState* obj, int idx)   { idx--; while (/;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_MOVEWORDRIGHT	./imgui_widgets.cpp	/^#define STB_TEXTEDIT_MOVEWORDRIGHT  STB_TEXTEDIT_MOVEWORDRIGHT_/;"	d	file:
STB_TEXTEDIT_MOVEWORDRIGHT	./imstb_textedit.h	/^#define STB_TEXTEDIT_MOVEWORDRIGHT /;"	d
STB_TEXTEDIT_MOVEWORDRIGHT_IMPL	./imgui_widgets.cpp	/^static int  STB_TEXTEDIT_MOVEWORDRIGHT_IMPL(ImGuiInputTextState* obj, int idx)  { ImGuiContext& /;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_MOVEWORDRIGHT_MAC	./imgui_widgets.cpp	/^static int  STB_TEXTEDIT_MOVEWORDRIGHT_MAC(ImGuiInputTextState* obj, int idx)   { idx++; int len/;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_MOVEWORDRIGHT_WIN	./imgui_widgets.cpp	/^static int  STB_TEXTEDIT_MOVEWORDRIGHT_WIN(ImGuiInputTextState* obj, int idx)   { idx++; int len/;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_NEWLINE	./imgui_widgets.cpp	/^static ImWchar STB_TEXTEDIT_NEWLINE = '\\n';$/;"	v	namespace:ImStb	typeref:typename:ImWchar	file:
STB_TEXTEDIT_STRINGLEN	./imgui_widgets.cpp	/^static int     STB_TEXTEDIT_STRINGLEN(const ImGuiInputTextState* obj)                           /;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXT_HAS_SELECTION	./imstb_textedit.h	/^#define STB_TEXT_HAS_SELECTION(/;"	d
STB_TRUETYPE_IMPLEMENTATION	./imgui_draw.cpp	/^#define STB_TRUETYPE_IMPLEMENTATION$/;"	d	file:
STB_TexteditState	./imstb_textedit.h	/^} STB_TexteditState;$/;"	t	typeref:struct:__anond05b37a10308
STB__SCRAMBLE	./misc/fonts/binary_to_compressed_c.cpp	/^#define STB__SCRAMBLE(/;"	d	file:
STB__TRY	./misc/fonts/binary_to_compressed_c.cpp	/^#define STB__TRY(/;"	d	file:
SafeRelease	./backends/imgui_impl_dx12.cpp	/^static inline void SafeRelease(T*& res)$/;"	f	typeref:typename:void	file:
SafeRelease	./backends/imgui_impl_wgpu.cpp	/^static void SafeRelease(FrameResources& res)$/;"	f	typeref:typename:void	file:
SafeRelease	./backends/imgui_impl_wgpu.cpp	/^static void SafeRelease(ImDrawIdx*& res)$/;"	f	typeref:typename:void	file:
SafeRelease	./backends/imgui_impl_wgpu.cpp	/^static void SafeRelease(ImDrawVert*& res)$/;"	f	typeref:typename:void	file:
SafeRelease	./backends/imgui_impl_wgpu.cpp	/^static void SafeRelease(RenderResources& res)$/;"	f	typeref:typename:void	file:
SafeRelease	./backends/imgui_impl_wgpu.cpp	/^static void SafeRelease(WGPUBindGroup& res)$/;"	f	typeref:typename:void	file:
SafeRelease	./backends/imgui_impl_wgpu.cpp	/^static void SafeRelease(WGPUBindGroupLayout& res)$/;"	f	typeref:typename:void	file:
SafeRelease	./backends/imgui_impl_wgpu.cpp	/^static void SafeRelease(WGPUBuffer& res)$/;"	f	typeref:typename:void	file:
SafeRelease	./backends/imgui_impl_wgpu.cpp	/^static void SafeRelease(WGPUPipelineLayout& res)$/;"	f	typeref:typename:void	file:
SafeRelease	./backends/imgui_impl_wgpu.cpp	/^static void SafeRelease(WGPURenderPipeline& res)$/;"	f	typeref:typename:void	file:
SafeRelease	./backends/imgui_impl_wgpu.cpp	/^static void SafeRelease(WGPUSampler& res)$/;"	f	typeref:typename:void	file:
SafeRelease	./backends/imgui_impl_wgpu.cpp	/^static void SafeRelease(WGPUShaderModule& res)$/;"	f	typeref:typename:void	file:
SafeRelease	./backends/imgui_impl_wgpu.cpp	/^static void SafeRelease(WGPUTexture& res)$/;"	f	typeref:typename:void	file:
SafeRelease	./backends/imgui_impl_wgpu.cpp	/^static void SafeRelease(WGPUTextureView& res)$/;"	f	typeref:typename:void	file:
SameLine	./imgui.cpp	/^void ImGui::SameLine(float offset_from_start_x, float spacing_w)$/;"	f	class:ImGui	typeref:typename:IM_MSVC_RUNTIME_CHECKS_RESTORE void
SameLineOrWrap	./imgui.cpp	/^static void SameLineOrWrap(const ImVec2& size)$/;"	f	typeref:typename:void	file:
SampleMask	./backends/imgui_impl_dx10.cpp	/^        UINT                        SampleMask;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:UINT	file:
SampleMask	./backends/imgui_impl_dx11.cpp	/^        UINT                        SampleMask;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:UINT	file:
Sampler	./backends/imgui_impl_wgpu.cpp	/^    WGPUSampler         Sampler = nullptr;              \/\/ Sampler for the font texture$/;"	m	struct:RenderResources	typeref:typename:WGPUSampler	file:
Saturate	./backends/imgui_impl_glfw.cpp	/^static inline float Saturate(float v) { return v < 0.0f ? 0.0f : v  > 1.0f ? 1.0f : v; }$/;"	f	typeref:typename:float	file:
Saturate	./backends/imgui_impl_sdl2.cpp	/^static inline float Saturate(float v) { return v < 0.0f ? 0.0f : v  > 1.0f ? 1.0f : v; }$/;"	f	typeref:typename:float	file:
Saturate	./backends/imgui_impl_sdl3.cpp	/^static inline float Saturate(float v) { return v < 0.0f ? 0.0f : v  > 1.0f ? 1.0f : v; }$/;"	f	typeref:typename:float	file:
SaveFlags	./imgui_internal.h	/^    ImGuiTableFlags             SaveFlags;              \/\/ Indicate data we want to save using/;"	m	struct:ImGuiTableSettings	typeref:typename:ImGuiTableFlags
SaveIniSettingsToDisk	./imgui.cpp	/^void ImGui::SaveIniSettingsToDisk(const char* ini_filename)$/;"	f	class:ImGui	typeref:typename:void
SaveIniSettingsToMemory	./imgui.cpp	/^const char* ImGui::SaveIniSettingsToMemory(size_t* out_size)$/;"	f	class:ImGui	typeref:typename:const char *
Saw	./imgui_demo.cpp	/^            static float Saw(void*, int i) { return (i & 1) ? 1.0f : -1.0f; }$/;"	f	struct:ShowDemoWindowWidgets::Funcs	typeref:typename:float	file:
Scale	./imgui.h	/^    float                       Scale;              \/\/ 4     \/\/ in  \/\/ = 1.f      \/\/ Bas/;"	m	struct:ImFont	typeref:typename:float
ScaleAllSizes	./imgui.cpp	/^void ImGuiStyle::ScaleAllSizes(float scale_factor)$/;"	f	class:ImGuiStyle	typeref:typename:void
ScaleClipRects	./imgui_draw.cpp	/^void ImDrawData::ScaleClipRects(const ImVec2& fb_scale)$/;"	f	class:ImDrawData	typeref:typename:void
ScaleRatioFromValueT	./imgui_widgets.cpp	/^float ImGui::ScaleRatioFromValueT(ImGuiDataType data_type, TYPE v, TYPE v_min, TYPE v_max, bool /;"	f	class:ImGui	typeref:typename:float
ScaleValueFromRatioT	./imgui_widgets.cpp	/^TYPE ImGui::ScaleValueFromRatioT(ImGuiDataType data_type, float t, TYPE v_min, TYPE v_max, bool /;"	f	class:ImGui	typeref:typename:TYPE
ScanFmt	./imgui_internal.h	/^    const char* ScanFmt;        \/\/ Default scanf format for the type$/;"	m	struct:ImGuiDataTypeInfo	typeref:typename:const char *
Scissor	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLSCISSORPROC                  Scissor;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLSCISSORPROC
ScissorRects	./backends/imgui_impl_dx10.cpp	/^        D3D10_RECT                  ScissorRects[D3D10_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:D3D10_RECT[]	file:
ScissorRects	./backends/imgui_impl_dx11.cpp	/^        D3D11_RECT                  ScissorRects[D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:D3D11_RECT[]	file:
ScissorRectsCount	./backends/imgui_impl_dx10.cpp	/^        UINT                        ScissorRectsCount, ViewportsCount;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:UINT	file:
ScissorRectsCount	./backends/imgui_impl_dx11.cpp	/^        UINT                        ScissorRectsCount, ViewportsCount;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:UINT	file:
ScopeRectMin	./imgui_internal.h	/^    ImVec2                  ScopeRectMin;$/;"	m	struct:ImGuiMultiSelectTempData	typeref:typename:ImVec2
Scroll	./imgui_internal.h	/^    ImVec2                  Scroll;$/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollAccum	./imgui_internal.h	/^    ImVec2                  ScrollAccum;        \/\/ Scrolling accumulator (to behave at high-fr/;"	m	struct:ImGuiBoxSelectState	typeref:typename:ImVec2
ScrollMax	./imgui_internal.h	/^    ImVec2                  ScrollMax;$/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollTarget	./imgui_internal.h	/^    ImVec2                  ScrollTarget;                       \/\/ target scroll position. sto/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollTargetCenterRatio	./imgui_internal.h	/^    ImVec2                  ScrollTargetCenterRatio;            \/\/ 0.0f = scroll so that targe/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollTargetEdgeSnapDist	./imgui_internal.h	/^    ImVec2                  ScrollTargetEdgeSnapDist;           \/\/ 0.0f = no snapping, >0.0f s/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollToBottom	./imgui_demo.cpp	/^    bool                  ScrollToBottom;$/;"	m	struct:ExampleAppConsole	typeref:typename:bool	file:
ScrollToBringRectIntoView	./imgui_internal.h	/^    inline void             ScrollToBringRectIntoView(ImGuiWindow* window, const ImRect& rect) {/;"	f	namespace:ImGui	typeref:typename:void
ScrollToItem	./imgui.cpp	/^void ImGui::ScrollToItem(ImGuiScrollFlags flags)$/;"	f	class:ImGui	typeref:typename:void
ScrollToRect	./imgui.cpp	/^void ImGui::ScrollToRect(ImGuiWindow* window, const ImRect& item_rect, ImGuiScrollFlags flags)$/;"	f	class:ImGui	typeref:typename:void
ScrollToRectEx	./imgui.cpp	/^ImVec2 ImGui::ScrollToRectEx(ImGuiWindow* window, const ImRect& item_rect, ImGuiScrollFlags flag/;"	f	class:ImGui	typeref:typename:ImVec2
ScrollVal	./imgui_internal.h	/^    ImVec2                      ScrollVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
ScrollX	./imgui_internal.h	/^    float                   ScrollX;                \/\/ horizontal scrolling\/offset$/;"	m	struct:ImGuiInputTextState	typeref:typename:float
Scrollbar	./imgui_widgets.cpp	/^void ImGui::Scrollbar(ImGuiAxis axis)$/;"	f	class:ImGui	typeref:typename:void
ScrollbarClickDeltaToGrabCenter	./imgui_internal.h	/^    float                   ScrollbarClickDeltaToGrabCenter;    \/\/ Distance between mouse and /;"	m	struct:ImGuiContext	typeref:typename:float
ScrollbarEx	./imgui_widgets.cpp	/^bool ImGui::ScrollbarEx(const ImRect& bb_frame, ImGuiID id, ImGuiAxis axis, ImS64* p_scroll_v, I/;"	f	class:ImGui	typeref:typename:bool
ScrollbarRounding	./imgui.h	/^    float       ScrollbarRounding;          \/\/ Radius of grab corners for scrollbar.$/;"	m	struct:ImGuiStyle	typeref:typename:float
ScrollbarSeekMode	./imgui_internal.h	/^    short                   ScrollbarSeekMode;                  \/\/ 0: relative, -1\/+1: prev\//;"	m	struct:ImGuiContext	typeref:typename:short
ScrollbarSize	./imgui.h	/^    float       ScrollbarSize;              \/\/ Width of the vertical scrollbar, Height of the /;"	m	struct:ImGuiStyle	typeref:typename:float
ScrollbarSizes	./imgui_internal.h	/^    ImVec2                  ScrollbarSizes;                     \/\/ Size taken by each scrollba/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollbarX	./imgui_internal.h	/^    bool                    ScrollbarX, ScrollbarY;             \/\/ Are scrollbars visible?$/;"	m	struct:ImGuiWindow	typeref:typename:bool
ScrollbarY	./imgui_internal.h	/^    bool                    ScrollbarX, ScrollbarY;             \/\/ Are scrollbars visible?$/;"	m	struct:ImGuiWindow	typeref:typename:bool
ScrollingAnim	./imgui_internal.h	/^    float               ScrollingAnim;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ScrollingRectMaxX	./imgui_internal.h	/^    float               ScrollingRectMaxX;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ScrollingRectMinX	./imgui_internal.h	/^    float               ScrollingRectMinX;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ScrollingSpeed	./imgui_internal.h	/^    float               ScrollingSpeed;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ScrollingTarget	./imgui_internal.h	/^    float               ScrollingTarget;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ScrollingTargetDistToVisibility	./imgui_internal.h	/^    float               ScrollingTargetDistToVisibility;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
SearchBuffer	./imgui_internal.h	/^    char            SearchBuffer[64];           \/\/ Search buffer: no need to make dynamic as t/;"	m	struct:ImGuiTypingSelectState	typeref:typename:char[64]
SearchBuffer	./imgui_internal.h	/^    const char*             SearchBuffer;       \/\/ Search buffer contents (use full string. un/;"	m	struct:ImGuiTypingSelectRequest	typeref:typename:const char *
SearchBufferLen	./imgui_internal.h	/^    int                     SearchBufferLen;$/;"	m	struct:ImGuiTypingSelectRequest	typeref:typename:int
SeekCursorForItem	./imgui.cpp	/^void ImGuiListClipper::SeekCursorForItem(int item_n)$/;"	f	class:ImGuiListClipper	typeref:typename:void
SegmentN1	./imgui.cpp	/^    ImVec2  SegmentN1, SegmentN2;   \/\/ End positions, normalized (0,0: upper left)$/;"	m	struct:ImGuiResizeBorderDef	typeref:typename:ImVec2	file:
SegmentN2	./imgui.cpp	/^    ImVec2  SegmentN1, SegmentN2;   \/\/ End positions, normalized (0,0: upper left)$/;"	m	struct:ImGuiResizeBorderDef	typeref:typename:ImVec2	file:
SelectAll	./imgui.h	/^    void                SelectAll()             { SelectionStart = 0; SelectionEnd = BufTextLen;/;"	f	struct:ImGuiInputTextCallbackData	typeref:typename:void
SelectAll	./imgui_internal.h	/^    void        SelectAll()                 { Stb.select_start = 0; Stb.cursor = Stb.select_end /;"	f	struct:ImGuiInputTextState	typeref:typename:void
SelectRequest	./imgui_internal.h	/^    bool                    SelectRequest;      \/\/ Set when buffer was modified this frame, re/;"	m	struct:ImGuiTypingSelectRequest	typeref:typename:bool
Selectable	./imgui_widgets.cpp	/^bool ImGui::Selectable(const char* label, bool selected, ImGuiSelectableFlags flags, const ImVec/;"	f	class:ImGui	typeref:typename:bool
Selectable	./imgui_widgets.cpp	/^bool ImGui::Selectable(const char* label, bool* p_selected, ImGuiSelectableFlags flags, const Im/;"	f	class:ImGui	typeref:typename:bool
SelectableTextAlign	./imgui.h	/^    ImVec2      SelectableTextAlign;        \/\/ Alignment of selectable text. Defaults to (0.0f/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
Selected	./imgui.h	/^    bool                        Selected;       \/\/  ms:w, app:r     \/  ms:w, app:r   \/\/ Par/;"	m	struct:ImGuiSelectionRequest	typeref:typename:bool
SelectedAllMouseLock	./imgui_internal.h	/^    bool                    SelectedAllMouseLock;   \/\/ after a double-click to select all, we /;"	m	struct:ImGuiInputTextState	typeref:typename:bool
SelectedTabId	./imgui_internal.h	/^    ImGuiID             SelectedTabId;          \/\/ Selected tab\/window$/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
Selection	./imgui_demo.cpp	/^    ExampleSelectionWithDeletion Selection;     \/\/ Our selection (ImGuiSelectionBasicStorage +/;"	m	struct:ExampleAssetsBrowser	typeref:typename:ExampleSelectionWithDeletion	file:
SelectionEnd	./imgui.h	/^    int                 SelectionEnd;   \/\/                                      \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
SelectionStart	./imgui.h	/^    int                 SelectionStart; \/\/                                      \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
SelectionUserData	./imgui_internal.h	/^    ImGuiSelectionUserData      SelectionUserData;  \/\/ Set by SetNextItemSelectionUserData() (/;"	m	struct:ImGuiNextItemData	typeref:typename:ImGuiSelectionUserData
SelectionUserData	./imgui_internal.h	/^    ImGuiSelectionUserData SelectionUserData;\/\/I+Mov    \/\/ Best candidate SetNextItemSelecti/;"	m	struct:ImGuiNavItemData	typeref:typename:ImGuiSelectionUserData
Selections	./imgui_demo.cpp	/^    ImGuiSelectionBasicStorage  Selections[2];          \/\/ Store ExampleItemId into selection$/;"	m	struct:ExampleDualListBox	typeref:typename:ImGuiSelectionBasicStorage[2]	file:
SemaphoreCount	./backends/imgui_impl_vulkan.h	/^    uint32_t            SemaphoreCount;         \/\/ Number of simultaneous in-flight frames + 1/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:uint32_t
SemaphoreIndex	./backends/imgui_impl_vulkan.h	/^    uint32_t            SemaphoreIndex;         \/\/ Current set of swapchain wait semaphores we/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:uint32_t
Separator	./imgui_widgets.cpp	/^void ImGui::Separator()$/;"	f	class:ImGui	typeref:typename:void
SeparatorEx	./imgui_widgets.cpp	/^void ImGui::SeparatorEx(ImGuiSeparatorFlags flags, float thickness)$/;"	f	class:ImGui	typeref:typename:void
SeparatorMaxX	./imgui_internal.h	/^    float               SeparatorMaxX;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
SeparatorMinX	./imgui_internal.h	/^    float               SeparatorMinX;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
SeparatorText	./imgui_widgets.cpp	/^void ImGui::SeparatorText(const char* label)$/;"	f	class:ImGui	typeref:typename:void
SeparatorTextAlign	./imgui.h	/^    ImVec2      SeparatorTextAlign;         \/\/ Alignment of text within the separator. Default/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
SeparatorTextBorderSize	./imgui.h	/^    float       SeparatorTextBorderSize;    \/\/ Thickness of border in SeparatorText()$/;"	m	struct:ImGuiStyle	typeref:typename:float
SeparatorTextEx	./imgui_widgets.cpp	/^void ImGui::SeparatorTextEx(ImGuiID id, const char* label, const char* label_end, float extra_w)$/;"	f	class:ImGui	typeref:typename:void
SeparatorTextPadding	./imgui.h	/^    ImVec2      SeparatorTextPadding;       \/\/ Horizontal offset of text from each edge of the/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
SetActiveID	./imgui.cpp	/^void ImGui::SetActiveID(ImGuiID id, ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
SetActiveIdUsingAllKeyboardKeys	./imgui.cpp	/^void ImGui::SetActiveIdUsingAllKeyboardKeys()$/;"	f	class:ImGui	typeref:typename:void
SetAllBits	./imgui_internal.h	/^    void            SetAllBits()                { memset(Storage, 255, sizeof(Storage)); }$/;"	f	struct:ImBitArray	typeref:typename:void
SetAllInt	./imgui.cpp	/^void ImGuiStorage::SetAllInt(int v)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetAllocatorFunctions	./imgui.cpp	/^void ImGui::SetAllocatorFunctions(ImGuiMemAllocFunc alloc_func, ImGuiMemFreeFunc free_func, void/;"	f	class:ImGui	typeref:typename:void
SetAllocatorFunctions	./misc/freetype/imgui_freetype.cpp	/^void ImGuiFreeType::SetAllocatorFunctions(void* (*alloc_func)(size_t sz, void* user_data), void /;"	f	class:ImGuiFreeType	typeref:typename:void
SetAppAcceptingEvents	./imgui.cpp	/^void ImGuiIO::SetAppAcceptingEvents(bool accepting_events)$/;"	f	class:ImGuiIO	typeref:typename:void
SetArenaBasePtr	./imgui_internal.h	/^    inline void  SetArenaBasePtr(void* base_ptr)    { BasePtr = (char*)base_ptr; }$/;"	f	struct:ImSpanAllocator	typeref:typename:void
SetBit	./imgui.h	/^    inline void     SetBit(size_t n)        { int off = (int)(n >> 5); ImU32 mask = 1u << (n & 3/;"	f	struct:ImFontGlyphRangesBuilder	typeref:typename:void
SetBit	./imgui_internal.h	/^    void            SetBit(int n)               { IM_ASSERT(n < (Storage.Size << 5)); ImBitArray/;"	f	struct:ImBitVector	typeref:typename:void
SetBit	./imgui_internal.h	/^    void            SetBit(int n)               { n += OFFSET; IM_ASSERT(n >= 0 && n < BITCOUNT)/;"	f	struct:ImBitArray	typeref:typename:void
SetBitRange	./imgui_internal.h	/^    void            SetBitRange(int n, int n2)  { n += OFFSET; n2 += OFFSET; IM_ASSERT(n >= 0 &&/;"	f	struct:ImBitArray	typeref:typename:void
SetBool	./imgui.cpp	/^void ImGuiStorage::SetBool(ImGuiID key, bool val)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetCircleTessellationMaxError	./imgui_draw.cpp	/^void ImDrawListSharedData::SetCircleTessellationMaxError(float max_error)$/;"	f	class:ImDrawListSharedData	typeref:typename:void
SetClipboardText	./imgui.cpp	/^void ImGui::SetClipboardText(const char* text)$/;"	f	class:ImGui	typeref:typename:void
SetClipboardTextFn	./imgui.h	/^    void        (*SetClipboardTextFn)(void* user_data, const char* text);$/;"	m	struct:ImGuiIO	typeref:typename:void (*)(void * user_data,const char * text)
SetColorEditOptions	./imgui_widgets.cpp	/^void ImGui::SetColorEditOptions(ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:void
SetColumnOffset	./imgui_tables.cpp	/^void ImGui::SetColumnOffset(int column_index, float offset)$/;"	f	class:ImGui	typeref:typename:void
SetColumnWidth	./imgui_tables.cpp	/^void ImGui::SetColumnWidth(int column_index, float width)$/;"	f	class:ImGui	typeref:typename:void
SetCurrentChannel	./imgui_draw.cpp	/^void ImDrawListSplitter::SetCurrentChannel(ImDrawList* draw_list, int idx)$/;"	f	class:ImDrawListSplitter	typeref:typename:void
SetCurrentContext	./imgui.cpp	/^void ImGui::SetCurrentContext(ImGuiContext* ctx)$/;"	f	class:ImGui	typeref:typename:void
SetCurrentFont	./imgui.cpp	/^void ImGui::SetCurrentFont(ImFont* font)$/;"	f	class:ImGui	typeref:typename:void
SetCurrentWindow	./imgui.cpp	/^static void SetCurrentWindow(ImGuiWindow* window)$/;"	f	typeref:typename:void	file:
SetCursorPos	./imgui.cpp	/^void ImGui::SetCursorPos(const ImVec2& local_pos)$/;"	f	class:ImGui	typeref:typename:void
SetCursorPosX	./imgui.cpp	/^void ImGui::SetCursorPosX(float x)$/;"	f	class:ImGui	typeref:typename:void
SetCursorPosY	./imgui.cpp	/^void ImGui::SetCursorPosY(float y)$/;"	f	class:ImGui	typeref:typename:void
SetCursorScreenPos	./imgui.cpp	/^void ImGui::SetCursorScreenPos(const ImVec2& pos)$/;"	f	class:ImGui	typeref:typename:void
SetDragDropPayload	./imgui.cpp	/^bool ImGui::SetDragDropPayload(const char* type, const void* data, size_t data_size, ImGuiCond c/;"	f	class:ImGui	typeref:typename:bool
SetFloat	./imgui.cpp	/^void ImGuiStorage::SetFloat(ImGuiID key, float val)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetFocusID	./imgui.cpp	/^void ImGui::SetFocusID(ImGuiID id, ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
SetGlyphVisible	./imgui_draw.cpp	/^void ImFont::SetGlyphVisible(ImWchar c, bool visible)$/;"	f	class:ImFont	typeref:typename:void
SetHSV	./imgui.h	/^    inline void    SetHSV(float h, float s, float v, float a = 1.0f){ ImGui::ColorConvertHSVtoRG/;"	f	struct:ImColor	typeref:typename:void
SetHoveredID	./imgui.cpp	/^void ImGui::SetHoveredID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
SetInt	./imgui.cpp	/^void ImGuiStorage::SetInt(ImGuiID key, int val)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetItemAllowOverlap	./imgui.cpp	/^void ImGui::SetItemAllowOverlap()$/;"	f	class:ImGui	typeref:typename:void
SetItemDefaultFocus	./imgui.cpp	/^void ImGui::SetItemDefaultFocus()$/;"	f	class:ImGui	typeref:typename:void
SetItemKeyOwner	./imgui.cpp	/^void ImGui::SetItemKeyOwner(ImGuiKey key)$/;"	f	class:ImGui	typeref:typename:void
SetItemKeyOwner	./imgui.cpp	/^void ImGui::SetItemKeyOwner(ImGuiKey key, ImGuiInputFlags flags)$/;"	f	class:ImGui	typeref:typename:void
SetItemSelected	./imgui_widgets.cpp	/^void ImGuiSelectionBasicStorage::SetItemSelected(ImGuiID id, bool selected)$/;"	f	class:ImGuiSelectionBasicStorage	typeref:typename:void
SetItemTooltip	./imgui.cpp	/^void ImGui::SetItemTooltip(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
SetItemTooltipV	./imgui.cpp	/^void ImGui::SetItemTooltipV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
SetItemUsingMouseWheel	./imgui_internal.h	/^    inline void     SetItemUsingMouseWheel()                                            { SetIte/;"	f	namespace:ImGui	typeref:typename:void
SetKeyEventNativeData	./imgui.cpp	/^void ImGuiIO::SetKeyEventNativeData(ImGuiKey key, int native_keycode, int native_scancode, int n/;"	f	class:ImGuiIO	typeref:typename:void
SetKeyOwner	./imgui.cpp	/^void ImGui::SetKeyOwner(ImGuiKey key, ImGuiID owner_id, ImGuiInputFlags flags)$/;"	f	class:ImGui	typeref:typename:void
SetKeyOwnersForKeyChord	./imgui.cpp	/^void ImGui::SetKeyOwnersForKeyChord(ImGuiKeyChord key_chord, ImGuiID owner_id, ImGuiInputFlags f/;"	f	class:ImGui	typeref:typename:void
SetKeyboardFocusHere	./imgui.cpp	/^void ImGui::SetKeyboardFocusHere(int offset)$/;"	f	class:ImGui	typeref:typename:void
SetLastItemData	./imgui.cpp	/^void ImGui::SetLastItemData(ImGuiID item_id, ImGuiItemFlags in_flags, ImGuiItemStatusFlags item_/;"	f	class:ImGui	typeref:typename:void
SetLastItemDataForWindow	./imgui.cpp	/^static void ImGui::SetLastItemDataForWindow(ImGuiWindow* window, const ImRect& rect)$/;"	f	class:ImGui	typeref:typename:void	file:
SetMouseCursor	./imgui.cpp	/^void ImGui::SetMouseCursor(ImGuiMouseCursor cursor_type)$/;"	f	class:ImGui	typeref:typename:void
SetNavFocusScope	./imgui.cpp	/^void ImGui::SetNavFocusScope(ImGuiID focus_scope_id)$/;"	f	class:ImGui	typeref:typename:void
SetNavID	./imgui.cpp	/^void ImGui::SetNavID(ImGuiID id, ImGuiNavLayer nav_layer, ImGuiID focus_scope_id, const ImRect& /;"	f	class:ImGui	typeref:typename:void
SetNavWindow	./imgui.cpp	/^void ImGui::SetNavWindow(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
SetNextFrameWantCaptureKeyboard	./imgui.cpp	/^void ImGui::SetNextFrameWantCaptureKeyboard(bool want_capture_keyboard)$/;"	f	class:ImGui	typeref:typename:void
SetNextFrameWantCaptureMouse	./imgui.cpp	/^void ImGui::SetNextFrameWantCaptureMouse(bool want_capture_mouse)$/;"	f	class:ImGui	typeref:typename:void
SetNextItemAllowOverlap	./imgui.cpp	/^void ImGui::SetNextItemAllowOverlap()$/;"	f	class:ImGui	typeref:typename:void
SetNextItemOpen	./imgui_widgets.cpp	/^void ImGui::SetNextItemOpen(bool is_open, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetNextItemRefVal	./imgui_widgets.cpp	/^void ImGui::SetNextItemRefVal(ImGuiDataType data_type, void* p_data)$/;"	f	class:ImGui	typeref:typename:void
SetNextItemSelectionUserData	./imgui_widgets.cpp	/^void ImGui::SetNextItemSelectionUserData(ImGuiSelectionUserData selection_user_data)$/;"	f	class:ImGui	typeref:typename:void
SetNextItemShortcut	./imgui.cpp	/^void ImGui::SetNextItemShortcut(ImGuiKeyChord key_chord, ImGuiInputFlags flags)$/;"	f	class:ImGui	typeref:typename:void
SetNextItemStorageID	./imgui_widgets.cpp	/^void ImGui::SetNextItemStorageID(ImGuiID storage_id)$/;"	f	class:ImGui	typeref:typename:void
SetNextItemWidth	./imgui.cpp	/^void ImGui::SetNextItemWidth(float item_width)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowBgAlpha	./imgui.cpp	/^void ImGui::SetNextWindowBgAlpha(float alpha)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowCollapsed	./imgui.cpp	/^void ImGui::SetNextWindowCollapsed(bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowContentSize	./imgui.cpp	/^void ImGui::SetNextWindowContentSize(const ImVec2& size)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowFocus	./imgui.cpp	/^void ImGui::SetNextWindowFocus()$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowPos	./imgui.cpp	/^void ImGui::SetNextWindowPos(const ImVec2& pos, ImGuiCond cond, const ImVec2& pivot)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowRefreshPolicy	./imgui.cpp	/^void ImGui::SetNextWindowRefreshPolicy(ImGuiWindowRefreshFlags flags)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowScroll	./imgui.cpp	/^void ImGui::SetNextWindowScroll(const ImVec2& scroll)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowSize	./imgui.cpp	/^void ImGui::SetNextWindowSize(const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowSizeConstraints	./imgui.cpp	/^void ImGui::SetNextWindowSizeConstraints(const ImVec2& size_min, const ImVec2& size_max, ImGuiSi/;"	f	class:ImGui	typeref:typename:void
SetPixelHeight	./misc/freetype/imgui_freetype.cpp	/^    void FreeTypeFont::SetPixelHeight(int pixel_height)$/;"	f	class:__anon21d590df0111::FreeTypeFont	typeref:typename:void
SetScrollFromPosX	./imgui.cpp	/^void ImGui::SetScrollFromPosX(ImGuiWindow* window, float local_x, float center_x_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollFromPosX	./imgui.cpp	/^void ImGui::SetScrollFromPosX(float local_x, float center_x_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollFromPosY	./imgui.cpp	/^void ImGui::SetScrollFromPosY(ImGuiWindow* window, float local_y, float center_y_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollFromPosY	./imgui.cpp	/^void ImGui::SetScrollFromPosY(float local_y, float center_y_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollHereX	./imgui.cpp	/^void ImGui::SetScrollHereX(float center_x_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollHereY	./imgui.cpp	/^void ImGui::SetScrollHereY(float center_y_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollX	./imgui.cpp	/^void ImGui::SetScrollX(ImGuiWindow* window, float scroll_x)$/;"	f	class:ImGui	typeref:typename:void
SetScrollX	./imgui.cpp	/^void ImGui::SetScrollX(float scroll_x)$/;"	f	class:ImGui	typeref:typename:void
SetScrollY	./imgui.cpp	/^void ImGui::SetScrollY(ImGuiWindow* window, float scroll_y)$/;"	f	class:ImGui	typeref:typename:void
SetScrollY	./imgui.cpp	/^void ImGui::SetScrollY(float scroll_y)$/;"	f	class:ImGui	typeref:typename:void
SetShortcutRouting	./imgui.cpp	/^bool ImGui::SetShortcutRouting(ImGuiKeyChord key_chord, ImGuiInputFlags flags, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
SetState	./backends/imgui_impl_opengl3.cpp	/^    void SetState(GLint index)$/;"	f	struct:ImGui_ImplOpenGL3_VtxAttribState	typeref:typename:void	file:
SetStateStorage	./imgui.cpp	/^void ImGui::SetStateStorage(ImGuiStorage* tree)$/;"	f	class:ImGui	typeref:typename:void
SetTabItemClosed	./imgui_widgets.cpp	/^void    ImGui::SetTabItemClosed(const char* label)$/;"	f	class:ImGui	typeref:typename:void
SetTexID	./imgui.h	/^    void                        SetTexID(ImTextureID id)    { TexID = id; }$/;"	f	struct:ImFontAtlas	typeref:typename:void
SetToContextState	./imgui.cpp	/^void ImGuiStackSizes::SetToContextState(ImGuiContext* ctx)$/;"	f	class:ImGuiStackSizes	typeref:typename:void
SetTooltip	./imgui.cpp	/^void ImGui::SetTooltip(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
SetTooltipV	./imgui.cpp	/^void ImGui::SetTooltipV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
SetVoidPtr	./imgui.cpp	/^void ImGuiStorage::SetVoidPtr(ImGuiID key, void* val)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetWindowActiveForSkipRefresh	./imgui.cpp	/^static void SetWindowActiveForSkipRefresh(ImGuiWindow* window)$/;"	f	typeref:typename:void	file:
SetWindowClipRectBeforeSetChannel	./imgui_tables.cpp	/^void ImGui::SetWindowClipRectBeforeSetChannel(ImGuiWindow* window, const ImRect& clip_rect)$/;"	f	class:ImGui	typeref:typename:void
SetWindowCollapsed	./imgui.cpp	/^void ImGui::SetWindowCollapsed(ImGuiWindow* window, bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowCollapsed	./imgui.cpp	/^void ImGui::SetWindowCollapsed(bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowCollapsed	./imgui.cpp	/^void ImGui::SetWindowCollapsed(const char* name, bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowCollapsedAllowFlags	./imgui_internal.h	/^    ImGuiCond               SetWindowCollapsedAllowFlags : 8;   \/\/ store acceptable condition /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiCond:8
SetWindowConditionAllowFlags	./imgui.cpp	/^static void SetWindowConditionAllowFlags(ImGuiWindow* window, ImGuiCond flags, bool enabled)$/;"	f	typeref:typename:void	file:
SetWindowFocus	./imgui.cpp	/^void ImGui::SetWindowFocus()$/;"	f	class:ImGui	typeref:typename:void
SetWindowFocus	./imgui.cpp	/^void ImGui::SetWindowFocus(const char* name)$/;"	f	class:ImGui	typeref:typename:void
SetWindowFontScale	./imgui.cpp	/^void ImGui::SetWindowFontScale(float scale)$/;"	f	class:ImGui	typeref:typename:void
SetWindowHiddenAndSkipItemsForCurrentFrame	./imgui.cpp	/^void ImGui::SetWindowHiddenAndSkipItemsForCurrentFrame(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
SetWindowHitTestHole	./imgui.cpp	/^void ImGui::SetWindowHitTestHole(ImGuiWindow* window, const ImVec2& pos, const ImVec2& size)$/;"	f	class:ImGui	typeref:typename:void
SetWindowParentWindowForFocusRoute	./imgui_internal.h	/^    inline void             SetWindowParentWindowForFocusRoute(ImGuiWindow* window, ImGuiWindow*/;"	f	namespace:ImGui	typeref:typename:void
SetWindowPos	./imgui.cpp	/^void ImGui::SetWindowPos(ImGuiWindow* window, const ImVec2& pos, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowPos	./imgui.cpp	/^void ImGui::SetWindowPos(const ImVec2& pos, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowPos	./imgui.cpp	/^void ImGui::SetWindowPos(const char* name, const ImVec2& pos, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowPosAllowFlags	./imgui_internal.h	/^    ImGuiCond               SetWindowPosAllowFlags : 8;         \/\/ store acceptable condition /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiCond:8
SetWindowPosPivot	./imgui_internal.h	/^    ImVec2                  SetWindowPosPivot;                  \/\/ store window pivot for posi/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
SetWindowPosVal	./imgui_internal.h	/^    ImVec2                  SetWindowPosVal;                    \/\/ store window position when /;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
SetWindowSize	./imgui.cpp	/^void ImGui::SetWindowSize(ImGuiWindow* window, const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowSize	./imgui.cpp	/^void ImGui::SetWindowSize(const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowSize	./imgui.cpp	/^void ImGui::SetWindowSize(const char* name, const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowSizeAllowFlags	./imgui_internal.h	/^    ImGuiCond               SetWindowSizeAllowFlags : 8;        \/\/ store acceptable condition /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiCond:8
SetWindowViewport	./imgui.cpp	/^void ImGui::SetWindowViewport(ImGuiWindow* window, ImGuiViewportP* viewport)$/;"	f	class:ImGui	typeref:typename:void
SettingsDirtyTimer	./imgui_internal.h	/^    float                   SettingsDirtyTimer;                 \/\/ Save .ini Settings to memor/;"	m	struct:ImGuiContext	typeref:typename:float
SettingsHandlers	./imgui_internal.h	/^    ImVector<ImGuiSettingsHandler>      SettingsHandlers;       \/\/ List of .ini settings handl/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiSettingsHandler>
SettingsIniData	./imgui_internal.h	/^    ImGuiTextBuffer         SettingsIniData;                    \/\/ In memory .ini settings$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTextBuffer
SettingsLoaded	./imgui_internal.h	/^    bool                    SettingsLoaded;$/;"	m	struct:ImGuiContext	typeref:typename:bool
SettingsLoadedFlags	./imgui_internal.h	/^    ImGuiTableFlags             SettingsLoadedFlags;        \/\/ Which data were loaded from the/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableFlags
SettingsOffset	./imgui_internal.h	/^    int                         SettingsOffset;             \/\/ Offset in g.SettingsTables$/;"	m	struct:ImGuiTable	typeref:typename:int
SettingsOffset	./imgui_internal.h	/^    int                     SettingsOffset;                     \/\/ Offset into SettingsWindows/;"	m	struct:ImGuiWindow	typeref:typename:int
SettingsTables	./imgui_internal.h	/^    ImChunkStream<ImGuiTableSettings>   SettingsTables;         \/\/ ImGuiTable .ini settings en/;"	m	struct:ImGuiContext	typeref:typename:ImChunkStream<ImGuiTableSettings>
SettingsWindows	./imgui_internal.h	/^    ImChunkStream<ImGuiWindowSettings>  SettingsWindows;        \/\/ ImGuiWindow .ini settings e/;"	m	struct:ImGuiContext	typeref:typename:ImChunkStream<ImGuiWindowSettings>
SetupDrawListSharedData	./imgui.cpp	/^static void SetupDrawListSharedData()$/;"	f	typeref:typename:void	file:
SetupVulkan	./examples/example_glfw_vulkan/main.cpp	/^static void SetupVulkan(ImVector<const char*> instance_extensions)$/;"	f	typeref:typename:void	file:
SetupVulkan	./examples/example_sdl2_vulkan/main.cpp	/^static void SetupVulkan(ImVector<const char*> instance_extensions)$/;"	f	typeref:typename:void	file:
SetupVulkanWindow	./examples/example_glfw_vulkan/main.cpp	/^static void SetupVulkanWindow(ImGui_ImplVulkanH_Window* wd, VkSurfaceKHR surface, int width, int/;"	f	typeref:typename:void	file:
SetupVulkanWindow	./examples/example_sdl2_vulkan/main.cpp	/^static void SetupVulkanWindow(ImGui_ImplVulkanH_Window* wd, VkSurfaceKHR surface, int width, int/;"	f	typeref:typename:void	file:
SetupVulkan_SelectPhysicalDevice	./examples/example_glfw_vulkan/main.cpp	/^static VkPhysicalDevice SetupVulkan_SelectPhysicalDevice()$/;"	f	typeref:typename:VkPhysicalDevice	file:
SetupVulkan_SelectPhysicalDevice	./examples/example_sdl2_vulkan/main.cpp	/^static VkPhysicalDevice SetupVulkan_SelectPhysicalDevice()$/;"	f	typeref:typename:VkPhysicalDevice	file:
ShadeVertsLinearColorGradientKeepAlpha	./imgui_draw.cpp	/^void ImGui::ShadeVertsLinearColorGradientKeepAlpha(ImDrawList* draw_list, int vert_start_idx, in/;"	f	class:ImGui	typeref:typename:void
ShadeVertsLinearUV	./imgui_draw.cpp	/^void ImGui::ShadeVertsLinearUV(ImDrawList* draw_list, int vert_start_idx, int vert_end_idx, cons/;"	f	class:ImGui	typeref:typename:void
ShadeVertsTransformPos	./imgui_draw.cpp	/^void ImGui::ShadeVertsTransformPos(ImDrawList* draw_list, int vert_start_idx, int vert_end_idx, /;"	f	class:ImGui	typeref:typename:void
ShaderHandle	./backends/imgui_impl_opengl3.cpp	/^    GLuint          ShaderHandle;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLuint	file:
ShaderModuleFrag	./backends/imgui_impl_vulkan.cpp	/^    VkShaderModule              ShaderModuleFrag;$/;"	m	struct:ImGui_ImplVulkan_Data	typeref:typename:VkShaderModule	file:
ShaderModuleVert	./backends/imgui_impl_vulkan.cpp	/^    VkShaderModule              ShaderModuleVert;$/;"	m	struct:ImGui_ImplVulkan_Data	typeref:typename:VkShaderModule	file:
ShaderSource	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLSHADERSOURCEPROC             ShaderSource;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLSHADERSOURCEPROC
SharedMetalContext	./backends/imgui_impl_metal.mm	/^    MetalContext*               SharedMetalContext;$/;"	E	struct:ImGui_ImplMetal_Data
Shortcut	./imgui.cpp	/^bool ImGui::Shortcut(ImGuiKeyChord key_chord, ImGuiInputFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
Shortcut	./imgui.cpp	/^bool ImGui::Shortcut(ImGuiKeyChord key_chord, ImGuiInputFlags flags, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
Shortcut	./imgui_internal.h	/^    ImGuiKeyChord               Shortcut;           \/\/ Set by SetNextItemShortcut()$/;"	m	struct:ImGuiNextItemData	typeref:typename:ImGuiKeyChord
Shortcut	./imgui_internal.h	/^    ImGuiKeyChord           Shortcut;           \/\/ Shortcut at the time of submitting item. ON/;"	m	struct:ImGuiLastItemData	typeref:typename:ImGuiKeyChord
ShortcutFlags	./imgui_internal.h	/^    ImGuiInputFlags             ShortcutFlags;      \/\/ Set by SetNextItemShortcut()$/;"	m	struct:ImGuiNextItemData	typeref:typename:ImGuiInputFlags
Show	./imgui_demo.cpp	/^    void Show()$/;"	f	struct:ExampleDualListBox	typeref:typename:void	file:
ShowAbout	./imgui_demo.cpp	/^    bool ShowAbout = false;$/;"	m	struct:ImGuiDemoWindowData	typeref:typename:bool	file:
ShowAboutWindow	./imgui_demo.cpp	/^void ImGui::ShowAboutWindow(bool* p_open)$/;"	f	class:ImGui	typeref:typename:void
ShowAboutWindow	./imgui_demo.cpp	/^void ImGui::ShowAboutWindow(bool*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowAppAssetsBrowser	./imgui_demo.cpp	/^    bool ShowAppAssetsBrowser = false;$/;"	m	struct:ImGuiDemoWindowData	typeref:typename:bool	file:
ShowAppAutoResize	./imgui_demo.cpp	/^    bool ShowAppAutoResize = false;$/;"	m	struct:ImGuiDemoWindowData	typeref:typename:bool	file:
ShowAppConsole	./imgui_demo.cpp	/^    bool ShowAppConsole = false;$/;"	m	struct:ImGuiDemoWindowData	typeref:typename:bool	file:
ShowAppConstrainedResize	./imgui_demo.cpp	/^    bool ShowAppConstrainedResize = false;$/;"	m	struct:ImGuiDemoWindowData	typeref:typename:bool	file:
ShowAppCustomRendering	./imgui_demo.cpp	/^    bool ShowAppCustomRendering = false;$/;"	m	struct:ImGuiDemoWindowData	typeref:typename:bool	file:
ShowAppDocuments	./imgui_demo.cpp	/^    bool ShowAppDocuments = false;$/;"	m	struct:ImGuiDemoWindowData	typeref:typename:bool	file:
ShowAppFullscreen	./imgui_demo.cpp	/^    bool ShowAppFullscreen = false;$/;"	m	struct:ImGuiDemoWindowData	typeref:typename:bool	file:
ShowAppLayout	./imgui_demo.cpp	/^    bool ShowAppLayout = false;$/;"	m	struct:ImGuiDemoWindowData	typeref:typename:bool	file:
ShowAppLog	./imgui_demo.cpp	/^    bool ShowAppLog = false;$/;"	m	struct:ImGuiDemoWindowData	typeref:typename:bool	file:
ShowAppLongText	./imgui_demo.cpp	/^    bool ShowAppLongText = false;$/;"	m	struct:ImGuiDemoWindowData	typeref:typename:bool	file:
ShowAppPropertyEditor	./imgui_demo.cpp	/^    bool ShowAppPropertyEditor = false;$/;"	m	struct:ImGuiDemoWindowData	typeref:typename:bool	file:
ShowAppSimpleOverlay	./imgui_demo.cpp	/^    bool ShowAppSimpleOverlay = false;$/;"	m	struct:ImGuiDemoWindowData	typeref:typename:bool	file:
ShowAppWindowTitles	./imgui_demo.cpp	/^    bool ShowAppWindowTitles = false;$/;"	m	struct:ImGuiDemoWindowData	typeref:typename:bool	file:
ShowAtlasTintedWithTextColor	./imgui_internal.h	/^    bool        ShowAtlasTintedWithTextColor = false;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowDebugLog	./imgui_demo.cpp	/^    bool ShowDebugLog = false;$/;"	m	struct:ImGuiDemoWindowData	typeref:typename:bool	file:
ShowDebugLog	./imgui_internal.h	/^    bool        ShowDebugLog = false;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowDebugLogFlag	./imgui.cpp	/^static void ShowDebugLogFlag(const char* name, ImGuiDebugLogFlags flags)$/;"	f	typeref:typename:void	file:
ShowDebugLogWindow	./imgui.cpp	/^void ImGui::ShowDebugLogWindow(bool* p_open)$/;"	f	class:ImGui	typeref:typename:void
ShowDebugLogWindow	./imgui.cpp	/^void ImGui::ShowDebugLogWindow(bool*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowDemoWindow	./imgui_demo.cpp	/^void ImGui::ShowDemoWindow(bool* p_open)$/;"	f	class:ImGui	typeref:typename:void
ShowDemoWindow	./imgui_demo.cpp	/^void ImGui::ShowDemoWindow(bool*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowDemoWindowColumns	./imgui_demo.cpp	/^static void ShowDemoWindowColumns()$/;"	f	typeref:typename:void	file:
ShowDemoWindowInputs	./imgui_demo.cpp	/^static void ShowDemoWindowInputs()$/;"	f	typeref:typename:void	file:
ShowDemoWindowLayout	./imgui_demo.cpp	/^static void ShowDemoWindowLayout()$/;"	f	typeref:typename:void	file:
ShowDemoWindowMenuBar	./imgui_demo.cpp	/^static void ShowDemoWindowMenuBar(ImGuiDemoWindowData* demo_data)$/;"	f	typeref:typename:void	file:
ShowDemoWindowMultiSelect	./imgui_demo.cpp	/^static void ShowDemoWindowMultiSelect(ImGuiDemoWindowData* demo_data)$/;"	f	typeref:typename:void	file:
ShowDemoWindowPopups	./imgui_demo.cpp	/^static void ShowDemoWindowPopups()$/;"	f	typeref:typename:void	file:
ShowDemoWindowTables	./imgui_demo.cpp	/^static void ShowDemoWindowTables()$/;"	f	typeref:typename:void	file:
ShowDemoWindowWidgets	./imgui_demo.cpp	/^static void ShowDemoWindowWidgets(ImGuiDemoWindowData* demo_data)$/;"	f	typeref:typename:void	file:
ShowDrawCmdBoundingBoxes	./imgui_internal.h	/^    bool        ShowDrawCmdBoundingBoxes = true;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowDrawCmdMesh	./imgui_internal.h	/^    bool        ShowDrawCmdMesh = true;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowExampleAppAssetsBrowser	./imgui_demo.cpp	/^void ShowExampleAppAssetsBrowser(bool* p_open)$/;"	f	typeref:typename:void
ShowExampleAppAutoResize	./imgui_demo.cpp	/^static void ShowExampleAppAutoResize(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppConsole	./imgui_demo.cpp	/^static void ShowExampleAppConsole(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppConstrainedResize	./imgui_demo.cpp	/^static void ShowExampleAppConstrainedResize(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppCustomRendering	./imgui_demo.cpp	/^static void ShowExampleAppCustomRendering(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppDocuments	./imgui_demo.cpp	/^void ShowExampleAppDocuments(bool* p_open)$/;"	f	typeref:typename:void
ShowExampleAppFullscreen	./imgui_demo.cpp	/^static void ShowExampleAppFullscreen(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppLayout	./imgui_demo.cpp	/^static void ShowExampleAppLayout(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppLog	./imgui_demo.cpp	/^static void ShowExampleAppLog(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppLongText	./imgui_demo.cpp	/^static void ShowExampleAppLongText(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppMainMenuBar	./imgui_demo.cpp	/^static void ShowExampleAppMainMenuBar()$/;"	f	typeref:typename:void	file:
ShowExampleAppPropertyEditor	./imgui_demo.cpp	/^static void ShowExampleAppPropertyEditor(bool* p_open, ImGuiDemoWindowData* demo_data)$/;"	f	typeref:typename:void	file:
ShowExampleAppSimpleOverlay	./imgui_demo.cpp	/^static void ShowExampleAppSimpleOverlay(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppWindowTitles	./imgui_demo.cpp	/^static void ShowExampleAppWindowTitles(bool*)$/;"	f	typeref:typename:void	file:
ShowExampleMenuFile	./imgui_demo.cpp	/^static void ShowExampleMenuFile()$/;"	f	typeref:typename:void	file:
ShowFontAtlas	./imgui.cpp	/^void ImGui::ShowFontAtlas(ImFontAtlas* atlas)$/;"	f	class:ImGui	typeref:typename:void
ShowFontAtlas	./imgui.cpp	/^void ImGui::ShowFontAtlas(ImFontAtlas*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowFontSelector	./imgui_demo.cpp	/^void ImGui::ShowFontSelector(const char* label)$/;"	f	class:ImGui	typeref:typename:void
ShowIDStackTool	./imgui_demo.cpp	/^    bool ShowIDStackTool = false;$/;"	m	struct:ImGuiDemoWindowData	typeref:typename:bool	file:
ShowIDStackTool	./imgui_internal.h	/^    bool        ShowIDStackTool = false;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowIDStackToolWindow	./imgui.cpp	/^void ImGui::ShowIDStackToolWindow(bool* p_open)$/;"	f	class:ImGui	typeref:typename:void
ShowIDStackToolWindow	./imgui.cpp	/^void ImGui::ShowIDStackToolWindow(bool*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowMainMenuBar	./imgui_demo.cpp	/^    bool ShowMainMenuBar = false;$/;"	m	struct:ImGuiDemoWindowData	typeref:typename:bool	file:
ShowMetrics	./imgui_demo.cpp	/^    bool ShowMetrics = false;$/;"	m	struct:ImGuiDemoWindowData	typeref:typename:bool	file:
ShowMetricsWindow	./imgui.cpp	/^void ImGui::ShowMetricsWindow(bool* p_open)$/;"	f	class:ImGui	typeref:typename:void
ShowMetricsWindow	./imgui.cpp	/^void ImGui::ShowMetricsWindow(bool*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowSoftKeyboardInput	./examples/example_android_opengl3/main.cpp	/^static int ShowSoftKeyboardInput()$/;"	f	typeref:typename:int	file:
ShowStackToolWindow	./imgui.h	/^    static inline void  ShowStackToolWindow(bool* p_open = NULL)                { ShowIDStackToo/;"	f	namespace:ImGui	typeref:typename:void
ShowStyleEditor	./imgui_demo.cpp	/^    bool ShowStyleEditor = false;$/;"	m	struct:ImGuiDemoWindowData	typeref:typename:bool	file:
ShowStyleEditor	./imgui_demo.cpp	/^void ImGui::ShowStyleEditor(ImGuiStyle* ref)$/;"	f	class:ImGui	typeref:typename:void
ShowStyleEditor	./imgui_demo.cpp	/^void ImGui::ShowStyleEditor(ImGuiStyle*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowStyleSelector	./imgui_demo.cpp	/^bool ImGui::ShowStyleSelector(const char* label)$/;"	f	class:ImGui	typeref:typename:bool
ShowTableColumnsStatusFlags	./imgui_demo.cpp	/^static void ShowTableColumnsStatusFlags(ImGuiTableColumnFlags flags)$/;"	f	typeref:typename:void	file:
ShowTablesRects	./imgui_internal.h	/^    bool        ShowTablesRects = false;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowTablesRectsType	./imgui_internal.h	/^    int         ShowTablesRectsType = -1;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:int
ShowTextEncodingViewer	./imgui_internal.h	/^    bool        ShowTextEncodingViewer = false;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowTypeOverlay	./imgui_demo.cpp	/^    bool            ShowTypeOverlay = true;$/;"	m	struct:ExampleAssetsBrowser	typeref:typename:bool	file:
ShowUserGuide	./imgui_demo.cpp	/^void ImGui::ShowUserGuide() {}$/;"	f	class:ImGui	typeref:typename:void
ShowUserGuide	./imgui_demo.cpp	/^void ImGui::ShowUserGuide()$/;"	f	class:ImGui	typeref:typename:void
ShowWindowsBeginOrder	./imgui_internal.h	/^    bool        ShowWindowsBeginOrder = false;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowWindowsRects	./imgui_internal.h	/^    bool        ShowWindowsRects = false;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowWindowsRectsType	./imgui_internal.h	/^    int         ShowWindowsRectsType = -1;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:int
ShrinkWidthBuffer	./imgui_internal.h	/^    ImVector<ImGuiShrinkWidthItem>  ShrinkWidthBuffer;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiShrinkWidthItem>
ShrinkWidthItemComparer	./imgui_widgets.cpp	/^static int IMGUI_CDECL ShrinkWidthItemComparer(const void* lhs, const void* rhs)$/;"	f	typeref:typename:int IMGUI_CDECL	file:
ShrinkWidths	./imgui_widgets.cpp	/^void ImGui::ShrinkWidths(ImGuiShrinkWidthItem* items, int count, float width_excess)$/;"	f	class:ImGui	typeref:typename:void
Shutdown	./examples/example_android_opengl3/main.cpp	/^void Shutdown()$/;"	f	typeref:typename:void
Shutdown	./imgui.cpp	/^void ImGui::Shutdown()$/;"	f	class:ImGui	typeref:typename:void
Sin	./imgui_demo.cpp	/^            static float Sin(void*, int i) { return sinf(i * 0.1f); }$/;"	f	struct:ShowDemoWindowWidgets::Funcs	typeref:typename:float	file:
SingleCharMode	./imgui_internal.h	/^    bool                    SingleCharMode;     \/\/ Notify when buffer contains same character /;"	m	struct:ImGuiTypingSelectRequest	typeref:typename:bool
SingleCharModeLock	./imgui_internal.h	/^    bool            SingleCharModeLock = false; \/\/ After a certain single char repeat count we/;"	m	struct:ImGuiTypingSelectState	typeref:typename:bool
SingleCharSize	./imgui_internal.h	/^    ImS8                    SingleCharSize;     \/\/ Length in bytes of first letter codepoint (/;"	m	struct:ImGuiTypingSelectRequest	typeref:typename:ImS8
Size	./backends/imgui_impl_opengl3.cpp	/^    GLint   Enabled, Size, Type, Normalized, Stride;$/;"	m	struct:ImGui_ImplOpenGL3_VtxAttribState	typeref:typename:GLint	file:
Size	./imgui.h	/^    ImVec2              Size;                   \/\/ Main Area: Size of the viewport.$/;"	m	struct:ImGuiViewport	typeref:typename:ImVec2
Size	./imgui.h	/^    int                 Size;$/;"	m	struct:ImVector	typeref:typename:int
Size	./imgui.h	/^    int             Size;           \/\/          \/\/ Number of selected items, maintained by t/;"	m	struct:ImGuiSelectionBasicStorage	typeref:typename:int
Size	./imgui_demo.cpp	/^                int             Size;$/;"	m	struct:ShowDemoWindowTables::MyTreeNode	typeref:typename:int	file:
Size	./imgui_draw.cpp	/^    int                     Size = 0;$/;"	m	struct:ImTriangulatorNodeSpan	typeref:typename:int	file:
Size	./imgui_internal.h	/^    ImVec2                  Size;                               \/\/ Current size (==SizeFull or/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
Size	./imgui_internal.h	/^    ImVec2ih    Size;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:ImVec2ih
Size	./imgui_internal.h	/^    size_t      Size;           \/\/ Size in bytes$/;"	m	struct:ImGuiDataTypeInfo	typeref:typename:size_t
SizeCallback	./imgui_internal.h	/^    ImGuiSizeCallback           SizeCallback;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiSizeCallback
SizeCallbackUserData	./imgui_internal.h	/^    void*                       SizeCallbackUserData;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:void *
SizeCond	./imgui_internal.h	/^    ImGuiCond                   SizeCond;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiCond
SizeConstraintRect	./imgui_internal.h	/^    ImRect                      SizeConstraintRect;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImRect
SizeFull	./imgui_internal.h	/^    ImVec2                  SizeFull;                           \/\/ Size when non collapsed$/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
SizeOfBeginPopupStack	./imgui_internal.h	/^    short   SizeOfBeginPopupStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizeOfColorStack	./imgui_internal.h	/^    short   SizeOfColorStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizeOfDisabledStack	./imgui_internal.h	/^    short   SizeOfDisabledStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizeOfFocusScopeStack	./imgui_internal.h	/^    short   SizeOfFocusScopeStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizeOfFontStack	./imgui_internal.h	/^    short   SizeOfFontStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizeOfGroupStack	./imgui_internal.h	/^    short   SizeOfGroupStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizeOfIDStack	./imgui_internal.h	/^    short   SizeOfIDStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizeOfItemFlagsStack	./imgui_internal.h	/^    short   SizeOfItemFlagsStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizeOfStyleVarStack	./imgui_internal.h	/^    short   SizeOfStyleVarStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizePixels	./imgui.h	/^    float           SizePixels;             \/\/          \/\/ Size in pixels for rasterizer (mo/;"	m	struct:ImFontConfig	typeref:typename:float
SizeVal	./imgui_internal.h	/^    ImVec2                      SizeVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
Sizes	./imgui_internal.h	/^    int     Sizes[CHUNKS];$/;"	m	struct:ImSpanAllocator	typeref:typename:int[]
SkipItems	./imgui_internal.h	/^    bool                    SkipItems;                          \/\/ Set when items can safely b/;"	m	struct:ImGuiWindow	typeref:typename:bool
SkipRefresh	./imgui_internal.h	/^    bool                    SkipRefresh;                        \/\/ [EXPERIMENTAL] Reuse previo/;"	m	struct:ImGuiWindow	typeref:typename:bool
SliderAngle	./imgui_widgets.cpp	/^bool ImGui::SliderAngle(const char* label, float* v_rad, float v_degrees_min, float v_degrees_ma/;"	f	class:ImGui	typeref:typename:bool
SliderBehavior	./imgui_widgets.cpp	/^bool ImGui::SliderBehavior(const ImRect& bb, ImGuiID id, ImGuiDataType data_type, void* p_v, con/;"	f	class:ImGui	typeref:typename:bool
SliderBehaviorT	./imgui_widgets.cpp	/^bool ImGui::SliderBehaviorT(const ImRect& bb, ImGuiID id, ImGuiDataType data_type, TYPE* v, cons/;"	f	class:ImGui	typeref:typename:bool
SliderCurrentAccum	./imgui_internal.h	/^    float                   SliderCurrentAccum;                 \/\/ Accumulated slider delta wh/;"	m	struct:ImGuiContext	typeref:typename:float
SliderCurrentAccumDirty	./imgui_internal.h	/^    bool                    SliderCurrentAccumDirty;            \/\/ Has the accumulated slider /;"	m	struct:ImGuiContext	typeref:typename:bool
SliderFloat	./imgui_widgets.cpp	/^bool ImGui::SliderFloat(const char* label, float* v, float v_min, float v_max, const char* forma/;"	f	class:ImGui	typeref:typename:bool
SliderFloat2	./imgui_widgets.cpp	/^bool ImGui::SliderFloat2(const char* label, float v[2], float v_min, float v_max, const char* fo/;"	f	class:ImGui	typeref:typename:bool
SliderFloat3	./imgui_widgets.cpp	/^bool ImGui::SliderFloat3(const char* label, float v[3], float v_min, float v_max, const char* fo/;"	f	class:ImGui	typeref:typename:bool
SliderFloat4	./imgui_widgets.cpp	/^bool ImGui::SliderFloat4(const char* label, float v[4], float v_min, float v_max, const char* fo/;"	f	class:ImGui	typeref:typename:bool
SliderGrabClickOffset	./imgui_internal.h	/^    float                   SliderGrabClickOffset;$/;"	m	struct:ImGuiContext	typeref:typename:float
SliderInt	./imgui_widgets.cpp	/^bool ImGui::SliderInt(const char* label, int* v, int v_min, int v_max, const char* format, ImGui/;"	f	class:ImGui	typeref:typename:bool
SliderInt2	./imgui_widgets.cpp	/^bool ImGui::SliderInt2(const char* label, int v[2], int v_min, int v_max, const char* format, Im/;"	f	class:ImGui	typeref:typename:bool
SliderInt3	./imgui_widgets.cpp	/^bool ImGui::SliderInt3(const char* label, int v[3], int v_min, int v_max, const char* format, Im/;"	f	class:ImGui	typeref:typename:bool
SliderInt4	./imgui_widgets.cpp	/^bool ImGui::SliderInt4(const char* label, int v[4], int v_min, int v_max, const char* format, Im/;"	f	class:ImGui	typeref:typename:bool
SliderScalar	./imgui_widgets.cpp	/^bool ImGui::SliderScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p/;"	f	class:ImGui	typeref:typename:bool
SliderScalarN	./imgui_widgets.cpp	/^bool ImGui::SliderScalarN(const char* label, ImGuiDataType data_type, void* v, int components, c/;"	f	class:ImGui	typeref:typename:bool
SmallButton	./imgui_widgets.cpp	/^bool ImGui::SmallButton(const char* label)$/;"	f	class:ImGui	typeref:typename:bool
SortDirection	./imgui.h	/^    ImGuiSortDirection          SortDirection;      \/\/ ImGuiSortDirection_Ascending or ImGuiSo/;"	m	struct:ImGuiTableColumnSortSpecs	typeref:typename:ImGuiSortDirection
SortDirection	./imgui_internal.h	/^    ImU8                    SortDirection : 2;              \/\/ ImGuiSortDirection_Ascending or/;"	m	struct:ImGuiTableColumn	typeref:typename:ImU8:2
SortDirection	./imgui_internal.h	/^    ImU8                    SortDirection : 2;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImU8:2
SortDirectionsAvailCount	./imgui_internal.h	/^    ImU8                    SortDirectionsAvailCount : 2;   \/\/ Number of available sort direct/;"	m	struct:ImGuiTableColumn	typeref:typename:ImU8:2
SortDirectionsAvailList	./imgui_internal.h	/^    ImU8                    SortDirectionsAvailList;        \/\/ Ordered list of available sort /;"	m	struct:ImGuiTableColumn	typeref:typename:ImU8
SortDirectionsAvailMask	./imgui_internal.h	/^    ImU8                    SortDirectionsAvailMask : 4;    \/\/ Mask of available sort directio/;"	m	struct:ImGuiTableColumn	typeref:typename:ImU8:4
SortItems	./imgui_demo.cpp	/^    void SortItems(int n)$/;"	f	struct:ExampleDualListBox	typeref:typename:void	file:
SortOrder	./imgui.h	/^    ImS16                       SortOrder;          \/\/ Index within parent ImGuiTableSortSpecs/;"	m	struct:ImGuiTableColumnSortSpecs	typeref:typename:ImS16
SortOrder	./imgui_internal.h	/^    ImGuiTableColumnIdx     SortOrder;                      \/\/ Index of this column within sor/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableColumnIdx
SortOrder	./imgui_internal.h	/^    ImGuiTableColumnIdx     SortOrder;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImGuiTableColumnIdx
SortSpecs	./imgui_internal.h	/^    ImGuiTableSortSpecs         SortSpecs;                  \/\/ Public facing sorts specs, this/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableSortSpecs
SortSpecsCount	./imgui_internal.h	/^    ImGuiTableColumnIdx         SortSpecsCount;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
SortSpecsMulti	./imgui_internal.h	/^    ImVector<ImGuiTableColumnSortSpecs> SortSpecsMulti;     \/\/ FIXME-OPT: Using a small-vector/;"	m	struct:ImGuiTable	typeref:typename:ImVector<ImGuiTableColumnSortSpecs>
SortSpecsSingle	./imgui_internal.h	/^    ImGuiTableColumnSortSpecs   SortSpecsSingle;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnSortSpecs
SortWithSortSpecs	./imgui_demo.cpp	/^    static void SortWithSortSpecs(ImGuiTableSortSpecs* sort_specs, ExampleAsset* items, int item/;"	f	struct:ExampleAsset	typeref:typename:void	file:
SortWithSortSpecs	./imgui_demo.cpp	/^    static void SortWithSortSpecs(ImGuiTableSortSpecs* sort_specs, MyItem* items, int items_coun/;"	f	struct:__anon38b7fb720511::MyItem	typeref:typename:void	file:
Source	./imgui_internal.h	/^    ImGuiInputSource                Source;$/;"	m	struct:ImGuiInputEvent	typeref:typename:ImGuiInputSource
SourceId	./imgui.h	/^    ImGuiID         SourceId;           \/\/ Source item id$/;"	m	struct:ImGuiPayload	typeref:typename:ImGuiID
SourceParentId	./imgui.h	/^    ImGuiID         SourceParentId;     \/\/ Source parent id (if available)$/;"	m	struct:ImGuiPayload	typeref:typename:ImGuiID
Spacing	./imgui_internal.h	/^    ImU16       Spacing;$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU16
Spacing	./imgui_widgets.cpp	/^    float               Spacing;                \/\/ Horizontal spacing at the end of the sectio/;"	m	struct:ImGuiTabBarSection	typeref:typename:float	file:
Spacing	./imgui_widgets.cpp	/^void ImGui::Spacing()$/;"	f	class:ImGui	typeref:typename:void
Specs	./imgui.h	/^    const ImGuiTableColumnSortSpecs* Specs;     \/\/ Pointer to sort spec array.$/;"	m	struct:ImGuiTableSortSpecs	typeref:typename:const ImGuiTableColumnSortSpecs *
SpecsCount	./imgui.h	/^    int                         SpecsCount;     \/\/ Sort spec count. Most often 1. May be > 1 w/;"	m	struct:ImGuiTableSortSpecs	typeref:typename:int
SpecsDirty	./imgui.h	/^    bool                        SpecsDirty;     \/\/ Set to true when specs have changed since l/;"	m	struct:ImGuiTableSortSpecs	typeref:typename:bool
Split	./imgui_draw.cpp	/^void ImDrawListSplitter::Split(ImDrawList* draw_list, int channels_count)$/;"	f	class:ImDrawListSplitter	typeref:typename:void
Splitter	./imgui_internal.h	/^    ImDrawListSplitter  Splitter;$/;"	m	struct:ImGuiOldColumns	typeref:typename:ImDrawListSplitter
SplitterBehavior	./imgui_widgets.cpp	/^bool ImGui::SplitterBehavior(const ImRect& bb, ImGuiID id, ImGuiAxis axis, float* size1, float* /;"	f	class:ImGui	typeref:typename:bool
Sponsors	./docs/README.md	/^Sponsors$/;"	s	chapter:Dear ImGui
Square	./imgui_demo.cpp	/^        static void Square(ImGuiSizeCallbackData* data)$/;"	f	struct:ShowExampleAppConstrainedResize::CustomConstraints	typeref:typename:void	file:
SrcCount	./imgui_draw.cpp	/^    int                 SrcCount;           \/\/ Number of source fonts targeting this destinati/;"	m	struct:ImFontBuildDstData	typeref:typename:int	file:
SrcCount	./misc/freetype/imgui_freetype.cpp	/^    int                 SrcCount;           \/\/ Number of source fonts targeting this destinati/;"	m	struct:ImFontBuildDstDataFT	typeref:typename:int	file:
SrcRanges	./imgui_draw.cpp	/^    const ImWchar*      SrcRanges;          \/\/ Ranges as requested by user (user is allowed to/;"	m	struct:ImFontBuildSrcData	typeref:typename:const ImWchar *	file:
SrcRanges	./misc/freetype/imgui_freetype.cpp	/^    const ImWchar*      SrcRanges;          \/\/ Ranges as requested by user (user is allowed to/;"	m	struct:ImFontBuildSrcDataFT	typeref:typename:const ImWchar *	file:
StackLevel	./imgui_internal.h	/^    int                     StackLevel;                 \/\/ -1: query stack and resize Results,/;"	m	struct:ImGuiIDStackTool	typeref:typename:int
StackSizesOnBegin	./imgui_internal.h	/^    ImGuiStackSizes     StackSizesOnBegin;          \/\/ Store size of various stacks for assert/;"	m	struct:ImGuiWindowStackData	typeref:typename:ImGuiStackSizes
StackToolFormatLevelInfo	./imgui.cpp	/^static int StackToolFormatLevelInfo(ImGuiIDStackTool* tool, int n, bool format_for_ui, char* buf/;"	f	typeref:typename:int	file:
Standard backends	./docs/BACKENDS.md	/^### Standard backends$/;"	S	section:Dear ImGui: Backends
StartMouseMovingWindow	./imgui.cpp	/^void ImGui::StartMouseMovingWindow(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
StartPosRel	./imgui_internal.h	/^    ImVec2                  StartPosRel;        \/\/ Start position in window-contents relative /;"	m	struct:ImGuiBoxSelectState	typeref:typename:ImVec2
StartPosY	./imgui.h	/^    float           StartPosY;          \/\/ [Internal] Cursor position at the time of Begin() o/;"	m	struct:ImGuiListClipper	typeref:typename:float
StartSeekOffsetY	./imgui.h	/^    double          StartSeekOffsetY;   \/\/ [Internal] Account for frozen rows in a table and i/;"	m	struct:ImGuiListClipper	typeref:typename:double
StateStorage	./imgui_internal.h	/^    ImGuiStorage            StateStorage;$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiStorage
StateStorage	./imgui_internal.h	/^    ImGuiStorage*           StateStorage;           \/\/ Current persistent per-window storage (/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiStorage *
StatusFlags	./imgui_internal.h	/^    ImGuiItemStatusFlags    StatusFlags;        \/\/ See ImGuiItemStatusFlags_$/;"	m	struct:ImGuiLastItemData	typeref:typename:ImGuiItemStatusFlags
Stb	./imgui_internal.h	/^    ImStb::STB_TexteditState Stb;                   \/\/ state for stb_textedit.h$/;"	m	struct:ImGuiInputTextState	typeref:typename:ImStb::STB_TexteditState
StbFindState	./imstb_textedit.h	/^} StbFindState;$/;"	t	typeref:struct:__anond05b37a10508
StbTexteditRow	./imstb_textedit.h	/^} StbTexteditRow;$/;"	t	typeref:struct:__anond05b37a10408
StbUndoRecord	./imstb_textedit.h	/^} StbUndoRecord;$/;"	t	typeref:struct:__anond05b37a10108
StbUndoState	./imstb_textedit.h	/^} StbUndoState;$/;"	t	typeref:struct:__anond05b37a10208
StencilRef	./backends/imgui_impl_dx10.cpp	/^        UINT                        StencilRef;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:UINT	file:
StencilRef	./backends/imgui_impl_dx11.cpp	/^        UINT                        StencilRef;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:UINT	file:
Step	./imgui.cpp	/^bool ImGuiListClipper::Step()$/;"	f	class:ImGuiListClipper	typeref:typename:bool
Step	./imgui_demo.cpp	/^        static void Step(ImGuiSizeCallbackData* data)$/;"	f	struct:ShowExampleAppConstrainedResize::CustomConstraints	typeref:typename:void	file:
StepNo	./imgui_internal.h	/^    int                             StepNo;$/;"	m	struct:ImGuiListClipperData	typeref:typename:int
Storage	./imgui_internal.h	/^    ImGuiMultiSelectState*  Storage;$/;"	m	struct:ImGuiMultiSelectTempData	typeref:typename:ImGuiMultiSelectState *
Storage	./imgui_internal.h	/^    ImU32           Storage[(BITCOUNT + 31) >> 5];$/;"	m	struct:ImBitArray	typeref:typename:ImU32[]
Storage	./imgui_internal.h	/^    ImVector<ImU32> Storage;$/;"	m	struct:ImBitVector	typeref:typename:ImVector<ImU32>
StorageId	./imgui_internal.h	/^    ImGuiID                     StorageId;          \/\/ Set by SetNextItemStorageID()$/;"	m	struct:ImGuiNextItemData	typeref:typename:ImGuiID
Str	./misc/cpp/imgui_stdlib.cpp	/^    std::string*            Str;$/;"	m	struct:InputTextCallback_UserData	typeref:typename:std::string *	file:
Strdup	./imgui_demo.cpp	/^    static char* Strdup(const char* s)                           { IM_ASSERT(s); size_t len = st/;"	f	struct:ExampleAppConsole	typeref:typename:char *	file:
StretchSpacing	./imgui_demo.cpp	/^    bool            StretchSpacing = true;$/;"	m	struct:ExampleAssetsBrowser	typeref:typename:bool	file:
StretchWeight	./imgui_internal.h	/^    float                   StretchWeight;                  \/\/ Master width weight when (Flags/;"	m	struct:ImGuiTableColumn	typeref:typename:float
Stricmp	./imgui_demo.cpp	/^    static int   Stricmp(const char* s1, const char* s2)         { int d; while ((d = toupper(*s/;"	f	struct:ExampleAppConsole	typeref:typename:int	file:
Stride	./backends/imgui_impl_opengl3.cpp	/^    GLint   Enabled, Size, Type, Normalized, Stride;$/;"	m	struct:ImGui_ImplOpenGL3_VtxAttribState	typeref:typename:GLint	file:
Stride	./imgui_widgets.cpp	/^    int Stride;$/;"	m	struct:ImGuiPlotArrayGetterData	typeref:typename:int	file:
Strnicmp	./imgui_demo.cpp	/^    static int   Strnicmp(const char* s1, const char* s2, int n) { int d = 0; while (n > 0 && (d/;"	f	struct:ExampleAppConsole	typeref:typename:int	file:
Strtrim	./imgui_demo.cpp	/^    static void  Strtrim(char* s)                                { char* str_end = s + strlen(s)/;"	f	struct:ExampleAppConsole	typeref:typename:void	file:
Style	./imgui_internal.h	/^    ImGuiStyle              Style;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiStyle
StyleColorsClassic	./imgui_draw.cpp	/^void ImGui::StyleColorsClassic(ImGuiStyle* dst)$/;"	f	class:ImGui	typeref:typename:void
StyleColorsDark	./imgui_draw.cpp	/^void ImGui::StyleColorsDark(ImGuiStyle* dst)$/;"	f	class:ImGui	typeref:typename:void
StyleColorsLight	./imgui_draw.cpp	/^void ImGui::StyleColorsLight(ImGuiStyle* dst)$/;"	f	class:ImGui	typeref:typename:void
StyleVarStack	./imgui_internal.h	/^    ImVector<ImGuiStyleMod>         StyleVarStack;              \/\/ Stack for PushStyleVar()\/P/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiStyleMod>
Subpass	./backends/imgui_impl_vulkan.h	/^    uint32_t                        Subpass;$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:uint32_t
Support, Frequently Asked Questions (FAQ)	./docs/README.md	/^### Support, Frequently Asked Questions (FAQ)$/;"	S	chapter:Dear ImGui
Surface	./backends/imgui_impl_vulkan.h	/^    VkSurfaceKHR        Surface;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:VkSurfaceKHR
SurfaceFormat	./backends/imgui_impl_vulkan.h	/^    VkSurfaceFormatKHR  SurfaceFormat;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:VkSurfaceFormatKHR
Swap	./imgui_widgets.cpp	/^void ImGuiSelectionBasicStorage::Swap(ImGuiSelectionBasicStorage& r)$/;"	f	class:ImGuiSelectionBasicStorage	typeref:typename:void
Swapchain	./backends/imgui_impl_vulkan.h	/^    VkSwapchainKHR      Swapchain;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:VkSwapchainKHR
TABLE_BORDER_SIZE	./imgui_tables.cpp	/^static const float TABLE_BORDER_SIZE                     = 1.0f;    \/\/ FIXME-TABLE: Currently /;"	v	typeref:typename:const float	file:
TABLE_DRAW_CHANNEL_BG0	./imgui_tables.cpp	/^static const int TABLE_DRAW_CHANNEL_BG0 = 0;$/;"	v	typeref:typename:const int	file:
TABLE_DRAW_CHANNEL_BG2_FROZEN	./imgui_tables.cpp	/^static const int TABLE_DRAW_CHANNEL_BG2_FROZEN = 1;$/;"	v	typeref:typename:const int	file:
TABLE_DRAW_CHANNEL_NOCLIP	./imgui_tables.cpp	/^static const int TABLE_DRAW_CHANNEL_NOCLIP = 2;                     \/\/ When using ImGuiTableFl/;"	v	typeref:typename:const int	file:
TABLE_RESIZE_SEPARATOR_FEEDBACK_TIMER	./imgui_tables.cpp	/^static const float TABLE_RESIZE_SEPARATOR_FEEDBACK_TIMER = 0.06f;   \/\/ Delay\/timer before mak/;"	v	typeref:typename:const float	file:
TABLE_RESIZE_SEPARATOR_HALF_THICKNESS	./imgui_tables.cpp	/^static const float TABLE_RESIZE_SEPARATOR_HALF_THICKNESS = 4.0f;    \/\/ Extend outside inner bo/;"	v	typeref:typename:const float	file:
TINT_BUILD_CMD_TOOLS	./examples/example_glfw_wgpu/CMakeLists.txt	/^  option(TINT_BUILD_CMD_TOOLS "Build the Tint command line tools" OFF)$/;"	D
TINT_BUILD_DOCS	./examples/example_glfw_wgpu/CMakeLists.txt	/^  option(TINT_BUILD_DOCS "Build documentation" OFF)$/;"	D
TINT_BUILD_GLSL_VALIDATOR	./examples/example_glfw_wgpu/CMakeLists.txt	/^    option(TINT_BUILD_GLSL_VALIDATOR "Build the GLSL output validator" OFF)$/;"	D
TINT_BUILD_GLSL_WRITER	./examples/example_glfw_wgpu/CMakeLists.txt	/^    option(TINT_BUILD_GLSL_WRITER "Build the GLSL output writer" OFF)$/;"	D
TINT_BUILD_MSL_WRITER	./examples/example_glfw_wgpu/CMakeLists.txt	/^    option(TINT_BUILD_MSL_WRITER "Build the MSL output writer" OFF)$/;"	D
TINT_BUILD_SPV_READER	./examples/example_glfw_wgpu/CMakeLists.txt	/^    option(TINT_BUILD_SPV_READER "Build the SPIR-V input reader" OFF)$/;"	D
TINT_BUILD_SPV_WRITER	./examples/example_glfw_wgpu/CMakeLists.txt	/^    option(TINT_BUILD_SPV_WRITER "Build the SPIR-V output writer" OFF)$/;"	D
TINT_BUILD_TESTS	./examples/example_glfw_wgpu/CMakeLists.txt	/^  option(TINT_BUILD_TESTS "Build tests" OFF)$/;"	D
TINT_BUILD_WGSL_READER	./examples/example_glfw_wgpu/CMakeLists.txt	/^    option(TINT_BUILD_WGSL_READER "Build the WGSL input reader" ON)$/;"	D
TINT_BUILD_WGSL_WRITER	./examples/example_glfw_wgpu/CMakeLists.txt	/^    option(TINT_BUILD_WGSL_WRITER "Build the WGSL output writer" ON)$/;"	D
TOOLTIP_DEFAULT_OFFSET	./imgui.cpp	/^static const ImVec2 TOOLTIP_DEFAULT_OFFSET = ImVec2(16, 10);            \/\/ Multiplied by g.Sty/;"	v	typeref:typename:const ImVec2	file:
TRT_BackgroundClipRect	./imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon1035f96e0403	file:
TRT_ColumnsClipRect	./imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon1035f96e0403	file:
TRT_ColumnsContentFrozen	./imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon1035f96e0403	file:
TRT_ColumnsContentHeadersIdeal	./imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon1035f96e0403	file:
TRT_ColumnsContentHeadersUsed	./imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon1035f96e0403	file:
TRT_ColumnsContentUnfrozen	./imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon1035f96e0403	file:
TRT_ColumnsRect	./imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon1035f96e0403	file:
TRT_ColumnsWorkRect	./imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon1035f96e0403	file:
TRT_Count	./imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon1035f96e0403	file:
TRT_HostClipRect	./imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon1035f96e0403	file:
TRT_InnerClipRect	./imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon1035f96e0403	file:
TRT_InnerRect	./imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon1035f96e0403	file:
TRT_OuterRect	./imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon1035f96e0403	file:
TRT_WorkRect	./imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon1035f96e0403	file:
TabBarBorderSize	./imgui.h	/^    float       TabBarBorderSize;           \/\/ Thickness of tab-bar separator, which takes on /;"	m	struct:ImGuiStyle	typeref:typename:float
TabBarCalcMaxTabWidth	./imgui_widgets.cpp	/^static float ImGui::TabBarCalcMaxTabWidth()$/;"	f	class:ImGui	typeref:typename:float	file:
TabBarCalcScrollableWidth	./imgui_widgets.cpp	/^static float TabBarCalcScrollableWidth(ImGuiTabBar* tab_bar, ImGuiTabBarSection* sections)$/;"	f	typeref:typename:float	file:
TabBarCalcTabID	./imgui_widgets.cpp	/^static ImU32   ImGui::TabBarCalcTabID(ImGuiTabBar* tab_bar, const char* label, ImGuiWindow* dock/;"	f	class:ImGui	typeref:typename:ImU32	file:
TabBarCloseTab	./imgui_widgets.cpp	/^void ImGui::TabBarCloseTab(ImGuiTabBar* tab_bar, ImGuiTabItem* tab)$/;"	f	class:ImGui	typeref:typename:void
TabBarFindTabByID	./imgui_widgets.cpp	/^ImGuiTabItem* ImGui::TabBarFindTabByID(ImGuiTabBar* tab_bar, ImGuiID tab_id)$/;"	f	class:ImGui	typeref:typename:ImGuiTabItem *
TabBarFindTabByOrder	./imgui_widgets.cpp	/^ImGuiTabItem* ImGui::TabBarFindTabByOrder(ImGuiTabBar* tab_bar, int order)$/;"	f	class:ImGui	typeref:typename:ImGuiTabItem *
TabBarGetCurrentTab	./imgui_widgets.cpp	/^ImGuiTabItem* ImGui::TabBarGetCurrentTab(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui	typeref:typename:ImGuiTabItem *
TabBarGetTabName	./imgui_widgets.cpp	/^const char* ImGui::TabBarGetTabName(ImGuiTabBar* tab_bar, ImGuiTabItem* tab)$/;"	f	class:ImGui	typeref:typename:const char *
TabBarGetTabOrder	./imgui_internal.h	/^    inline int              TabBarGetTabOrder(ImGuiTabBar* tab_bar, ImGuiTabItem* tab) { return /;"	f	namespace:ImGui	typeref:typename:int
TabBarLayout	./imgui_widgets.cpp	/^static void ImGui::TabBarLayout(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui	typeref:typename:void	file:
TabBarOverlineSize	./imgui.h	/^    float       TabBarOverlineSize;         \/\/ Thickness of tab-bar overline, which highlights/;"	m	struct:ImGuiStyle	typeref:typename:float
TabBarProcessReorder	./imgui_widgets.cpp	/^bool ImGui::TabBarProcessReorder(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui	typeref:typename:bool
TabBarQueueFocus	./imgui_widgets.cpp	/^void ImGui::TabBarQueueFocus(ImGuiTabBar* tab_bar, ImGuiTabItem* tab)$/;"	f	class:ImGui	typeref:typename:void
TabBarQueueReorder	./imgui_widgets.cpp	/^void ImGui::TabBarQueueReorder(ImGuiTabBar* tab_bar, ImGuiTabItem* tab, int offset)$/;"	f	class:ImGui	typeref:typename:void
TabBarQueueReorderFromMousePos	./imgui_widgets.cpp	/^void ImGui::TabBarQueueReorderFromMousePos(ImGuiTabBar* tab_bar, ImGuiTabItem* src_tab, ImVec2 m/;"	f	class:ImGui	typeref:typename:void
TabBarRemoveTab	./imgui_widgets.cpp	/^void ImGui::TabBarRemoveTab(ImGuiTabBar* tab_bar, ImGuiID tab_id)$/;"	f	class:ImGui	typeref:typename:void
TabBarScrollClamp	./imgui_widgets.cpp	/^static float ImGui::TabBarScrollClamp(ImGuiTabBar* tab_bar, float scrolling)$/;"	f	class:ImGui	typeref:typename:float	file:
TabBarScrollToTab	./imgui_widgets.cpp	/^static void ImGui::TabBarScrollToTab(ImGuiTabBar* tab_bar, ImGuiID tab_id, ImGuiTabBarSection* s/;"	f	class:ImGui	typeref:typename:void	file:
TabBarScrollingButtons	./imgui_widgets.cpp	/^static ImGuiTabItem* ImGui::TabBarScrollingButtons(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui	typeref:typename:ImGuiTabItem *	file:
TabBarTabListPopupButton	./imgui_widgets.cpp	/^static ImGuiTabItem* ImGui::TabBarTabListPopupButton(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui	typeref:typename:ImGuiTabItem *	file:
TabBars	./imgui_internal.h	/^    ImPool<ImGuiTabBar>             TabBars;$/;"	m	struct:ImGuiContext	typeref:typename:ImPool<ImGuiTabBar>
TabBorderSize	./imgui.h	/^    float       TabBorderSize;              \/\/ Thickness of border around tabs.$/;"	m	struct:ImGuiStyle	typeref:typename:float
TabCount	./imgui_widgets.cpp	/^    int                 TabCount;               \/\/ Number of tabs in this section.$/;"	m	struct:ImGuiTabBarSection	typeref:typename:int	file:
TabItemBackground	./imgui_widgets.cpp	/^void ImGui::TabItemBackground(ImDrawList* draw_list, const ImRect& bb, ImGuiTabItemFlags flags, /;"	f	class:ImGui	typeref:typename:void
TabItemButton	./imgui_widgets.cpp	/^bool    ImGui::TabItemButton(const char* label, ImGuiTabItemFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
TabItemCalcSize	./imgui_widgets.cpp	/^ImVec2 ImGui::TabItemCalcSize(ImGuiWindow*)$/;"	f	class:ImGui	typeref:typename:ImVec2
TabItemCalcSize	./imgui_widgets.cpp	/^ImVec2 ImGui::TabItemCalcSize(const char* label, bool has_close_button_or_unsaved_marker)$/;"	f	class:ImGui	typeref:typename:ImVec2
TabItemComparerByBeginOrder	./imgui_widgets.cpp	/^static int IMGUI_CDECL TabItemComparerByBeginOrder(const void* lhs, const void* rhs)$/;"	f	typeref:typename:int IMGUI_CDECL	file:
TabItemComparerBySection	./imgui_widgets.cpp	/^static int IMGUI_CDECL TabItemComparerBySection(const void* lhs, const void* rhs)$/;"	f	typeref:typename:int IMGUI_CDECL	file:
TabItemEx	./imgui_widgets.cpp	/^bool    ImGui::TabItemEx(ImGuiTabBar* tab_bar, const char* label, bool* p_open, ImGuiTabItemFlag/;"	f	class:ImGui	typeref:typename:bool
TabItemGetSectionIdx	./imgui_widgets.cpp	/^static inline int TabItemGetSectionIdx(const ImGuiTabItem* tab)$/;"	f	typeref:typename:int	file:
TabItemLabelAndCloseButton	./imgui_widgets.cpp	/^void ImGui::TabItemLabelAndCloseButton(ImDrawList* draw_list, const ImRect& bb, ImGuiTabItemFlag/;"	f	class:ImGui	typeref:typename:void
TabMinWidthForCloseButton	./imgui.h	/^    float       TabMinWidthForCloseButton;  \/\/ Minimum width for close button to appear on an /;"	m	struct:ImGuiStyle	typeref:typename:float
TabRounding	./imgui.h	/^    float       TabRounding;                \/\/ Radius of upper corners of a tab. Set to 0.0f t/;"	m	struct:ImGuiStyle	typeref:typename:float
TableAngledHeadersAngle	./imgui.h	/^    float       TableAngledHeadersAngle;    \/\/ Angle of angled headers (supported values range/;"	m	struct:ImGuiStyle	typeref:typename:float
TableAngledHeadersRow	./imgui_tables.cpp	/^void ImGui::TableAngledHeadersRow()$/;"	f	class:ImGui	typeref:typename:void
TableAngledHeadersRowEx	./imgui_tables.cpp	/^void ImGui::TableAngledHeadersRowEx(ImGuiID row_id, float angle, float max_label_width, const Im/;"	f	class:ImGui	typeref:typename:void
TableAngledHeadersTextAlign	./imgui.h	/^    ImVec2      TableAngledHeadersTextAlign;\/\/ Alignment of angled headers within the cell$/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
TableBeginApplyRequests	./imgui_tables.cpp	/^void ImGui::TableBeginApplyRequests(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableBeginCell	./imgui_tables.cpp	/^void ImGui::TableBeginCell(ImGuiTable* table, int column_n)$/;"	f	class:ImGui	typeref:typename:void
TableBeginContextMenuPopup	./imgui_tables.cpp	/^bool ImGui::TableBeginContextMenuPopup(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:bool
TableBeginInitMemory	./imgui_tables.cpp	/^void ImGui::TableBeginInitMemory(ImGuiTable* table, int columns_count)$/;"	f	class:ImGui	typeref:typename:void
TableBeginRow	./imgui_tables.cpp	/^void ImGui::TableBeginRow(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableDrawBorders	./imgui_tables.cpp	/^void ImGui::TableDrawBorders(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableDrawDefaultContextMenu	./imgui_tables.cpp	/^void ImGui::TableDrawDefaultContextMenu(ImGuiTable* table, ImGuiTableFlags flags_for_section_to_/;"	f	class:ImGui	typeref:typename:void
TableEndCell	./imgui_tables.cpp	/^void ImGui::TableEndCell(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableEndRow	./imgui_tables.cpp	/^void ImGui::TableEndRow(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableFindByID	./imgui_tables.cpp	/^ImGuiTable* ImGui::TableFindByID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiTable *
TableFixColumnSortDirection	./imgui_tables.cpp	/^void ImGui::TableFixColumnSortDirection(ImGuiTable* table, ImGuiTableColumn* column)$/;"	f	class:ImGui	typeref:typename:void
TableFixFlags	./imgui_tables.cpp	/^inline ImGuiTableFlags TableFixFlags(ImGuiTableFlags flags, ImGuiWindow* outer_window)$/;"	f	typeref:typename:ImGuiTableFlags
TableGcCompactSettings	./imgui_tables.cpp	/^void ImGui::TableGcCompactSettings()$/;"	f	class:ImGui	typeref:typename:void
TableGcCompactTransientBuffers	./imgui_tables.cpp	/^void ImGui::TableGcCompactTransientBuffers(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableGcCompactTransientBuffers	./imgui_tables.cpp	/^void ImGui::TableGcCompactTransientBuffers(ImGuiTableTempData* temp_data)$/;"	f	class:ImGui	typeref:typename:void
TableGetBoundSettings	./imgui_tables.cpp	/^ImGuiTableSettings* ImGui::TableGetBoundSettings(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:ImGuiTableSettings *
TableGetCellBgRect	./imgui_tables.cpp	/^ImRect ImGui::TableGetCellBgRect(const ImGuiTable* table, int column_n)$/;"	f	class:ImGui	typeref:typename:ImRect
TableGetColumnAvailSortDirection	./imgui_tables.cpp	/^static inline ImGuiSortDirection TableGetColumnAvailSortDirection(ImGuiTableColumn* column, int /;"	f	typeref:typename:ImGuiSortDirection	file:
TableGetColumnBorderCol	./imgui_tables.cpp	/^static ImU32 TableGetColumnBorderCol(ImGuiTable* table, int order_n, int column_n)$/;"	f	typeref:typename:ImU32	file:
TableGetColumnCount	./imgui_tables.cpp	/^int ImGui::TableGetColumnCount()$/;"	f	class:ImGui	typeref:typename:int
TableGetColumnFlags	./imgui_tables.cpp	/^ImGuiTableColumnFlags ImGui::TableGetColumnFlags(int column_n)$/;"	f	class:ImGui	typeref:typename:ImGuiTableColumnFlags
TableGetColumnIndex	./imgui_tables.cpp	/^int ImGui::TableGetColumnIndex()$/;"	f	class:ImGui	typeref:typename:int
TableGetColumnName	./imgui_tables.cpp	/^const char* ImGui::TableGetColumnName(const ImGuiTable* table, int column_n)$/;"	f	class:ImGui	typeref:typename:const char *
TableGetColumnName	./imgui_tables.cpp	/^const char* ImGui::TableGetColumnName(int column_n)$/;"	f	class:ImGui	typeref:typename:const char *
TableGetColumnNextSortDirection	./imgui_tables.cpp	/^ImGuiSortDirection ImGui::TableGetColumnNextSortDirection(ImGuiTableColumn* column)$/;"	f	class:ImGui	typeref:typename:ImGuiSortDirection
TableGetColumnResizeID	./imgui_tables.cpp	/^ImGuiID ImGui::TableGetColumnResizeID(ImGuiTable* table, int column_n, int instance_no)$/;"	f	class:ImGui	typeref:typename:ImGuiID
TableGetColumnWidthAuto	./imgui_tables.cpp	/^float ImGui::TableGetColumnWidthAuto(ImGuiTable* table, ImGuiTableColumn* column)$/;"	f	class:ImGui	typeref:typename:float
TableGetHeaderAngledMaxLabelWidth	./imgui_tables.cpp	/^float ImGui::TableGetHeaderAngledMaxLabelWidth()$/;"	f	class:ImGui	typeref:typename:float
TableGetHeaderRowHeight	./imgui_tables.cpp	/^float ImGui::TableGetHeaderRowHeight()$/;"	f	class:ImGui	typeref:typename:float
TableGetHoveredColumn	./imgui_tables.cpp	/^int ImGui::TableGetHoveredColumn()$/;"	f	class:ImGui	typeref:typename:int
TableGetHoveredRow	./imgui_tables.cpp	/^int ImGui::TableGetHoveredRow()$/;"	f	class:ImGui	typeref:typename:int
TableGetInstanceData	./imgui_internal.h	/^    inline ImGuiTableInstanceData*  TableGetInstanceData(ImGuiTable* table, int instance_no) { i/;"	f	namespace:ImGui	typeref:typename:ImGuiTableInstanceData *
TableGetInstanceID	./imgui_internal.h	/^    inline ImGuiID                  TableGetInstanceID(ImGuiTable* table, int instance_no)   { r/;"	f	namespace:ImGui	typeref:typename:ImGuiID
TableGetMaxColumnWidth	./imgui_tables.cpp	/^float ImGui::TableGetMaxColumnWidth(const ImGuiTable* table, int column_n)$/;"	f	class:ImGui	typeref:typename:float
TableGetRowIndex	./imgui_tables.cpp	/^int ImGui::TableGetRowIndex()$/;"	f	class:ImGui	typeref:typename:int
TableGetSortSpecs	./imgui_tables.cpp	/^ImGuiTableSortSpecs* ImGui::TableGetSortSpecs()$/;"	f	class:ImGui	typeref:typename:ImGuiTableSortSpecs *
TableHeader	./imgui_tables.cpp	/^void ImGui::TableHeader(const char* label)$/;"	f	class:ImGui	typeref:typename:void
TableHeadersRow	./imgui_tables.cpp	/^void ImGui::TableHeadersRow()$/;"	f	class:ImGui	typeref:typename:void
TableIndex	./imgui_internal.h	/^    int                         TableIndex;                 \/\/ Index in g.Tables.Buf[] pool$/;"	m	struct:ImGuiTableTempData	typeref:typename:int
TableInstanceID	./imgui_internal.h	/^    ImGuiID                     TableInstanceID;$/;"	m	struct:ImGuiTableInstanceData	typeref:typename:ImGuiID
TableLoadSettings	./imgui_tables.cpp	/^void ImGui::TableLoadSettings(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableMergeDrawChannels	./imgui_tables.cpp	/^void ImGui::TableMergeDrawChannels(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableNextColumn	./imgui_tables.cpp	/^bool ImGui::TableNextColumn()$/;"	f	class:ImGui	typeref:typename:bool
TableNextRow	./imgui_tables.cpp	/^void ImGui::TableNextRow(ImGuiTableRowFlags row_flags, float row_min_height)$/;"	f	class:ImGui	typeref:typename:void
TableOpenContextMenu	./imgui_tables.cpp	/^void ImGui::TableOpenContextMenu(int column_n)$/;"	f	class:ImGui	typeref:typename:void
TablePopBackgroundChannel	./imgui_tables.cpp	/^void ImGui::TablePopBackgroundChannel()$/;"	f	class:ImGui	typeref:typename:void
TablePushBackgroundChannel	./imgui_tables.cpp	/^void ImGui::TablePushBackgroundChannel()$/;"	f	class:ImGui	typeref:typename:void
TableRemove	./imgui_tables.cpp	/^void ImGui::TableRemove(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableResetSettings	./imgui_tables.cpp	/^void ImGui::TableResetSettings(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableSaveSettings	./imgui_tables.cpp	/^void ImGui::TableSaveSettings(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableSetBgColor	./imgui_tables.cpp	/^void ImGui::TableSetBgColor(ImGuiTableBgTarget target, ImU32 color, int column_n)$/;"	f	class:ImGui	typeref:typename:void
TableSetColumnEnabled	./imgui_tables.cpp	/^void ImGui::TableSetColumnEnabled(int column_n, bool enabled)$/;"	f	class:ImGui	typeref:typename:void
TableSetColumnIndex	./imgui_tables.cpp	/^bool ImGui::TableSetColumnIndex(int column_n)$/;"	f	class:ImGui	typeref:typename:bool
TableSetColumnSortDirection	./imgui_tables.cpp	/^void ImGui::TableSetColumnSortDirection(int column_n, ImGuiSortDirection sort_direction, bool ap/;"	f	class:ImGui	typeref:typename:void
TableSetColumnWidth	./imgui_tables.cpp	/^void ImGui::TableSetColumnWidth(int column_n, float width)$/;"	f	class:ImGui	typeref:typename:void
TableSetColumnWidthAutoAll	./imgui_tables.cpp	/^void ImGui::TableSetColumnWidthAutoAll(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableSetColumnWidthAutoSingle	./imgui_tables.cpp	/^void ImGui::TableSetColumnWidthAutoSingle(ImGuiTable* table, int column_n)$/;"	f	class:ImGui	typeref:typename:void
TableSettingsAddSettingsHandler	./imgui_tables.cpp	/^void ImGui::TableSettingsAddSettingsHandler()$/;"	f	class:ImGui	typeref:typename:void
TableSettingsCalcChunkSize	./imgui_tables.cpp	/^static size_t TableSettingsCalcChunkSize(int columns_count)$/;"	f	typeref:typename:size_t	file:
TableSettingsCreate	./imgui_tables.cpp	/^ImGuiTableSettings* ImGui::TableSettingsCreate(ImGuiID id, int columns_count)$/;"	f	class:ImGui	typeref:typename:ImGuiTableSettings *
TableSettingsFindByID	./imgui_tables.cpp	/^ImGuiTableSettings* ImGui::TableSettingsFindByID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiTableSettings *
TableSettingsHandler_ApplyAll	./imgui_tables.cpp	/^static void TableSettingsHandler_ApplyAll(ImGuiContext* ctx, ImGuiSettingsHandler*)$/;"	f	typeref:typename:void	file:
TableSettingsHandler_ClearAll	./imgui_tables.cpp	/^static void TableSettingsHandler_ClearAll(ImGuiContext* ctx, ImGuiSettingsHandler*)$/;"	f	typeref:typename:void	file:
TableSettingsHandler_ReadLine	./imgui_tables.cpp	/^static void TableSettingsHandler_ReadLine(ImGuiContext*, ImGuiSettingsHandler*, void* entry, con/;"	f	typeref:typename:void	file:
TableSettingsHandler_ReadOpen	./imgui_tables.cpp	/^static void* TableSettingsHandler_ReadOpen(ImGuiContext*, ImGuiSettingsHandler*, const char* nam/;"	f	typeref:typename:void *	file:
TableSettingsHandler_WriteAll	./imgui_tables.cpp	/^static void TableSettingsHandler_WriteAll(ImGuiContext* ctx, ImGuiSettingsHandler* handler, ImGu/;"	f	typeref:typename:void	file:
TableSettingsInit	./imgui_tables.cpp	/^static void TableSettingsInit(ImGuiTableSettings* settings, ImGuiID id, int columns_count, int c/;"	f	typeref:typename:void	file:
TableSetupColumn	./imgui_tables.cpp	/^void ImGui::TableSetupColumn(const char* label, ImGuiTableColumnFlags flags, float init_width_or/;"	f	class:ImGui	typeref:typename:void
TableSetupColumnFlags	./imgui_tables.cpp	/^static void TableSetupColumnFlags(ImGuiTable* table, ImGuiTableColumn* column, ImGuiTableColumnF/;"	f	typeref:typename:void	file:
TableSetupDrawChannels	./imgui_tables.cpp	/^void ImGui::TableSetupDrawChannels(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableSetupScrollFreeze	./imgui_tables.cpp	/^void ImGui::TableSetupScrollFreeze(int columns, int rows)$/;"	f	class:ImGui	typeref:typename:void
TableSortSpecsBuild	./imgui_tables.cpp	/^void ImGui::TableSortSpecsBuild(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableSortSpecsSanitize	./imgui_tables.cpp	/^void ImGui::TableSortSpecsSanitize(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableUpdateBorders	./imgui_tables.cpp	/^void ImGui::TableUpdateBorders(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableUpdateColumnsWeightFromWidth	./imgui_tables.cpp	/^void ImGui::TableUpdateColumnsWeightFromWidth(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableUpdateLayout	./imgui_tables.cpp	/^void ImGui::TableUpdateLayout(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
Tables	./imgui_internal.h	/^    ImPool<ImGuiTable>              Tables;                     \/\/ Persistent table data$/;"	m	struct:ImGuiContext	typeref:typename:ImPool<ImGuiTable>
TablesLastTimeActive	./imgui_internal.h	/^    ImVector<float>                 TablesLastTimeActive;       \/\/ Last used timestamp of each/;"	m	struct:ImGuiContext	typeref:typename:ImVector<float>
TablesTempData	./imgui_internal.h	/^    ImVector<ImGuiTableTempData>    TablesTempData;             \/\/ Temporary table data (buffe/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiTableTempData>
TablesTempDataStacked	./imgui_internal.h	/^    int                             TablesTempDataStacked;      \/\/ Temporary table data size (/;"	m	struct:ImGuiContext	typeref:typename:int
Tabs	./imgui_internal.h	/^    ImVector<ImGuiTabItem> Tabs;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImVector<ImGuiTabItem>
TabsActiveCount	./imgui_internal.h	/^    ImS16               TabsActiveCount;        \/\/ Number of tabs submitted this frame.$/;"	m	struct:ImGuiTabBar	typeref:typename:ImS16
TabsAddedNew	./imgui_internal.h	/^    bool                TabsAddedNew;           \/\/ Set to true when a new tab item or button h/;"	m	struct:ImGuiTabBar	typeref:typename:bool
TabsNames	./imgui_internal.h	/^    ImGuiTextBuffer     TabsNames;              \/\/ For non-docking tab bar we re-append names /;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiTextBuffer
TeleportMousePos	./imgui.cpp	/^void ImGui::TeleportMousePos(const ImVec2& pos)$/;"	f	class:ImGui	typeref:typename:void
TempBuffer	./imgui_internal.h	/^    ImVector<ImVec2> TempBuffer;$/;"	m	struct:ImDrawListSharedData	typeref:typename:ImVector<ImVec2>
TempBuffer	./imgui_internal.h	/^    ImVector<char>          TempBuffer;                         \/\/ Temporary text buffer$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<char>
TempData	./imgui.h	/^    void*           TempData;           \/\/ [Internal] Internal data$/;"	m	struct:ImGuiListClipper	typeref:typename:void *
TempData	./imgui_internal.h	/^    ImGuiTableTempData*         TempData;                   \/\/ Transient data while table is a/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableTempData *
TempInputId	./imgui_internal.h	/^    ImGuiID                 TempInputId;                        \/\/ Temporary text input when C/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
TempInputIsActive	./imgui_internal.h	/^    inline bool             TempInputIsActive(ImGuiID id)       { ImGuiContext& g = *GImGui; ret/;"	f	namespace:ImGui	typeref:typename:bool
TempInputScalar	./imgui_widgets.cpp	/^bool ImGui::TempInputScalar(const ImRect& bb, ImGuiID id, const char* label, ImGuiDataType data_/;"	f	class:ImGui	typeref:typename:bool
TempInputText	./imgui_widgets.cpp	/^bool ImGui::TempInputText(const ImRect& bb, ImGuiID id, const char* label, char* buf, int buf_si/;"	f	class:ImGui	typeref:typename:bool
TempKeychordName	./imgui_internal.h	/^    char                    TempKeychordName[64];$/;"	m	struct:ImGuiContext	typeref:typename:char[64]
TestBit	./imgui_internal.h	/^    bool            TestBit(int n) const        { IM_ASSERT(n < (Storage.Size << 5)); return IM_/;"	f	struct:ImBitVector	typeref:typename:bool
TestBit	./imgui_internal.h	/^    bool            TestBit(int n) const        { n += OFFSET; IM_ASSERT(n >= 0 && n < BITCOUNT)/;"	f	struct:ImBitArray	typeref:typename:bool
TestEngine	./imgui_internal.h	/^    void*                   TestEngine;                         \/\/ Test engine user data$/;"	m	struct:ImGuiContext	typeref:typename:void *
TestEngineHookItems	./imgui_internal.h	/^    bool                    TestEngineHookItems;                \/\/ Will call test engine hooks/;"	m	struct:ImGuiContext	typeref:typename:bool
TestKeyOwner	./imgui.cpp	/^bool ImGui::TestKeyOwner(ImGuiKey key, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
TestShortcutRouting	./imgui.cpp	/^bool ImGui::TestShortcutRouting(ImGuiKeyChord key_chord, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
Testbed for toying with settings (for developers)	./misc/freetype/README.md	/^### Testbed for toying with settings (for developers)$/;"	S	chapter:imgui_freetype
TexDesiredWidth	./imgui.h	/^    int                         TexDesiredWidth;    \/\/ Texture width desired by user before Bu/;"	m	struct:ImFontAtlas	typeref:typename:int
TexGlyphPadding	./imgui.h	/^    int                         TexGlyphPadding;    \/\/ Padding between glyphs within texture i/;"	m	struct:ImFontAtlas	typeref:typename:int
TexHeight	./imgui.h	/^    int                         TexHeight;          \/\/ Texture height calculated during Build(/;"	m	struct:ImFontAtlas	typeref:typename:int
TexID	./imgui.h	/^    ImTextureID                 TexID;              \/\/ User data to refer to the texture once /;"	m	struct:ImFontAtlas	typeref:typename:ImTextureID
TexImage2D	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLTEXIMAGE2DPROC               TexImage2D;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLTEXIMAGE2DPROC
TexParameteri	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLTEXPARAMETERIPROC            TexParameteri;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLTEXPARAMETERIPROC
TexPixelsAlpha8	./imgui.h	/^    unsigned char*              TexPixelsAlpha8;    \/\/ 1 component per pixel, each component i/;"	m	struct:ImFontAtlas	typeref:typename:unsigned char *
TexPixelsRGBA32	./imgui.h	/^    unsigned int*               TexPixelsRGBA32;    \/\/ 4 component per pixel, each component i/;"	m	struct:ImFontAtlas	typeref:typename:unsigned int *
TexPixelsUseColors	./imgui.h	/^    bool                        TexPixelsUseColors; \/\/ Tell whether our texture data is known /;"	m	struct:ImFontAtlas	typeref:typename:bool
TexReady	./imgui.h	/^    bool                        TexReady;           \/\/ Set when texture was built matching cur/;"	m	struct:ImFontAtlas	typeref:typename:bool
TexUvLines	./imgui.h	/^    ImVec4                      TexUvLines[IM_DRAWLIST_TEX_LINES_WIDTH_MAX + 1];  \/\/ UVs for b/;"	m	struct:ImFontAtlas	typeref:typename:ImVec4[]
TexUvLines	./imgui_internal.h	/^    const ImVec4*   TexUvLines;                 \/\/ UV of anti-aliased lines in the atlas$/;"	m	struct:ImDrawListSharedData	typeref:typename:const ImVec4 *
TexUvScale	./imgui.h	/^    ImVec2                      TexUvScale;         \/\/ = (1.0f\/TexWidth, 1.0f\/TexHeight)$/;"	m	struct:ImFontAtlas	typeref:typename:ImVec2
TexUvWhitePixel	./imgui.h	/^    ImVec2                      TexUvWhitePixel;    \/\/ Texture coordinates to a white pixel$/;"	m	struct:ImFontAtlas	typeref:typename:ImVec2
TexUvWhitePixel	./imgui_internal.h	/^    ImVec2          TexUvWhitePixel;            \/\/ UV of white pixel in the atlas$/;"	m	struct:ImDrawListSharedData	typeref:typename:ImVec2
TexWidth	./imgui.h	/^    int                         TexWidth;           \/\/ Texture width calculated during Build()/;"	m	struct:ImFontAtlas	typeref:typename:int
Text	./imgui_internal.h	/^        ImGuiInputEventText         Text;           \/\/ if Type == ImGuiInputEventType_Text$/;"	m	union:ImGuiInputEvent::__anon869d752f020a	typeref:typename:ImGuiInputEventText
Text	./imgui_internal.h	/^    const char*     Text;$/;"	m	struct:ImGuiLocEntry	typeref:typename:const char *
Text	./imgui_widgets.cpp	/^void ImGui::Text(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
TextA	./imgui_internal.h	/^    ImVector<char>          TextA;                  \/\/ temporary UTF8 buffer for callbacks and/;"	m	struct:ImGuiInputTextState	typeref:typename:ImVector<char>
TextA	./imgui_internal.h	/^    ImVector<char>     TextA;           \/\/ text buffer$/;"	m	struct:ImGuiInputTextDeactivatedState	typeref:typename:ImVector<char>
TextAIsValid	./imgui_internal.h	/^    bool                    TextAIsValid;           \/\/ temporary UTF8 buffer is not initially /;"	m	struct:ImGuiInputTextState	typeref:typename:bool
TextColor	./imgui_internal.h	/^    ImU32                       TextColor;$/;"	m	struct:ImGuiTableHeaderData	typeref:typename:ImU32
TextColored	./imgui_widgets.cpp	/^void ImGui::TextColored(const ImVec4& col, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
TextColoredV	./imgui_widgets.cpp	/^void ImGui::TextColoredV(const ImVec4& col, const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
TextDisabled	./imgui_widgets.cpp	/^void ImGui::TextDisabled(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
TextDisabledV	./imgui_widgets.cpp	/^void ImGui::TextDisabledV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
TextEditCallback	./imgui_demo.cpp	/^    int     TextEditCallback(ImGuiInputTextCallbackData* data)$/;"	f	struct:ExampleAppConsole	typeref:typename:int	file:
TextEditCallbackStub	./imgui_demo.cpp	/^    static int TextEditCallbackStub(ImGuiInputTextCallbackData* data)$/;"	f	struct:ExampleAppConsole	typeref:typename:int	file:
TextEx	./imgui_widgets.cpp	/^void ImGui::TextEx(const char* text, const char* text_end, ImGuiTextFlags flags)$/;"	f	class:ImGui	typeref:typename:void
TextFilters	./imgui_demo.cpp	/^            struct TextFilters$/;"	s	function:ShowDemoWindowWidgets	file:
TextLink	./imgui_widgets.cpp	/^bool ImGui::TextLink(const char* label)$/;"	f	class:ImGui	typeref:typename:bool
TextLinkOpenURL	./imgui_widgets.cpp	/^void ImGui::TextLinkOpenURL(const char* label, const char* url)$/;"	f	class:ImGui	typeref:typename:void
TextUnformatted	./imgui_widgets.cpp	/^void ImGui::TextUnformatted(const char* text, const char* text_end)$/;"	f	class:ImGui	typeref:typename:void
TextV	./imgui_widgets.cpp	/^void ImGui::TextV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
TextW	./imgui_internal.h	/^    ImVector<ImWchar>       TextW;                  \/\/ edit buffer, we need to persist but can/;"	m	struct:ImGuiInputTextState	typeref:typename:ImVector<ImWchar>
TextWrapPos	./imgui_internal.h	/^    float                   TextWrapPos;            \/\/ Current text wrap pos.$/;"	m	struct:ImGuiWindowTempData	typeref:typename:float
TextWrapPosStack	./imgui_internal.h	/^    ImVector<float>         TextWrapPosStack;       \/\/ Store text wrap pos to restore (attenti/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVector<float>
TextWrapped	./imgui_widgets.cpp	/^void ImGui::TextWrapped(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
TextWrappedV	./imgui_widgets.cpp	/^void ImGui::TextWrappedV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
Texture	./backends/imgui_impl_allegro5.cpp	/^    ALLEGRO_BITMAP*             Texture;$/;"	m	struct:ImGui_ImplAllegro5_Data	typeref:typename:ALLEGRO_BITMAP *	file:
TextureId	./imgui.h	/^    ImTextureID     TextureId;          \/\/ 4-8  \/\/ User-provided texture ID. Set by user in /;"	m	struct:ImDrawCmd	typeref:typename:ImTextureID
TextureId	./imgui.h	/^    ImTextureID     TextureId;$/;"	m	struct:ImDrawCmdHeader	typeref:typename:ImTextureID
The Pitch	./docs/README.md	/^### The Pitch$/;"	S	chapter:Dear ImGui
TicksPerSecond	./backends/imgui_impl_win32.cpp	/^    INT64                       TicksPerSecond;$/;"	m	struct:ImGui_ImplWin32_Data	typeref:typename:INT64	file:
Time	./backends/imgui_impl_allegro5.cpp	/^    double                      Time;$/;"	m	struct:ImGui_ImplAllegro5_Data	typeref:typename:double	file:
Time	./backends/imgui_impl_glfw.cpp	/^    double                  Time;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:double	file:
Time	./backends/imgui_impl_osx.mm	/^    CFTimeInterval              Time;$/;"	E	struct:ImGui_ImplOSX_Data
Time	./backends/imgui_impl_sdl2.cpp	/^    Uint64                  Time;$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:Uint64	file:
Time	./backends/imgui_impl_sdl3.cpp	/^    Uint64                  Time;$/;"	m	struct:ImGui_ImplSDL3_Data	typeref:typename:Uint64	file:
Time	./backends/imgui_impl_win32.cpp	/^    INT64                       Time;$/;"	m	struct:ImGui_ImplWin32_Data	typeref:typename:INT64	file:
Time	./imgui_internal.h	/^    double                  Time;$/;"	m	struct:ImGuiContext	typeref:typename:double
TitleBarHeight	./imgui_internal.h	/^    float                   TitleBarHeight, MenuBarHeight;$/;"	m	struct:ImGuiWindow	typeref:typename:float
TitleBarRect	./imgui_internal.h	/^    ImRect      TitleBarRect() const    { return ImRect(Pos, ImVec2(Pos.x + SizeFull.x, Pos.y + /;"	f	struct:ImGuiWindow	typeref:typename:ImRect
ToVec4	./imgui_internal.h	/^    ImVec4      ToVec4() const                      { return ImVec4(Min.x, Min.y, Max.x, Max.y);/;"	f	struct:ImRect	typeref:typename:ImVec4
Tooltip	./imgui_demo.cpp	/^    struct EnumDesc { ImGuiTableFlags Value; const char* Name; const char* Tooltip; };$/;"	m	struct:EditTableSizingFlags::EnumDesc	typeref:typename:const char *	file:
TooltipOverrideCount	./imgui_internal.h	/^    short                   TooltipOverrideCount;$/;"	m	struct:ImGuiContext	typeref:typename:short
TotalAllocCount	./imgui_internal.h	/^    int         TotalAllocCount;            \/\/ Number of call to MemAlloc().$/;"	m	struct:ImGuiDebugAllocInfo	typeref:typename:int
TotalFreeCount	./imgui_internal.h	/^    int         TotalFreeCount;$/;"	m	struct:ImGuiDebugAllocInfo	typeref:typename:int
TotalIdxCount	./imgui.h	/^    int                 TotalIdxCount;      \/\/ For convenience, sum of all ImDrawList's IdxBuf/;"	m	struct:ImDrawData	typeref:typename:int
TotalVtxCount	./imgui.h	/^    int                 TotalVtxCount;      \/\/ For convenience, sum of all ImDrawList's VtxBuf/;"	m	struct:ImDrawData	typeref:typename:int
TotalWidth	./imgui_internal.h	/^    ImU32       TotalWidth;$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU32
TouchExtraPadding	./imgui.h	/^    ImVec2      TouchExtraPadding;          \/\/ Expand reactive bounding box for touch-based sy/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
Translate	./imgui_internal.h	/^    void        Translate(const ImVec2& d)          { Min.x += d.x; Min.y += d.y; Max.x += d.x; /;"	f	struct:ImRect	typeref:typename:void
TranslateX	./imgui_internal.h	/^    void        TranslateX(float dx)                { Min.x += dx; Max.x += dx; }$/;"	f	struct:ImRect	typeref:typename:void
TranslateY	./imgui_internal.h	/^    void        TranslateY(float dy)                { Min.y += dy; Max.y += dy; }$/;"	f	struct:ImRect	typeref:typename:void
TreeCloseAndUnselectChildNodes	./imgui_demo.cpp	/^                static int TreeCloseAndUnselectChildNodes(ExampleTreeNode* node, ImGuiSelectionB/;"	f	struct:ShowDemoWindowMultiSelect::ExampleTreeFuncs	typeref:typename:int	file:
TreeDepth	./imgui_internal.h	/^    int                     TreeDepth;              \/\/ Current tree depth.$/;"	m	struct:ImGuiWindowTempData	typeref:typename:int
TreeFlags	./imgui_internal.h	/^    ImGuiTreeNodeFlags      TreeFlags;$/;"	m	struct:ImGuiTreeNodeStackData	typeref:typename:ImGuiTreeNodeFlags
TreeGetNextNodeInVisibleOrder	./imgui_demo.cpp	/^                static ExampleTreeNode* TreeGetNextNodeInVisibleOrder(ExampleTreeNode* curr_node/;"	f	struct:ShowDemoWindowMultiSelect::ExampleTreeFuncs	typeref:typename:ExampleTreeNode *	file:
TreeHasStackDataDepthMask	./imgui_internal.h	/^    ImU32                   TreeHasStackDataDepthMask; \/\/ Store whether given depth has ImGuiT/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImU32
TreeNode	./imgui_widgets.cpp	/^bool ImGui::TreeNode(const char* label)$/;"	f	class:ImGui	typeref:typename:bool
TreeNode	./imgui_widgets.cpp	/^bool ImGui::TreeNode(const char* str_id, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:bool
TreeNode	./imgui_widgets.cpp	/^bool ImGui::TreeNode(const void* ptr_id, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeBehavior	./imgui_widgets.cpp	/^bool ImGui::TreeNodeBehavior(ImGuiID id, ImGuiTreeNodeFlags flags, const char* label, const char/;"	f	class:ImGui	typeref:typename:bool
TreeNodeBehaviorIsOpen	./imgui_internal.h	/^    inline bool     TreeNodeBehaviorIsOpen(ImGuiID id, ImGuiTreeNodeFlags flags = 0)    { return/;"	f	namespace:ImGui	typeref:typename:bool
TreeNodeEx	./imgui_widgets.cpp	/^bool ImGui::TreeNodeEx(const char* label, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeEx	./imgui_widgets.cpp	/^bool ImGui::TreeNodeEx(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeEx	./imgui_widgets.cpp	/^bool ImGui::TreeNodeEx(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeExV	./imgui_widgets.cpp	/^bool ImGui::TreeNodeExV(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list a/;"	f	class:ImGui	typeref:typename:bool
TreeNodeExV	./imgui_widgets.cpp	/^bool ImGui::TreeNodeExV(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list a/;"	f	class:ImGui	typeref:typename:bool
TreeNodeGetOpen	./imgui_demo.cpp	/^                static bool TreeNodeGetOpen(ExampleTreeNode* node)$/;"	f	struct:ShowDemoWindowMultiSelect::ExampleTreeFuncs	typeref:typename:bool	file:
TreeNodeGetOpen	./imgui_widgets.cpp	/^bool ImGui::TreeNodeGetOpen(ImGuiID storage_id)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeSetOpen	./imgui_demo.cpp	/^                static void TreeNodeSetOpen(ExampleTreeNode* node, bool open)$/;"	f	struct:ShowDemoWindowMultiSelect::ExampleTreeFuncs	typeref:typename:void	file:
TreeNodeSetOpen	./imgui_widgets.cpp	/^void ImGui::TreeNodeSetOpen(ImGuiID storage_id, bool open)$/;"	f	class:ImGui	typeref:typename:void
TreeNodeStack	./imgui_internal.h	/^    ImVector<ImGuiTreeNodeStackData>TreeNodeStack;              \/\/ Stack for TreeNode()$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiTreeNodeStackData>
TreeNodeStoreStackData	./imgui_widgets.cpp	/^static void TreeNodeStoreStackData(ImGuiTreeNodeFlags flags)$/;"	f	typeref:typename:void	file:
TreeNodeUpdateNextOpen	./imgui_widgets.cpp	/^bool ImGui::TreeNodeUpdateNextOpen(ImGuiID storage_id, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeV	./imgui_widgets.cpp	/^bool ImGui::TreeNodeV(const char* str_id, const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeV	./imgui_widgets.cpp	/^bool ImGui::TreeNodeV(const void* ptr_id, const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:bool
TreePop	./imgui_widgets.cpp	/^void ImGui::TreePop()$/;"	f	class:ImGui	typeref:typename:void
TreePush	./imgui_widgets.cpp	/^void ImGui::TreePush(const char* str_id)$/;"	f	class:ImGui	typeref:typename:void
TreePush	./imgui_widgets.cpp	/^void ImGui::TreePush(const void* ptr_id)$/;"	f	class:ImGui	typeref:typename:void
TreePushOverrideID	./imgui_widgets.cpp	/^void ImGui::TreePushOverrideID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
TreeSetAllInOpenNodes	./imgui_demo.cpp	/^                static void TreeSetAllInOpenNodes(ExampleTreeNode* node, ImGuiSelectionBasicStor/;"	f	struct:ShowDemoWindowMultiSelect::ExampleTreeFuncs	typeref:typename:void	file:
Troubleshooting	./docs/FONTS.md	/^## Troubleshooting$/;"	s
TryGetMapData	./imgui_internal.h	/^    T*          TryGetMapData(ImPoolIdx n)          { int idx = Map.Data[n].val_i; if (idx == -1/;"	f	struct:ImPool	typeref:typename:T *
Type	./backends/imgui_impl_opengl3.cpp	/^    GLint   Enabled, Size, Type, Normalized, Stride;$/;"	m	struct:ImGui_ImplOpenGL3_VtxAttribState	typeref:typename:GLint	file:
Type	./imgui.h	/^    ImGuiSelectionRequestType   Type;           \/\/  ms:w, app:r     \/  ms:w, app:r   \/\/ Req/;"	m	struct:ImGuiSelectionRequest	typeref:typename:ImGuiSelectionRequestType
Type	./imgui_demo.cpp	/^                const char*     Type;$/;"	m	struct:ShowDemoWindowTables::MyTreeNode	typeref:typename:const char *	file:
Type	./imgui_demo.cpp	/^    int     Type;$/;"	m	struct:ExampleAsset	typeref:typename:int	file:
Type	./imgui_draw.cpp	/^    ImTriangulatorNodeType  Type;$/;"	m	struct:ImTriangulatorNode	typeref:typename:ImTriangulatorNodeType	file:
Type	./imgui_internal.h	/^    ImGuiContextHookType        Type;$/;"	m	struct:ImGuiContextHook	typeref:typename:ImGuiContextHookType
Type	./imgui_internal.h	/^    ImGuiDataType   Type;$/;"	m	struct:ImGuiDataVarInfo	typeref:typename:ImGuiDataType
Type	./imgui_internal.h	/^    ImGuiInputEventType             Type;$/;"	m	struct:ImGuiInputEvent	typeref:typename:ImGuiInputEventType
TypeHash	./imgui_internal.h	/^    ImGuiID     TypeHash;       \/\/ == ImHashStr(TypeName)$/;"	m	struct:ImGuiSettingsHandler	typeref:typename:ImGuiID
TypeName	./imgui_internal.h	/^    const char* TypeName;       \/\/ Short description stored in .ini file. Disallowed character/;"	m	struct:ImGuiSettingsHandler	typeref:typename:const char *
TypingSelectFindBestLeadingMatch	./imgui_widgets.cpp	/^int ImGui::TypingSelectFindBestLeadingMatch(ImGuiTypingSelectRequest* req, int items_count, cons/;"	f	class:ImGui	typeref:typename:int
TypingSelectFindMatch	./imgui_widgets.cpp	/^int ImGui::TypingSelectFindMatch(ImGuiTypingSelectRequest* req, int items_count, const char* (*g/;"	f	class:ImGui	typeref:typename:int
TypingSelectFindNextSingleCharMatch	./imgui_widgets.cpp	/^int ImGui::TypingSelectFindNextSingleCharMatch(ImGuiTypingSelectRequest* req, int items_count, c/;"	f	class:ImGui	typeref:typename:int
TypingSelectState	./imgui_internal.h	/^    ImGuiTypingSelectState  TypingSelectState;                  \/\/ State for GetTypingSelectRe/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTypingSelectState
U0	./imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph	typeref:typename:float
U1	./imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph	typeref:typename:float
UID	./imgui_demo.cpp	/^    int                         UID = 0;$/;"	m	struct:ExampleTreeNode	typeref:typename:int	file:
UID	./imgui_demo.cpp	/^    int         UID;        \/\/ Unique ID (necessary as we can change title)$/;"	m	struct:MyDocument	typeref:typename:int	file:
UILaunchStoryboardName	./examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>UILaunchStoryboardName<\/key>$/;"	k
UIRequiredDeviceCapabilities	./examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>UIRequiredDeviceCapabilities<\/key>$/;"	k
UIRequiresFullScreen	./examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>UIRequiresFullScreen<\/key>$/;"	k
UIStatusBarHidden	./examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>UIStatusBarHidden<\/key>$/;"	k
UISupportedInterfaceOrientations	./examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>UISupportedInterfaceOrientations<\/key>$/;"	k
UISupportedInterfaceOrientations~ipad	./examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>UISupportedInterfaceOrientations~ipad<\/key>$/;"	k
UNAME_S	./examples/example_glfw_opengl2/Makefile	/^UNAME_S := $(shell uname -s)$/;"	m
UNAME_S	./examples/example_glfw_opengl3/Makefile	/^UNAME_S := $(shell uname -s)$/;"	m
UNAME_S	./examples/example_glut_opengl2/Makefile	/^UNAME_S := $(shell uname -s)$/;"	m
UNAME_S	./examples/example_null/Makefile	/^UNAME_S := $(shell uname -s)$/;"	m
UNAME_S	./examples/example_sdl2_opengl2/Makefile	/^UNAME_S := $(shell uname -s)$/;"	m
UNAME_S	./examples/example_sdl2_opengl3/Makefile	/^UNAME_S := $(shell uname -s)$/;"	m
UNAME_S	./examples/example_sdl2_sdlrenderer2/Makefile	/^UNAME_S := $(shell uname -s)$/;"	m
UNAME_S	./examples/example_sdl3_opengl3/Makefile	/^UNAME_S := $(shell uname -s)$/;"	m
UNAME_S	./examples/example_sdl3_sdlrenderer3/Makefile	/^UNAME_S := $(shell uname -s)$/;"	m
USYNERGY_CLIPBOARD_FORMAT_BITMAP	./examples/libs/usynergy/uSynergy.h	/^	USYNERGY_CLIPBOARD_FORMAT_BITMAP				= 1,			\/* Bitmap format, BMP 24\/32bpp, BI_RGB *\/$/;"	e	enum:uSynergyClipboardFormat
USYNERGY_CLIPBOARD_FORMAT_HTML	./examples/libs/usynergy/uSynergy.h	/^	USYNERGY_CLIPBOARD_FORMAT_HTML					= 2,			\/* HTML format, HTML fragment, UTF-8, newline is LF /;"	e	enum:uSynergyClipboardFormat
USYNERGY_CLIPBOARD_FORMAT_TEXT	./examples/libs/usynergy/uSynergy.h	/^	USYNERGY_CLIPBOARD_FORMAT_TEXT					= 0,			\/* Text format, UTF-8, newline is LF *\/$/;"	e	enum:uSynergyClipboardFormat
USYNERGY_FALSE	./examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_FALSE	/;"	d
USYNERGY_IDLE_TIMEOUT	./examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_IDLE_TIMEOUT	/;"	d
USYNERGY_IS_PACKET	./examples/libs/usynergy/uSynergy.c	/^#define USYNERGY_IS_PACKET(/;"	d	file:
USYNERGY_MODIFIER_ALT	./examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_MODIFIER_ALT	/;"	d
USYNERGY_MODIFIER_ALT_GR	./examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_MODIFIER_ALT_GR	/;"	d
USYNERGY_MODIFIER_CAPSLOCK	./examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_MODIFIER_CAPSLOCK	/;"	d
USYNERGY_MODIFIER_CTRL	./examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_MODIFIER_CTRL	/;"	d
USYNERGY_MODIFIER_LEVEL5LOCK	./examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_MODIFIER_LEVEL5LOCK	/;"	d
USYNERGY_MODIFIER_META	./examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_MODIFIER_META	/;"	d
USYNERGY_MODIFIER_NUMLOCK	./examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_MODIFIER_NUMLOCK	/;"	d
USYNERGY_MODIFIER_SCROLLOCK	./examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_MODIFIER_SCROLLOCK	/;"	d
USYNERGY_MODIFIER_SHIFT	./examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_MODIFIER_SHIFT	/;"	d
USYNERGY_MODIFIER_WIN	./examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_MODIFIER_WIN	/;"	d
USYNERGY_NUM_JOYSTICKS	./examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_NUM_JOYSTICKS	/;"	d
USYNERGY_PROTOCOL_MAJOR	./examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_PROTOCOL_MAJOR	/;"	d
USYNERGY_PROTOCOL_MINOR	./examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_PROTOCOL_MINOR	/;"	d
USYNERGY_RECEIVE_BUFFER_SIZE	./examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_RECEIVE_BUFFER_SIZE	/;"	d
USYNERGY_REPLY_BUFFER_SIZE	./examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_REPLY_BUFFER_SIZE	/;"	d
USYNERGY_TRACE_BUFFER_SIZE	./examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_TRACE_BUFFER_SIZE	/;"	d
USYNERGY_TRUE	./examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_TRUE	/;"	d
UTF-8 Encoding Viewer**	./docs/FONTS.md	/^#### UTF-8 Encoding Viewer**$/;"	t	section:Debug Tools
UnclipMode	./imgui_internal.h	/^    bool                    UnclipMode;         \/\/ (Temp\/Transient, here in hot area). Set\/c/;"	m	struct:ImGuiBoxSelectState	typeref:typename:bool
UnclipRect	./imgui_internal.h	/^    ImRect                  UnclipRect;         \/\/ Rectangle where ItemAdd() clipping may be t/;"	m	struct:ImGuiBoxSelectState	typeref:typename:ImRect
Uniform1i	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLUNIFORM1IPROC                Uniform1i;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLUNIFORM1IPROC
UniformMatrix4fv	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLUNIFORMMATRIX4FVPROC         UniformMatrix4fv;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLUNIFORMMATRIX4FVPROC
Uniforms	./backends/imgui_impl_wgpu.cpp	/^    WGPUBuffer          Uniforms = nullptr;             \/\/ Shader uniforms$/;"	m	struct:RenderResources	typeref:typename:WGPUBuffer	file:
Uniforms	./backends/imgui_impl_wgpu.cpp	/^struct Uniforms$/;"	s	file:
Unindent	./imgui.cpp	/^void ImGui::Unindent(float indent_w)$/;"	f	class:ImGui	typeref:typename:void
Unlink	./imgui_draw.cpp	/^    void    Unlink()        { Next->Prev = Prev; Prev->Next = Next; }$/;"	f	struct:ImTriangulatorNode	typeref:typename:void	file:
UnpackAccumulativeOffsetsIntoRanges	./imgui_draw.cpp	/^static void UnpackAccumulativeOffsetsIntoRanges(int base_codepoint, const short* accumulative_of/;"	f	typeref:typename:void	file:
UnpackBitVectorToFlatIndexList	./imgui_draw.cpp	/^static void UnpackBitVectorToFlatIndexList(const ImBitVector* in, ImVector<int>* out)$/;"	f	typeref:typename:void	file:
Update	./imgui_widgets.cpp	/^void ImGuiMenuColumns::Update(float spacing, bool window_reappearing)$/;"	f	class:ImGuiMenuColumns	typeref:typename:void
UpdateAliasKey	./imgui.cpp	/^static void UpdateAliasKey(ImGuiKey key, bool v, float analog_value)$/;"	f	typeref:typename:void	file:
UpdateDebugToolFlashStyleColor	./imgui.cpp	/^void ImGui::UpdateDebugToolFlashStyleColor()$/;"	f	class:ImGui	typeref:typename:void
UpdateDebugToolItemPicker	./imgui.cpp	/^void ImGui::UpdateDebugToolItemPicker()$/;"	f	class:ImGui	typeref:typename:void
UpdateDebugToolStackQueries	./imgui.cpp	/^void ImGui::UpdateDebugToolStackQueries()$/;"	f	class:ImGui	typeref:typename:void
UpdateHoveredWindowAndCaptureFlags	./imgui.cpp	/^void ImGui::UpdateHoveredWindowAndCaptureFlags()$/;"	f	class:ImGui	typeref:typename:void
UpdateInputEvents	./imgui.cpp	/^void ImGui::UpdateInputEvents(bool trickle_fast_inputs)$/;"	f	class:ImGui	typeref:typename:void
UpdateKeyRoutingTable	./imgui.cpp	/^static void ImGui::UpdateKeyRoutingTable(ImGuiKeyRoutingTable* rt)$/;"	f	class:ImGui	typeref:typename:void	file:
UpdateKeyboardInputs	./imgui.cpp	/^static void ImGui::UpdateKeyboardInputs()$/;"	f	class:ImGui	typeref:typename:void	file:
UpdateLayoutSizes	./imgui_demo.cpp	/^    void UpdateLayoutSizes(float avail_width)$/;"	f	struct:ExampleAssetsBrowser	typeref:typename:void	file:
UpdateMouseInputs	./imgui.cpp	/^static void ImGui::UpdateMouseInputs()$/;"	f	class:ImGui	typeref:typename:void	file:
UpdateMouseMovingWindowEndFrame	./imgui.cpp	/^void ImGui::UpdateMouseMovingWindowEndFrame()$/;"	f	class:ImGui	typeref:typename:void
UpdateMouseMovingWindowNewFrame	./imgui.cpp	/^void ImGui::UpdateMouseMovingWindowNewFrame()$/;"	f	class:ImGui	typeref:typename:void
UpdateMouseWheel	./imgui.cpp	/^void ImGui::UpdateMouseWheel()$/;"	f	class:ImGui	typeref:typename:void
UpdateSettings	./imgui.cpp	/^void ImGui::UpdateSettings()$/;"	f	class:ImGui	typeref:typename:void
UpdateViewportsNewFrame	./imgui.cpp	/^static void ImGui::UpdateViewportsNewFrame()$/;"	f	class:ImGui	typeref:typename:void	file:
UpdateWindowInFocusOrderList	./imgui.cpp	/^static void UpdateWindowInFocusOrderList(ImGuiWindow* window, bool just_created, ImGuiWindowFlag/;"	f	typeref:typename:void	file:
UpdateWindowManualResize	./imgui.cpp	/^static int ImGui::UpdateWindowManualResize(ImGuiWindow* window, const ImVec2& size_auto_fit, int/;"	f	class:ImGui	typeref:typename:int	file:
UpdateWindowParentAndRootLinks	./imgui.cpp	/^void ImGui::UpdateWindowParentAndRootLinks(ImGuiWindow* window, ImGuiWindowFlags flags, ImGuiWin/;"	f	class:ImGui	typeref:typename:void
UpdateWindowSkipRefresh	./imgui.cpp	/^void ImGui::UpdateWindowSkipRefresh(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
UpdateWorkRect	./imgui_internal.h	/^    void    UpdateWorkRect()            { WorkPos = CalcWorkRectPos(WorkOffsetMin); WorkSize = C/;"	f	struct:ImGuiViewportP	typeref:typename:void
Usage	./docs/README.md	/^### Usage$/;"	S	chapter:Dear ImGui
Usage	./misc/freetype/README.md	/^### Usage$/;"	S	chapter:imgui_freetype
UseBufferSubData	./backends/imgui_impl_opengl3.cpp	/^    bool            UseBufferSubData;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:bool	file:
UseDynamicRendering	./backends/imgui_impl_vulkan.h	/^    bool                            UseDynamicRendering;$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:bool
UseDynamicRendering	./backends/imgui_impl_vulkan.h	/^    bool                UseDynamicRendering;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:bool
UseProgram	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLUSEPROGRAMPROC               UseProgram;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLUSEPROGRAMPROC
Used4kPagesMap	./imgui.h	/^    ImU8                        Used4kPagesMap[(IM_UNICODE_CODEPOINT_MAX+1)\/4096\/8]; \/\/ 2 by/;"	m	struct:ImFont	typeref:typename:ImU8[]
UsedChars	./imgui.h	/^    ImVector<ImU32> UsedChars;            \/\/ Store 1-bit per Unicode code point (0=unused, 1=u/;"	m	struct:ImFontGlyphRangesBuilder	typeref:typename:ImVector<ImU32>
UserCallback	./imgui.h	/^    ImDrawCallback  UserCallback;       \/\/ 4-8  \/\/ If != NULL, call the function instead of /;"	m	struct:ImDrawCmd	typeref:typename:ImDrawCallback
UserCallbackData	./imgui.h	/^    void*           UserCallbackData;   \/\/ 4-8  \/\/ The draw callback code can access this.$/;"	m	struct:ImDrawCmd	typeref:typename:void *
UserData	./imgui.h	/^    void*                       UserData;           \/\/ Store your own atlas related user-data /;"	m	struct:ImFontAtlas	typeref:typename:void *
UserData	./imgui.h	/^    void*               UserData;       \/\/ What user passed to InputText()      \/\/ Read-only$/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:void *
UserData	./imgui.h	/^    void*           UserData;       \/\/ = NULL   \/\/ User data for use by adapter function    /;"	m	struct:ImGuiSelectionBasicStorage	typeref:typename:void *
UserData	./imgui.h	/^    void*           UserData;       \/\/ User data for use by adapter function                  /;"	m	struct:ImGuiSelectionExternalStorage	typeref:typename:void *
UserData	./imgui.h	/^    void*       UserData;                       \/\/ = NULL           \/\/ Store your own data.$/;"	m	struct:ImGuiIO	typeref:typename:void *
UserData	./imgui.h	/^    void*   UserData;       \/\/ Read-only.   What user passed to SetNextWindowSizeConstraints()/;"	m	struct:ImGuiSizeCallbackData	typeref:typename:void *
UserData	./imgui_internal.h	/^    void*                       UserData;$/;"	m	struct:ImGuiContextHook	typeref:typename:void *
UserData	./imgui_internal.h	/^    void*       UserData;$/;"	m	struct:ImGuiSettingsHandler	typeref:typename:void *
UserData	./imgui_widgets.cpp	/^struct ImGuiGetNameFromIndexOldToNewCallbackData { void* UserData; bool (*OldCallback)(void*, in/;"	m	struct:ImGuiGetNameFromIndexOldToNewCallbackData	typeref:typename:void *	file:
UserFlags	./misc/freetype/imgui_freetype.cpp	/^        unsigned int    UserFlags;          \/\/ = ImFontConfig::RasterizerFlags$/;"	m	struct:__anon21d590df0111::FreeTypeFont	typeref:typename:unsigned int	file:
UserID	./imgui_internal.h	/^    ImGuiID                 UserID;                         \/\/ Optional, value passed to Table/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiID
UserID	./imgui_internal.h	/^    ImGuiID                 UserID;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImGuiID
UserOuterSize	./imgui_internal.h	/^    ImVec2                      UserOuterSize;              \/\/ outer_size.x passed to BeginTab/;"	m	struct:ImGuiTableTempData	typeref:typename:ImVec2
Using Colorful Glyphs/Emojis	./docs/FONTS.md	/^## Using Colorful Glyphs\/Emojis$/;"	s
Using Custom Colorful Icons	./docs/FONTS.md	/^## Using Custom Colorful Icons$/;"	s
Using Custom Glyph Ranges	./docs/FONTS.md	/^## Using Custom Glyph Ranges$/;"	s
Using FreeType Rasterizer (imgui_freetype)	./docs/FONTS.md	/^## Using FreeType Rasterizer (imgui_freetype)$/;"	s
Using Icon Fonts	./docs/FONTS.md	/^## Using Icon Fonts$/;"	s
Using OpenType SVG fonts (SVGinOT)	./misc/freetype/README.md	/^### Using OpenType SVG fonts (SVGinOT)$/;"	S	chapter:imgui_freetype
Using a custom engine?	./docs/BACKENDS.md	/^### Using a custom engine?$/;"	S	section:Dear ImGui: Backends
V0	./imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph	typeref:typename:float
V1	./imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph	typeref:typename:float
VERTEX_CONSTANT_BUFFER_DX10	./backends/imgui_impl_dx10.cpp	/^struct VERTEX_CONSTANT_BUFFER_DX10$/;"	s	file:
VERTEX_CONSTANT_BUFFER_DX11	./backends/imgui_impl_dx11.cpp	/^struct VERTEX_CONSTANT_BUFFER_DX11$/;"	s	file:
VERTEX_CONSTANT_BUFFER_DX12	./backends/imgui_impl_dx12.cpp	/^struct VERTEX_CONSTANT_BUFFER_DX12$/;"	s	file:
VK_NO_PROTOTYPES	./backends/imgui_impl_vulkan.h	/^#define VK_NO_PROTOTYPES$/;"	d
VOLK_IMPLEMENTATION	./examples/example_glfw_vulkan/main.cpp	/^#define VOLK_IMPLEMENTATION$/;"	d	file:
VOLK_IMPLEMENTATION	./examples/example_sdl2_vulkan/main.cpp	/^#define VOLK_IMPLEMENTATION$/;"	d	file:
VS	./backends/imgui_impl_dx10.cpp	/^        ID3D10VertexShader*         VS;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:ID3D10VertexShader *	file:
VS	./backends/imgui_impl_dx11.cpp	/^        ID3D11VertexShader*         VS;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11VertexShader *	file:
VSConstantBuffer	./backends/imgui_impl_dx10.cpp	/^        ID3D10Buffer*               IndexBuffer, *VertexBuffer, *VSConstantBuffer;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:ID3D10Buffer *	file:
VSConstantBuffer	./backends/imgui_impl_dx11.cpp	/^        ID3D11Buffer*               IndexBuffer, *VertexBuffer, *VSConstantBuffer;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11Buffer *	file:
VSInstances	./backends/imgui_impl_dx11.cpp	/^        ID3D11ClassInstance         *PSInstances[256], *VSInstances[256], *GSInstances[256];   \//;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11ClassInstance * [256]	file:
VSInstancesCount	./backends/imgui_impl_dx11.cpp	/^        UINT                        PSInstancesCount, VSInstancesCount, GSInstancesCount;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:UINT	file:
VSliderFloat	./imgui_widgets.cpp	/^bool ImGui::VSliderFloat(const char* label, const ImVec2& size, float* v, float v_min, float v_m/;"	f	class:ImGui	typeref:typename:bool
VSliderInt	./imgui_widgets.cpp	/^bool ImGui::VSliderInt(const char* label, const ImVec2& size, int* v, int v_min, int v_max, cons/;"	f	class:ImGui	typeref:typename:bool
VSliderScalar	./imgui_widgets.cpp	/^bool ImGui::VSliderScalar(const char* label, const ImVec2& size, ImGuiDataType data_type, void* /;"	f	class:ImGui	typeref:typename:bool
Valid	./imgui.h	/^    bool                Valid;              \/\/ Only valid after Render() is called and before /;"	m	struct:ImDrawData	typeref:typename:bool
Value	./imgui.h	/^    ImVec4          Value;$/;"	m	struct:ImColor	typeref:typename:ImVec4
Value	./imgui_demo.cpp	/^    struct EnumDesc { ImGuiTableFlags Value; const char* Name; const char* Tooltip; };$/;"	m	struct:EditTableSizingFlags::EnumDesc	typeref:typename:ImGuiTableFlags	file:
Value	./imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, bool b)$/;"	f	class:ImGui	typeref:typename:void
Value	./imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, float v, const char* float_format)$/;"	f	class:ImGui	typeref:typename:void
Value	./imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, int v)$/;"	f	class:ImGui	typeref:typename:void
Value	./imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, unsigned int v)$/;"	f	class:ImGui	typeref:typename:void
Values	./imgui_widgets.cpp	/^    const float* Values;$/;"	m	struct:ImGuiPlotArrayGetterData	typeref:typename:const float *	file:
VarIdx	./imgui_internal.h	/^    ImGuiStyleVar   VarIdx;$/;"	m	struct:ImGuiStyleMod	typeref:typename:ImGuiStyleVar
VboHandle	./backends/imgui_impl_opengl3.cpp	/^    unsigned int    VboHandle, ElementsHandle;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:unsigned int	file:
VertexAttribPointer	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLVERTEXATTRIBPOINTERPROC      VertexAttribPointer;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLVERTEXATTRIBPOINTERPROC
VertexBuffer	./backends/imgui_impl_dx10.cpp	/^        ID3D10Buffer*               IndexBuffer, *VertexBuffer, *VSConstantBuffer;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:ID3D10Buffer *	file:
VertexBuffer	./backends/imgui_impl_dx11.cpp	/^        ID3D11Buffer*               IndexBuffer, *VertexBuffer, *VSConstantBuffer;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11Buffer *	file:
VertexBuffer	./backends/imgui_impl_dx12.cpp	/^    ID3D12Resource*     VertexBuffer;$/;"	m	struct:ImGui_ImplDX12_RenderBuffers	typeref:typename:ID3D12Resource *	file:
VertexBuffer	./backends/imgui_impl_vulkan.cpp	/^    VkBuffer            VertexBuffer;$/;"	m	struct:ImGui_ImplVulkan_FrameRenderBuffers	typeref:typename:VkBuffer	file:
VertexBuffer	./backends/imgui_impl_wgpu.cpp	/^    WGPUBuffer  VertexBuffer;$/;"	m	struct:FrameResources	typeref:typename:WGPUBuffer	file:
VertexBufferHost	./backends/imgui_impl_wgpu.cpp	/^    ImDrawVert* VertexBufferHost;$/;"	m	struct:FrameResources	typeref:typename:ImDrawVert *	file:
VertexBufferMemory	./backends/imgui_impl_vulkan.cpp	/^    VkDeviceMemory      VertexBufferMemory;$/;"	m	struct:ImGui_ImplVulkan_FrameRenderBuffers	typeref:typename:VkDeviceMemory	file:
VertexBufferOffset	./backends/imgui_impl_dx10.cpp	/^        UINT                        IndexBufferOffset, VertexBufferStride, VertexBufferOffset;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:UINT	file:
VertexBufferOffset	./backends/imgui_impl_dx11.cpp	/^        UINT                        IndexBufferOffset, VertexBufferStride, VertexBufferOffset;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:UINT	file:
VertexBufferSize	./backends/imgui_impl_dx10.cpp	/^    int                         VertexBufferSize;$/;"	m	struct:ImGui_ImplDX10_Data	typeref:typename:int	file:
VertexBufferSize	./backends/imgui_impl_dx11.cpp	/^    int                         VertexBufferSize;$/;"	m	struct:ImGui_ImplDX11_Data	typeref:typename:int	file:
VertexBufferSize	./backends/imgui_impl_dx12.cpp	/^    int                 VertexBufferSize;$/;"	m	struct:ImGui_ImplDX12_RenderBuffers	typeref:typename:int	file:
VertexBufferSize	./backends/imgui_impl_dx9.cpp	/^    int                         VertexBufferSize;$/;"	m	struct:ImGui_ImplDX9_Data	typeref:typename:int	file:
VertexBufferSize	./backends/imgui_impl_opengl3.cpp	/^    GLsizeiptr      VertexBufferSize;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLsizeiptr	file:
VertexBufferSize	./backends/imgui_impl_vulkan.cpp	/^    VkDeviceSize        VertexBufferSize;$/;"	m	struct:ImGui_ImplVulkan_FrameRenderBuffers	typeref:typename:VkDeviceSize	file:
VertexBufferSize	./backends/imgui_impl_wgpu.cpp	/^    int         VertexBufferSize;$/;"	m	struct:FrameResources	typeref:typename:int	file:
VertexBufferStride	./backends/imgui_impl_dx10.cpp	/^        UINT                        IndexBufferOffset, VertexBufferStride, VertexBufferOffset;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:UINT	file:
VertexBufferStride	./backends/imgui_impl_dx11.cpp	/^        UINT                        IndexBufferOffset, VertexBufferStride, VertexBufferOffset;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:UINT	file:
VertexDecl	./backends/imgui_impl_allegro5.cpp	/^    ALLEGRO_VERTEX_DECL*        VertexDecl;$/;"	m	struct:ImGui_ImplAllegro5_Data	typeref:typename:ALLEGRO_VERTEX_DECL *	file:
Viewport	./backends/imgui_impl_opengl3_loader.h	/^        PFNGLVIEWPORTPROC                 Viewport;$/;"	m	struct:ImGL3WProcs::__anone6efc55b0108	typeref:typename:PFNGLVIEWPORTPROC
Viewport	./backends/imgui_impl_sdlrenderer2.cpp	/^        SDL_Rect    Viewport;$/;"	m	struct:ImGui_ImplSDLRenderer2_RenderDrawData::BackupSDLRendererState	typeref:typename:SDL_Rect	file:
Viewport	./backends/imgui_impl_sdlrenderer3.cpp	/^        SDL_Rect    Viewport;$/;"	m	struct:ImGui_ImplSDLRenderer3_RenderDrawData::BackupSDLRendererState	typeref:typename:SDL_Rect	file:
Viewport	./imgui_internal.h	/^    ImGuiViewportP*         Viewport;                           \/\/ Always set in Begin(). Inac/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiViewportP *
ViewportEnabled	./backends/imgui_impl_sdlrenderer3.cpp	/^        bool        ViewportEnabled;$/;"	m	struct:ImGui_ImplSDLRenderer3_RenderDrawData::BackupSDLRendererState	typeref:typename:bool	file:
Viewports	./backends/imgui_impl_dx10.cpp	/^        D3D10_VIEWPORT              Viewports[D3D10_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PI/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:D3D10_VIEWPORT[]	file:
Viewports	./backends/imgui_impl_dx11.cpp	/^        D3D11_VIEWPORT              Viewports[D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PI/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:D3D11_VIEWPORT[]	file:
Viewports	./imgui_internal.h	/^    ImVector<ImGuiViewportP*> Viewports;                        \/\/ Active viewports (Size==1 i/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiViewportP * >
ViewportsCount	./backends/imgui_impl_dx10.cpp	/^        UINT                        ScissorRectsCount, ViewportsCount;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:UINT	file:
ViewportsCount	./backends/imgui_impl_dx11.cpp	/^        UINT                        ScissorRectsCount, ViewportsCount;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:UINT	file:
Visible	./imgui.h	/^    unsigned int    Visible : 1;        \/\/ Flag to indicate glyph has no visible pixels (e.g. /;"	m	struct:ImFontGlyph	typeref:typename:unsigned int:1
VisibleMaskByIndex	./imgui_internal.h	/^    ImBitArrayPtr               VisibleMaskByIndex;         \/\/ Column Index -> IsVisibleX|IsVi/;"	m	struct:ImGuiTable	typeref:typename:ImBitArrayPtr
VisibleNode	./imgui_demo.cpp	/^    ExampleTreeNode*    VisibleNode = NULL;$/;"	m	struct:ExampleAppPropertyEditor	typeref:typename:ExampleTreeNode *	file:
VisibleTabId	./imgui_internal.h	/^    ImGuiID             VisibleTabId;           \/\/ Can occasionally be != SelectedTabId (e.g. /;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
VisibleTabWasSubmitted	./imgui_internal.h	/^    bool                VisibleTabWasSubmitted;$/;"	m	struct:ImGuiTabBar	typeref:typename:bool
VtxBuffer	./imgui.h	/^    ImVector<ImDrawVert>    VtxBuffer;          \/\/ Vertex buffer.$/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImDrawVert>
VtxOffset	./imgui.h	/^    unsigned int    VtxOffset;          \/\/ 4    \/\/ Start offset in vertex buffer. ImGuiBacke/;"	m	struct:ImDrawCmd	typeref:typename:unsigned int
VtxOffset	./imgui.h	/^    unsigned int    VtxOffset;$/;"	m	struct:ImDrawCmdHeader	typeref:typename:unsigned int
VulkanInitInfo	./backends/imgui_impl_vulkan.cpp	/^    ImGui_ImplVulkan_InitInfo   VulkanInitInfo;$/;"	m	struct:ImGui_ImplVulkan_Data	typeref:typename:ImGui_ImplVulkan_InitInfo	file:
WGL_WindowData	./examples/example_win32_opengl3/main.cpp	/^struct WGL_WindowData { HDC hDC; };$/;"	s	file:
WIN32_LEAN_AND_MEAN	./backends/imgui_impl_opengl3_loader.h	/^#define WIN32_LEAN_AND_MEAN /;"	d
WIN32_LEAN_AND_MEAN	./backends/imgui_impl_sdl3.cpp	/^#define WIN32_LEAN_AND_MEAN$/;"	d	file:
WIN32_LEAN_AND_MEAN	./backends/imgui_impl_win32.cpp	/^#define WIN32_LEAN_AND_MEAN$/;"	d	file:
WIN32_LEAN_AND_MEAN	./examples/example_win32_opengl3/main.cpp	/^#define WIN32_LEAN_AND_MEAN$/;"	d	file:
WIN32_LEAN_AND_MEAN	./imgui.cpp	/^#define WIN32_LEAN_AND_MEAN$/;"	d	file:
WINDOWS_HOVER_PADDING	./imgui.cpp	/^static const float WINDOWS_HOVER_PADDING                    = 4.0f;     \/\/ Extend outside wind/;"	v	typeref:typename:const float	file:
WINDOWS_MOUSE_WHEEL_SCROLL_LOCK_TIMER	./imgui.cpp	/^static const float WINDOWS_MOUSE_WHEEL_SCROLL_LOCK_TIMER    = 0.70f;    \/\/ Lock scrolled windo/;"	v	typeref:typename:const float	file:
WINDOWS_RESIZE_FROM_EDGES_FEEDBACK_TIMER	./imgui.cpp	/^static const float WINDOWS_RESIZE_FROM_EDGES_FEEDBACK_TIMER = 0.04f;    \/\/ Reduce visual noise/;"	v	typeref:typename:const float	file:
WINGDIAPI	./backends/imgui_impl_opengl2.cpp	/^#define WINGDIAPI /;"	d	file:
WINGDIAPI	./examples/libs/glfw/include/GLFW/glfw3.h	/^ #define WINGDIAPI /;"	d
WITH_EXTRA_WARNINGS	./examples/example_null/Makefile	/^WITH_EXTRA_WARNINGS ?= 0$/;"	m
WITH_FREETYPE	./examples/example_null/Makefile	/^WITH_FREETYPE ?= 0$/;"	m
WM_MOUSEHWHEEL	./backends/imgui_impl_win32.cpp	/^#define WM_MOUSEHWHEEL /;"	d	file:
WRT_Content	./imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon1035f96e0303	file:
WRT_ContentIdeal	./imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon1035f96e0303	file:
WRT_ContentRegionRect	./imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon1035f96e0303	file:
WRT_Count	./imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon1035f96e0303	file:
WRT_InnerClipRect	./imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon1035f96e0303	file:
WRT_InnerRect	./imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon1035f96e0303	file:
WRT_OuterRect	./imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon1035f96e0303	file:
WRT_OuterRectClipped	./imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon1035f96e0303	file:
WRT_WorkRect	./imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon1035f96e0303	file:
WaitForLastSubmittedFrame	./examples/example_win32_directx12/main.cpp	/^void WaitForLastSubmittedFrame()$/;"	f	typeref:typename:void
WaitForNextFrameResources	./examples/example_win32_directx12/main.cpp	/^FrameContext* WaitForNextFrameResources()$/;"	f	typeref:typename:FrameContext *
WantApply	./imgui_internal.h	/^    bool                        WantApply;              \/\/ Set when loaded from .ini data (to /;"	m	struct:ImGuiTableSettings	typeref:typename:bool
WantApply	./imgui_internal.h	/^    bool        WantApply;      \/\/ Set when loaded from .ini data (to enable merging\/loading /;"	m	struct:ImGuiWindowSettings	typeref:typename:bool
WantCaptureKeyboard	./imgui.h	/^    bool        WantCaptureKeyboard;                \/\/ Set when Dear ImGui will use keyboard i/;"	m	struct:ImGuiIO	typeref:typename:bool
WantCaptureKeyboardNextFrame	./imgui_internal.h	/^    int                     WantCaptureKeyboardNextFrame;       \/\/ "$/;"	m	struct:ImGuiContext	typeref:typename:int
WantCaptureMouse	./imgui.h	/^    bool        WantCaptureMouse;                   \/\/ Set when Dear ImGui will use mouse inpu/;"	m	struct:ImGuiIO	typeref:typename:bool
WantCaptureMouseNextFrame	./imgui_internal.h	/^    int                     WantCaptureMouseNextFrame;          \/\/ Explicit capture override v/;"	m	struct:ImGuiContext	typeref:typename:int
WantCaptureMouseUnlessPopupClose	./imgui.h	/^    bool        WantCaptureMouseUnlessPopupClose;   \/\/ Alternative to WantCaptureMouse: (WantC/;"	m	struct:ImGuiIO	typeref:typename:bool
WantClose	./imgui_internal.h	/^    bool                WantClose;              \/\/ Marked as closed by SetTabItemClosed()$/;"	m	struct:ImGuiTabItem	typeref:typename:bool
WantCollapseToggle	./imgui_internal.h	/^    bool                    WantCollapseToggle;$/;"	m	struct:ImGuiWindow	typeref:typename:bool
WantDelete	./imgui_internal.h	/^    bool        WantDelete;     \/\/ Set to invalidate\/delete the settings entry$/;"	m	struct:ImGuiWindowSettings	typeref:typename:bool
WantLayout	./imgui_internal.h	/^    bool                WantLayout;$/;"	m	struct:ImGuiTabBar	typeref:typename:bool
WantSaveIniSettings	./imgui.h	/^    bool        WantSaveIniSettings;                \/\/ When manual .ini load\/save is active (/;"	m	struct:ImGuiIO	typeref:typename:bool
WantSetMousePos	./imgui.h	/^    bool        WantSetMousePos;                    \/\/ MousePos has been altered, backend shou/;"	m	struct:ImGuiIO	typeref:typename:bool
WantTextInput	./imgui.h	/^    bool        WantTextInput;                      \/\/ Mobile\/console: when set, you may disp/;"	m	struct:ImGuiIO	typeref:typename:bool
WantTextInputNextFrame	./imgui_internal.h	/^    int                     WantTextInputNextFrame;$/;"	m	struct:ImGuiContext	typeref:typename:int
WantUpdateGamepadsList	./backends/imgui_impl_sdl2.cpp	/^    bool                          WantUpdateGamepadsList;$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:bool	file:
WantUpdateGamepadsList	./backends/imgui_impl_sdl3.cpp	/^    bool                        WantUpdateGamepadsList;$/;"	m	struct:ImGui_ImplSDL3_Data	typeref:typename:bool	file:
WantUpdateHasGamepad	./backends/imgui_impl_win32.cpp	/^    bool                        WantUpdateHasGamepad;$/;"	m	struct:ImGui_ImplWin32_Data	typeref:typename:bool	file:
WantVisible	./imgui.h	/^    bool    WantVisible;        \/\/ A widget wants the IME to be visible$/;"	m	struct:ImGuiPlatformImeData	typeref:typename:bool
WasActive	./imgui_internal.h	/^    bool                    WasActive;$/;"	m	struct:ImGuiWindow	typeref:typename:bool
What are backends?	./docs/BACKENDS.md	/^### What are backends?$/;"	S	section:Dear ImGui: Backends
WheelX	./imgui_internal.h	/^struct ImGuiInputEventMouseWheel    { float WheelX, WheelY; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMouseWheel	typeref:typename:float
WheelY	./imgui_internal.h	/^struct ImGuiInputEventMouseWheel    { float WheelX, WheelY; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMouseWheel	typeref:typename:float
WheelingAxisAvg	./imgui_internal.h	/^    ImVec2                  WheelingAxisAvg;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
WheelingWindow	./imgui_internal.h	/^    ImGuiWindow*            WheelingWindow;                     \/\/ Track the window we started/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
WheelingWindowRefMousePos	./imgui_internal.h	/^    ImVec2                  WheelingWindowRefMousePos;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
WheelingWindowReleaseTimer	./imgui_internal.h	/^    float                   WheelingWindowReleaseTimer;$/;"	m	struct:ImGuiContext	typeref:typename:float
WheelingWindowScrolledFrame	./imgui_internal.h	/^    int                     WheelingWindowScrolledFrame;$/;"	m	struct:ImGuiContext	typeref:typename:int
WheelingWindowStartFrame	./imgui_internal.h	/^    int                     WheelingWindowStartFrame;           \/\/ This may be set one frame b/;"	m	struct:ImGuiContext	typeref:typename:int
WheelingWindowWheelRemainder	./imgui_internal.h	/^    ImVec2                  WheelingWindowWheelRemainder;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
WidgetType	./imgui_demo.cpp	/^            enum WidgetType { WidgetType_Selectable, WidgetType_TreeNode };$/;"	g	function:ShowDemoWindowMultiSelect	file:
WidgetType_Selectable	./imgui_demo.cpp	/^            enum WidgetType { WidgetType_Selectable, WidgetType_TreeNode };$/;"	e	enum:ShowDemoWindowMultiSelect::WidgetType	file:
WidgetType_TreeNode	./imgui_demo.cpp	/^            enum WidgetType { WidgetType_Selectable, WidgetType_TreeNode };$/;"	e	enum:ShowDemoWindowMultiSelect::WidgetType	file:
Width	./backends/imgui_impl_vulkan.h	/^    int                 Width;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:int
Width	./imgui.h	/^    unsigned short  Width, Height;  \/\/ Input    \/\/ Desired rectangle dimension$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned short
Width	./imgui_internal.h	/^    float                       Width;              \/\/ Set by SetNextItemWidth()$/;"	m	struct:ImGuiNextItemData	typeref:typename:float
Width	./imgui_internal.h	/^    float               Width;                  \/\/ Width currently displayed$/;"	m	struct:ImGuiTabItem	typeref:typename:float
Width	./imgui_internal.h	/^    float       Width;$/;"	m	struct:ImGuiShrinkWidthItem	typeref:typename:float
Width	./imgui_widgets.cpp	/^    float               Width;                  \/\/ Sum of width of tabs in this section (after/;"	m	struct:ImGuiTabBarSection	typeref:typename:float	file:
Width	./misc/freetype/imgui_freetype.cpp	/^        int         Width;              \/\/ Glyph's width in pixels.$/;"	m	struct:__anon21d590df0111::GlyphInfo	typeref:typename:int	file:
WidthAllTabs	./imgui_internal.h	/^    float               WidthAllTabs;           \/\/ Actual width of all tabs (locked during lay/;"	m	struct:ImGuiTabBar	typeref:typename:float
WidthAllTabsIdeal	./imgui_internal.h	/^    float               WidthAllTabsIdeal;      \/\/ Ideal width if all tabs were visible and no/;"	m	struct:ImGuiTabBar	typeref:typename:float
WidthAuto	./imgui_internal.h	/^    float                   WidthAuto;                      \/\/ Automatic width$/;"	m	struct:ImGuiTableColumn	typeref:typename:float
WidthGiven	./imgui_internal.h	/^    float                   WidthGiven;                     \/\/ Final\/actual width visible == /;"	m	struct:ImGuiTableColumn	typeref:typename:float
WidthOrWeight	./imgui_internal.h	/^    float                   WidthOrWeight;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:float
WidthRequest	./imgui_internal.h	/^    float                   WidthRequest;                   \/\/ Master width absolute value whe/;"	m	struct:ImGuiTableColumn	typeref:typename:float
Widths	./imgui_internal.h	/^    ImU16       Widths[4];          \/\/ Width of:   Icon, Label, Shortcut, Mark  (accumulators /;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU16[4]
Window	./backends/imgui_impl_glfw.cpp	/^    GLFWwindow*             Window;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWwindow *	file:
Window	./backends/imgui_impl_osx.mm	/^    NSWindow*                   Window;$/;"	E	struct:ImGui_ImplOSX_Data
Window	./backends/imgui_impl_sdl2.cpp	/^    SDL_Window*             Window;$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:SDL_Window *	file:
Window	./backends/imgui_impl_sdl3.cpp	/^    SDL_Window*             Window;$/;"	m	struct:ImGui_ImplSDL3_Data	typeref:typename:SDL_Window *	file:
Window	./imgui_internal.h	/^    ImGuiWindow*            Window;$/;"	m	struct:ImGuiBoxSelectState	typeref:typename:ImGuiWindow *
Window	./imgui_internal.h	/^    ImGuiWindow*            Window;$/;"	m	struct:ImGuiMultiSelectState	typeref:typename:ImGuiWindow *
Window	./imgui_internal.h	/^    ImGuiWindow*        Window;         \/\/ Init,Move    \/\/ Best candidate window (result->It/;"	m	struct:ImGuiNavItemData	typeref:typename:ImGuiWindow *
Window	./imgui_internal.h	/^    ImGuiWindow*        Window;         \/\/ Resolved on BeginPopup() - may stay unresolved if u/;"	m	struct:ImGuiPopupData	typeref:typename:ImGuiWindow *
Window	./imgui_internal.h	/^    ImGuiWindow*        Window;$/;"	m	struct:ImGuiWindowStackData	typeref:typename:ImGuiWindow *
WindowBorderSize	./imgui.h	/^    float       WindowBorderSize;           \/\/ Thickness of border around windows. Generally s/;"	m	struct:ImGuiStyle	typeref:typename:float
WindowBorderSize	./imgui_internal.h	/^    float                   WindowBorderSize;                   \/\/ Window border size at the t/;"	m	struct:ImGuiWindow	typeref:typename:float
WindowComparerByBeginOrder	./imgui.cpp	/^            struct Func { static int IMGUI_CDECL WindowComparerByBeginOrder(const void* lhs, con/;"	f	struct:ImGui::ShowMetricsWindow::Func	typeref:typename:int IMGUI_CDECL	file:
WindowID	./backends/imgui_impl_sdl2.cpp	/^    Uint32                  WindowID;$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:Uint32	file:
WindowID	./backends/imgui_impl_sdl3.cpp	/^    SDL_WindowID            WindowID;$/;"	m	struct:ImGui_ImplSDL3_Data	typeref:typename:SDL_WindowID	file:
WindowID	./imgui_internal.h	/^    ImGuiID             WindowID;$/;"	m	struct:ImGuiFocusScopeData	typeref:typename:ImGuiID
WindowID	./imgui_internal.h	/^    ImGuiID     WindowID;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImGuiID
WindowMenuButtonPosition	./imgui.h	/^    ImGuiDir    WindowMenuButtonPosition;   \/\/ Side of the collapsing\/docking button in the t/;"	m	struct:ImGuiStyle	typeref:typename:ImGuiDir
WindowMinSize	./imgui.h	/^    ImVec2      WindowMinSize;              \/\/ Minimum window size. This is a global setting. /;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
WindowPadding	./imgui.h	/^    ImVec2      WindowPadding;              \/\/ Padding within a window.$/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
WindowPadding	./imgui_internal.h	/^    ImVec2                  WindowPadding;                      \/\/ Window padding at the time /;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
WindowPosAbsToRel	./imgui_internal.h	/^    inline ImVec2           WindowPosAbsToRel(ImGuiWindow* window, const ImVec2& p)  { ImVec2 of/;"	f	namespace:ImGui	typeref:typename:ImVec2
WindowPosRelToAbs	./imgui_internal.h	/^    inline ImVec2           WindowPosRelToAbs(ImGuiWindow* window, const ImVec2& p)  { ImVec2 of/;"	f	namespace:ImGui	typeref:typename:ImVec2
WindowRectAbsToRel	./imgui_internal.h	/^    inline ImRect           WindowRectAbsToRel(ImGuiWindow* window, const ImRect& r) { ImVec2 of/;"	f	namespace:ImGui	typeref:typename:ImRect
WindowRectRelToAbs	./imgui_internal.h	/^    inline ImRect           WindowRectRelToAbs(ImGuiWindow* window, const ImRect& r) { ImVec2 of/;"	f	namespace:ImGui	typeref:typename:ImRect
WindowResizeBorderExpectedRect	./imgui_internal.h	/^    ImRect                  WindowResizeBorderExpectedRect;     \/\/ Expected border rect, switc/;"	m	struct:ImGuiContext	typeref:typename:ImRect
WindowResizeRelativeMode	./imgui_internal.h	/^    bool                    WindowResizeRelativeMode;$/;"	m	struct:ImGuiContext	typeref:typename:bool
WindowRounding	./imgui.h	/^    float       WindowRounding;             \/\/ Radius of window corners rounding. Set to 0.0f /;"	m	struct:ImGuiStyle	typeref:typename:float
WindowRounding	./imgui_internal.h	/^    float                   WindowRounding;                     \/\/ Window rounding at the time/;"	m	struct:ImGuiWindow	typeref:typename:float
WindowSettingsHandler_ApplyAll	./imgui.cpp	/^static void WindowSettingsHandler_ApplyAll(ImGuiContext* ctx, ImGuiSettingsHandler*)$/;"	f	typeref:typename:void	file:
WindowSettingsHandler_ClearAll	./imgui.cpp	/^static void WindowSettingsHandler_ClearAll(ImGuiContext* ctx, ImGuiSettingsHandler*)$/;"	f	typeref:typename:void	file:
WindowSettingsHandler_ReadLine	./imgui.cpp	/^static void WindowSettingsHandler_ReadLine(ImGuiContext*, ImGuiSettingsHandler*, void* entry, co/;"	f	typeref:typename:void	file:
WindowSettingsHandler_ReadOpen	./imgui.cpp	/^static void* WindowSettingsHandler_ReadOpen(ImGuiContext*, ImGuiSettingsHandler*, const char* na/;"	f	typeref:typename:void *	file:
WindowSettingsHandler_WriteAll	./imgui.cpp	/^static void WindowSettingsHandler_WriteAll(ImGuiContext* ctx, ImGuiSettingsHandler* handler, ImG/;"	f	typeref:typename:void	file:
WindowTitleAlign	./imgui.h	/^    ImVec2      WindowTitleAlign;           \/\/ Alignment for title bar text. Defaults to (0.0f/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
Windows	./imgui_internal.h	/^    ImVector<ImGuiWindow*>  Windows;                            \/\/ Windows, sorted in display /;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiWindow * >
Windows with Visual Studio's CLI	./examples/example_sdl2_opengl3/README.md	/^## Windows with Visual Studio's CLI$/;"	s	chapter:How to Build
Windows with Visual Studio's CLI	./examples/example_sdl3_opengl3/README.md	/^## Windows with Visual Studio's CLI$/;"	s	chapter:How to Build
Windows with Visual Studio's IDE	./examples/example_sdl2_opengl3/README.md	/^## Windows with Visual Studio's IDE$/;"	s	chapter:How to Build
Windows with Visual Studio's IDE	./examples/example_sdl3_opengl3/README.md	/^## Windows with Visual Studio's IDE$/;"	s	chapter:How to Build
WindowsActiveCount	./imgui_internal.h	/^    int                     WindowsActiveCount;                 \/\/ Number of unique windows su/;"	m	struct:ImGuiContext	typeref:typename:int
WindowsById	./imgui_internal.h	/^    ImGuiStorage            WindowsById;                        \/\/ Map window's ImGuiID to ImG/;"	m	struct:ImGuiContext	typeref:typename:ImGuiStorage
WindowsFocusOrder	./imgui_internal.h	/^    ImVector<ImGuiWindow*>  WindowsFocusOrder;                  \/\/ Root windows, sorted in foc/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiWindow * >
WindowsHoverPadding	./imgui_internal.h	/^    ImVec2                  WindowsHoverPadding;                \/\/ Padding around resizable wi/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
WindowsTempSortBuffer	./imgui_internal.h	/^    ImVector<ImGuiWindow*>  WindowsTempSortBuffer;              \/\/ Temporary buffer used in En/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiWindow * >
WithinEndChild	./imgui_internal.h	/^    bool                    WithinEndChild;                     \/\/ Set within EndChild()$/;"	m	struct:ImGuiContext	typeref:typename:bool
WithinFrameScope	./imgui_internal.h	/^    bool                    WithinFrameScope;                   \/\/ Set by NewFrame(), cleared /;"	m	struct:ImGuiContext	typeref:typename:bool
WithinFrameScopeWithImplicitWindow	./imgui_internal.h	/^    bool                    WithinFrameScopeWithImplicitWindow; \/\/ Set by NewFrame(), cleared /;"	m	struct:ImGuiContext	typeref:typename:bool
WndProc	./examples/example_win32_directx10/main.cpp	/^LRESULT WINAPI WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)$/;"	f	typeref:typename:LRESULT WINAPI
WndProc	./examples/example_win32_directx11/main.cpp	/^LRESULT WINAPI WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)$/;"	f	typeref:typename:LRESULT WINAPI
WndProc	./examples/example_win32_directx12/main.cpp	/^LRESULT WINAPI WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)$/;"	f	typeref:typename:LRESULT WINAPI
WndProc	./examples/example_win32_directx9/main.cpp	/^LRESULT WINAPI WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)$/;"	f	typeref:typename:LRESULT WINAPI
WndProc	./examples/example_win32_opengl3/main.cpp	/^LRESULT WINAPI WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)$/;"	f	typeref:typename:LRESULT WINAPI
WorkMaxX	./imgui_internal.h	/^    float                   WorkMaxX;                       \/\/ Contents region max ~(MaxX - Ce/;"	m	struct:ImGuiTableColumn	typeref:typename:float
WorkMinX	./imgui_internal.h	/^    float                   WorkMinX;                       \/\/ Contents region min ~(MinX + Ce/;"	m	struct:ImGuiTableColumn	typeref:typename:float
WorkOffsetMax	./imgui_internal.h	/^    ImVec2              WorkOffsetMax;          \/\/ Work Area: Offset from Pos+Size to bottom-r/;"	m	struct:ImGuiViewportP	typeref:typename:ImVec2
WorkOffsetMin	./imgui_internal.h	/^    ImVec2              WorkOffsetMin;          \/\/ Work Area: Offset from Pos to top-left corn/;"	m	struct:ImGuiViewportP	typeref:typename:ImVec2
WorkPos	./imgui.h	/^    ImVec2              WorkPos;                \/\/ Work Area: Position of the viewport minus t/;"	m	struct:ImGuiViewport	typeref:typename:ImVec2
WorkRect	./imgui_internal.h	/^    ImRect                      WorkRect;$/;"	m	struct:ImGuiTable	typeref:typename:ImRect
WorkRect	./imgui_internal.h	/^    ImRect                  WorkRect;                           \/\/ Initially covers the whole /;"	m	struct:ImGuiWindow	typeref:typename:ImRect
WorkSize	./imgui.h	/^    ImVec2              WorkSize;               \/\/ Work Area: Size of the viewport minus task /;"	m	struct:ImGuiViewport	typeref:typename:ImVec2
WriteAccessed	./imgui_internal.h	/^    bool                    WriteAccessed;                      \/\/ Set to true when any widget/;"	m	struct:ImGuiWindow	typeref:typename:bool
WriteAllFn	./imgui_internal.h	/^    void        (*WriteAllFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, ImGuiTextBuffer*/;"	m	struct:ImGuiSettingsHandler	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler,ImGuiTextBuffer * out_buf)
X	./imgui.h	/^    unsigned short  X, Y;           \/\/ Output   \/\/ Packed position in Atlas$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned short
X0	./imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph	typeref:typename:float
X1	./imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph	typeref:typename:float
XInputDLL	./backends/imgui_impl_win32.cpp	/^    HMODULE                     XInputDLL;$/;"	m	struct:ImGui_ImplWin32_Data	typeref:typename:HMODULE	file:
XInputGetCapabilities	./backends/imgui_impl_win32.cpp	/^    PFN_XInputGetCapabilities   XInputGetCapabilities;$/;"	m	struct:ImGui_ImplWin32_Data	typeref:typename:PFN_XInputGetCapabilities	file:
XInputGetState	./backends/imgui_impl_win32.cpp	/^    PFN_XInputGetState          XInputGetState;$/;"	m	struct:ImGui_ImplWin32_Data	typeref:typename:PFN_XInputGetState	file:
Y	./imgui.h	/^    unsigned short  X, Y;           \/\/ Output   \/\/ Packed position in Atlas$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned short
Y0	./imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph	typeref:typename:float
Y1	./imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph	typeref:typename:float
ZoomWheelAccum	./imgui_demo.cpp	/^    float           ZoomWheelAccum = 0.0f;      \/\/ Mouse wheel accumulator to handle smooth wh/;"	m	struct:ExampleAssetsBrowser	typeref:typename:float	file:
[Return to Index](#index)	./docs/FAQ.md	/^##### [Return to Index](#index)$/;"	T	subsection:Q&A: Basics""Q. What is this library called?
[Return to Index](#index)	./docs/FAQ.md	/^##### [Return to Index](#index)$/;"	T	subsection:Q&A: Basics""Q: Where is the documentation?
[Return to Index](#index)	./docs/FAQ.md	/^##### [Return to Index](#index)$/;"	T	subsection:Q&A: Basics""Q: Which version should I get?
[Return to Index](#index)	./docs/FAQ.md	/^##### [Return to Index](#index)$/;"	T	subsection:Q&A: Community""Q: How can I help?
[Return to Index](#index)	./docs/FAQ.md	/^##### [Return to Index](#index)$/;"	T	subsection:Q&A: Concerns""Q: Can you create elaborate/serious tools with Dear ImGui?
[Return to Index](#index)	./docs/FAQ.md	/^##### [Return to Index](#index)$/;"	T	subsection:Q&A: Concerns""Q: Can you reskin the look of Dear ImGui?
[Return to Index](#index)	./docs/FAQ.md	/^##### [Return to Index](#index)$/;"	T	subsection:Q&A: Concerns""Q: Who uses Dear ImGui?
[Return to Index](#index)	./docs/FAQ.md	/^##### [Return to Index](#index)$/;"	T	subsection:Q&A: Concerns""Q: Why using C++ (as opposed to C)?
[Return to Index](#index)	./docs/FAQ.md	/^##### [Return to Index](#index)$/;"	T	subsection:Q&A: Fonts, Text""Q: How can I display and input non-Latin characters such as Chinese, Japanese, Korean, Cyrillic?
[Return to Index](#index)	./docs/FAQ.md	/^##### [Return to Index](#index)$/;"	T	subsection:Q&A: Fonts, Text""Q: How can I easily use icons in my application?
[Return to Index](#index)	./docs/FAQ.md	/^##### [Return to Index](#index)$/;"	T	subsection:Q&A: Fonts, Text""Q: How can I load a different font than the default?
[Return to Index](#index)	./docs/FAQ.md	/^##### [Return to Index](#index)$/;"	T	subsection:Q&A: Fonts, Text""Q: How can I load multiple fonts?
[Return to Index](#index)	./docs/FAQ.md	/^##### [Return to Index](#index)$/;"	T	subsection:Q&A: Integration""Q: How can I enable keyboard or gamepad controls?
[Return to Index](#index)	./docs/FAQ.md	/^##### [Return to Index](#index)$/;"	T	subsection:Q&A: Integration""Q: How can I tell whether to dispatch mouse/keyboard to Dear ImGui or my application?
[Return to Index](#index)	./docs/FAQ.md	/^##### [Return to Index](#index)$/;"	T	subsection:Q&A: Integration""Q: How can I use this on a machine without mouse, keyboard or screen? (input share, remote display)
[Return to Index](#index)	./docs/FAQ.md	/^##### [Return to Index](#index)$/;"	T	subsection:Q&A: Integration""Q: How to get started?
[Return to Index](#index)	./docs/FAQ.md	/^##### [Return to Index](#index)$/;"	T	subsection:Q&A: Integration""Q: I integrated Dear ImGui in my engine and little squares are showing instead of text...
[Return to Index](#index)	./docs/FAQ.md	/^##### [Return to Index](#index)$/;"	T	subsection:Q&A: Integration""Q: I integrated Dear ImGui in my engine and some elements are displaying outside their expected windows boundaries...
[Return to Index](#index)	./docs/FAQ.md	/^##### [Return to Index](#index)$/;"	T	subsection:Q&A: Usage""Q: How can I display an image? What is ImTextureID, how does it work?
[Return to Index](#index)	./docs/FAQ.md	/^##### [Return to Index](#index)$/;"	T	subsection:Q&A: Usage""Q: How can I display custom shapes? (using low-level ImDrawList API)
[Return to Index](#index)	./docs/FAQ.md	/^##### [Return to Index](#index)$/;"	T	subsection:Q&A: Usage""Q: How can I have multiple windows with the same label?
[Return to Index](#index)	./docs/FAQ.md	/^##### [Return to Index](#index)$/;"	T	subsection:Q&A: Usage""Q: How can I interact with standard C++ types (such as std::string and std::vector)?
[Return to Index](#index)	./docs/FAQ.md	/^##### [Return to Index](#index)$/;"	T	subsection:Q&A: Usage""Q: How can I use maths operators with ImVec2?
[Return to Index](#index)	./docs/FAQ.md	/^##### [Return to Index](#index)$/;"	T	subsection:Q&A: Usage""Q: How can I use my own maths types instead of ImVec2/ImVec4?
[Return to Index](#index)	./docs/FONTS.md	/^##### [Return to Index](#index)$/;"	T	section:About Filenames
[Return to Index](#index)	./docs/FONTS.md	/^##### [Return to Index](#index)$/;"	T	section:About UTF-8 Encoding
[Return to Index](#index)	./docs/FONTS.md	/^##### [Return to Index](#index)$/;"	T	section:Credits/Licenses For Fonts Included In Repository
[Return to Index](#index)	./docs/FONTS.md	/^##### [Return to Index](#index)$/;"	T	section:Fonts Loading Instructions
[Return to Index](#index)	./docs/FONTS.md	/^##### [Return to Index](#index)$/;"	T	section:How should I handle DPI in my application?
[Return to Index](#index)	./docs/FONTS.md	/^##### [Return to Index](#index)$/;"	T	section:Loading Font Data Embedded In Source Code
[Return to Index](#index)	./docs/FONTS.md	/^##### [Return to Index](#index)$/;"	T	section:Loading Font Data from Memory
[Return to Index](#index)	./docs/FONTS.md	/^##### [Return to Index](#index)$/;"	T	section:Using Colorful Glyphs/Emojis
[Return to Index](#index)	./docs/FONTS.md	/^##### [Return to Index](#index)$/;"	T	section:Using Custom Glyph Ranges
[Return to Index](#index)	./docs/FONTS.md	/^##### [Return to Index](#index)$/;"	T	section:Using FreeType Rasterizer (imgui_freetype)
[Return to Index](#index)	./docs/FONTS.md	/^##### [Return to Index](#index)$/;"	T	section:Using Icon Fonts
[Return to Index](#index)	./docs/FONTS.md	/^##### [Return to Index](#index)$/;"	T	subsection:Troubleshooting""(4) Font atlas texture fails to upload to GPU.
[Return to Index](#index)	./docs/FONTS.md	/^##### [Return to Index](#index)$/;"	T	subsubsection:Debug Tools""UTF-8 Encoding Viewer**
[Return to Index](#index)	./docs/FONTS.md	/^##### [Return to Index](#index)$/;"	T	subsubsection:Font Links""MONOSPACE FONTS
[Return to Index](#index)	./docs/FONTS.md	/^##### [Return to Index](#index)$/;"	T	subsubsection:Using Custom Colorful Icons""Pseudo-code:
_CRT_SECURE_NO_WARNINGS	./backends/imgui_impl_opengl3.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	./imgui.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	./imgui_demo.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	./imgui_draw.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	./imgui_tables.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	./imgui_widgets.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	./misc/fonts/binary_to_compressed_c.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CalcCircleAutoSegmentCount	./imgui_draw.cpp	/^int ImDrawList::_CalcCircleAutoSegmentCount(float radius) const$/;"	f	class:ImDrawList	typeref:typename:int
_Channels	./imgui.h	/^    ImVector<ImDrawChannel>     _Channels;   \/\/ Draw channels (not resized down so _Count migh/;"	m	struct:ImDrawListSplitter	typeref:typename:ImVector<ImDrawChannel>
_ClearFreeMemory	./imgui_draw.cpp	/^void ImDrawList::_ClearFreeMemory()$/;"	f	class:ImDrawList	typeref:typename:void
_ClipRectStack	./imgui.h	/^    ImVector<ImVec4>        _ClipRectStack;     \/\/ [Internal]$/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImVec4>
_CmdBuffer	./imgui.h	/^    ImVector<ImDrawCmd>         _CmdBuffer;$/;"	m	struct:ImDrawChannel	typeref:typename:ImVector<ImDrawCmd>
_CmdHeader	./imgui.h	/^    ImDrawCmdHeader         _CmdHeader;         \/\/ [Internal] template of active commands. Fie/;"	m	struct:ImDrawList	typeref:typename:ImDrawCmdHeader
_Count	./imgui.h	/^    int                         _Count;      \/\/ Number of active channels (1+)$/;"	m	struct:ImDrawListSplitter	typeref:typename:int
_Current	./imgui.h	/^    int                         _Current;    \/\/ Current channel number (0)$/;"	m	struct:ImDrawListSplitter	typeref:typename:int
_Data	./imgui.h	/^    ImDrawListSharedData*   _Data;              \/\/ Pointer to shared draw data (you can use Im/;"	m	struct:ImDrawList	typeref:typename:ImDrawListSharedData *
_Ears	./imgui_draw.cpp	/^    ImTriangulatorNodeSpan  _Ears;$/;"	m	struct:ImTriangulator	typeref:typename:ImTriangulatorNodeSpan	file:
_FringeScale	./imgui.h	/^    float                   _FringeScale;       \/\/ [Internal] anti-alias fringe is scaled by t/;"	m	struct:ImDrawList	typeref:typename:float
_IdxBuffer	./imgui.h	/^    ImVector<ImDrawIdx>         _IdxBuffer;$/;"	m	struct:ImDrawChannel	typeref:typename:ImVector<ImDrawIdx>
_IdxWritePtr	./imgui.h	/^    ImDrawIdx*              _IdxWritePtr;       \/\/ [Internal] point within IdxBuffer.Data afte/;"	m	struct:ImDrawList	typeref:typename:ImDrawIdx *
_IsWindows10OrGreater	./backends/imgui_impl_win32.cpp	/^#define _IsWindows10OrGreater(/;"	d	file:
_IsWindows8OrGreater	./backends/imgui_impl_win32.cpp	/^#define _IsWindows8OrGreater(/;"	d	file:
_IsWindows8Point1OrGreater	./backends/imgui_impl_win32.cpp	/^#define _IsWindows8Point1OrGreater(/;"	d	file:
_IsWindowsVersionOrGreater	./backends/imgui_impl_win32.cpp	/^static BOOL _IsWindowsVersionOrGreater(WORD major, WORD minor, WORD)$/;"	f	typeref:typename:BOOL	file:
_IsWindowsVistaOrGreater	./backends/imgui_impl_win32.cpp	/^#define _IsWindowsVistaOrGreater(/;"	d	file:
_Nodes	./imgui_draw.cpp	/^    ImTriangulatorNode*     _Nodes = NULL;$/;"	m	struct:ImTriangulator	typeref:typename:ImTriangulatorNode *	file:
_OnChangedClipRect	./imgui_draw.cpp	/^void ImDrawList::_OnChangedClipRect()$/;"	f	class:ImDrawList	typeref:typename:void
_OnChangedTextureID	./imgui_draw.cpp	/^void ImDrawList::_OnChangedTextureID()$/;"	f	class:ImDrawList	typeref:typename:void
_OnChangedVtxOffset	./imgui_draw.cpp	/^void ImDrawList::_OnChangedVtxOffset()$/;"	f	class:ImDrawList	typeref:typename:void
_OwnerName	./imgui.h	/^    const char*             _OwnerName;         \/\/ Pointer to owner window's name for debuggin/;"	m	struct:ImDrawList	typeref:typename:const char *
_Path	./imgui.h	/^    ImVector<ImVec2>        _Path;              \/\/ [Internal] current path building$/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImVec2>
_PathArcToFastEx	./imgui_draw.cpp	/^void ImDrawList::_PathArcToFastEx(const ImVec2& center, float radius, int a_min_sample, int a_ma/;"	f	class:ImDrawList	typeref:typename:void
_PathArcToN	./imgui_draw.cpp	/^void ImDrawList::_PathArcToN(const ImVec2& center, float radius, float a_min, float a_max, int n/;"	f	class:ImDrawList	typeref:typename:void
_PopUnusedDrawCmd	./imgui_draw.cpp	/^void ImDrawList::_PopUnusedDrawCmd()$/;"	f	class:ImDrawList	typeref:typename:void
_Reflexes	./imgui_draw.cpp	/^    ImTriangulatorNodeSpan  _Reflexes;$/;"	m	struct:ImTriangulator	typeref:typename:ImTriangulatorNodeSpan	file:
_ResetForNewFrame	./imgui_draw.cpp	/^void ImDrawList::_ResetForNewFrame()$/;"	f	class:ImDrawList	typeref:typename:void
_SelectionOrder	./imgui.h	/^    int             _SelectionOrder;\/\/ [Internal] Increasing counter to store selection order$/;"	m	struct:ImGuiSelectionBasicStorage	typeref:typename:int
_SetTextureID	./imgui_draw.cpp	/^void ImDrawList::_SetTextureID(ImTextureID texture_id)$/;"	f	class:ImDrawList	typeref:typename:void
_Splitter	./imgui.h	/^    ImDrawListSplitter      _Splitter;          \/\/ [Internal] for channels api (note: prefer u/;"	m	struct:ImDrawList	typeref:typename:ImDrawListSplitter
_Storage	./imgui.h	/^    ImGuiStorage    _Storage;       \/\/ [Internal] Selection set. Think of this as similar to e/;"	m	struct:ImGuiSelectionBasicStorage	typeref:typename:ImGuiStorage
_TextureIdStack	./imgui.h	/^    ImVector<ImTextureID>   _TextureIdStack;    \/\/ [Internal]$/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImTextureID>
_TrianglesLeft	./imgui_draw.cpp	/^    int                     _TrianglesLeft = 0;$/;"	m	struct:ImTriangulator	typeref:typename:int	file:
_TryMergeDrawCmds	./imgui_draw.cpp	/^void ImDrawList::_TryMergeDrawCmds()$/;"	f	class:ImDrawList	typeref:typename:void
_VtxCurrentIdx	./imgui.h	/^    unsigned int            _VtxCurrentIdx;     \/\/ [Internal] generally == VtxBuffer.Size unle/;"	m	struct:ImDrawList	typeref:typename:unsigned int
_VtxWritePtr	./imgui.h	/^    ImDrawVert*             _VtxWritePtr;       \/\/ [Internal] point within VtxBuffer.Data afte/;"	m	struct:ImDrawList	typeref:typename:ImDrawVert *
_WIN32	./examples/libs/glfw/include/GLFW/glfw3.h	/^ #define _WIN32$/;"	d
__STB_INCLUDE_STB_TRUETYPE_H__	./imstb_truetype.h	/^#define __STB_INCLUDE_STB_TRUETYPE_H__$/;"	d
__anon1035f96e0102	./imgui.cpp	/^        g.PlatformIO.Platform_GetClipboardTextFn = [](ImGuiContext* ctx) { return ctx->IO.GetCli/;"	f	function:ImGui::ErrorCheckNewFrameSanityChecks	file:
__anon1035f96e0202	./imgui.cpp	/^        g.PlatformIO.Platform_SetClipboardTextFn = [](ImGuiContext* ctx, const char* text) { ret/;"	f	function:ImGui::ErrorCheckNewFrameSanityChecks	file:
__anon1035f96e0303	./imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	g	function:ImGui::ShowMetricsWindow	file:
__anon1035f96e0403	./imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	g	function:ImGui::ShowMetricsWindow	file:
__anon1035f96e050a	./imgui.cpp	/^    union { void* ptr; int integer; } tex_id_opaque;$/;"	u	function:FormatTextureIDForDebugDisplay	file:
__anon21d590df0111	./misc/freetype/imgui_freetype.cpp	/^{$/;"	n	file:
__anon23b8519a0108	./examples/libs/usynergy/uSynergy.h	/^typedef struct { int ignored; } *					uSynergyCookie;$/;"	s
__anon23b8519a0208	./examples/libs/usynergy/uSynergy.h	/^{$/;"	s
__anon38b7fb720102	./imgui_demo.cpp	/^        ImGui::Combo("combo 4 (function)", &item_current_4, [](void* data, int n) { return ((con/;"	f	function:ShowDemoWindowWidgets	file:
__anon38b7fb720202	./imgui_demo.cpp	/^        Selections[side].AdapterIndexToStorageId = [](ImGuiSelectionBasicStorage* self, int idx)/;"	f	function:ExampleDualListBox::ApplySelectionRequests	file:
__anon38b7fb720302	./imgui_demo.cpp	/^            selection.AdapterIndexToStorageId = [](ImGuiSelectionBasicStorage* self, int idx) { /;"	f	function:ShowDemoWindowMultiSelect	file:
__anon38b7fb720402	./imgui_demo.cpp	/^                storage_wrapper.AdapterSetItemSelected = [](ImGuiSelectionExternalStorage* self,/;"	f	function:ShowDemoWindowMultiSelect	file:
__anon38b7fb720511	./imgui_demo.cpp	/^{$/;"	n	file:
__anon38b7fb720602	./imgui_demo.cpp	/^            Selection.AdapterIndexToStorageId = [](ImGuiSelectionBasicStorage* self_, int idx) {/;"	f	function:ExampleAssetsBrowser::Draw	file:
__anon42ac1dbb0103	./backends/imgui_impl_win32.cpp	/^typedef enum { PROCESS_DPI_UNAWARE = 0, PROCESS_SYSTEM_DPI_AWARE = 1, PROCESS_PER_MONITOR_DPI_AW/;"	g	file:
__anon42ac1dbb0203	./backends/imgui_impl_win32.cpp	/^typedef enum { MDT_EFFECTIVE_DPI = 0, MDT_ANGULAR_DPI = 1, MDT_RAW_DPI = 2, MDT_DEFAULT = MDT_EF/;"	g	file:
__anon485443240102	./imgui_widgets.cpp	/^    AdapterIndexToStorageId = [](ImGuiSelectionBasicStorage*, int idx) { return (ImGuiID)idx; };$/;"	f	function:ImGuiSelectionBasicStorage::ImGuiSelectionBasicStorage	file:
__anon56ffe47d0102	./backends/imgui_impl_sdl2.cpp	/^    platform_io.Platform_OpenInShellFn = [](ImGuiContext*, const char* url) { ImGui_ImplSDL2_Ems/;"	f	function:ImGui_ImplSDL2_Init	file:
__anon804ea3c30103	./imstb_rectpack.h	/^{$/;"	g
__anon804ea3c30203	./imstb_rectpack.h	/^{$/;"	g
__anon804ea3c30308	./imstb_rectpack.h	/^{$/;"	s
__anon869d752f010a	./imgui_internal.h	/^    union           { int BackupInt[2]; float BackupFloat[2]; };$/;"	u	struct:ImGuiStyleMod
__anon869d752f020a	./imgui_internal.h	/^    {$/;"	u	struct:ImGuiInputEvent
__anon97bae1980108	./imstb_truetype.h	/^{$/;"	s
__anon97bae1980208	./imstb_truetype.h	/^{$/;"	s
__anon97bae1980308	./imstb_truetype.h	/^{$/;"	s
__anon97bae1980408	./imstb_truetype.h	/^{$/;"	s
__anon97bae1980508	./imstb_truetype.h	/^{$/;"	s
__anon97bae1980603	./imstb_truetype.h	/^   enum {$/;"	g
__anon97bae1980708	./imstb_truetype.h	/^   {$/;"	s
__anon97bae1980808	./imstb_truetype.h	/^{$/;"	s
__anon97bae1980903	./imstb_truetype.h	/^enum { \/\/ platformID$/;"	g
__anon97bae1980a03	./imstb_truetype.h	/^enum { \/\/ encodingID for STBTT_PLATFORM_ID_UNICODE$/;"	g
__anon97bae1980b03	./imstb_truetype.h	/^enum { \/\/ encodingID for STBTT_PLATFORM_ID_MICROSOFT$/;"	g
__anon97bae1980c03	./imstb_truetype.h	/^enum { \/\/ encodingID for STBTT_PLATFORM_ID_MAC; same as Script Manager codes$/;"	g
__anon97bae1980d03	./imstb_truetype.h	/^enum { \/\/ languageID for STBTT_PLATFORM_ID_MICROSOFT; same as LCID...$/;"	g
__anon97bae1980e03	./imstb_truetype.h	/^enum { \/\/ languageID for STBTT_PLATFORM_ID_MAC$/;"	g
__anon97bae1980f08	./imstb_truetype.h	/^{$/;"	s
__anon97bae1981008	./imstb_truetype.h	/^{$/;"	s
__anon97bae1981108	./imstb_truetype.h	/^{$/;"	s
__anon97bae1981208	./imstb_truetype.h	/^{$/;"	s
__anona29d76f80102	./backends/imgui_impl_glfw.cpp	/^    platform_io.Platform_SetClipboardTextFn = [](ImGuiContext*, const char* text) { glfwSetClipb/;"	f	function:ImGui_ImplGlfw_Init	file:
__anona29d76f80202	./backends/imgui_impl_glfw.cpp	/^    platform_io.Platform_GetClipboardTextFn = [](ImGuiContext*) { return glfwGetClipboardString(/;"	f	function:ImGui_ImplGlfw_Init	file:
__anona29d76f80302	./backends/imgui_impl_glfw.cpp	/^    platform_io.Platform_OpenInShellFn = [](ImGuiContext*, const char* url) { ImGui_ImplGlfw_Ems/;"	f	function:ImGui_ImplGlfw_Init	file:
__anond05b37a10108	./imstb_textedit.h	/^{$/;"	s
__anond05b37a10208	./imstb_textedit.h	/^{$/;"	s
__anond05b37a10308	./imstb_textedit.h	/^{$/;"	s
__anond05b37a10408	./imstb_textedit.h	/^{$/;"	s
__anond05b37a10508	./imstb_textedit.h	/^{$/;"	s
__anond09c7bb20102	./examples/example_glfw_wgpu/main.cpp	/^    {$/;"	f	function:RequestAdapter	file:
__anond09c7bb20202	./examples/example_glfw_wgpu/main.cpp	/^    {$/;"	f	function:RequestDevice	file:
__anond8fdef13010a	./imgui.h	/^    union       { int val_i; float val_f; void* val_p; };$/;"	u	struct:ImGuiStoragePair
__anone6efc55b0108	./backends/imgui_impl_opengl3_loader.h	/^    struct {$/;"	s	union:ImGL3WProcs
__anone6efc55b0208	./backends/imgui_impl_opengl3_loader.h	/^static struct { int major, minor; } version;$/;"	s
__gl3w_h_	./backends/imgui_impl_opengl3_loader.h	/^#define __gl3w_h_$/;"	d
__gl_glcorearb_h_	./backends/imgui_impl_opengl3_loader.h	/^#define __gl_glcorearb_h_ /;"	d
__gl_h_	./backends/imgui_impl_opengl3_loader.h	/^#define __gl_h_$/;"	d
__glsl_shader_frag_spv	./backends/imgui_impl_vulkan.cpp	/^static uint32_t __glsl_shader_frag_spv[] =$/;"	v	typeref:typename:uint32_t[]	file:
__glsl_shader_vert_spv	./backends/imgui_impl_vulkan.cpp	/^static uint32_t __glsl_shader_vert_spv[] =$/;"	v	typeref:typename:uint32_t[]	file:
__shader_frag_wgsl	./backends/imgui_impl_wgpu.cpp	/^static const char __shader_frag_wgsl[] = R"($/;"	v	typeref:typename:const char[]	file:
__shader_vert_wgsl	./backends/imgui_impl_wgpu.cpp	/^static const char __shader_vert_wgsl[] = R"($/;"	v	typeref:typename:const char[]	file:
_glfw3_h_	./examples/libs/glfw/include/GLFW/glfw3.h	/^#define _glfw3_h_$/;"	d
_glfw3_native_h_	./examples/libs/glfw/include/GLFW/glfw3native.h	/^#define _glfw3_native_h_$/;"	d
_grow_capacity	./imgui.h	/^    inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Cap/;"	f	struct:ImVector	typeref:typename:int
_windowResizeEastWestCursor	./backends/imgui_impl_osx.mm	/^+ (id)_windowResizeEastWestCursor;$/;"	c	interface:NSCursor	category:id
_windowResizeNorthEastSouthWestCursor	./backends/imgui_impl_osx.mm	/^+ (id)_windowResizeNorthEastSouthWestCursor;$/;"	c	interface:NSCursor	category:id
_windowResizeNorthSouthCursor	./backends/imgui_impl_osx.mm	/^+ (id)_windowResizeNorthSouthCursor;$/;"	c	interface:NSCursor	category:id
acceptsFirstResponder	./backends/imgui_impl_osx.mm	/^{$/;"	m	implementation:KeyEventResponder
active_head	./imstb_rectpack.h	/^   stbrp_node *active_head;$/;"	m	struct:stbrp_context	typeref:typename:stbrp_node *
advance	./imstb_truetype.h	/^   int advance;$/;"	m	struct:stbtt_kerningentry	typeref:typename:int
align	./imstb_rectpack.h	/^   int align;$/;"	m	struct:stbrp_context	typeref:typename:int
all	./examples/example_glfw_metal/Makefile	/^all: $(EXE)$/;"	t
all	./examples/example_glfw_opengl2/Makefile	/^all: $(EXE)$/;"	t
all	./examples/example_glfw_opengl3/Makefile	/^all: $(EXE)$/;"	t
all	./examples/example_glut_opengl2/Makefile	/^all: $(EXE)$/;"	t
all	./examples/example_null/Makefile	/^all: $(EXE)$/;"	t
all	./examples/example_sdl2_metal/Makefile	/^all: $(EXE)$/;"	t
all	./examples/example_sdl2_opengl2/Makefile	/^all: $(EXE)$/;"	t
all	./examples/example_sdl2_opengl3/Makefile	/^all: $(EXE)$/;"	t
all	./examples/example_sdl2_sdlrenderer2/Makefile	/^all: $(EXE)$/;"	t
all	./examples/example_sdl3_opengl3/Makefile	/^all: $(EXE)$/;"	t
all	./examples/example_sdl3_sdlrenderer3/Makefile	/^all: $(EXE)$/;"	t
alloc_chunk	./imgui_internal.h	/^    T*      alloc_chunk(size_t sz)      { size_t HDR_SZ = 4; sz = IM_MEMALIGN(HDR_SZ + sz, 4u); /;"	f	struct:ImChunkStream	typeref:typename:T *
android	./examples/example_android_opengl3/android/app/src/main/AndroidManifest.xml	/^<manifest xmlns:android="http:\/\/schemas.android.com\/apk\/res\/android">$/;"	n	uri:http://schemas.android.com/apk/res/android
android_main	./examples/example_android_opengl3/main.cpp	/^void android_main(struct android_app* app)$/;"	f	typeref:typename:void
animationTimer	./examples/example_apple_opengl2/main.mm	/^    NSTimer*    animationTimer;$/;"	E	interface:AppView
animationTimerFired:	./examples/example_apple_opengl2/main.mm	/^-(void)animationTimerFired:(NSTimer*)timer  { [self setNeedsDisplay:YES]; }$/;"	m	implementation:AppView
append	./imgui.cpp	/^void ImGuiTextBuffer::append(const char* str, const char* str_end)$/;"	f	class:ImGuiTextBuffer	typeref:typename:void
append	./imgui.cpp	/^void ImGuiTextIndex::append(const char* base, int old_size, int new_size)$/;"	f	class:ImGuiTextIndex	typeref:typename:void
appendf	./imgui.cpp	/^void ImGuiTextBuffer::appendf(const char* fmt, ...)$/;"	f	class:ImGuiTextBuffer	typeref:typename:void
appendfv	./imgui.cpp	/^void ImGuiTextBuffer::appendfv(const char* fmt, va_list args)$/;"	f	class:ImGuiTextBuffer	typeref:typename:void
application:didFinishLaunchingWithOptions:	./examples/example_apple_metal/main.mm	/^{$/;"	m	implementation:AppDelegate
applicationDidFinishLaunching:	./examples/example_apple_opengl2/main.mm	/^{$/;"	m	implementation:AppDelegate
applicationShouldTerminateAfterLastWindowClosed:	./examples/example_apple_metal/main.mm	/^{$/;"	m	implementation:AppDelegate
applicationShouldTerminateAfterLastWindowClosed:	./examples/example_apple_opengl2/main.mm	/^{$/;"	m	implementation:AppDelegate
array_of_unicode_codepoints	./imstb_truetype.h	/^   int *array_of_unicode_codepoints;       \/\/ if non-zero, then this is an array of unicode co/;"	m	struct:__anon97bae1980508	typeref:typename:int *
attributedSubstringForProposedRange:actualRange:	./backends/imgui_impl_osx.mm	/^{$/;"	m	implementation:KeyEventResponder
b	./imgui.h	/^        const char*     b;$/;"	m	struct:ImGuiTextFilter::ImGuiTextRange	typeref:typename:const char *
back	./imgui.h	/^    inline T&           back()                              { IM_ASSERT(Size > 0); return Data[S/;"	f	struct:ImVector	typeref:typename:T &
back	./imgui.h	/^    inline const T&     back() const                        { IM_ASSERT(Size > 0); return Data[S/;"	f	struct:ImVector	typeref:typename:const T &
baseline_y_delta	./imstb_textedit.h	/^   float baseline_y_delta;  \/\/ position of baseline relative to previous row's baseline$/;"	m	struct:__anond05b37a10408	typeref:typename:float
begin	./imgui.h	/^    const char*         begin() const           { return Buf.Data ? &Buf.front() : EmptyString; /;"	f	struct:ImGuiTextBuffer	typeref:typename:const char *
begin	./imgui.h	/^    inline T*           begin()                             { return Data; }$/;"	f	struct:ImVector	typeref:typename:T *
begin	./imgui.h	/^    inline const T*     begin() const                       { return Data; }$/;"	f	struct:ImVector	typeref:typename:const T *
begin	./imgui_internal.h	/^    T*      begin()                     { size_t HDR_SZ = 4; if (!Buf.Data) return NULL; return /;"	f	struct:ImChunkStream	typeref:typename:T *
begin	./imgui_internal.h	/^    inline T*           begin()                     { return Data; }$/;"	f	struct:ImSpan	typeref:typename:T *
begin	./imgui_internal.h	/^    inline const T*     begin() const               { return Data; }$/;"	f	struct:ImSpan	typeref:typename:const T *
binary_to_compressed_c	./misc/fonts/binary_to_compressed_c.cpp	/^bool binary_to_compressed_c(const char* filename, const char* symbol, bool use_base85_encoding, /;"	f	typeref:typename:bool
blue	./examples/libs/glfw/include/GLFW/glfw3.h	/^    unsigned short* blue;$/;"	m	struct:GLFWgammaramp	typeref:typename:unsigned short *
blueBits	./examples/libs/glfw/include/GLFW/glfw3.h	/^    int blueBits;$/;"	m	struct:GLFWvidmode	typeref:typename:int
bottom_y	./imstb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anon97bae1981108	typeref:typename:int
bounds	./imstb_truetype.h	/^   int bounds;$/;"	m	struct:__anon97bae1980f08	typeref:typename:int
buffer	./backends/imgui_impl_metal.mm	/^@property (nonatomic, strong) id<MTLBuffer> buffer;$/;"	p	interface:MetalBuffer
bufferCache	./backends/imgui_impl_metal.mm	/^@property (nonatomic, strong) NSMutableArray<MetalBuffer*>* bufferCache;$/;"	p	interface:MetalContext
c_str	./imgui.h	/^    const char*         c_str() const           { return Buf.Data ? Buf.Data : EmptyString; }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:const char *
canvas	./examples/example_glfw_wgpu/web/index.html	/^    <canvas class="emscripten" id="canvas" oncontextmenu="event.preventDefault()"><\/canvas>$/;"	I
canvas	./examples/libs/emscripten/shell_minimal.html	/^    <canvas class="emscripten" id="canvas" oncontextmenu="event.preventDefault()"><\/canvas>$/;"	I
capacity	./imgui.h	/^    inline int          capacity() const                    { return Capacity; }$/;"	f	struct:ImVector	typeref:typename:int
cff	./imstb_truetype.h	/^   stbtt__buf cff;                    \/\/ cff font data$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
char_storage	./imstb_textedit.h	/^   int                        char_storage;$/;"	m	struct:__anond05b37a10108	typeref:typename:int
characterIndexForPoint:	./backends/imgui_impl_osx.mm	/^{$/;"	m	implementation:KeyEventResponder
chardata_for_range	./imstb_truetype.h	/^   stbtt_packedchar *chardata_for_range; \/\/ output$/;"	m	struct:__anon97bae1980508	typeref:typename:stbtt_packedchar *
charstrings	./imstb_truetype.h	/^   stbtt__buf charstrings;            \/\/ the charstring index$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
check_vk_result	./backends/imgui_impl_vulkan.cpp	/^static void check_vk_result(VkResult err)$/;"	f	typeref:typename:void	file:
check_vk_result	./examples/example_glfw_vulkan/main.cpp	/^static void check_vk_result(VkResult err)$/;"	f	typeref:typename:void	file:
check_vk_result	./examples/example_sdl2_vulkan/main.cpp	/^static void check_vk_result(VkResult err)$/;"	f	typeref:typename:void	file:
chunk_size	./imgui_internal.h	/^    int     chunk_size(const T* p)      { return ((const int*)p)[-1]; }$/;"	f	struct:ImChunkStream	typeref:typename:int
clean	./examples/example_glfw_metal/Makefile	/^clean:$/;"	t
clean	./examples/example_glfw_opengl2/Makefile	/^clean:$/;"	t
clean	./examples/example_glfw_opengl3/Makefile	/^clean:$/;"	t
clean	./examples/example_glut_opengl2/Makefile	/^clean:$/;"	t
clean	./examples/example_null/Makefile	/^clean:$/;"	t
clean	./examples/example_sdl2_metal/Makefile	/^clean:$/;"	t
clean	./examples/example_sdl2_opengl2/Makefile	/^clean:$/;"	t
clean	./examples/example_sdl2_opengl3/Makefile	/^clean:$/;"	t
clean	./examples/example_sdl2_sdlrenderer2/Makefile	/^clean:$/;"	t
clean	./examples/example_sdl3_opengl3/Makefile	/^clean:$/;"	t
clean	./examples/example_sdl3_sdlrenderer3/Makefile	/^clean:$/;"	t
clear	./imgui.h	/^    inline void         clear()                             { if (Data) { Size = Capacity = 0; I/;"	f	struct:ImVector	typeref:typename:void
clear	./imgui.h	/^    void                clear()                 { Buf.clear(); }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:void
clear	./imgui_internal.h	/^    void            clear()                                 { LineOffsets.clear(); EndOffset = 0/;"	f	struct:ImGuiTextIndex	typeref:typename:void
clear	./imgui_internal.h	/^    void    clear()                     { Buf.clear(); }$/;"	f	struct:ImChunkStream	typeref:typename:void
clear_color	./examples/example_glut_opengl2/main.cpp	/^static ImVec4 clear_color = ImVec4(0.45f, 0.55f, 0.60f, 1.00f);$/;"	v	typeref:typename:ImVec4	file:
clear_delete	./imgui.h	/^    inline void         clear_delete()                      { for (int n = 0; n < Size; n++) IM_/;"	f	struct:ImVector	typeref:typename:void
clear_destruct	./imgui.h	/^    inline void         clear_destruct()                    { for (int n = 0; n < Size; n++) Dat/;"	f	struct:ImVector	typeref:typename:void
close_libgl	./backends/imgui_impl_opengl3_loader.h	/^static void close_libgl(void) { FreeLibrary(libgl); }$/;"	f	typeref:typename:void
col	./backends/imgui_impl_allegro5.cpp	/^    ALLEGRO_COLOR   col;$/;"	m	struct:ImDrawVertAllegro	typeref:typename:ALLEGRO_COLOR	file:
col	./backends/imgui_impl_dx9.cpp	/^    D3DCOLOR col;$/;"	m	struct:CUSTOMVERTEX	typeref:typename:D3DCOLOR	file:
col	./imgui.h	/^    ImU32   col;$/;"	m	struct:ImDrawVert	typeref:typename:ImU32
colorPixelFormat	./backends/imgui_impl_metal.mm	/^@property (nonatomic, assign) MTLPixelFormat colorPixelFormat;$/;"	p	interface:FramebufferDescriptor
commandQueue	./examples/example_apple_metal/main.mm	/^@property (nonatomic, strong) id <MTLCommandQueue> commandQueue;$/;"	p	interface:AppViewController
const_iterator	./imgui.h	/^    typedef const value_type*   const_iterator;$/;"	t	struct:ImVector	typeref:typename:const value_type *
contains	./imgui.h	/^    inline bool         contains(const T& v) const          { const T* data = Data;  const T* da/;"	f	struct:ImVector	typeref:typename:bool
copyWithZone:	./backends/imgui_impl_metal.mm	/^{$/;"	m	implementation:FramebufferDescriptor
cursor	./imstb_textedit.h	/^   int cursor;$/;"	m	struct:__anond05b37a10308	typeref:typename:int
cursor	./imstb_truetype.h	/^   int cursor;$/;"	m	struct:__anon97bae1980108	typeref:typename:int
cursor_at_end_of_line	./imstb_textedit.h	/^   unsigned char cursor_at_end_of_line; \/\/ not implemented yet$/;"	m	struct:__anond05b37a10308	typeref:typename:unsigned char
cx	./imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon97bae1980708	typeref:typename:stbtt_vertex_type
cx1	./imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon97bae1980708	typeref:typename:stbtt_vertex_type
cy	./imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon97bae1980708	typeref:typename:stbtt_vertex_type
cy1	./imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon97bae1980708	typeref:typename:stbtt_vertex_type
data	./imstb_truetype.h	/^   unsigned char  * data;              \/\/ pointer to .ttf file$/;"	m	struct:stbtt_fontinfo	typeref:typename:unsigned char *
data	./imstb_truetype.h	/^   unsigned char *data;$/;"	m	struct:__anon97bae1980108	typeref:typename:unsigned char *
dealloc	./examples/example_apple_opengl2/main.mm	/^-(void)dealloc                              { animationTimer = nil; }$/;"	m	implementation:AppView
dealloc	./examples/example_apple_opengl2/main.mm	/^{$/;"	m	implementation:AppDelegate
debug_report	./examples/example_glfw_vulkan/main.cpp	/^static VKAPI_ATTR VkBool32 VKAPI_CALL debug_report(VkDebugReportFlagsEXT flags, VkDebugReportObj/;"	f	typeref:typename:VKAPI_ATTR VkBool32 VKAPI_CALL	file:
debug_report	./examples/example_sdl2_vulkan/main.cpp	/^static VKAPI_ATTR VkBool32 VKAPI_CALL debug_report(VkDebugReportFlagsEXT flags, VkDebugReportObj/;"	f	typeref:typename:VKAPI_ATTR VkBool32 VKAPI_CALL	file:
defaultQueue	./backends/imgui_impl_wgpu.cpp	/^    WGPUQueue               defaultQueue = nullptr;$/;"	m	struct:ImGui_ImplWGPU_Data	typeref:typename:WGPUQueue	file:
delete_length	./imstb_textedit.h	/^   IMSTB_TEXTEDIT_POSITIONTYPE  delete_length;$/;"	m	struct:__anond05b37a10108	typeref:typename:IMSTB_TEXTEDIT_POSITIONTYPE
depthPixelFormat	./backends/imgui_impl_metal.mm	/^@property (nonatomic, assign) MTLPixelFormat depthPixelFormat;$/;"	p	interface:FramebufferDescriptor
depthStencilFormat	./backends/imgui_impl_wgpu.cpp	/^    WGPUTextureFormat       depthStencilFormat = WGPUTextureFormat_Undefined;$/;"	m	struct:ImGui_ImplWGPU_Data	typeref:typename:WGPUTextureFormat	file:
depthStencilState	./backends/imgui_impl_metal.mm	/^@property (nonatomic, strong) id<MTLDepthStencilState>      depthStencilState;$/;"	p	interface:MetalContext
dequeueReusableBufferOfLength:device:	./backends/imgui_impl_metal.mm	/^- (MetalBuffer*)dequeueReusableBufferOfLength:(NSUInteger)length device:(id<MTLDevice>)device;$/;"	m	interface:MetalContext
dequeueReusableBufferOfLength:device:	./backends/imgui_impl_metal.mm	/^{$/;"	m	implementation:MetalContext
device	./backends/imgui_impl_metal.mm	/^@property (nonatomic, strong) id<MTLDevice>                 device;$/;"	p	interface:MetalContext
device	./examples/example_apple_metal/main.mm	/^@property (nonatomic, strong) id <MTLDevice> device;$/;"	p	interface:AppViewController
direction	./imstb_truetype.h	/^   float direction;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
direction	./imstb_truetype.h	/^   int direction;$/;"	m	struct:stbtt__active_edge	typeref:typename:int
dispatchKeyEvent	./examples/example_android_opengl3/android/app/src/main/java/MainActivity.kt	/^    override fun dispatchKeyEvent(event: KeyEvent): Boolean {$/;"	m	class:imgui.example.android.MainActivity
doCommandBySelector:	./backends/imgui_impl_osx.mm	/^{$/;"	m	implementation:KeyEventResponder
drawInMTKView:	./examples/example_apple_metal/main.mm	/^{$/;"	m	implementation:AppViewController
drawRect:	./examples/example_apple_opengl2/main.mm	/^-(void)drawRect:(NSRect)bounds              { [self updateAndDrawDemoView]; }$/;"	m	implementation:AppView
dx	./imstb_truetype.h	/^   int x,dx;$/;"	m	struct:stbtt__active_edge	typeref:typename:int
e	./imgui.h	/^        const char*     e;$/;"	m	struct:ImGuiTextFilter::ImGuiTextRange	typeref:typename:const char *
empty	./imgui.h	/^        bool            empty() const                   { return b == e; }$/;"	f	struct:ImGuiTextFilter::ImGuiTextRange	typeref:typename:bool
empty	./imgui.h	/^    bool                empty() const           { return Buf.Size <= 1; }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:bool
empty	./imgui.h	/^    inline bool         empty() const                       { return Size == 0; }$/;"	f	struct:ImVector	typeref:typename:bool
empty	./imgui_internal.h	/^    bool    empty() const               { return Buf.Size == 0; }$/;"	f	struct:ImChunkStream	typeref:typename:bool
end	./imgui.h	/^    const char*         end() const             { return Buf.Data ? &Buf.back() : EmptyString; }/;"	f	struct:ImGuiTextBuffer	typeref:typename:const char *
end	./imgui.h	/^    inline T*           end()                               { return Data + Size; }$/;"	f	struct:ImVector	typeref:typename:T *
end	./imgui.h	/^    inline const T*     end() const                         { return Data + Size; }$/;"	f	struct:ImVector	typeref:typename:const T *
end	./imgui_internal.h	/^    T*      end()                       { return (T*)(void*)(Buf.Data + Buf.Size); }$/;"	f	struct:ImChunkStream	typeref:typename:T *
end	./imgui_internal.h	/^    inline T*           end()                       { return DataEnd; }$/;"	f	struct:ImSpan	typeref:typename:T *
end	./imgui_internal.h	/^    inline const T*     end() const                 { return DataEnd; }$/;"	f	struct:ImSpan	typeref:typename:const T *
endif	./backends/imgui_impl_metal.h	/^#endif$/;"	C	protocol:MTLDevice
equal	./imstb_truetype.h	/^static int equal(float *a, float *b)$/;"	f	typeref:typename:int
erase	./imgui.h	/^    inline T*           erase(const T* it)                  { IM_ASSERT(it >= Data && it < Data /;"	f	struct:ImVector	typeref:typename:T *
erase	./imgui.h	/^    inline T*           erase(const T* it, const T* it_last){ IM_ASSERT(it >= Data && it < Data /;"	f	struct:ImVector	typeref:typename:T *
erase_unsorted	./imgui.h	/^    inline T*           erase_unsorted(const T* it)         { IM_ASSERT(it >= Data && it < Data /;"	f	struct:ImVector	typeref:typename:T *
err	./misc/freetype/imgui_freetype.cpp	/^    FT_Error            err = FT_Err_Ok;$/;"	m	struct:LunasvgPortState	typeref:typename:FT_Error	file:
example_glfw_vulkan	./examples/example_glfw_vulkan/CMakeLists.txt	/^add_executable(example_glfw_vulkan ${sources} ${IMGUI_DIR}\/backends\/imgui_impl_glfw.cpp ${IMGU/;"	t
example_glfw_wgpu	./examples/example_glfw_wgpu/CMakeLists.txt	/^add_executable(example_glfw_wgpu$/;"	t
extra	./imstb_rectpack.h	/^   stbrp_node extra[2]; \/\/ we allocate two extra nodes so optimal user-node-count is 'width' n/;"	m	struct:stbrp_context	typeref:typename:stbrp_node[2]
ey	./imstb_truetype.h	/^   float ey;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
fdselect	./imstb_truetype.h	/^   stbtt__buf fdselect;               \/\/ map from glyph to fontdict$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
fdx	./imstb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
fdy	./imstb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
find	./imgui.h	/^    inline T*           find(const T& v)                    { T* data = Data;  const T* data_end/;"	f	struct:ImVector	typeref:typename:T *
find	./imgui.h	/^    inline const T*     find(const T& v) const              { const T* data = Data;  const T* da/;"	f	struct:ImVector	typeref:typename:const T *
find_erase	./imgui.h	/^    inline bool         find_erase(const T& v)              { const T* it = find(v); if (it < Da/;"	f	struct:ImVector	typeref:typename:bool
find_erase_unsorted	./imgui.h	/^    inline bool         find_erase_unsorted(const T& v)     { const T* it = find(v); if (it < Da/;"	f	struct:ImVector	typeref:typename:bool
find_erase_unsorted	./imgui_draw.cpp	/^    void    find_erase_unsorted(int idx)        { for (int i = Size - 1; i >= 0; i--) if (Data[i/;"	f	struct:ImTriangulatorNodeSpan	typeref:typename:void	file:
find_index	./imgui.h	/^    inline int          find_index(const T& v) const        { const T* data_end = Data + Size; c/;"	f	struct:ImVector	typeref:typename:int
firstRectForCharacterRange:actualRange:	./backends/imgui_impl_osx.mm	/^{$/;"	m	implementation:KeyEventResponder
first_char	./imstb_textedit.h	/^   int first_char, length; \/\/ first char of row, and length$/;"	m	struct:__anond05b37a10508	typeref:typename:int
first_free	./imstb_truetype.h	/^   void   *first_free;$/;"	m	struct:stbtt__hheap	typeref:typename:void *
first_unicode_codepoint_in_range	./imstb_truetype.h	/^   int first_unicode_codepoint_in_range;  \/\/ if non-zero, then the chars are continuous, and t/;"	m	struct:__anon97bae1980508	typeref:typename:int
first_x	./imstb_truetype.h	/^   float first_x, first_y;$/;"	m	struct:__anon97bae1980f08	typeref:typename:float
first_y	./imstb_truetype.h	/^   float first_x, first_y;$/;"	m	struct:__anon97bae1980f08	typeref:typename:float
fontTexture	./backends/imgui_impl_metal.mm	/^@property (nonatomic, strong, nullable) id<MTLTexture>      fontTexture;$/;"	p	interface:MetalContext
font_size	./imstb_truetype.h	/^   float font_size;$/;"	m	struct:__anon97bae1980508	typeref:typename:float
fontdicts	./imstb_truetype.h	/^   stbtt__buf fontdicts;              \/\/ array of font dicts$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
fontstart	./imstb_truetype.h	/^   int              fontstart;         \/\/ offset of start of font$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
frameIndex	./backends/imgui_impl_dx12.cpp	/^    UINT                        frameIndex;$/;"	m	struct:ImGui_ImplDX12_Data	typeref:typename:UINT	file:
frameIndex	./backends/imgui_impl_wgpu.cpp	/^    unsigned int            frameIndex = UINT_MAX;$/;"	m	struct:ImGui_ImplWGPU_Data	typeref:typename:unsigned int	file:
framebufferDescriptor	./backends/imgui_impl_metal.mm	/^@property (nonatomic, strong) FramebufferDescriptor*        framebufferDescriptor; \/\/ framebuf/;"	p	interface:MetalContext
free_head	./imstb_rectpack.h	/^   stbrp_node *free_head;$/;"	m	struct:stbrp_context	typeref:typename:stbrp_node *
front	./imgui.h	/^    inline T&           front()                             { IM_ASSERT(Size > 0); return Data[0/;"	f	struct:ImVector	typeref:typename:T &
front	./imgui.h	/^    inline const T&     front() const                       { IM_ASSERT(Size > 0); return Data[0/;"	f	struct:ImVector	typeref:typename:const T &
funcs	./imgui.cpp	/^            struct funcs { static bool IsLegacyNativeDupe(ImGuiKey key) { return key >= 0 && key/;"	s	function:ImGui::ShowMetricsWindow	file:
funcs	./imgui.cpp	/^            struct funcs { static bool IsLegacyNativeDupe(ImGuiKey) { return false; } };$/;"	s	function:ImGui::ShowMetricsWindow	file:
funcs	./imgui_demo.cpp	/^            struct funcs { static bool IsLegacyNativeDupe(ImGuiKey key) { return key >= 0 && key/;"	s	function:ShowDemoWindowInputs	file:
funcs	./imgui_demo.cpp	/^            struct funcs { static bool IsLegacyNativeDupe(ImGuiKey) { return false; } };$/;"	s	function:ShowDemoWindowInputs	file:
fx	./imstb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
g_Allocator	./examples/example_glfw_vulkan/main.cpp	/^static VkAllocationCallbacks*   g_Allocator = nullptr;$/;"	v	typeref:typename:VkAllocationCallbacks *	file:
g_Allocator	./examples/example_sdl2_vulkan/main.cpp	/^static VkAllocationCallbacks*   g_Allocator = nullptr;$/;"	v	typeref:typename:VkAllocationCallbacks *	file:
g_App	./examples/example_android_opengl3/main.cpp	/^static struct android_app*  g_App = nullptr;$/;"	v	typeref:struct:android_app *	file:
g_DebugReport	./examples/example_glfw_vulkan/main.cpp	/^static VkDebugReportCallbackEXT g_DebugReport = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkDebugReportCallbackEXT	file:
g_DebugReport	./examples/example_sdl2_vulkan/main.cpp	/^static VkDebugReportCallbackEXT g_DebugReport = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkDebugReportCallbackEXT	file:
g_DescriptorPool	./examples/example_glfw_vulkan/main.cpp	/^static VkDescriptorPool         g_DescriptorPool = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkDescriptorPool	file:
g_DescriptorPool	./examples/example_sdl2_vulkan/main.cpp	/^static VkDescriptorPool         g_DescriptorPool = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkDescriptorPool	file:
g_Device	./examples/example_glfw_vulkan/main.cpp	/^static VkDevice                 g_Device = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkDevice	file:
g_Device	./examples/example_sdl2_vulkan/main.cpp	/^static VkDevice                 g_Device = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkDevice	file:
g_DeviceLost	./examples/example_win32_directx9/main.cpp	/^static bool                     g_DeviceLost = false;$/;"	v	typeref:typename:bool	file:
g_EglContext	./examples/example_android_opengl3/main.cpp	/^static EGLContext           g_EglContext = EGL_NO_CONTEXT;$/;"	v	typeref:typename:EGLContext	file:
g_EglDisplay	./examples/example_android_opengl3/main.cpp	/^static EGLDisplay           g_EglDisplay = EGL_NO_DISPLAY;$/;"	v	typeref:typename:EGLDisplay	file:
g_EglSurface	./examples/example_android_opengl3/main.cpp	/^static EGLSurface           g_EglSurface = EGL_NO_SURFACE;$/;"	v	typeref:typename:EGLSurface	file:
g_FunctionsLoaded	./backends/imgui_impl_vulkan.cpp	/^static bool g_FunctionsLoaded = false;$/;"	v	typeref:typename:bool	file:
g_FunctionsLoaded	./backends/imgui_impl_vulkan.cpp	/^static bool g_FunctionsLoaded = true;$/;"	v	typeref:typename:bool	file:
g_Height	./examples/example_win32_opengl3/main.cpp	/^static int              g_Height;$/;"	v	typeref:typename:int	file:
g_IniFilename	./examples/example_android_opengl3/main.cpp	/^static std::string          g_IniFilename = "";$/;"	v	typeref:typename:std::string	file:
g_Initialized	./examples/example_android_opengl3/main.cpp	/^static bool                 g_Initialized = false;$/;"	v	typeref:typename:bool	file:
g_Instance	./examples/example_glfw_vulkan/main.cpp	/^static VkInstance               g_Instance = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkInstance	file:
g_Instance	./examples/example_sdl2_vulkan/main.cpp	/^static VkInstance               g_Instance = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkInstance	file:
g_LogTag	./backends/imgui_impl_android.cpp	/^static char                                     g_LogTag[] = "ImGuiExample";$/;"	v	typeref:typename:char[]	file:
g_LogTag	./examples/example_android_opengl3/main.cpp	/^static char                 g_LogTag[] = "ImGuiExample";$/;"	v	typeref:typename:char[]	file:
g_MainWindow	./examples/example_win32_opengl3/main.cpp	/^static WGL_WindowData   g_MainWindow;$/;"	v	typeref:typename:WGL_WindowData	file:
g_MainWindowData	./examples/example_glfw_vulkan/main.cpp	/^static ImGui_ImplVulkanH_Window g_MainWindowData;$/;"	v	typeref:typename:ImGui_ImplVulkanH_Window	file:
g_MainWindowData	./examples/example_sdl2_vulkan/main.cpp	/^static ImGui_ImplVulkanH_Window g_MainWindowData;$/;"	v	typeref:typename:ImGui_ImplVulkanH_Window	file:
g_MinImageCount	./examples/example_glfw_vulkan/main.cpp	/^static int                      g_MinImageCount = 2;$/;"	v	typeref:typename:int	file:
g_MinImageCount	./examples/example_sdl2_vulkan/main.cpp	/^static uint32_t                 g_MinImageCount = 2;$/;"	v	typeref:typename:uint32_t	file:
g_PhysicalDevice	./examples/example_glfw_vulkan/main.cpp	/^static VkPhysicalDevice         g_PhysicalDevice = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkPhysicalDevice	file:
g_PhysicalDevice	./examples/example_sdl2_vulkan/main.cpp	/^static VkPhysicalDevice         g_PhysicalDevice = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkPhysicalDevice	file:
g_PipelineCache	./examples/example_glfw_vulkan/main.cpp	/^static VkPipelineCache          g_PipelineCache = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkPipelineCache	file:
g_PipelineCache	./examples/example_sdl2_vulkan/main.cpp	/^static VkPipelineCache          g_PipelineCache = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkPipelineCache	file:
g_Queue	./examples/example_glfw_vulkan/main.cpp	/^static VkQueue                  g_Queue = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkQueue	file:
g_Queue	./examples/example_sdl2_vulkan/main.cpp	/^static VkQueue                  g_Queue = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkQueue	file:
g_QueueFamily	./examples/example_glfw_vulkan/main.cpp	/^static uint32_t                 g_QueueFamily = (uint32_t)-1;$/;"	v	typeref:typename:uint32_t	file:
g_QueueFamily	./examples/example_sdl2_vulkan/main.cpp	/^static uint32_t                 g_QueueFamily = (uint32_t)-1;$/;"	v	typeref:typename:uint32_t	file:
g_ResizeHeight	./examples/example_win32_directx10/main.cpp	/^static UINT                     g_ResizeWidth = 0, g_ResizeHeight = 0;$/;"	v	typeref:typename:UINT	file:
g_ResizeHeight	./examples/example_win32_directx11/main.cpp	/^static UINT                     g_ResizeWidth = 0, g_ResizeHeight = 0;$/;"	v	typeref:typename:UINT	file:
g_ResizeHeight	./examples/example_win32_directx9/main.cpp	/^static UINT                     g_ResizeWidth = 0, g_ResizeHeight = 0;$/;"	v	typeref:typename:UINT	file:
g_ResizeWidth	./examples/example_win32_directx10/main.cpp	/^static UINT                     g_ResizeWidth = 0, g_ResizeHeight = 0;$/;"	v	typeref:typename:UINT	file:
g_ResizeWidth	./examples/example_win32_directx11/main.cpp	/^static UINT                     g_ResizeWidth = 0, g_ResizeHeight = 0;$/;"	v	typeref:typename:UINT	file:
g_ResizeWidth	./examples/example_win32_directx9/main.cpp	/^static UINT                     g_ResizeWidth = 0, g_ResizeHeight = 0;$/;"	v	typeref:typename:UINT	file:
g_SwapChainOccluded	./examples/example_win32_directx10/main.cpp	/^static bool                     g_SwapChainOccluded = false;$/;"	v	typeref:typename:bool	file:
g_SwapChainOccluded	./examples/example_win32_directx11/main.cpp	/^static bool                     g_SwapChainOccluded = false;$/;"	v	typeref:typename:bool	file:
g_SwapChainOccluded	./examples/example_win32_directx12/main.cpp	/^static bool                         g_SwapChainOccluded = false;$/;"	v	typeref:typename:bool	file:
g_SwapChainRebuild	./examples/example_glfw_vulkan/main.cpp	/^static bool                     g_SwapChainRebuild = false;$/;"	v	typeref:typename:bool	file:
g_SwapChainRebuild	./examples/example_sdl2_vulkan/main.cpp	/^static bool                     g_SwapChainRebuild = false;$/;"	v	typeref:typename:bool	file:
g_Time	./backends/imgui_impl_android.cpp	/^static double                                   g_Time = 0.0;$/;"	v	typeref:typename:double	file:
g_Time	./backends/imgui_impl_glut.cpp	/^static int g_Time = 0;          \/\/ Current time, in milliseconds$/;"	v	typeref:typename:int	file:
g_Width	./examples/example_win32_opengl3/main.cpp	/^static int              g_Width;$/;"	v	typeref:typename:int	file:
g_Window	./backends/imgui_impl_android.cpp	/^static ANativeWindow*                           g_Window;$/;"	v	typeref:typename:ANativeWindow *	file:
g_d3dpp	./examples/example_win32_directx9/main.cpp	/^static D3DPRESENT_PARAMETERS    g_d3dpp = {};$/;"	v	typeref:typename:D3DPRESENT_PARAMETERS	file:
g_fence	./examples/example_win32_directx12/main.cpp	/^static ID3D12Fence*                 g_fence = nullptr;$/;"	v	typeref:typename:ID3D12Fence *	file:
g_fenceEvent	./examples/example_win32_directx12/main.cpp	/^static HANDLE                       g_fenceEvent = nullptr;$/;"	v	typeref:typename:HANDLE	file:
g_fenceLastSignaledValue	./examples/example_win32_directx12/main.cpp	/^static UINT64                       g_fenceLastSignaledValue = 0;$/;"	v	typeref:typename:UINT64	file:
g_frameContext	./examples/example_win32_directx12/main.cpp	/^static FrameContext                 g_frameContext[NUM_FRAMES_IN_FLIGHT] = {};$/;"	v	typeref:typename:FrameContext[]	file:
g_frameIndex	./examples/example_win32_directx12/main.cpp	/^static UINT                         g_frameIndex = 0;$/;"	v	typeref:typename:UINT	file:
g_hRC	./examples/example_win32_opengl3/main.cpp	/^static HGLRC            g_hRC;$/;"	v	typeref:typename:HGLRC	file:
g_hSwapChainWaitableObject	./examples/example_win32_directx12/main.cpp	/^static HANDLE                       g_hSwapChainWaitableObject = nullptr;$/;"	v	typeref:typename:HANDLE	file:
g_mainRenderTargetDescriptor	./examples/example_win32_directx12/main.cpp	/^static D3D12_CPU_DESCRIPTOR_HANDLE  g_mainRenderTargetDescriptor[NUM_BACK_BUFFERS] = {};$/;"	v	typeref:typename:D3D12_CPU_DESCRIPTOR_HANDLE[]	file:
g_mainRenderTargetResource	./examples/example_win32_directx12/main.cpp	/^static ID3D12Resource*              g_mainRenderTargetResource[NUM_BACK_BUFFERS] = {};$/;"	v	typeref:typename:ID3D12Resource * []	file:
g_mainRenderTargetView	./examples/example_sdl2_directx11/main.cpp	/^static ID3D11RenderTargetView*  g_mainRenderTargetView = nullptr;$/;"	v	typeref:typename:ID3D11RenderTargetView *	file:
g_mainRenderTargetView	./examples/example_win32_directx10/main.cpp	/^static ID3D10RenderTargetView*  g_mainRenderTargetView = nullptr;$/;"	v	typeref:typename:ID3D10RenderTargetView *	file:
g_mainRenderTargetView	./examples/example_win32_directx11/main.cpp	/^static ID3D11RenderTargetView*  g_mainRenderTargetView = nullptr;$/;"	v	typeref:typename:ID3D11RenderTargetView *	file:
g_pD3D	./examples/example_win32_directx9/main.cpp	/^static LPDIRECT3D9              g_pD3D = nullptr;$/;"	v	typeref:typename:LPDIRECT3D9	file:
g_pSwapChain	./examples/example_sdl2_directx11/main.cpp	/^static IDXGISwapChain*          g_pSwapChain = nullptr;$/;"	v	typeref:typename:IDXGISwapChain *	file:
g_pSwapChain	./examples/example_win32_directx10/main.cpp	/^static IDXGISwapChain*          g_pSwapChain = nullptr;$/;"	v	typeref:typename:IDXGISwapChain *	file:
g_pSwapChain	./examples/example_win32_directx11/main.cpp	/^static IDXGISwapChain*          g_pSwapChain = nullptr;$/;"	v	typeref:typename:IDXGISwapChain *	file:
g_pSwapChain	./examples/example_win32_directx12/main.cpp	/^static IDXGISwapChain3*             g_pSwapChain = nullptr;$/;"	v	typeref:typename:IDXGISwapChain3 *	file:
g_pd3dCommandList	./examples/example_win32_directx12/main.cpp	/^static ID3D12GraphicsCommandList*   g_pd3dCommandList = nullptr;$/;"	v	typeref:typename:ID3D12GraphicsCommandList *	file:
g_pd3dCommandQueue	./examples/example_win32_directx12/main.cpp	/^static ID3D12CommandQueue*          g_pd3dCommandQueue = nullptr;$/;"	v	typeref:typename:ID3D12CommandQueue *	file:
g_pd3dDevice	./examples/example_sdl2_directx11/main.cpp	/^static ID3D11Device*            g_pd3dDevice = nullptr;$/;"	v	typeref:typename:ID3D11Device *	file:
g_pd3dDevice	./examples/example_win32_directx10/main.cpp	/^static ID3D10Device*            g_pd3dDevice = nullptr;$/;"	v	typeref:typename:ID3D10Device *	file:
g_pd3dDevice	./examples/example_win32_directx11/main.cpp	/^static ID3D11Device*            g_pd3dDevice = nullptr;$/;"	v	typeref:typename:ID3D11Device *	file:
g_pd3dDevice	./examples/example_win32_directx12/main.cpp	/^static ID3D12Device*                g_pd3dDevice = nullptr;$/;"	v	typeref:typename:ID3D12Device *	file:
g_pd3dDevice	./examples/example_win32_directx9/main.cpp	/^static LPDIRECT3DDEVICE9        g_pd3dDevice = nullptr;$/;"	v	typeref:typename:LPDIRECT3DDEVICE9	file:
g_pd3dDeviceContext	./examples/example_sdl2_directx11/main.cpp	/^static ID3D11DeviceContext*     g_pd3dDeviceContext = nullptr;$/;"	v	typeref:typename:ID3D11DeviceContext *	file:
g_pd3dDeviceContext	./examples/example_win32_directx11/main.cpp	/^static ID3D11DeviceContext*     g_pd3dDeviceContext = nullptr;$/;"	v	typeref:typename:ID3D11DeviceContext *	file:
g_pd3dRtvDescHeap	./examples/example_win32_directx12/main.cpp	/^static ID3D12DescriptorHeap*        g_pd3dRtvDescHeap = nullptr;$/;"	v	typeref:typename:ID3D12DescriptorHeap *	file:
g_pd3dSrvDescHeap	./examples/example_win32_directx12/main.cpp	/^static ID3D12DescriptorHeap*        g_pd3dSrvDescHeap = nullptr;$/;"	v	typeref:typename:ID3D12DescriptorHeap *	file:
get_line_begin	./imgui_internal.h	/^    const char*     get_line_begin(const char* base, int n) { return base + LineOffsets[n]; }$/;"	f	struct:ImGuiTextIndex	typeref:typename:const char *
get_line_end	./imgui_internal.h	/^    const char*     get_line_end(const char* base, int n)   { return base + (n + 1 < LineOffsets/;"	f	struct:ImGuiTextIndex	typeref:typename:const char *
get_proc	./backends/imgui_impl_opengl3_loader.h	/^static GL3WglProc get_proc(const char *proc)$/;"	f	typeref:typename:GL3WglProc
gl	./backends/imgui_impl_opengl3_loader.h	/^    } gl;$/;"	m	union:ImGL3WProcs	typeref:struct:ImGL3WProcs::__anone6efc55b0108
glActiveTexture	./backends/imgui_impl_opengl3_loader.h	/^#define glActiveTexture /;"	d
glAttachShader	./backends/imgui_impl_opengl3_loader.h	/^#define glAttachShader /;"	d
glBindBuffer	./backends/imgui_impl_opengl3_loader.h	/^#define glBindBuffer /;"	d
glBindSampler	./backends/imgui_impl_opengl3_loader.h	/^#define glBindSampler /;"	d
glBindTexture	./backends/imgui_impl_opengl3_loader.h	/^#define glBindTexture /;"	d
glBindVertexArray	./backends/imgui_impl_opengl3.cpp	/^#define glBindVertexArray       glBindVertexArrayO/;"	d	file:
glBindVertexArray	./backends/imgui_impl_opengl3_loader.h	/^#define glBindVertexArray /;"	d
glBlendEquation	./backends/imgui_impl_opengl3_loader.h	/^#define glBlendEquation /;"	d
glBlendEquationSeparate	./backends/imgui_impl_opengl3_loader.h	/^#define glBlendEquationSeparate /;"	d
glBlendFuncSeparate	./backends/imgui_impl_opengl3_loader.h	/^#define glBlendFuncSeparate /;"	d
glBufferData	./backends/imgui_impl_opengl3_loader.h	/^#define glBufferData /;"	d
glBufferSubData	./backends/imgui_impl_opengl3_loader.h	/^#define glBufferSubData /;"	d
glClear	./backends/imgui_impl_opengl3_loader.h	/^#define glClear /;"	d
glClearColor	./backends/imgui_impl_opengl3_loader.h	/^#define glClearColor /;"	d
glCompileShader	./backends/imgui_impl_opengl3_loader.h	/^#define glCompileShader /;"	d
glCreateProgram	./backends/imgui_impl_opengl3_loader.h	/^#define glCreateProgram /;"	d
glCreateShader	./backends/imgui_impl_opengl3_loader.h	/^#define glCreateShader /;"	d
glDeleteBuffers	./backends/imgui_impl_opengl3_loader.h	/^#define glDeleteBuffers /;"	d
glDeleteProgram	./backends/imgui_impl_opengl3_loader.h	/^#define glDeleteProgram /;"	d
glDeleteShader	./backends/imgui_impl_opengl3_loader.h	/^#define glDeleteShader /;"	d
glDeleteTextures	./backends/imgui_impl_opengl3_loader.h	/^#define glDeleteTextures /;"	d
glDeleteVertexArrays	./backends/imgui_impl_opengl3.cpp	/^#define glDeleteVertexArrays    glDeleteVertexArraysO/;"	d	file:
glDeleteVertexArrays	./backends/imgui_impl_opengl3_loader.h	/^#define glDeleteVertexArrays /;"	d
glDetachShader	./backends/imgui_impl_opengl3_loader.h	/^#define glDetachShader /;"	d
glDisable	./backends/imgui_impl_opengl3_loader.h	/^#define glDisable /;"	d
glDisableVertexAttribArray	./backends/imgui_impl_opengl3_loader.h	/^#define glDisableVertexAttribArray /;"	d
glDrawElements	./backends/imgui_impl_opengl3_loader.h	/^#define glDrawElements /;"	d
glDrawElementsBaseVertex	./backends/imgui_impl_opengl3_loader.h	/^#define glDrawElementsBaseVertex /;"	d
glEnable	./backends/imgui_impl_opengl3_loader.h	/^#define glEnable /;"	d
glEnableVertexAttribArray	./backends/imgui_impl_opengl3_loader.h	/^#define glEnableVertexAttribArray /;"	d
glFlush	./backends/imgui_impl_opengl3_loader.h	/^#define glFlush /;"	d
glGenBuffers	./backends/imgui_impl_opengl3_loader.h	/^#define glGenBuffers /;"	d
glGenTextures	./backends/imgui_impl_opengl3_loader.h	/^#define glGenTextures /;"	d
glGenVertexArrays	./backends/imgui_impl_opengl3.cpp	/^#define glGenVertexArrays       glGenVertexArraysO/;"	d	file:
glGenVertexArrays	./backends/imgui_impl_opengl3_loader.h	/^#define glGenVertexArrays /;"	d
glGetAttribLocation	./backends/imgui_impl_opengl3_loader.h	/^#define glGetAttribLocation /;"	d
glGetError	./backends/imgui_impl_opengl3_loader.h	/^#define glGetError /;"	d
glGetIntegerv	./backends/imgui_impl_opengl3_loader.h	/^#define glGetIntegerv /;"	d
glGetProgramInfoLog	./backends/imgui_impl_opengl3_loader.h	/^#define glGetProgramInfoLog /;"	d
glGetProgramiv	./backends/imgui_impl_opengl3_loader.h	/^#define glGetProgramiv /;"	d
glGetShaderInfoLog	./backends/imgui_impl_opengl3_loader.h	/^#define glGetShaderInfoLog /;"	d
glGetShaderiv	./backends/imgui_impl_opengl3_loader.h	/^#define glGetShaderiv /;"	d
glGetString	./backends/imgui_impl_opengl3_loader.h	/^#define glGetString /;"	d
glGetStringi	./backends/imgui_impl_opengl3_loader.h	/^#define glGetStringi /;"	d
glGetUniformLocation	./backends/imgui_impl_opengl3_loader.h	/^#define glGetUniformLocation /;"	d
glGetVertexAttribPointerv	./backends/imgui_impl_opengl3_loader.h	/^#define glGetVertexAttribPointerv /;"	d
glGetVertexAttribiv	./backends/imgui_impl_opengl3_loader.h	/^#define glGetVertexAttribiv /;"	d
glIsEnabled	./backends/imgui_impl_opengl3_loader.h	/^#define glIsEnabled /;"	d
glIsProgram	./backends/imgui_impl_opengl3_loader.h	/^#define glIsProgram /;"	d
glLinkProgram	./backends/imgui_impl_opengl3_loader.h	/^#define glLinkProgram /;"	d
glPixelStorei	./backends/imgui_impl_opengl3_loader.h	/^#define glPixelStorei /;"	d
glPolygonMode	./backends/imgui_impl_opengl3_loader.h	/^#define glPolygonMode /;"	d
glReadPixels	./backends/imgui_impl_opengl3_loader.h	/^#define glReadPixels /;"	d
glScissor	./backends/imgui_impl_opengl3_loader.h	/^#define glScissor /;"	d
glShaderSource	./backends/imgui_impl_opengl3_loader.h	/^#define glShaderSource /;"	d
glTexImage2D	./backends/imgui_impl_opengl3_loader.h	/^#define glTexImage2D /;"	d
glTexParameteri	./backends/imgui_impl_opengl3_loader.h	/^#define glTexParameteri /;"	d
glUniform1i	./backends/imgui_impl_opengl3_loader.h	/^#define glUniform1i /;"	d
glUniformMatrix4fv	./backends/imgui_impl_opengl3_loader.h	/^#define glUniformMatrix4fv /;"	d
glUseProgram	./backends/imgui_impl_opengl3_loader.h	/^#define glUseProgram /;"	d
glVertexAttribPointer	./backends/imgui_impl_opengl3_loader.h	/^#define glVertexAttribPointer /;"	d
glViewport	./backends/imgui_impl_opengl3_loader.h	/^#define glViewport /;"	d
glfw_error_callback	./examples/example_glfw_metal/main.mm	/^static void glfw_error_callback(int error, const char* description)$/;"	f
glfw_error_callback	./examples/example_glfw_opengl2/main.cpp	/^static void glfw_error_callback(int error, const char* description)$/;"	f	typeref:typename:void	file:
glfw_error_callback	./examples/example_glfw_opengl3/main.cpp	/^static void glfw_error_callback(int error, const char* description)$/;"	f	typeref:typename:void	file:
glfw_error_callback	./examples/example_glfw_vulkan/main.cpp	/^static void glfw_error_callback(int error, const char* description)$/;"	f	typeref:typename:void	file:
glfw_error_callback	./examples/example_glfw_wgpu/main.cpp	/^static void glfw_error_callback(int error, const char* description)$/;"	f	typeref:typename:void	file:
glyf	./imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
glyph1	./imstb_truetype.h	/^   int glyph1; \/\/ use stbtt_FindGlyphIndex$/;"	m	struct:stbtt_kerningentry	typeref:typename:int
glyph2	./imstb_truetype.h	/^   int glyph2;$/;"	m	struct:stbtt_kerningentry	typeref:typename:int
gpos	./imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
green	./examples/libs/glfw/include/GLFW/glfw3.h	/^    unsigned short* green;$/;"	m	struct:GLFWgammaramp	typeref:typename:unsigned short *
greenBits	./examples/libs/glfw/include/GLFW/glfw3.h	/^    int greenBits;$/;"	m	struct:GLFWvidmode	typeref:typename:int
gsubrs	./imstb_truetype.h	/^   stbtt__buf gsubrs;                 \/\/ global charstring subroutines index$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
h	./imstb_rectpack.h	/^   stbrp_coord    w, h;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
h	./imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect	typeref:typename:int
h	./imstb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anon97bae1980808	typeref:typename:int
hDC	./examples/example_win32_opengl3/main.cpp	/^struct WGL_WindowData { HDC hDC; };$/;"	m	struct:WGL_WindowData	typeref:typename:HDC	file:
hFontSrvCpuDescHandle	./backends/imgui_impl_dx12.cpp	/^    D3D12_CPU_DESCRIPTOR_HANDLE hFontSrvCpuDescHandle;$/;"	m	struct:ImGui_ImplDX12_Data	typeref:typename:D3D12_CPU_DESCRIPTOR_HANDLE	file:
hFontSrvGpuDescHandle	./backends/imgui_impl_dx12.cpp	/^    D3D12_GPU_DESCRIPTOR_HANDLE hFontSrvGpuDescHandle;$/;"	m	struct:ImGui_ImplDX12_Data	typeref:typename:D3D12_GPU_DESCRIPTOR_HANDLE	file:
hWnd	./backends/imgui_impl_win32.cpp	/^    HWND                        hWnd;$/;"	m	struct:ImGui_ImplWin32_Data	typeref:typename:HWND	file:
h_oversample	./imstb_truetype.h	/^   unsigned char h_oversample, v_oversample; \/\/ don't set these, they're used internally$/;"	m	struct:__anon97bae1980508	typeref:typename:unsigned char
h_oversample	./imstb_truetype.h	/^   unsigned int   h_oversample, v_oversample;$/;"	m	struct:stbtt_pack_context	typeref:typename:unsigned int
handleAppCmd	./examples/example_android_opengl3/main.cpp	/^static void handleAppCmd(struct android_app* app, int32_t appCmd)$/;"	f	typeref:typename:void	file:
handleInputEvent	./examples/example_android_opengl3/main.cpp	/^static int32_t handleInputEvent(struct android_app* app, AInputEvent* inputEvent)$/;"	f	typeref:typename:int32_t	file:
hasMarkedText	./backends/imgui_impl_osx.mm	/^{$/;"	m	implementation:KeyEventResponder
has_preferred_x	./imstb_textedit.h	/^   unsigned char has_preferred_x;$/;"	m	struct:__anond05b37a10308	typeref:typename:unsigned char
hash	./backends/imgui_impl_metal.mm	/^{$/;"	m	implementation:FramebufferDescriptor
head	./imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
head	./imstb_truetype.h	/^   struct stbtt__hheap_chunk *head;$/;"	m	struct:stbtt__hheap	typeref:struct:stbtt__hheap_chunk *
height	./examples/libs/glfw/include/GLFW/glfw3.h	/^    int height;$/;"	m	struct:GLFWimage	typeref:typename:int
height	./examples/libs/glfw/include/GLFW/glfw3.h	/^    int height;$/;"	m	struct:GLFWvidmode	typeref:typename:int
height	./imstb_rectpack.h	/^   int height;$/;"	m	struct:stbrp_context	typeref:typename:int
height	./imstb_textedit.h	/^   float height; \/\/ height of line$/;"	m	struct:__anond05b37a10508	typeref:typename:float
height	./imstb_truetype.h	/^   int   height;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
height	./imstb_truetype.h	/^   int width,height;$/;"	m	struct:__anon97bae1981108	typeref:typename:int
heuristic	./imstb_rectpack.h	/^   int heuristic;$/;"	m	struct:stbrp_context	typeref:typename:int
hhea	./imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
hideSoftInput	./examples/example_android_opengl3/android/app/src/main/java/MainActivity.kt	/^    fun hideSoftInput() {$/;"	m	class:imgui.example.android.MainActivity
hmtx	./imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
iOS / OSX Metal example	./examples/example_apple_metal/README.md	/^# iOS \/ OSX Metal example$/;"	c
id	./backends/imgui_impl_metal.h	/^IMGUI_IMPL_API bool ImGui_ImplMetal_CreateDeviceObjects(id<MTLDevice> device);$/;"	C	protocol:MTLDevice
id	./backends/imgui_impl_metal.h	/^IMGUI_IMPL_API bool ImGui_ImplMetal_CreateFontsTexture(id<MTLDevice> device);$/;"	C	protocol:MTLDevice
id	./backends/imgui_impl_metal.h	/^IMGUI_IMPL_API bool ImGui_ImplMetal_Init(id<MTLDevice> device);$/;"	C	protocol:MTLDevice
id	./backends/imgui_impl_osx.mm	/^+ (id)_windowResizeNorthWestSouthEastCursor;$/;"	C	interface:NSCursor
id	./imstb_rectpack.h	/^   int            id;$/;"	m	struct:stbrp_rect	typeref:typename:int
id	./imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect	typeref:typename:int
ignored	./examples/libs/usynergy/uSynergy.h	/^typedef struct { int ignored; } *					uSynergyCookie;$/;"	m	struct:__anon23b8519a0108	typeref:typename:int
imgl3wGetProcAddress	./backends/imgui_impl_opengl3_loader.h	/^GL3WglProc imgl3wGetProcAddress(const char *proc) { return get_proc(proc); }$/;"	f	typeref:typename:GL3WglProc
imgl3wInit	./backends/imgui_impl_opengl3_loader.h	/^int imgl3wInit(void)$/;"	f	typeref:typename:int
imgl3wInit2	./backends/imgui_impl_opengl3_loader.h	/^int imgl3wInit2(GL3WGetProcAddressProc proc)$/;"	f	typeref:typename:int
imgl3wIsSupported	./backends/imgui_impl_opengl3_loader.h	/^int imgl3wIsSupported(int major, int minor)$/;"	f	typeref:typename:int
imgl3wProcs	./backends/imgui_impl_opengl3_loader.h	/^GL3W_API union ImGL3WProcs imgl3wProcs;$/;"	v	typeref:union:ImGL3WProcs
imgui.example.android	./examples/example_android_opengl3/android/app/src/main/java/MainActivity.kt	/^package imgui.example.android$/;"	p
imgui_example_glfw_vulkan	./examples/example_glfw_vulkan/CMakeLists.txt	/^project(imgui_example_glfw_vulkan C CXX)$/;"	p
imgui_example_glfw_wgpu	./examples/example_glfw_wgpu/CMakeLists.txt	/^project(imgui_example_glfw_wgpu C CXX)$/;"	p
imgui_freetype	./misc/freetype/README.md	/^# imgui_freetype$/;"	c
indexToLocFormat	./imstb_truetype.h	/^   int indexToLocFormat;              \/\/ format needed to map from glyph index to glyph$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
index_from_ptr	./imgui.h	/^    inline int          index_from_ptr(const T* it) const   { IM_ASSERT(it >= Data && it < Data /;"	f	struct:ImVector	typeref:typename:int
index_from_ptr	./imgui_internal.h	/^    inline int  index_from_ptr(const T* it) const   { IM_ASSERT(it >= Data && it < DataEnd); con/;"	f	struct:ImSpan	typeref:typename:int
index_map	./imstb_truetype.h	/^   int index_map;                     \/\/ a cmap mapping for our chosen character encoding$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
init	./backends/imgui_impl_metal.mm	/^{$/;"	m	implementation:MetalContext
init	./examples/example_apple_metal/main.mm	/^{$/;"	m	implementation:AppDelegate
initInfo	./backends/imgui_impl_wgpu.cpp	/^    ImGui_ImplWGPU_InitInfo initInfo;$/;"	m	struct:ImGui_ImplWGPU_Data	typeref:typename:ImGui_ImplWGPU_InitInfo	file:
initWithBuffer:	./backends/imgui_impl_metal.mm	/^- (instancetype)initWithBuffer:(id<MTLBuffer>)buffer;$/;"	m	interface:MetalBuffer
initWithBuffer:	./backends/imgui_impl_metal.mm	/^{$/;"	m	implementation:MetalBuffer
initWithNibName:bundle:	./examples/example_apple_metal/main.mm	/^{$/;"	m	implementation:AppViewController
initWithRenderPassDescriptor:	./backends/imgui_impl_metal.mm	/^- (instancetype)initWithRenderPassDescriptor:(MTLRenderPassDescriptor*)renderPassDescriptor;$/;"	m	interface:FramebufferDescriptor
initWithRenderPassDescriptor:	./backends/imgui_impl_metal.mm	/^{$/;"	m	implementation:FramebufferDescriptor
init_mode	./imstb_rectpack.h	/^   int init_mode;$/;"	m	struct:stbrp_context	typeref:typename:int
initialize	./examples/example_apple_opengl2/main.mm	/^{$/;"	m	implementation:AppView
initialized	./imstb_textedit.h	/^   unsigned char initialized;$/;"	m	struct:__anond05b37a10308	typeref:typename:unsigned char
inputMethodManager	./examples/example_android_opengl3/android/app/src/main/java/MainActivity.kt	/^        val inputMethodManager = getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodMa/;"	C	method:imgui.example.android.MainActivity.hideSoftInput
inputMethodManager	./examples/example_android_opengl3/android/app/src/main/java/MainActivity.kt	/^        val inputMethodManager = getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodMa/;"	C	method:imgui.example.android.MainActivity.showSoftInput
insert	./imgui.h	/^    inline T*           insert(const T* it, const T& v)     { IM_ASSERT(it >= Data && it <= Data/;"	f	struct:ImVector	typeref:typename:T *
insertText:replacementRange:	./backends/imgui_impl_osx.mm	/^{$/;"	m	implementation:KeyEventResponder
insert_length	./imstb_textedit.h	/^   IMSTB_TEXTEDIT_POSITIONTYPE  insert_length;$/;"	m	struct:__anond05b37a10108	typeref:typename:IMSTB_TEXTEDIT_POSITIONTYPE
insert_mode	./imstb_textedit.h	/^   unsigned char insert_mode;$/;"	m	struct:__anond05b37a10308	typeref:typename:unsigned char
integer	./imgui.cpp	/^    union { void* ptr; int integer; } tex_id_opaque;$/;"	m	union:FormatTextureIDForDebugDisplay::__anon1035f96e050a	typeref:typename:int	file:
invert	./imstb_truetype.h	/^   int invert;$/;"	m	struct:stbtt__edge	typeref:typename:int
isEqual:	./backends/imgui_impl_metal.mm	/^{$/;"	m	implementation:FramebufferDescriptor
is_separator	./imgui_widgets.cpp	/^static bool is_separator(unsigned int c)$/;"	f	namespace:ImStb	typeref:typename:bool	file:
is_word_boundary	./imstb_textedit.h	/^static int is_word_boundary( IMSTB_TEXTEDIT_STRING *str, int idx )$/;"	f	typeref:typename:int
is_word_boundary_from_left	./imgui_widgets.cpp	/^static int is_word_boundary_from_left(ImGuiInputTextState* obj, int idx)$/;"	f	namespace:ImStb	typeref:typename:int	file:
is_word_boundary_from_right	./imgui_widgets.cpp	/^static int is_word_boundary_from_right(ImGuiInputTextState* obj, int idx)$/;"	f	namespace:ImStb	typeref:typename:int	file:
iterator	./imgui.h	/^    typedef value_type*         iterator;$/;"	t	struct:ImVector	typeref:typename:value_type *
kern	./imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
key	./imgui.h	/^    ImGuiID     key;$/;"	m	struct:ImGuiStoragePair	typeref:typename:ImGuiID
keyDown:	./backends/imgui_impl_osx.mm	/^{$/;"	m	implementation:KeyEventResponder
keyUp:	./backends/imgui_impl_osx.mm	/^{$/;"	m	implementation:KeyEventResponder
khronos_float_t	./backends/imgui_impl_opengl3_loader.h	/^typedef          float         khronos_float_t;$/;"	t	typeref:typename:float
khronos_int16_t	./backends/imgui_impl_opengl3_loader.h	/^typedef signed   short int     khronos_int16_t;$/;"	t	typeref:typename:signed short int
khronos_int64_t	./backends/imgui_impl_opengl3_loader.h	/^typedef          int64_t       khronos_int64_t;$/;"	t	typeref:typename:int64_t
khronos_int64_t	./backends/imgui_impl_opengl3_loader.h	/^typedef signed   __int64       khronos_int64_t;$/;"	t	typeref:typename:signed __int64
khronos_int64_t	./backends/imgui_impl_opengl3_loader.h	/^typedef signed   long long     khronos_int64_t;$/;"	t	typeref:typename:signed long long
khronos_int8_t	./backends/imgui_impl_opengl3_loader.h	/^typedef signed   char          khronos_int8_t;$/;"	t	typeref:typename:signed char
khronos_intptr_t	./backends/imgui_impl_opengl3_loader.h	/^typedef signed   long  int     khronos_intptr_t;$/;"	t	typeref:typename:signed long int
khronos_intptr_t	./backends/imgui_impl_opengl3_loader.h	/^typedef signed   long long int khronos_intptr_t;$/;"	t	typeref:typename:signed long long int
khronos_ssize_t	./backends/imgui_impl_opengl3_loader.h	/^typedef signed   long  int     khronos_ssize_t;$/;"	t	typeref:typename:signed long int
khronos_ssize_t	./backends/imgui_impl_opengl3_loader.h	/^typedef signed   long long int khronos_ssize_t;$/;"	t	typeref:typename:signed long long int
khronos_uint16_t	./backends/imgui_impl_opengl3_loader.h	/^typedef unsigned short int     khronos_uint16_t;$/;"	t	typeref:typename:unsigned short int
khronos_uint64_t	./backends/imgui_impl_opengl3_loader.h	/^typedef          uint64_t      khronos_uint64_t;$/;"	t	typeref:typename:uint64_t
khronos_uint64_t	./backends/imgui_impl_opengl3_loader.h	/^typedef unsigned __int64       khronos_uint64_t;$/;"	t	typeref:typename:unsigned __int64
khronos_uint64_t	./backends/imgui_impl_opengl3_loader.h	/^typedef unsigned long long     khronos_uint64_t;$/;"	t	typeref:typename:unsigned long long
khronos_uint8_t	./backends/imgui_impl_opengl3_loader.h	/^typedef unsigned char          khronos_uint8_t;$/;"	t	typeref:typename:unsigned char
lastBufferCachePurge	./backends/imgui_impl_metal.mm	/^@property (nonatomic, assign) double                        lastBufferCachePurge;$/;"	p	interface:MetalContext
lastReuseTime	./backends/imgui_impl_metal.mm	/^@property (nonatomic, assign) double        lastReuseTime;$/;"	p	interface:MetalBuffer
length	./imstb_textedit.h	/^   int first_char, length; \/\/ first char of row, and length$/;"	m	struct:__anond05b37a10508	typeref:typename:int
libgl	./backends/imgui_impl_opengl3_loader.h	/^static HMODULE libgl;$/;"	v	typeref:typename:HMODULE
loadView	./examples/example_apple_metal/main.mm	/^{$/;"	m	implementation:AppViewController
load_procs	./backends/imgui_impl_opengl3_loader.h	/^static void load_procs(GL3WGetProcAddressProc proc)$/;"	f	typeref:typename:void
loca	./imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
m_clientHeight	./examples/libs/usynergy/uSynergy.h	/^	uint16_t						m_clientHeight;									\/* Height of screen *\/$/;"	m	struct:__anon23b8519a0208	typeref:typename:uint16_t
m_clientName	./examples/libs/usynergy/uSynergy.h	/^	const char*						m_clientName;									\/* Name of Synergy Screen \/ Client *\/$/;"	m	struct:__anon23b8519a0208	typeref:typename:const char *
m_clientWidth	./examples/libs/usynergy/uSynergy.h	/^	uint16_t						m_clientWidth;									\/* Width of screen *\/$/;"	m	struct:__anon23b8519a0208	typeref:typename:uint16_t
m_clipboardCallback	./examples/libs/usynergy/uSynergy.h	/^	uSynergyClipboardCallback		m_clipboardCallback;							\/* Callback for clipboard events *\/$/;"	m	struct:__anon23b8519a0208	typeref:typename:uSynergyClipboardCallback
m_connectFunc	./examples/libs/usynergy/uSynergy.h	/^	uSynergyConnectFunc				m_connectFunc;									\/* Connect function *\/$/;"	m	struct:__anon23b8519a0208	typeref:typename:uSynergyConnectFunc
m_connected	./examples/libs/usynergy/uSynergy.h	/^	uSynergyBool					m_connected;									\/* Is our socket connected? *\/$/;"	m	struct:__anon23b8519a0208	typeref:typename:uSynergyBool
m_cookie	./examples/libs/usynergy/uSynergy.h	/^	uSynergyCookie					m_cookie;										\/* Cookie pointer passed to callback functions (can be N/;"	m	struct:__anon23b8519a0208	typeref:typename:uSynergyCookie
m_getTimeFunc	./examples/libs/usynergy/uSynergy.h	/^	uSynergyGetTimeFunc				m_getTimeFunc;									\/* Get current time function *\/$/;"	m	struct:__anon23b8519a0208	typeref:typename:uSynergyGetTimeFunc
m_hasReceivedHello	./examples/libs/usynergy/uSynergy.h	/^	uSynergyBool					m_hasReceivedHello;								\/* Have we received a 'Hello' from the server? *\/$/;"	m	struct:__anon23b8519a0208	typeref:typename:uSynergyBool
m_isCaptured	./examples/libs/usynergy/uSynergy.h	/^	uSynergyBool					m_isCaptured;									\/* Is Synergy active (i.e. this client is receiving inp/;"	m	struct:__anon23b8519a0208	typeref:typename:uSynergyBool
m_joystickButtons	./examples/libs/usynergy/uSynergy.h	/^	uint16_t						m_joystickButtons[USYNERGY_NUM_JOYSTICKS];		\/* Joystick button state *\/$/;"	m	struct:__anon23b8519a0208	typeref:typename:uint16_t[]
m_joystickCallback	./examples/libs/usynergy/uSynergy.h	/^	uSynergyJoystickCallback		m_joystickCallback;								\/* Callback for joystick events *\/$/;"	m	struct:__anon23b8519a0208	typeref:typename:uSynergyJoystickCallback
m_joystickSticks	./examples/libs/usynergy/uSynergy.h	/^	int8_t							m_joystickSticks[USYNERGY_NUM_JOYSTICKS][4];	\/* Joystick stick position in 2 axes/;"	m	struct:__anon23b8519a0208	typeref:typename:int8_t[][4]
m_keyboardCallback	./examples/libs/usynergy/uSynergy.h	/^	uSynergyKeyboardCallback		m_keyboardCallback;								\/* Callback for keyboard events *\/$/;"	m	struct:__anon23b8519a0208	typeref:typename:uSynergyKeyboardCallback
m_lastMessageTime	./examples/libs/usynergy/uSynergy.h	/^	uint32_t						m_lastMessageTime;								\/* Time at which last message was received *\/$/;"	m	struct:__anon23b8519a0208	typeref:typename:uint32_t
m_mouseButtonLeft	./examples/libs/usynergy/uSynergy.h	/^	uSynergyBool					m_mouseButtonLeft;								\/* Mouse left button *\/$/;"	m	struct:__anon23b8519a0208	typeref:typename:uSynergyBool
m_mouseButtonMiddle	./examples/libs/usynergy/uSynergy.h	/^	uSynergyBool					m_mouseButtonMiddle;							\/* Mouse middle button *\/$/;"	m	struct:__anon23b8519a0208	typeref:typename:uSynergyBool
m_mouseButtonRight	./examples/libs/usynergy/uSynergy.h	/^	uSynergyBool					m_mouseButtonRight;								\/* Mouse right button *\/$/;"	m	struct:__anon23b8519a0208	typeref:typename:uSynergyBool
m_mouseCallback	./examples/libs/usynergy/uSynergy.h	/^	uSynergyMouseCallback			m_mouseCallback;								\/* Callback for mouse events *\/$/;"	m	struct:__anon23b8519a0208	typeref:typename:uSynergyMouseCallback
m_mouseWheelX	./examples/libs/usynergy/uSynergy.h	/^	int16_t							m_mouseWheelX;									\/* Mouse wheel X position *\/$/;"	m	struct:__anon23b8519a0208	typeref:typename:int16_t
m_mouseWheelY	./examples/libs/usynergy/uSynergy.h	/^	int16_t							m_mouseWheelY;									\/* Mouse wheel Y position *\/$/;"	m	struct:__anon23b8519a0208	typeref:typename:int16_t
m_mouseX	./examples/libs/usynergy/uSynergy.h	/^	uint16_t						m_mouseX;										\/* Mouse X position *\/$/;"	m	struct:__anon23b8519a0208	typeref:typename:uint16_t
m_mouseY	./examples/libs/usynergy/uSynergy.h	/^	uint16_t						m_mouseY;										\/* Mouse Y position *\/$/;"	m	struct:__anon23b8519a0208	typeref:typename:uint16_t
m_receiveBuffer	./examples/libs/usynergy/uSynergy.h	/^	uint8_t							m_receiveBuffer[USYNERGY_RECEIVE_BUFFER_SIZE];	\/* Receive buffer *\/$/;"	m	struct:__anon23b8519a0208	typeref:typename:uint8_t[]
m_receiveFunc	./examples/libs/usynergy/uSynergy.h	/^	uSynergyReceiveFunc				m_receiveFunc;									\/* Receive data function *\/$/;"	m	struct:__anon23b8519a0208	typeref:typename:uSynergyReceiveFunc
m_receiveOfs	./examples/libs/usynergy/uSynergy.h	/^	int								m_receiveOfs;									\/* Receive buffer offset *\/$/;"	m	struct:__anon23b8519a0208	typeref:typename:int
m_replyBuffer	./examples/libs/usynergy/uSynergy.h	/^	uint8_t							m_replyBuffer[USYNERGY_REPLY_BUFFER_SIZE];		\/* Reply buffer *\/$/;"	m	struct:__anon23b8519a0208	typeref:typename:uint8_t[]
m_replyCur	./examples/libs/usynergy/uSynergy.h	/^	uint8_t*						m_replyCur;										\/* Write offset into reply buffer *\/$/;"	m	struct:__anon23b8519a0208	typeref:typename:uint8_t *
m_screenActiveCallback	./examples/libs/usynergy/uSynergy.h	/^	uSynergyScreenActiveCallback	m_screenActiveCallback;							\/* Callback for entering and leavin/;"	m	struct:__anon23b8519a0208	typeref:typename:uSynergyScreenActiveCallback
m_sendFunc	./examples/libs/usynergy/uSynergy.h	/^	uSynergySendFunc				m_sendFunc;										\/* Send data function *\/$/;"	m	struct:__anon23b8519a0208	typeref:typename:uSynergySendFunc
m_sequenceNumber	./examples/libs/usynergy/uSynergy.h	/^	uint32_t						m_sequenceNumber;								\/* Packet sequence number *\/$/;"	m	struct:__anon23b8519a0208	typeref:typename:uint32_t
m_sleepFunc	./examples/libs/usynergy/uSynergy.h	/^	uSynergySleepFunc				m_sleepFunc;									\/* Thread sleep function *\/$/;"	m	struct:__anon23b8519a0208	typeref:typename:uSynergySleepFunc
m_traceFunc	./examples/libs/usynergy/uSynergy.h	/^	uSynergyTraceFunc				m_traceFunc;									\/* Function for tracing status (can be NULL) *\/$/;"	m	struct:__anon23b8519a0208	typeref:typename:uSynergyTraceFunc
macOS	./examples/example_sdl2_opengl3/README.md	/^## macOS$/;"	s	chapter:How to Build
macOS	./examples/example_sdl3_opengl3/README.md	/^## macOS$/;"	s	chapter:How to Build
main	./examples/example_allegro5/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	./examples/example_apple_metal/main.mm	/^int main(int argc, char * argv[])$/;"	f
main	./examples/example_apple_metal/main.mm	/^int main(int argc, const char * argv[])$/;"	f
main	./examples/example_apple_opengl2/main.mm	/^int main(int argc, const char* argv[])$/;"	f
main	./examples/example_glfw_metal/main.mm	/^int main(int, char**)$/;"	f
main	./examples/example_glfw_opengl2/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	./examples/example_glfw_opengl3/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	./examples/example_glfw_vulkan/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	./examples/example_glfw_wgpu/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	./examples/example_glut_opengl2/main.cpp	/^int main(int argc, char** argv)$/;"	f	typeref:typename:int
main	./examples/example_null/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	./examples/example_sdl2_directx11/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	./examples/example_sdl2_metal/main.mm	/^int main(int, char**)$/;"	f
main	./examples/example_sdl2_opengl2/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	./examples/example_sdl2_opengl3/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	./examples/example_sdl2_sdlrenderer2/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	./examples/example_sdl2_vulkan/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	./examples/example_sdl3_opengl3/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	./examples/example_sdl3_sdlrenderer3/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	./examples/example_win32_directx10/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	./examples/example_win32_directx11/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	./examples/example_win32_directx12/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	./examples/example_win32_directx9/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	./examples/example_win32_opengl3/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	./misc/fonts/binary_to_compressed_c.cpp	/^int main(int argc, char** argv)$/;"	f	typeref:typename:int
main_clipboard	./imgui.cpp	/^static PasteboardRef main_clipboard = 0;$/;"	v	typeref:typename:PasteboardRef	file:
major	./backends/imgui_impl_opengl3_loader.h	/^static struct { int major, minor; } version;$/;"	m	struct:__anone6efc55b0208	typeref:typename:int
markedRange	./backends/imgui_impl_osx.mm	/^{$/;"	m	implementation:KeyEventResponder
matrix	./misc/freetype/imgui_freetype.cpp	/^    lunasvg::Matrix     matrix;$/;"	m	struct:LunasvgPortState	typeref:typename:lunasvg::Matrix	file:
max_size	./imgui.h	/^    inline int          max_size() const                    { return 0x7FFFFFFF \/ (int)sizeof(T/;"	f	struct:ImVector	typeref:typename:int
max_x	./imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anon97bae1980f08	typeref:typename:stbtt_int32
max_y	./imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anon97bae1980f08	typeref:typename:stbtt_int32
min_x	./imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anon97bae1980f08	typeref:typename:stbtt_int32
min_y	./imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anon97bae1980f08	typeref:typename:stbtt_int32
minor	./backends/imgui_impl_opengl3_loader.h	/^static struct { int major, minor; } version;$/;"	m	struct:__anone6efc55b0208	typeref:typename:int
mtkView	./examples/example_apple_metal/main.mm	/^@property (nonatomic, readonly) MTKView *mtkView;$/;"	p	interface:AppViewController
mtkView	./examples/example_apple_metal/main.mm	/^{$/;"	m	implementation:AppViewController
mtkView:drawableSizeWillChange:	./examples/example_apple_metal/main.mm	/^{$/;"	m	implementation:AppViewController
mvp	./backends/imgui_impl_dx10.cpp	/^    float   mvp[4][4];$/;"	m	struct:VERTEX_CONSTANT_BUFFER_DX10	typeref:typename:float[4][4]	file:
mvp	./backends/imgui_impl_dx11.cpp	/^    float   mvp[4][4];$/;"	m	struct:VERTEX_CONSTANT_BUFFER_DX11	typeref:typename:float[4][4]	file:
mvp	./backends/imgui_impl_dx12.cpp	/^    float   mvp[4][4];$/;"	m	struct:VERTEX_CONSTANT_BUFFER_DX12	typeref:typename:float[4][4]	file:
next	./imstb_rectpack.h	/^   stbrp_node  *next;$/;"	m	struct:stbrp_node	typeref:typename:stbrp_node *
next	./imstb_truetype.h	/^   struct stbtt__active_edge *next;$/;"	m	struct:stbtt__active_edge	typeref:struct:stbtt__active_edge *
next	./imstb_truetype.h	/^   struct stbtt__hheap_chunk *next;$/;"	m	struct:stbtt__hheap_chunk	typeref:struct:stbtt__hheap_chunk *
next_chunk	./imgui_internal.h	/^    T*      next_chunk(T* p)            { size_t HDR_SZ = 4; IM_ASSERT(p >= begin() && p < end()/;"	f	struct:ImChunkStream	typeref:typename:T *
nodes	./imstb_truetype.h	/^   void  *nodes;$/;"	m	struct:stbtt_pack_context	typeref:typename:void *
numFramesInFlight	./backends/imgui_impl_dx12.cpp	/^    UINT                        numFramesInFlight;$/;"	m	struct:ImGui_ImplDX12_Data	typeref:typename:UINT	file:
numFramesInFlight	./backends/imgui_impl_wgpu.cpp	/^    unsigned int            numFramesInFlight = 0;$/;"	m	struct:ImGui_ImplWGPU_Data	typeref:typename:unsigned int	file:
numGlyphs	./imstb_truetype.h	/^   int numGlyphs;                     \/\/ number of glyphs, needed for range checking$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
num_chars	./imstb_textedit.h	/^   int num_chars;$/;"	m	struct:__anond05b37a10408	typeref:typename:int
num_chars	./imstb_truetype.h	/^   int num_chars;$/;"	m	struct:__anon97bae1980508	typeref:typename:int
num_nodes	./imstb_rectpack.h	/^   int num_nodes;$/;"	m	struct:stbrp_context	typeref:typename:int
num_remaining_in_head_chunk	./imstb_truetype.h	/^   int    num_remaining_in_head_chunk;$/;"	m	struct:stbtt__hheap	typeref:typename:int
num_vertices	./imstb_truetype.h	/^   int num_vertices;$/;"	m	struct:__anon97bae1980f08	typeref:typename:int
offset_from_ptr	./imgui_internal.h	/^    int     offset_from_ptr(const T* p) { IM_ASSERT(p >= begin() && p < end()); const ptrdiff_t /;"	f	struct:ImChunkStream	typeref:typename:int
onApplicationBecomeActive:	./backends/imgui_impl_osx.mm	/^- (void)onApplicationBecomeActive:(NSNotification*)aNotification;$/;"	m	interface:ImGuiObserver
onApplicationBecomeActive:	./backends/imgui_impl_osx.mm	/^{$/;"	m	implementation:ImGuiObserver
onApplicationBecomeInactive:	./backends/imgui_impl_osx.mm	/^- (void)onApplicationBecomeInactive:(NSNotification*)aNotification;$/;"	m	interface:ImGuiObserver
onApplicationBecomeInactive:	./backends/imgui_impl_osx.mm	/^{$/;"	m	implementation:ImGuiObserver
onCreate	./examples/example_android_opengl3/android/app/src/main/java/MainActivity.kt	/^    public override fun onCreate(savedInstanceState: Bundle?) {$/;"	m	class:imgui.example.android.MainActivity
open_libgl	./backends/imgui_impl_opengl3_loader.h	/^static int open_libgl(void)$/;"	f	typeref:typename:int
operator !=	./imgui.h	/^static inline bool    operator!=(const ImVec2& lhs, const ImVec2& rhs)  { return lhs.x != rhs.x /;"	f	typeref:typename:bool
operator !=	./imgui.h	/^static inline bool    operator!=(const ImVec4& lhs, const ImVec4& rhs)  { return lhs.x != rhs.x /;"	f	typeref:typename:bool
operator *	./imgui.h	/^static inline ImVec2  operator*(const ImVec2& lhs, const ImVec2& rhs)   { return ImVec2(lhs.x * /;"	f	typeref:typename:ImVec2
operator *	./imgui.h	/^static inline ImVec2  operator*(const ImVec2& lhs, const float rhs)     { return ImVec2(lhs.x * /;"	f	typeref:typename:IM_MSVC_RUNTIME_CHECKS_OFF ImVec2
operator *	./imgui.h	/^static inline ImVec4  operator*(const ImVec4& lhs, const ImVec4& rhs)   { return ImVec4(lhs.x * /;"	f	typeref:typename:ImVec4
operator *=	./imgui.h	/^static inline ImVec2& operator*=(ImVec2& lhs, const ImVec2& rhs)        { lhs.x *= rhs.x; lhs.y /;"	f	typeref:typename:ImVec2 &
operator *=	./imgui.h	/^static inline ImVec2& operator*=(ImVec2& lhs, const float rhs)          { lhs.x *= rhs; lhs.y *=/;"	f	typeref:typename:ImVec2 &
operator +	./imgui.h	/^static inline ImVec2  operator+(const ImVec2& lhs, const ImVec2& rhs)   { return ImVec2(lhs.x + /;"	f	typeref:typename:ImVec2
operator +	./imgui.h	/^static inline ImVec4  operator+(const ImVec4& lhs, const ImVec4& rhs)   { return ImVec4(lhs.x + /;"	f	typeref:typename:ImVec4
operator +=	./imgui.h	/^static inline ImVec2& operator+=(ImVec2& lhs, const ImVec2& rhs)        { lhs.x += rhs.x; lhs.y /;"	f	typeref:typename:ImVec2 &
operator -	./imgui.h	/^static inline ImVec2  operator-(const ImVec2& lhs)                      { return ImVec2(-lhs.x, /;"	f	typeref:typename:ImVec2
operator -	./imgui.h	/^static inline ImVec2  operator-(const ImVec2& lhs, const ImVec2& rhs)   { return ImVec2(lhs.x - /;"	f	typeref:typename:ImVec2
operator -	./imgui.h	/^static inline ImVec4  operator-(const ImVec4& lhs, const ImVec4& rhs)   { return ImVec4(lhs.x - /;"	f	typeref:typename:ImVec4
operator -=	./imgui.h	/^static inline ImVec2& operator-=(ImVec2& lhs, const ImVec2& rhs)        { lhs.x -= rhs.x; lhs.y /;"	f	typeref:typename:ImVec2 &
operator /	./imgui.h	/^static inline ImVec2  operator\/(const ImVec2& lhs, const ImVec2& rhs)   { return ImVec2(lhs.x \//;"	f	typeref:typename:ImVec2
operator /	./imgui.h	/^static inline ImVec2  operator\/(const ImVec2& lhs, const float rhs)     { return ImVec2(lhs.x \//;"	f	typeref:typename:ImVec2
operator /=	./imgui.h	/^static inline ImVec2& operator\/=(ImVec2& lhs, const ImVec2& rhs)        { lhs.x \/= rhs.x; lhs./;"	f	typeref:typename:ImVec2 &
operator /=	./imgui.h	/^static inline ImVec2& operator\/=(ImVec2& lhs, const float rhs)          { lhs.x \/= rhs; lhs.y /;"	f	typeref:typename:ImVec2 &
operator =	./imgui.h	/^    inline ImVector<T>& operator=(const ImVector<T>& src)   { clear(); resize(src.Size); if (src/;"	f	struct:ImVector	typeref:typename:ImVector<T> &
operator ==	./imgui.h	/^static inline bool    operator==(const ImVec2& lhs, const ImVec2& rhs)  { return lhs.x == rhs.x /;"	f	typeref:typename:bool
operator ==	./imgui.h	/^static inline bool    operator==(const ImVec4& lhs, const ImVec4& rhs)  { return lhs.x == rhs.x /;"	f	typeref:typename:bool
operator ImU32	./imgui.h	/^    inline operator ImU32() const                                   { return ImGui::ColorConvert/;"	f	struct:ImColor
operator ImVec4	./imgui.h	/^    inline operator ImVec4() const                                  { return Value; }$/;"	f	struct:ImColor
operator []	./imgui.h	/^    inline T&           operator[](int i)                   { IM_ASSERT(i >= 0 && i < Size); ret/;"	f	struct:ImVector	typeref:typename:T &
operator []	./imgui.h	/^    inline char         operator[](int i) const { IM_ASSERT(Buf.Data != NULL); return Buf.Data[i/;"	f	struct:ImGuiTextBuffer	typeref:typename:char
operator []	./imgui.h	/^    inline const T&     operator[](int i) const             { IM_ASSERT(i >= 0 && i < Size); ret/;"	f	struct:ImVector	typeref:typename:const T &
operator []	./imgui_internal.h	/^    bool            operator[](int n) const     { n += OFFSET; IM_ASSERT(n >= 0 && n < BITCOUNT)/;"	f	struct:ImBitArray	typeref:typename:bool
operator []	./imgui_internal.h	/^    inline T&           operator[](int i)           { T* p = Data + i; IM_ASSERT(p >= Data && p /;"	f	struct:ImSpan	typeref:typename:T &
operator []	./imgui_internal.h	/^    inline const T&     operator[](int i) const     { const T* p = Data + i; IM_ASSERT(p >= Data/;"	f	struct:ImSpan	typeref:typename:const T &
operator [] 	./imgui.h	/^    float  operator[] (size_t idx) const    { IM_ASSERT(idx == 0 || idx == 1); return ((const fl/;"	f	struct:ImVec2	typeref:typename:float
operator [] 	./imgui.h	/^    float& operator[] (size_t idx)          { IM_ASSERT(idx == 0 || idx == 1); return ((float*)(/;"	f	struct:ImVec2	typeref:typename:float &
operator bool	./imgui.h	/^    operator bool() const { int current_frame = ImGui::GetFrameCount(); if (RefFrame == current_/;"	f	struct:ImGuiOnceUponAFrame
operator delete	./imgui.h	/^inline void  operator delete(void*, ImNewWrapper, void*)   {} \/\/ This is only required so we c/;"	f	typeref:typename:void
operator new	./imgui.h	/^inline void* operator new(size_t, ImNewWrapper, void* ptr) { return ptr; }$/;"	f	typeref:typename:void *
outliterals	./misc/fonts/binary_to_compressed_c.cpp	/^static void outliterals(stb_uchar *in, int numlit)$/;"	f	typeref:typename:void	file:
pBlendState	./backends/imgui_impl_dx10.cpp	/^    ID3D10BlendState*           pBlendState;$/;"	m	struct:ImGui_ImplDX10_Data	typeref:typename:ID3D10BlendState *	file:
pBlendState	./backends/imgui_impl_dx11.cpp	/^    ID3D11BlendState*           pBlendState;$/;"	m	struct:ImGui_ImplDX11_Data	typeref:typename:ID3D11BlendState *	file:
pDepthStencilState	./backends/imgui_impl_dx10.cpp	/^    ID3D10DepthStencilState*    pDepthStencilState;$/;"	m	struct:ImGui_ImplDX10_Data	typeref:typename:ID3D10DepthStencilState *	file:
pDepthStencilState	./backends/imgui_impl_dx11.cpp	/^    ID3D11DepthStencilState*    pDepthStencilState;$/;"	m	struct:ImGui_ImplDX11_Data	typeref:typename:ID3D11DepthStencilState *	file:
pFactory	./backends/imgui_impl_dx10.cpp	/^    IDXGIFactory*               pFactory;$/;"	m	struct:ImGui_ImplDX10_Data	typeref:typename:IDXGIFactory *	file:
pFactory	./backends/imgui_impl_dx11.cpp	/^    IDXGIFactory*               pFactory;$/;"	m	struct:ImGui_ImplDX11_Data	typeref:typename:IDXGIFactory *	file:
pFontSampler	./backends/imgui_impl_dx10.cpp	/^    ID3D10SamplerState*         pFontSampler;$/;"	m	struct:ImGui_ImplDX10_Data	typeref:typename:ID3D10SamplerState *	file:
pFontSampler	./backends/imgui_impl_dx11.cpp	/^    ID3D11SamplerState*         pFontSampler;$/;"	m	struct:ImGui_ImplDX11_Data	typeref:typename:ID3D11SamplerState *	file:
pFontTextureResource	./backends/imgui_impl_dx12.cpp	/^    ID3D12Resource*             pFontTextureResource;$/;"	m	struct:ImGui_ImplDX12_Data	typeref:typename:ID3D12Resource *	file:
pFontTextureView	./backends/imgui_impl_dx10.cpp	/^    ID3D10ShaderResourceView*   pFontTextureView;$/;"	m	struct:ImGui_ImplDX10_Data	typeref:typename:ID3D10ShaderResourceView *	file:
pFontTextureView	./backends/imgui_impl_dx11.cpp	/^    ID3D11ShaderResourceView*   pFontTextureView;$/;"	m	struct:ImGui_ImplDX11_Data	typeref:typename:ID3D11ShaderResourceView *	file:
pFrameResources	./backends/imgui_impl_dx12.cpp	/^    ImGui_ImplDX12_RenderBuffers* pFrameResources;$/;"	m	struct:ImGui_ImplDX12_Data	typeref:typename:ImGui_ImplDX12_RenderBuffers *	file:
pFrameResources	./backends/imgui_impl_wgpu.cpp	/^    FrameResources*         pFrameResources = nullptr;$/;"	m	struct:ImGui_ImplWGPU_Data	typeref:typename:FrameResources *	file:
pIB	./backends/imgui_impl_dx10.cpp	/^    ID3D10Buffer*               pIB;$/;"	m	struct:ImGui_ImplDX10_Data	typeref:typename:ID3D10Buffer *	file:
pIB	./backends/imgui_impl_dx11.cpp	/^    ID3D11Buffer*               pIB;$/;"	m	struct:ImGui_ImplDX11_Data	typeref:typename:ID3D11Buffer *	file:
pIB	./backends/imgui_impl_dx9.cpp	/^    LPDIRECT3DINDEXBUFFER9      pIB;$/;"	m	struct:ImGui_ImplDX9_Data	typeref:typename:LPDIRECT3DINDEXBUFFER9	file:
pInputLayout	./backends/imgui_impl_dx10.cpp	/^    ID3D10InputLayout*          pInputLayout;$/;"	m	struct:ImGui_ImplDX10_Data	typeref:typename:ID3D10InputLayout *	file:
pInputLayout	./backends/imgui_impl_dx11.cpp	/^    ID3D11InputLayout*          pInputLayout;$/;"	m	struct:ImGui_ImplDX11_Data	typeref:typename:ID3D11InputLayout *	file:
pPipelineState	./backends/imgui_impl_dx12.cpp	/^    ID3D12PipelineState*        pPipelineState;$/;"	m	struct:ImGui_ImplDX12_Data	typeref:typename:ID3D12PipelineState *	file:
pPixelShader	./backends/imgui_impl_dx10.cpp	/^    ID3D10PixelShader*          pPixelShader;$/;"	m	struct:ImGui_ImplDX10_Data	typeref:typename:ID3D10PixelShader *	file:
pPixelShader	./backends/imgui_impl_dx11.cpp	/^    ID3D11PixelShader*          pPixelShader;$/;"	m	struct:ImGui_ImplDX11_Data	typeref:typename:ID3D11PixelShader *	file:
pRasterizerState	./backends/imgui_impl_dx10.cpp	/^    ID3D10RasterizerState*      pRasterizerState;$/;"	m	struct:ImGui_ImplDX10_Data	typeref:typename:ID3D10RasterizerState *	file:
pRasterizerState	./backends/imgui_impl_dx11.cpp	/^    ID3D11RasterizerState*      pRasterizerState;$/;"	m	struct:ImGui_ImplDX11_Data	typeref:typename:ID3D11RasterizerState *	file:
pRootSignature	./backends/imgui_impl_dx12.cpp	/^    ID3D12RootSignature*        pRootSignature;$/;"	m	struct:ImGui_ImplDX12_Data	typeref:typename:ID3D12RootSignature *	file:
pVB	./backends/imgui_impl_dx10.cpp	/^    ID3D10Buffer*               pVB;$/;"	m	struct:ImGui_ImplDX10_Data	typeref:typename:ID3D10Buffer *	file:
pVB	./backends/imgui_impl_dx11.cpp	/^    ID3D11Buffer*               pVB;$/;"	m	struct:ImGui_ImplDX11_Data	typeref:typename:ID3D11Buffer *	file:
pVB	./backends/imgui_impl_dx9.cpp	/^    LPDIRECT3DVERTEXBUFFER9     pVB;$/;"	m	struct:ImGui_ImplDX9_Data	typeref:typename:LPDIRECT3DVERTEXBUFFER9	file:
pVertexConstantBuffer	./backends/imgui_impl_dx10.cpp	/^    ID3D10Buffer*               pVertexConstantBuffer;$/;"	m	struct:ImGui_ImplDX10_Data	typeref:typename:ID3D10Buffer *	file:
pVertexConstantBuffer	./backends/imgui_impl_dx11.cpp	/^    ID3D11Buffer*               pVertexConstantBuffer;$/;"	m	struct:ImGui_ImplDX11_Data	typeref:typename:ID3D11Buffer *	file:
pVertexShader	./backends/imgui_impl_dx10.cpp	/^    ID3D10VertexShader*         pVertexShader;$/;"	m	struct:ImGui_ImplDX10_Data	typeref:typename:ID3D10VertexShader *	file:
pVertexShader	./backends/imgui_impl_dx11.cpp	/^    ID3D11VertexShader*         pVertexShader;$/;"	m	struct:ImGui_ImplDX11_Data	typeref:typename:ID3D11VertexShader *	file:
pack_info	./imstb_truetype.h	/^   void *pack_info;$/;"	m	struct:stbtt_pack_context	typeref:typename:void *
padding	./imstb_truetype.h	/^      unsigned char type,padding;$/;"	m	struct:__anon97bae1980708	typeref:typename:unsigned char
padding	./imstb_truetype.h	/^   int   padding;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
padding1	./imstb_textedit.h	/^   unsigned char padding1, padding2, padding3;$/;"	m	struct:__anond05b37a10308	typeref:typename:unsigned char
padding2	./imstb_textedit.h	/^   unsigned char padding1, padding2, padding3;$/;"	m	struct:__anond05b37a10308	typeref:typename:unsigned char
padding3	./imstb_textedit.h	/^   unsigned char padding1, padding2, padding3;$/;"	m	struct:__anond05b37a10308	typeref:typename:unsigned char
parse_version	./backends/imgui_impl_opengl3_loader.h	/^static int parse_version(void)$/;"	f	typeref:typename:int
pd3dDevice	./backends/imgui_impl_dx10.cpp	/^    ID3D10Device*               pd3dDevice;$/;"	m	struct:ImGui_ImplDX10_Data	typeref:typename:ID3D10Device *	file:
pd3dDevice	./backends/imgui_impl_dx11.cpp	/^    ID3D11Device*               pd3dDevice;$/;"	m	struct:ImGui_ImplDX11_Data	typeref:typename:ID3D11Device *	file:
pd3dDevice	./backends/imgui_impl_dx12.cpp	/^    ID3D12Device*               pd3dDevice;$/;"	m	struct:ImGui_ImplDX12_Data	typeref:typename:ID3D12Device *	file:
pd3dDevice	./backends/imgui_impl_dx9.cpp	/^    LPDIRECT3DDEVICE9           pd3dDevice;$/;"	m	struct:ImGui_ImplDX9_Data	typeref:typename:LPDIRECT3DDEVICE9	file:
pd3dDeviceContext	./backends/imgui_impl_dx11.cpp	/^    ID3D11DeviceContext*        pd3dDeviceContext;$/;"	m	struct:ImGui_ImplDX11_Data	typeref:typename:ID3D11DeviceContext *	file:
pd3dSrvDescHeap	./backends/imgui_impl_dx12.cpp	/^    ID3D12DescriptorHeap*       pd3dSrvDescHeap;$/;"	m	struct:ImGui_ImplDX12_Data	typeref:typename:ID3D12DescriptorHeap *	file:
pipelineState	./backends/imgui_impl_wgpu.cpp	/^    WGPURenderPipeline      pipelineState = nullptr;$/;"	m	struct:ImGui_ImplWGPU_Data	typeref:typename:WGPURenderPipeline	file:
pixels	./examples/libs/glfw/include/GLFW/glfw3.h	/^    unsigned char* pixels;$/;"	m	struct:GLFWimage	typeref:typename:unsigned char *
pixels	./imstb_truetype.h	/^   unsigned char *pixels;$/;"	m	struct:__anon97bae1980808	typeref:typename:unsigned char *
pixels	./imstb_truetype.h	/^   unsigned char *pixels;$/;"	m	struct:stbtt_pack_context	typeref:typename:unsigned char *
pollUnicodeChar	./examples/example_android_opengl3/android/app/src/main/java/MainActivity.kt	/^    fun pollUnicodeChar(): Int {$/;"	m	class:imgui.example.android.MainActivity
pop_back	./imgui.h	/^    inline void         pop_back()                          { IM_ASSERT(Size > 0); Size--; }$/;"	f	struct:ImVector	typeref:typename:void
pos	./backends/imgui_impl_allegro5.cpp	/^    ImVec2          pos;$/;"	m	struct:ImDrawVertAllegro	typeref:typename:ImVec2	file:
pos	./backends/imgui_impl_dx9.cpp	/^    float    pos[3];$/;"	m	struct:CUSTOMVERTEX	typeref:typename:float[3]	file:
pos	./imgui.h	/^    ImVec2  pos;$/;"	m	struct:ImDrawVert	typeref:typename:ImVec2
preferred_x	./imstb_textedit.h	/^   float preferred_x; \/\/ this determines where the cursor up\/down tries to seek to along x$/;"	m	struct:__anond05b37a10308	typeref:typename:float
prepareOpenGL	./examples/example_apple_opengl2/main.mm	/^{$/;"	m	implementation:AppView
prev_first	./imstb_textedit.h	/^   int prev_first;  \/\/ first char of previous row$/;"	m	struct:__anond05b37a10508	typeref:typename:int
prev_link	./imstb_rectpack.h	/^   stbrp_node **prev_link;$/;"	m	struct:__anon804ea3c30308	typeref:typename:stbrp_node **
proc_names	./backends/imgui_impl_opengl3_loader.h	/^static const char *proc_names[] = {$/;"	v	typeref:typename:const char * []
proggy_clean_ttf_compressed_data_base85	./imgui_draw.cpp	/^static const char proggy_clean_ttf_compressed_data_base85[11980 + 1] =$/;"	v	typeref:typename:const char[]	file:
ptr	./backends/imgui_impl_opengl3_loader.h	/^    GL3WglProc ptr[59];$/;"	m	union:ImGL3WProcs	typeref:typename:GL3WglProc[59]
ptr	./imgui.cpp	/^    union { void* ptr; int integer; } tex_id_opaque;$/;"	m	union:FormatTextureIDForDebugDisplay::__anon1035f96e050a	typeref:typename:void *	file:
ptr_from_offset	./imgui_internal.h	/^    T*      ptr_from_offset(int off)    { IM_ASSERT(off >= 4 && off < Buf.Size); return (T*)(voi/;"	f	struct:ImChunkStream	typeref:typename:T *
push_back	./imgui.h	/^    inline void         push_back(const T& v)               { if (Size == Capacity) reserve(_gro/;"	f	struct:ImVector	typeref:typename:void
push_back	./imgui_draw.cpp	/^    void    push_back(ImTriangulatorNode* node) { Data[Size++] = node; }$/;"	f	struct:ImTriangulatorNodeSpan	typeref:typename:void	file:
push_front	./imgui.h	/^    inline void         push_front(const T& v)              { if (Size == 0) push_back(v); else /;"	f	struct:ImVector	typeref:typename:void
pvertices	./imstb_truetype.h	/^   stbtt_vertex *pvertices;$/;"	m	struct:__anon97bae1980f08	typeref:typename:stbtt_vertex *
rect_height_compare	./imstb_rectpack.h	/^static int STBRP__CDECL rect_height_compare(const void *a, const void *b)$/;"	f	typeref:typename:int STBRP__CDECL
rect_original_order	./imstb_rectpack.h	/^static int STBRP__CDECL rect_original_order(const void *a, const void *b)$/;"	f	typeref:typename:int STBRP__CDECL
red	./examples/libs/glfw/include/GLFW/glfw3.h	/^    unsigned short* red;$/;"	m	struct:GLFWgammaramp	typeref:typename:unsigned short *
redBits	./examples/libs/glfw/include/GLFW/glfw3.h	/^    int redBits;$/;"	m	struct:GLFWvidmode	typeref:typename:int
redo_char_point	./imstb_textedit.h	/^   int undo_char_point, redo_char_point;$/;"	m	struct:__anond05b37a10208	typeref:typename:int
redo_point	./imstb_textedit.h	/^   short undo_point, redo_point;$/;"	m	struct:__anond05b37a10208	typeref:typename:short
refreshRate	./examples/libs/glfw/include/GLFW/glfw3.h	/^    int refreshRate;$/;"	m	struct:GLFWvidmode	typeref:typename:int
renderPipelineStateCache	./backends/imgui_impl_metal.mm	/^@property (nonatomic, strong) NSMutableDictionary*          renderPipelineStateCache; \/\/ pipel/;"	p	interface:MetalContext
renderPipelineStateForFramebufferDescriptor:device:	./backends/imgui_impl_metal.mm	/^- (id<MTLRenderPipelineState>)renderPipelineStateForFramebufferDescriptor:(FramebufferDescriptor/;"	m	interface:MetalContext
renderPipelineStateForFramebufferDescriptor:device:	./backends/imgui_impl_metal.mm	/^{$/;"	m	implementation:MetalContext
renderResources	./backends/imgui_impl_wgpu.cpp	/^    RenderResources         renderResources;$/;"	m	struct:ImGui_ImplWGPU_Data	typeref:typename:RenderResources	file:
renderTargetFormat	./backends/imgui_impl_wgpu.cpp	/^    WGPUTextureFormat       renderTargetFormat = WGPUTextureFormat_Undefined;$/;"	m	struct:ImGui_ImplWGPU_Data	typeref:typename:WGPUTextureFormat	file:
reserve	./imgui.h	/^    inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) retu/;"	f	struct:ImVector	typeref:typename:void
reserve	./imgui.h	/^    void                reserve(int capacity)   { Buf.reserve(capacity); }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:void
reserve_discard	./imgui.h	/^    inline void         reserve_discard(int new_capacity)   { if (new_capacity <= Capacity) retu/;"	f	struct:ImVector	typeref:typename:void
reshape	./examples/example_apple_opengl2/main.mm	/^-(void)reshape                              { [super reshape]; [[self openGLContext] update]; [s/;"	m	implementation:AppView
resize	./imgui.h	/^    inline void         resize(int new_size)                { if (new_size > Capacity) reserve(_/;"	f	struct:ImVector	typeref:typename:void
resize	./imgui.h	/^    inline void         resize(int new_size, const T& v)    { if (new_size > Capacity) reserve(_/;"	f	struct:ImVector	typeref:typename:void
resize_border_def	./imgui.cpp	/^static const ImGuiResizeBorderDef resize_border_def[4] =$/;"	v	typeref:typename:const ImGuiResizeBorderDef[4]	file:
resize_grip_def	./imgui.cpp	/^static const ImGuiResizeGripDef resize_grip_def[4] =$/;"	v	typeref:typename:const ImGuiResizeGripDef[4]	file:
row_count_per_page	./imstb_textedit.h	/^   int row_count_per_page;$/;"	m	struct:__anond05b37a10308	typeref:typename:int
s0	./imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon97bae1980308	typeref:typename:float
s1	./imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon97bae1980308	typeref:typename:float
sAddString	./examples/libs/usynergy/uSynergy.c	/^static void sAddString(uSynergyContext *context, const char *string)$/;"	f	typeref:typename:void	file:
sAddUInt16	./examples/libs/usynergy/uSynergy.c	/^static void sAddUInt16(uSynergyContext *context, uint16_t value)$/;"	f	typeref:typename:void	file:
sAddUInt32	./examples/libs/usynergy/uSynergy.c	/^static void sAddUInt32(uSynergyContext *context, uint32_t value)$/;"	f	typeref:typename:void	file:
sAddUInt8	./examples/libs/usynergy/uSynergy.c	/^static void sAddUInt8(uSynergyContext *context, uint8_t value)$/;"	f	typeref:typename:void	file:
sNetToNative16	./examples/libs/usynergy/uSynergy.c	/^static int16_t sNetToNative16(const unsigned char *value)$/;"	f	typeref:typename:int16_t	file:
sNetToNative32	./examples/libs/usynergy/uSynergy.c	/^static int32_t sNetToNative32(const unsigned char *value)$/;"	f	typeref:typename:int32_t	file:
sProcessMessage	./examples/libs/usynergy/uSynergy.c	/^static void sProcessMessage(uSynergyContext *context, const uint8_t *message)$/;"	f	typeref:typename:void	file:
sSendJoystickCallback	./examples/libs/usynergy/uSynergy.c	/^static void sSendJoystickCallback(uSynergyContext *context, uint8_t joyNum)$/;"	f	typeref:typename:void	file:
sSendKeyboardCallback	./examples/libs/usynergy/uSynergy.c	/^static void sSendKeyboardCallback(uSynergyContext *context, uint16_t key, uint16_t modifiers, uS/;"	f	typeref:typename:void	file:
sSendMouseCallback	./examples/libs/usynergy/uSynergy.c	/^static void sSendMouseCallback(uSynergyContext *context)$/;"	f	typeref:typename:void	file:
sSendReply	./examples/libs/usynergy/uSynergy.c	/^static uSynergyBool sSendReply(uSynergyContext *context)$/;"	f	typeref:typename:uSynergyBool	file:
sSetDisconnected	./examples/libs/usynergy/uSynergy.c	/^static void sSetDisconnected(uSynergyContext *context)$/;"	f	typeref:typename:void	file:
sTrace	./examples/libs/usynergy/uSynergy.c	/^static void sTrace(uSynergyContext *context, const char* text)$/;"	f	typeref:typename:void	file:
sUpdateContext	./examples/libs/usynergy/uSynergy.c	/^static void sUpdateContext(uSynergyContext *context)$/;"	f	typeref:typename:void	file:
s_current_sort_specs	./imgui_demo.cpp	/^    static const ImGuiTableSortSpecs* s_current_sort_specs;$/;"	m	struct:ExampleAsset	typeref:typename:const ImGuiTableSortSpecs *	file:
s_current_sort_specs	./imgui_demo.cpp	/^    static const ImGuiTableSortSpecs* s_current_sort_specs;$/;"	m	struct:__anon38b7fb720511::MyItem	typeref:typename:const ImGuiTableSortSpecs *	file:
s_current_sort_specs	./imgui_demo.cpp	/^const ImGuiTableSortSpecs* ExampleAsset::s_current_sort_specs = NULL;$/;"	m	class:ExampleAsset	typeref:typename:const ImGuiTableSortSpecs *
s_current_sort_specs	./imgui_demo.cpp	/^const ImGuiTableSortSpecs* MyItem::s_current_sort_specs = NULL;$/;"	m	class:__anon38b7fb720511::MyItem	typeref:typename:const ImGuiTableSortSpecs *
sampleCount	./backends/imgui_impl_metal.mm	/^@property (nonatomic, assign) unsigned long  sampleCount;$/;"	p	interface:FramebufferDescriptor
select_end	./imstb_textedit.h	/^   int select_end;$/;"	m	struct:__anond05b37a10308	typeref:typename:int
select_start	./imstb_textedit.h	/^   int select_start;          \/\/ selection start point$/;"	m	struct:__anond05b37a10308	typeref:typename:int
selectedRange	./backends/imgui_impl_osx.mm	/^{$/;"	m	implementation:KeyEventResponder
set	./imgui_internal.h	/^    inline void         set(T* data, T* data_end)   { Data = data; DataEnd = data_end; }$/;"	f	struct:ImSpan	typeref:typename:void
set	./imgui_internal.h	/^    inline void         set(T* data, int size)      { Data = data; DataEnd = data + size; }$/;"	f	struct:ImSpan	typeref:typename:void
setImePosX:imePosY:	./backends/imgui_impl_osx.mm	/^{$/;"	m	implementation:KeyEventResponder
setMarkedText:selectedRange:replacementRange:	./backends/imgui_impl_osx.mm	/^{$/;"	m	implementation:KeyEventResponder
setupMenu	./examples/example_apple_opengl2/main.mm	/^{$/;"	m	implementation:AppDelegate
showSoftInput	./examples/example_android_opengl3/android/app/src/main/java/MainActivity.kt	/^    fun showSoftInput() {$/;"	m	class:imgui.example.android.MainActivity
show_another_window	./examples/example_glut_opengl2/main.cpp	/^static bool show_another_window = false;$/;"	v	typeref:typename:bool	file:
show_demo_window	./examples/example_glut_opengl2/main.cpp	/^static bool show_demo_window = true;$/;"	v	typeref:typename:bool	file:
shrink	./imgui.h	/^    inline void         shrink(int new_size)                { IM_ASSERT(new_size <= Size); Size /;"	f	struct:ImVector	typeref:typename:void
single_line	./imstb_textedit.h	/^   unsigned char single_line;$/;"	m	struct:__anond05b37a10308	typeref:typename:unsigned char
size	./examples/libs/glfw/include/GLFW/glfw3.h	/^    unsigned int size;$/;"	m	struct:GLFWgammaramp	typeref:typename:unsigned int
size	./imgui.h	/^    inline int          size() const                        { return Size; }$/;"	f	struct:ImVector	typeref:typename:int
size	./imgui.h	/^    int                 size() const            { return Buf.Size ? Buf.Size - 1 : 0; }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:int
size	./imgui_internal.h	/^    inline int          size() const                { return (int)(ptrdiff_t)(DataEnd - Data); }$/;"	f	struct:ImSpan	typeref:typename:int
size	./imgui_internal.h	/^    int             size()                                  { return LineOffsets.Size; }$/;"	f	struct:ImGuiTextIndex	typeref:typename:int
size	./imgui_internal.h	/^    int     size() const                { return Buf.Size; }$/;"	f	struct:ImChunkStream	typeref:typename:int
size	./imstb_truetype.h	/^   int size;$/;"	m	struct:__anon97bae1980108	typeref:typename:int
size_in_bytes	./imgui.h	/^    inline int          size_in_bytes() const               { return Size * (int)sizeof(T); }$/;"	f	struct:ImVector	typeref:typename:int
size_in_bytes	./imgui_internal.h	/^    inline int          size_in_bytes() const       { return (int)(ptrdiff_t)(DataEnd - Data) * /;"	f	struct:ImSpan	typeref:typename:int
skip_missing	./imstb_truetype.h	/^   int   skip_missing;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
snprintf	./imgui_demo.cpp	/^#define snprintf    _snprintf$/;"	d	file:
split	./imgui.cpp	/^void ImGuiTextFilter::ImGuiTextRange::split(char separator, ImVector<ImGuiTextRange>* out) const$/;"	f	class:ImGuiTextFilter::ImGuiTextRange	typeref:typename:void
started	./imstb_truetype.h	/^   int started;$/;"	m	struct:__anon97bae1980f08	typeref:typename:int
stb__barrier_in_b	./imgui_draw.cpp	/^static const unsigned char *stb__barrier_in_b;$/;"	v	typeref:typename:const unsigned char *	file:
stb__barrier_out_b	./imgui_draw.cpp	/^static unsigned char *stb__barrier_out_e, *stb__barrier_out_b;$/;"	v	typeref:typename:unsigned char *	file:
stb__barrier_out_e	./imgui_draw.cpp	/^static unsigned char *stb__barrier_out_e, *stb__barrier_out_b;$/;"	v	typeref:typename:unsigned char *	file:
stb__dout	./imgui_draw.cpp	/^static unsigned char *stb__dout;$/;"	v	typeref:typename:unsigned char *	file:
stb__hashsize	./misc/fonts/binary_to_compressed_c.cpp	/^static  stb_uint stb__hashsize = 32768;$/;"	v	typeref:typename:stb_uint	file:
stb__hc	./misc/fonts/binary_to_compressed_c.cpp	/^#define stb__hc(/;"	d	file:
stb__hc2	./misc/fonts/binary_to_compressed_c.cpp	/^#define stb__hc2(/;"	d	file:
stb__hc3	./misc/fonts/binary_to_compressed_c.cpp	/^#define stb__hc3(/;"	d	file:
stb__in2	./imgui_draw.cpp	/^#define stb__in2(/;"	d	file:
stb__in3	./imgui_draw.cpp	/^#define stb__in3(/;"	d	file:
stb__in4	./imgui_draw.cpp	/^#define stb__in4(/;"	d	file:
stb__lit	./imgui_draw.cpp	/^static void stb__lit(const unsigned char *data, unsigned int length)$/;"	f	typeref:typename:void	file:
stb__match	./imgui_draw.cpp	/^static void stb__match(const unsigned char *data, unsigned int length)$/;"	f	typeref:typename:void	file:
stb__nc	./misc/fonts/binary_to_compressed_c.cpp	/^#define stb__nc(/;"	d	file:
stb__out	./misc/fonts/binary_to_compressed_c.cpp	/^static stb_uchar *stb__out;$/;"	v	typeref:typename:stb_uchar *	file:
stb__outbytes	./misc/fonts/binary_to_compressed_c.cpp	/^static stb_uint   stb__outbytes;$/;"	v	typeref:typename:stb_uint	file:
stb__outfile	./misc/fonts/binary_to_compressed_c.cpp	/^static FILE      *stb__outfile;$/;"	v	typeref:typename:FILE *	file:
stb__running_adler	./misc/fonts/binary_to_compressed_c.cpp	/^static unsigned int stb__running_adler;$/;"	v	typeref:typename:unsigned int	file:
stb__window	./misc/fonts/binary_to_compressed_c.cpp	/^static int stb__window = 0x40000; \/\/ 256K$/;"	v	typeref:typename:int	file:
stb__write	./misc/fonts/binary_to_compressed_c.cpp	/^static void stb__write(unsigned char v)$/;"	f	typeref:typename:void	file:
stb_adler32	./imgui_draw.cpp	/^static unsigned int stb_adler32(unsigned int adler32, unsigned char *buffer, unsigned int buflen/;"	f	typeref:typename:unsigned int	file:
stb_adler32	./misc/fonts/binary_to_compressed_c.cpp	/^static stb_uint stb_adler32(stb_uint adler32, stb_uchar *buffer, stb_uint buflen)$/;"	f	typeref:typename:stb_uint	file:
stb_compress	./misc/fonts/binary_to_compressed_c.cpp	/^stb_uint stb_compress(stb_uchar *out, stb_uchar *input, stb_uint length)$/;"	f	typeref:typename:stb_uint
stb_compress_chunk	./misc/fonts/binary_to_compressed_c.cpp	/^static int stb_compress_chunk(stb_uchar *history,$/;"	f	typeref:typename:int	file:
stb_compress_inner	./misc/fonts/binary_to_compressed_c.cpp	/^static int stb_compress_inner(stb_uchar *input, stb_uint length)$/;"	f	typeref:typename:int	file:
stb_decompress	./imgui_draw.cpp	/^static unsigned int stb_decompress(unsigned char *output, const unsigned char *i, unsigned int \//;"	f	typeref:typename:unsigned int	file:
stb_decompress_length	./imgui_draw.cpp	/^static unsigned int stb_decompress_length(const unsigned char *input)$/;"	f	typeref:typename:unsigned int	file:
stb_decompress_token	./imgui_draw.cpp	/^static const unsigned char *stb_decompress_token(const unsigned char *i)$/;"	f	typeref:typename:const unsigned char *	file:
stb_matchlen	./misc/fonts/binary_to_compressed_c.cpp	/^static unsigned int stb_matchlen(stb_uchar *m1, stb_uchar *m2, stb_uint maxlen)$/;"	f	typeref:typename:unsigned int	file:
stb_not_crap	./misc/fonts/binary_to_compressed_c.cpp	/^static int stb_not_crap(int best, int dist)$/;"	f	typeref:typename:int	file:
stb_out	./misc/fonts/binary_to_compressed_c.cpp	/^#define stb_out(/;"	d	file:
stb_out2	./misc/fonts/binary_to_compressed_c.cpp	/^static void stb_out2(stb_uint v) { stb_out(v >> 8); stb_out(v); }$/;"	f	typeref:typename:void	file:
stb_out3	./misc/fonts/binary_to_compressed_c.cpp	/^static void stb_out3(stb_uint v) { stb_out(v >> 16); stb_out(v >> 8); stb_out(v); }$/;"	f	typeref:typename:void	file:
stb_out4	./misc/fonts/binary_to_compressed_c.cpp	/^static void stb_out4(stb_uint v) { stb_out(v >> 24); stb_out(v >> 16); stb_out(v >> 8 ); stb_out/;"	f	typeref:typename:void	file:
stb_text_create_undo_record	./imstb_textedit.h	/^static StbUndoRecord *stb_text_create_undo_record(StbUndoState *state, int numchars)$/;"	f	typeref:typename:StbUndoRecord *
stb_text_createundo	./imstb_textedit.h	/^static IMSTB_TEXTEDIT_CHARTYPE *stb_text_createundo(StbUndoState *state, int pos, int insert_len/;"	f	typeref:typename:IMSTB_TEXTEDIT_CHARTYPE *
stb_text_locate_coord	./imstb_textedit.h	/^static int stb_text_locate_coord(IMSTB_TEXTEDIT_STRING *str, float x, float y)$/;"	f	typeref:typename:int
stb_text_makeundo_delete	./imstb_textedit.h	/^static void stb_text_makeundo_delete(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state, int w/;"	f	typeref:typename:void
stb_text_makeundo_insert	./imstb_textedit.h	/^static void stb_text_makeundo_insert(STB_TexteditState *state, int where, int length)$/;"	f	typeref:typename:void
stb_text_makeundo_replace	./imstb_textedit.h	/^static void stb_text_makeundo_replace(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state, int /;"	f	typeref:typename:void
stb_text_redo	./imstb_textedit.h	/^static void stb_text_redo(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_text_undo	./imstb_textedit.h	/^static void stb_text_undo(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_clamp	./imstb_textedit.h	/^static void stb_textedit_clamp(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_clear_state	./imstb_textedit.h	/^static void stb_textedit_clear_state(STB_TexteditState *state, int is_single_line)$/;"	f	typeref:typename:void
stb_textedit_click	./imstb_textedit.h	/^static void stb_textedit_click(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state, float x, fl/;"	f	typeref:typename:void
stb_textedit_cut	./imstb_textedit.h	/^static int stb_textedit_cut(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:int
stb_textedit_delete	./imstb_textedit.h	/^static void stb_textedit_delete(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state, int where,/;"	f	typeref:typename:void
stb_textedit_delete_selection	./imstb_textedit.h	/^static void stb_textedit_delete_selection(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_discard_redo	./imstb_textedit.h	/^static void stb_textedit_discard_redo(StbUndoState *state)$/;"	f	typeref:typename:void
stb_textedit_discard_undo	./imstb_textedit.h	/^static void stb_textedit_discard_undo(StbUndoState *state)$/;"	f	typeref:typename:void
stb_textedit_drag	./imstb_textedit.h	/^static void stb_textedit_drag(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state, float x, flo/;"	f	typeref:typename:void
stb_textedit_find_charpos	./imstb_textedit.h	/^static void stb_textedit_find_charpos(StbFindState *find, IMSTB_TEXTEDIT_STRING *str, int n, int/;"	f	typeref:typename:void
stb_textedit_flush_redo	./imstb_textedit.h	/^static void stb_textedit_flush_redo(StbUndoState *state)$/;"	f	typeref:typename:void
stb_textedit_initialize_state	./imstb_textedit.h	/^static void stb_textedit_initialize_state(STB_TexteditState *state, int is_single_line)$/;"	f	typeref:typename:void
stb_textedit_key	./imstb_textedit.h	/^static void stb_textedit_key(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state, STB_TEXTEDIT_/;"	f	typeref:typename:void
stb_textedit_move_to_first	./imstb_textedit.h	/^static void stb_textedit_move_to_first(STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_move_to_last	./imstb_textedit.h	/^static void stb_textedit_move_to_last(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_move_to_word_next	./imstb_textedit.h	/^static int stb_textedit_move_to_word_next( IMSTB_TEXTEDIT_STRING *str, int c )$/;"	f	typeref:typename:int
stb_textedit_move_to_word_previous	./imstb_textedit.h	/^static int stb_textedit_move_to_word_previous( IMSTB_TEXTEDIT_STRING *str, int c )$/;"	f	typeref:typename:int
stb_textedit_paste	./imstb_textedit.h	/^static int stb_textedit_paste(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state, IMSTB_TEXTED/;"	f	typeref:typename:int
stb_textedit_paste_internal	./imstb_textedit.h	/^static int stb_textedit_paste_internal(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state, IMS/;"	f	typeref:typename:int
stb_textedit_prep_selection_at_cursor	./imstb_textedit.h	/^static void stb_textedit_prep_selection_at_cursor(STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_replace	./imgui_widgets.cpp	/^static void stb_textedit_replace(ImGuiInputTextState* str, STB_TexteditState* state, const IMSTB/;"	f	namespace:ImStb	typeref:typename:void	file:
stb_textedit_sortselection	./imstb_textedit.h	/^static void stb_textedit_sortselection(STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_uchar	./misc/fonts/binary_to_compressed_c.cpp	/^typedef unsigned char stb_uchar;$/;"	t	typeref:typename:unsigned char	file:
stb_uint	./misc/fonts/binary_to_compressed_c.cpp	/^typedef unsigned int stb_uint;$/;"	t	typeref:typename:unsigned int	file:
stbrp__findresult	./imstb_rectpack.h	/^} stbrp__findresult;$/;"	t	typeref:struct:__anon804ea3c30308
stbrp__skyline_find_best_pos	./imstb_rectpack.h	/^static stbrp__findresult stbrp__skyline_find_best_pos(stbrp_context *c, int width, int height)$/;"	f	typeref:typename:stbrp__findresult
stbrp__skyline_find_min_y	./imstb_rectpack.h	/^static int stbrp__skyline_find_min_y(stbrp_context *c, stbrp_node *first, int x0, int width, int/;"	f	typeref:typename:int
stbrp__skyline_pack_rectangle	./imstb_rectpack.h	/^static stbrp__findresult stbrp__skyline_pack_rectangle(stbrp_context *context, int width, int he/;"	f	typeref:typename:stbrp__findresult
stbrp_context	./imstb_rectpack.h	/^struct stbrp_context$/;"	s
stbrp_context	./imstb_rectpack.h	/^typedef struct stbrp_context stbrp_context;$/;"	t	typeref:struct:stbrp_context
stbrp_context	./imstb_truetype.h	/^} stbrp_context;$/;"	t	typeref:struct:__anon97bae1981108
stbrp_coord	./imstb_rectpack.h	/^typedef int            stbrp_coord;$/;"	t	typeref:typename:int
stbrp_coord	./imstb_truetype.h	/^typedef int stbrp_coord;$/;"	t	typeref:typename:int
stbrp_init_target	./imstb_rectpack.h	/^STBRP_DEF void stbrp_init_target(stbrp_context *context, int width, int height, stbrp_node *node/;"	f	typeref:typename:STBRP_DEF void
stbrp_init_target	./imstb_truetype.h	/^static void stbrp_init_target(stbrp_context *con, int pw, int ph, stbrp_node *nodes, int num_nod/;"	f	typeref:typename:void
stbrp_node	./imstb_rectpack.h	/^struct stbrp_node$/;"	s
stbrp_node	./imstb_rectpack.h	/^typedef struct stbrp_node    stbrp_node;$/;"	t	typeref:struct:stbrp_node
stbrp_node	./imstb_truetype.h	/^} stbrp_node;$/;"	t	typeref:struct:__anon97bae1981208
stbrp_pack_rects	./imstb_rectpack.h	/^STBRP_DEF int stbrp_pack_rects(stbrp_context *context, stbrp_rect *rects, int num_rects)$/;"	f	typeref:typename:STBRP_DEF int
stbrp_pack_rects	./imstb_truetype.h	/^static void stbrp_pack_rects(stbrp_context *con, stbrp_rect *rects, int num_rects)$/;"	f	typeref:typename:void
stbrp_rect	./imstb_rectpack.h	/^struct stbrp_rect$/;"	s
stbrp_rect	./imstb_rectpack.h	/^typedef struct stbrp_rect    stbrp_rect;$/;"	t	typeref:struct:stbrp_rect
stbrp_rect	./imstb_truetype.h	/^struct stbrp_rect$/;"	s
stbrp_rect	./imstb_truetype.h	/^typedef struct stbrp_rect stbrp_rect;$/;"	t	typeref:struct:stbrp_rect
stbrp_setup_allow_out_of_mem	./imstb_rectpack.h	/^STBRP_DEF void stbrp_setup_allow_out_of_mem(stbrp_context *context, int allow_out_of_mem)$/;"	f	typeref:typename:STBRP_DEF void
stbrp_setup_heuristic	./imstb_rectpack.h	/^STBRP_DEF void stbrp_setup_heuristic(stbrp_context *context, int heuristic)$/;"	f	typeref:typename:STBRP_DEF void
stbtt_BakeFontBitmap	./imstb_truetype.h	/^STBTT_DEF int stbtt_BakeFontBitmap(const unsigned char *data, int offset,$/;"	f	typeref:typename:STBTT_DEF int
stbtt_BakeFontBitmap_internal	./imstb_truetype.h	/^static int stbtt_BakeFontBitmap_internal(unsigned char *data, int offset,  \/\/ font location (u/;"	f	typeref:typename:int
stbtt_CompareUTF8toUTF16_bigendian	./imstb_truetype.h	/^STBTT_DEF int stbtt_CompareUTF8toUTF16_bigendian(const char *s1, int len1, const char *s2, int l/;"	f	typeref:typename:STBTT_DEF int
stbtt_CompareUTF8toUTF16_bigendian_internal	./imstb_truetype.h	/^static int stbtt_CompareUTF8toUTF16_bigendian_internal(char *s1, int len1, char *s2, int len2)$/;"	f	typeref:typename:int
stbtt_FindGlyphIndex	./imstb_truetype.h	/^STBTT_DEF int stbtt_FindGlyphIndex(const stbtt_fontinfo *info, int unicode_codepoint)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_FindMatchingFont	./imstb_truetype.h	/^STBTT_DEF int stbtt_FindMatchingFont(const unsigned char *fontdata, const char *name, int flags)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_FindMatchingFont_internal	./imstb_truetype.h	/^static int stbtt_FindMatchingFont_internal(unsigned char *font_collection, char *name_utf8, stbt/;"	f	typeref:typename:int
stbtt_FindSVGDoc	./imstb_truetype.h	/^STBTT_DEF stbtt_uint8 *stbtt_FindSVGDoc(const stbtt_fontinfo *info, int gl)$/;"	f	typeref:typename:STBTT_DEF stbtt_uint8 *
stbtt_FlattenCurves	./imstb_truetype.h	/^static stbtt__point *stbtt_FlattenCurves(stbtt_vertex *vertices, int num_verts, float objspace_f/;"	f	typeref:typename:stbtt__point *
stbtt_FreeBitmap	./imstb_truetype.h	/^STBTT_DEF void stbtt_FreeBitmap(unsigned char *bitmap, void *userdata)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_FreeSDF	./imstb_truetype.h	/^STBTT_DEF void stbtt_FreeSDF(unsigned char *bitmap, void *userdata)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_FreeShape	./imstb_truetype.h	/^STBTT_DEF void stbtt_FreeShape(const stbtt_fontinfo *info, stbtt_vertex *v)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetBakedQuad	./imstb_truetype.h	/^STBTT_DEF void stbtt_GetBakedQuad(const stbtt_bakedchar *chardata, int pw, int ph, int char_inde/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetCodepointBitmap	./imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetCodepointBitmap(const stbtt_fontinfo *info, float scale_x, flo/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetCodepointBitmapBox	./imstb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointBitmapBox(const stbtt_fontinfo *font, int codepoint, float scal/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetCodepointBitmapBoxSubpixel	./imstb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointBitmapBoxSubpixel(const stbtt_fontinfo *font, int codepoint, fl/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetCodepointBitmapSubpixel	./imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetCodepointBitmapSubpixel(const stbtt_fontinfo *info, float scal/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetCodepointBox	./imstb_truetype.h	/^STBTT_DEF int stbtt_GetCodepointBox(const stbtt_fontinfo *info, int codepoint, int *x0, int *y0,/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetCodepointHMetrics	./imstb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointHMetrics(const stbtt_fontinfo *info, int codepoint, int *advanc/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetCodepointKernAdvance	./imstb_truetype.h	/^STBTT_DEF int  stbtt_GetCodepointKernAdvance(const stbtt_fontinfo *info, int ch1, int ch2)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetCodepointSDF	./imstb_truetype.h	/^STBTT_DEF unsigned char * stbtt_GetCodepointSDF(const stbtt_fontinfo *info, float scale, int cod/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetCodepointSVG	./imstb_truetype.h	/^STBTT_DEF int stbtt_GetCodepointSVG(const stbtt_fontinfo *info, int unicode_codepoint, const cha/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetCodepointShape	./imstb_truetype.h	/^STBTT_DEF int stbtt_GetCodepointShape(const stbtt_fontinfo *info, int unicode_codepoint, stbtt_v/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetFontBoundingBox	./imstb_truetype.h	/^STBTT_DEF void stbtt_GetFontBoundingBox(const stbtt_fontinfo *info, int *x0, int *y0, int *x1, i/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetFontNameString	./imstb_truetype.h	/^STBTT_DEF const char *stbtt_GetFontNameString(const stbtt_fontinfo *font, int *length, int platf/;"	f	typeref:typename:STBTT_DEF const char *
stbtt_GetFontOffsetForIndex	./imstb_truetype.h	/^STBTT_DEF int stbtt_GetFontOffsetForIndex(const unsigned char *data, int index)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetFontOffsetForIndex_internal	./imstb_truetype.h	/^static int stbtt_GetFontOffsetForIndex_internal(unsigned char *font_collection, int index)$/;"	f	typeref:typename:int
stbtt_GetFontVMetrics	./imstb_truetype.h	/^STBTT_DEF void stbtt_GetFontVMetrics(const stbtt_fontinfo *info, int *ascent, int *descent, int /;"	f	typeref:typename:STBTT_DEF void
stbtt_GetFontVMetricsOS2	./imstb_truetype.h	/^STBTT_DEF int  stbtt_GetFontVMetricsOS2(const stbtt_fontinfo *info, int *typoAscent, int *typoDe/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetGlyphBitmap	./imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetGlyphBitmap(const stbtt_fontinfo *info, float scale_x, float s/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetGlyphBitmapBox	./imstb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphBitmapBox(const stbtt_fontinfo *font, int glyph, float scale_x, flo/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetGlyphBitmapBoxSubpixel	./imstb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphBitmapBoxSubpixel(const stbtt_fontinfo *font, int glyph, float scal/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetGlyphBitmapSubpixel	./imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetGlyphBitmapSubpixel(const stbtt_fontinfo *info, float scale_x,/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetGlyphBox	./imstb_truetype.h	/^STBTT_DEF int stbtt_GetGlyphBox(const stbtt_fontinfo *info, int glyph_index, int *x0, int *y0, i/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetGlyphHMetrics	./imstb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphHMetrics(const stbtt_fontinfo *info, int glyph_index, int *advanceW/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetGlyphKernAdvance	./imstb_truetype.h	/^STBTT_DEF int  stbtt_GetGlyphKernAdvance(const stbtt_fontinfo *info, int g1, int g2)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetGlyphSDF	./imstb_truetype.h	/^STBTT_DEF unsigned char * stbtt_GetGlyphSDF(const stbtt_fontinfo *info, float scale, int glyph, /;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetGlyphSVG	./imstb_truetype.h	/^STBTT_DEF int stbtt_GetGlyphSVG(const stbtt_fontinfo *info, int gl, const char **svg)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetGlyphShape	./imstb_truetype.h	/^STBTT_DEF int stbtt_GetGlyphShape(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pv/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetKerningTable	./imstb_truetype.h	/^STBTT_DEF int stbtt_GetKerningTable(const stbtt_fontinfo *info, stbtt_kerningentry* table, int t/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetKerningTableLength	./imstb_truetype.h	/^STBTT_DEF int  stbtt_GetKerningTableLength(const stbtt_fontinfo *info)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetNumberOfFonts	./imstb_truetype.h	/^STBTT_DEF int stbtt_GetNumberOfFonts(const unsigned char *data)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetNumberOfFonts_internal	./imstb_truetype.h	/^static int stbtt_GetNumberOfFonts_internal(unsigned char *font_collection)$/;"	f	typeref:typename:int
stbtt_GetPackedQuad	./imstb_truetype.h	/^STBTT_DEF void stbtt_GetPackedQuad(const stbtt_packedchar *chardata, int pw, int ph, int char_in/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetScaledFontVMetrics	./imstb_truetype.h	/^STBTT_DEF void stbtt_GetScaledFontVMetrics(const unsigned char *fontdata, int index, float size,/;"	f	typeref:typename:STBTT_DEF void
stbtt_InitFont	./imstb_truetype.h	/^STBTT_DEF int stbtt_InitFont(stbtt_fontinfo *info, const unsigned char *data, int offset)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_InitFont_internal	./imstb_truetype.h	/^static int stbtt_InitFont_internal(stbtt_fontinfo *info, unsigned char *data, int fontstart)$/;"	f	typeref:typename:int
stbtt_IsGlyphEmpty	./imstb_truetype.h	/^STBTT_DEF int stbtt_IsGlyphEmpty(const stbtt_fontinfo *info, int glyph_index)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_MakeCodepointBitmap	./imstb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmap(const stbtt_fontinfo *info, unsigned char *output, int /;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeCodepointBitmapSubpixel	./imstb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmapSubpixel(const stbtt_fontinfo *info, unsigned char *outp/;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeCodepointBitmapSubpixelPrefilter	./imstb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmapSubpixelPrefilter(const stbtt_fontinfo *info, unsigned c/;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeGlyphBitmap	./imstb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmap(const stbtt_fontinfo *info, unsigned char *output, int out_/;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeGlyphBitmapSubpixel	./imstb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmapSubpixel(const stbtt_fontinfo *info, unsigned char *output, /;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeGlyphBitmapSubpixelPrefilter	./imstb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmapSubpixelPrefilter(const stbtt_fontinfo *info, unsigned char /;"	f	typeref:typename:STBTT_DEF void
stbtt_PackBegin	./imstb_truetype.h	/^STBTT_DEF int stbtt_PackBegin(stbtt_pack_context *spc, unsigned char *pixels, int pw, int ph, in/;"	f	typeref:typename:STBTT_DEF int
stbtt_PackEnd	./imstb_truetype.h	/^STBTT_DEF void stbtt_PackEnd  (stbtt_pack_context *spc)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_PackFontRange	./imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRange(stbtt_pack_context *spc, const unsigned char *fontdata, int fo/;"	f	typeref:typename:STBTT_DEF int
stbtt_PackFontRanges	./imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRanges(stbtt_pack_context *spc, const unsigned char *fontdata, int f/;"	f	typeref:typename:STBTT_DEF int
stbtt_PackFontRangesGatherRects	./imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRangesGatherRects(stbtt_pack_context *spc, const stbtt_fontinfo *inf/;"	f	typeref:typename:STBTT_DEF int
stbtt_PackFontRangesPackRects	./imstb_truetype.h	/^STBTT_DEF void stbtt_PackFontRangesPackRects(stbtt_pack_context *spc, stbrp_rect *rects, int num/;"	f	typeref:typename:STBTT_DEF void
stbtt_PackFontRangesRenderIntoRects	./imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRangesRenderIntoRects(stbtt_pack_context *spc, const stbtt_fontinfo /;"	f	typeref:typename:STBTT_DEF int
stbtt_PackSetOversampling	./imstb_truetype.h	/^STBTT_DEF void stbtt_PackSetOversampling(stbtt_pack_context *spc, unsigned int h_oversample, uns/;"	f	typeref:typename:STBTT_DEF void
stbtt_PackSetSkipMissingCodepoints	./imstb_truetype.h	/^STBTT_DEF void stbtt_PackSetSkipMissingCodepoints(stbtt_pack_context *spc, int skip)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_Rasterize	./imstb_truetype.h	/^STBTT_DEF void stbtt_Rasterize(stbtt__bitmap *result, float flatness_in_pixels, stbtt_vertex *ve/;"	f	typeref:typename:STBTT_DEF void
stbtt_ScaleForMappingEmToPixels	./imstb_truetype.h	/^STBTT_DEF float stbtt_ScaleForMappingEmToPixels(const stbtt_fontinfo *info, float pixels)$/;"	f	typeref:typename:STBTT_DEF float
stbtt_ScaleForPixelHeight	./imstb_truetype.h	/^STBTT_DEF float stbtt_ScaleForPixelHeight(const stbtt_fontinfo *info, float height)$/;"	f	typeref:typename:STBTT_DEF float
stbtt__CompareUTF8toUTF16_bigendian_prefix	./imstb_truetype.h	/^static stbtt_int32 stbtt__CompareUTF8toUTF16_bigendian_prefix(stbtt_uint8 *s1, stbtt_int32 len1,/;"	f	typeref:typename:stbtt_int32
stbtt__GetCoverageIndex	./imstb_truetype.h	/^static stbtt_int32 stbtt__GetCoverageIndex(stbtt_uint8 *coverageTable, int glyph)$/;"	f	typeref:typename:stbtt_int32
stbtt__GetGlyfOffset	./imstb_truetype.h	/^static int stbtt__GetGlyfOffset(const stbtt_fontinfo *info, int glyph_index)$/;"	f	typeref:typename:int
stbtt__GetGlyphClass	./imstb_truetype.h	/^static stbtt_int32  stbtt__GetGlyphClass(stbtt_uint8 *classDefTable, int glyph)$/;"	f	typeref:typename:stbtt_int32
stbtt__GetGlyphGPOSInfoAdvance	./imstb_truetype.h	/^static stbtt_int32 stbtt__GetGlyphGPOSInfoAdvance(const stbtt_fontinfo *info, int glyph1, int gl/;"	f	typeref:typename:stbtt_int32
stbtt__GetGlyphInfoT2	./imstb_truetype.h	/^static int stbtt__GetGlyphInfoT2(const stbtt_fontinfo *info, int glyph_index, int *x0, int *y0, /;"	f	typeref:typename:int
stbtt__GetGlyphKernInfoAdvance	./imstb_truetype.h	/^static int stbtt__GetGlyphKernInfoAdvance(const stbtt_fontinfo *info, int glyph1, int glyph2)$/;"	f	typeref:typename:int
stbtt__GetGlyphShapeT2	./imstb_truetype.h	/^static int stbtt__GetGlyphShapeT2(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pv/;"	f	typeref:typename:int
stbtt__GetGlyphShapeTT	./imstb_truetype.h	/^static int stbtt__GetGlyphShapeTT(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pv/;"	f	typeref:typename:int
stbtt__active_edge	./imstb_truetype.h	/^typedef struct stbtt__active_edge$/;"	s
stbtt__active_edge	./imstb_truetype.h	/^} stbtt__active_edge;$/;"	t	typeref:struct:stbtt__active_edge
stbtt__add_point	./imstb_truetype.h	/^static void stbtt__add_point(stbtt__point *points, int n, float x, float y)$/;"	f	typeref:typename:void
stbtt__bitmap	./imstb_truetype.h	/^} stbtt__bitmap;$/;"	t	typeref:struct:__anon97bae1980808
stbtt__buf	./imstb_truetype.h	/^} stbtt__buf;$/;"	t	typeref:struct:__anon97bae1980108
stbtt__buf_get	./imstb_truetype.h	/^static stbtt_uint32 stbtt__buf_get(stbtt__buf *b, int n)$/;"	f	typeref:typename:stbtt_uint32
stbtt__buf_get16	./imstb_truetype.h	/^#define stbtt__buf_get16(/;"	d
stbtt__buf_get32	./imstb_truetype.h	/^#define stbtt__buf_get32(/;"	d
stbtt__buf_get8	./imstb_truetype.h	/^static stbtt_uint8 stbtt__buf_get8(stbtt__buf *b)$/;"	f	typeref:typename:stbtt_uint8
stbtt__buf_peek8	./imstb_truetype.h	/^static stbtt_uint8 stbtt__buf_peek8(stbtt__buf *b)$/;"	f	typeref:typename:stbtt_uint8
stbtt__buf_range	./imstb_truetype.h	/^static stbtt__buf stbtt__buf_range(const stbtt__buf *b, int o, int s)$/;"	f	typeref:typename:stbtt__buf
stbtt__buf_seek	./imstb_truetype.h	/^static void stbtt__buf_seek(stbtt__buf *b, int o)$/;"	f	typeref:typename:void
stbtt__buf_skip	./imstb_truetype.h	/^static void stbtt__buf_skip(stbtt__buf *b, int o)$/;"	f	typeref:typename:void
stbtt__cff_get_index	./imstb_truetype.h	/^static stbtt__buf stbtt__cff_get_index(stbtt__buf *b)$/;"	f	typeref:typename:stbtt__buf
stbtt__cff_index_count	./imstb_truetype.h	/^static int stbtt__cff_index_count(stbtt__buf *b)$/;"	f	typeref:typename:int
stbtt__cff_index_get	./imstb_truetype.h	/^static stbtt__buf stbtt__cff_index_get(stbtt__buf b, int i)$/;"	f	typeref:typename:stbtt__buf
stbtt__cff_int	./imstb_truetype.h	/^static stbtt_uint32 stbtt__cff_int(stbtt__buf *b)$/;"	f	typeref:typename:stbtt_uint32
stbtt__cff_skip_operand	./imstb_truetype.h	/^static void stbtt__cff_skip_operand(stbtt__buf *b) {$/;"	f	typeref:typename:void
stbtt__check_size16	./imstb_truetype.h	/^   typedef char stbtt__check_size16[sizeof(stbtt_int16)==2 ? 1 : -1];$/;"	t	typeref:typename:char[sizeof (stbtt_int16)==2?1:-1]
stbtt__check_size32	./imstb_truetype.h	/^   typedef char stbtt__check_size32[sizeof(stbtt_int32)==4 ? 1 : -1];$/;"	t	typeref:typename:char[sizeof (stbtt_int32)==4?1:-1]
stbtt__cid_get_glyph_subrs	./imstb_truetype.h	/^static stbtt__buf stbtt__cid_get_glyph_subrs(const stbtt_fontinfo *info, int glyph_index)$/;"	f	typeref:typename:stbtt__buf
stbtt__close_shape	./imstb_truetype.h	/^static int stbtt__close_shape(stbtt_vertex *vertices, int num_vertices, int was_off, int start_o/;"	f	typeref:typename:int
stbtt__compute_crossings_x	./imstb_truetype.h	/^static int stbtt__compute_crossings_x(float x, float y, int nverts, stbtt_vertex *verts)$/;"	f	typeref:typename:int
stbtt__csctx	./imstb_truetype.h	/^} stbtt__csctx;$/;"	t	typeref:struct:__anon97bae1980f08
stbtt__csctx_close_shape	./imstb_truetype.h	/^static void stbtt__csctx_close_shape(stbtt__csctx *ctx)$/;"	f	typeref:typename:void
stbtt__csctx_rccurve_to	./imstb_truetype.h	/^static void stbtt__csctx_rccurve_to(stbtt__csctx *ctx, float dx1, float dy1, float dx2, float dy/;"	f	typeref:typename:void
stbtt__csctx_rline_to	./imstb_truetype.h	/^static void stbtt__csctx_rline_to(stbtt__csctx *ctx, float dx, float dy)$/;"	f	typeref:typename:void
stbtt__csctx_rmove_to	./imstb_truetype.h	/^static void stbtt__csctx_rmove_to(stbtt__csctx *ctx, float dx, float dy)$/;"	f	typeref:typename:void
stbtt__csctx_v	./imstb_truetype.h	/^static void stbtt__csctx_v(stbtt__csctx *c, stbtt_uint8 type, stbtt_int32 x, stbtt_int32 y, stbt/;"	f	typeref:typename:void
stbtt__cuberoot	./imstb_truetype.h	/^static float stbtt__cuberoot( float x )$/;"	f	typeref:typename:float
stbtt__dict_get	./imstb_truetype.h	/^static stbtt__buf stbtt__dict_get(stbtt__buf *b, int key)$/;"	f	typeref:typename:stbtt__buf
stbtt__dict_get_ints	./imstb_truetype.h	/^static void stbtt__dict_get_ints(stbtt__buf *b, int key, int outcount, stbtt_uint32 *out)$/;"	f	typeref:typename:void
stbtt__edge	./imstb_truetype.h	/^typedef struct stbtt__edge {$/;"	s
stbtt__edge	./imstb_truetype.h	/^} stbtt__edge;$/;"	t	typeref:struct:stbtt__edge
stbtt__fill_active_edges	./imstb_truetype.h	/^static void stbtt__fill_active_edges(unsigned char *scanline, int len, stbtt__active_edge *e, in/;"	f	typeref:typename:void
stbtt__fill_active_edges_new	./imstb_truetype.h	/^static void stbtt__fill_active_edges_new(float *scanline, float *scanline_fill, int len, stbtt__/;"	f	typeref:typename:void
stbtt__find_table	./imstb_truetype.h	/^static stbtt_uint32 stbtt__find_table(stbtt_uint8 *data, stbtt_uint32 fontstart, const char *tag/;"	f	typeref:typename:stbtt_uint32
stbtt__get_subr	./imstb_truetype.h	/^static stbtt__buf stbtt__get_subr(stbtt__buf idx, int n)$/;"	f	typeref:typename:stbtt__buf
stbtt__get_subrs	./imstb_truetype.h	/^static stbtt__buf stbtt__get_subrs(stbtt__buf cff, stbtt__buf fontdict)$/;"	f	typeref:typename:stbtt__buf
stbtt__get_svg	./imstb_truetype.h	/^static int stbtt__get_svg(stbtt_fontinfo *info)$/;"	f	typeref:typename:int
stbtt__h_prefilter	./imstb_truetype.h	/^static void stbtt__h_prefilter(unsigned char *pixels, int w, int h, int stride_in_bytes, unsigne/;"	f	typeref:typename:void
stbtt__handle_clipped_edge	./imstb_truetype.h	/^static void stbtt__handle_clipped_edge(float *scanline, int x, stbtt__active_edge *e, float x0, /;"	f	typeref:typename:void
stbtt__hheap	./imstb_truetype.h	/^typedef struct stbtt__hheap$/;"	s
stbtt__hheap	./imstb_truetype.h	/^} stbtt__hheap;$/;"	t	typeref:struct:stbtt__hheap
stbtt__hheap_alloc	./imstb_truetype.h	/^static void *stbtt__hheap_alloc(stbtt__hheap *hh, size_t size, void *userdata)$/;"	f	typeref:typename:void *
stbtt__hheap_chunk	./imstb_truetype.h	/^typedef struct stbtt__hheap_chunk$/;"	s
stbtt__hheap_chunk	./imstb_truetype.h	/^} stbtt__hheap_chunk;$/;"	t	typeref:struct:stbtt__hheap_chunk
stbtt__hheap_cleanup	./imstb_truetype.h	/^static void stbtt__hheap_cleanup(stbtt__hheap *hh, void *userdata)$/;"	f	typeref:typename:void
stbtt__hheap_free	./imstb_truetype.h	/^static void stbtt__hheap_free(stbtt__hheap *hh, void *p)$/;"	f	typeref:typename:void
stbtt__isfont	./imstb_truetype.h	/^static int stbtt__isfont(stbtt_uint8 *font)$/;"	f	typeref:typename:int
stbtt__matches	./imstb_truetype.h	/^static int stbtt__matches(stbtt_uint8 *fc, stbtt_uint32 offset, stbtt_uint8 *name, stbtt_int32 f/;"	f	typeref:typename:int
stbtt__matchpair	./imstb_truetype.h	/^static int stbtt__matchpair(stbtt_uint8 *fc, stbtt_uint32 nm, stbtt_uint8 *name, stbtt_int32 nle/;"	f	typeref:typename:int
stbtt__new_active	./imstb_truetype.h	/^static stbtt__active_edge *stbtt__new_active(stbtt__hheap *hh, stbtt__edge *e, int off_x, float /;"	f	typeref:typename:stbtt__active_edge *
stbtt__new_buf	./imstb_truetype.h	/^static stbtt__buf stbtt__new_buf(const void *p, size_t size)$/;"	f	typeref:typename:stbtt__buf
stbtt__oversample_shift	./imstb_truetype.h	/^static float stbtt__oversample_shift(int oversample)$/;"	f	typeref:typename:float
stbtt__point	./imstb_truetype.h	/^} stbtt__point;$/;"	t	typeref:struct:__anon97bae1981008
stbtt__position_trapezoid_area	./imstb_truetype.h	/^static float stbtt__position_trapezoid_area(float height, float tx0, float tx1, float bx0, float/;"	f	typeref:typename:float
stbtt__rasterize	./imstb_truetype.h	/^static void stbtt__rasterize(stbtt__bitmap *result, stbtt__point *pts, int *wcount, int windings/;"	f	typeref:typename:void
stbtt__rasterize_sorted_edges	./imstb_truetype.h	/^static void stbtt__rasterize_sorted_edges(stbtt__bitmap *result, stbtt__edge *e, int n, int vsub/;"	f	typeref:typename:void
stbtt__ray_intersect_bezier	./imstb_truetype.h	/^static int stbtt__ray_intersect_bezier(float orig[2], float ray[2], float q0[2], float q1[2], fl/;"	f	typeref:typename:int
stbtt__run_charstring	./imstb_truetype.h	/^static int stbtt__run_charstring(const stbtt_fontinfo *info, int glyph_index, stbtt__csctx *c)$/;"	f	typeref:typename:int
stbtt__sized_trapezoid_area	./imstb_truetype.h	/^static float stbtt__sized_trapezoid_area(float height, float top_width, float bottom_width)$/;"	f	typeref:typename:float
stbtt__sized_triangle_area	./imstb_truetype.h	/^static float stbtt__sized_triangle_area(float height, float width)$/;"	f	typeref:typename:float
stbtt__solve_cubic	./imstb_truetype.h	/^static int stbtt__solve_cubic(float a, float b, float c, float* r)$/;"	f	typeref:typename:int
stbtt__sort_edges	./imstb_truetype.h	/^static void stbtt__sort_edges(stbtt__edge *p, int n)$/;"	f	typeref:typename:void
stbtt__sort_edges_ins_sort	./imstb_truetype.h	/^static void stbtt__sort_edges_ins_sort(stbtt__edge *p, int n)$/;"	f	typeref:typename:void
stbtt__sort_edges_quicksort	./imstb_truetype.h	/^static void stbtt__sort_edges_quicksort(stbtt__edge *p, int n)$/;"	f	typeref:typename:void
stbtt__tesselate_cubic	./imstb_truetype.h	/^static void stbtt__tesselate_cubic(stbtt__point *points, int *num_points, float x0, float y0, fl/;"	f	typeref:typename:void
stbtt__tesselate_curve	./imstb_truetype.h	/^static int stbtt__tesselate_curve(stbtt__point *points, int *num_points, float x0, float y0, flo/;"	f	typeref:typename:int
stbtt__test_oversample_pow2	./imstb_truetype.h	/^typedef int stbtt__test_oversample_pow2[(STBTT_MAX_OVERSAMPLE & (STBTT_MAX_OVERSAMPLE-1)) == 0 ?/;"	t	typeref:typename:int[(STBTT_MAX_OVERSAMPLE & (STBTT_MAX_OVERSAMPLE-1))==0?1:-1]
stbtt__track_vertex	./imstb_truetype.h	/^static void stbtt__track_vertex(stbtt__csctx *c, stbtt_int32 x, stbtt_int32 y)$/;"	f	typeref:typename:void
stbtt__v_prefilter	./imstb_truetype.h	/^static void stbtt__v_prefilter(unsigned char *pixels, int w, int h, int stride_in_bytes, unsigne/;"	f	typeref:typename:void
stbtt_aligned_quad	./imstb_truetype.h	/^} stbtt_aligned_quad;$/;"	t	typeref:struct:__anon97bae1980308
stbtt_bakedchar	./imstb_truetype.h	/^} stbtt_bakedchar;$/;"	t	typeref:struct:__anon97bae1980208
stbtt_fontinfo	./imstb_truetype.h	/^struct stbtt_fontinfo$/;"	s
stbtt_fontinfo	./imstb_truetype.h	/^typedef struct stbtt_fontinfo stbtt_fontinfo;$/;"	t	typeref:struct:stbtt_fontinfo
stbtt_int16	./imstb_truetype.h	/^   typedef signed   short  stbtt_int16;$/;"	t	typeref:typename:signed short
stbtt_int32	./imstb_truetype.h	/^   typedef signed   int    stbtt_int32;$/;"	t	typeref:typename:signed int
stbtt_int8	./imstb_truetype.h	/^   typedef signed   char   stbtt_int8;$/;"	t	typeref:typename:signed char
stbtt_kerningentry	./imstb_truetype.h	/^typedef struct stbtt_kerningentry$/;"	s
stbtt_kerningentry	./imstb_truetype.h	/^} stbtt_kerningentry;$/;"	t	typeref:struct:stbtt_kerningentry
stbtt_pack_context	./imstb_truetype.h	/^struct stbtt_pack_context {$/;"	s
stbtt_pack_context	./imstb_truetype.h	/^typedef struct stbtt_pack_context stbtt_pack_context;$/;"	t	typeref:struct:stbtt_pack_context
stbtt_pack_range	./imstb_truetype.h	/^} stbtt_pack_range;$/;"	t	typeref:struct:__anon97bae1980508
stbtt_packedchar	./imstb_truetype.h	/^} stbtt_packedchar;$/;"	t	typeref:struct:__anon97bae1980408
stbtt_setvertex	./imstb_truetype.h	/^static void stbtt_setvertex(stbtt_vertex *v, stbtt_uint8 type, stbtt_int32 x, stbtt_int32 y, stb/;"	f	typeref:typename:void
stbtt_tag	./imstb_truetype.h	/^#define stbtt_tag(p,str)           stbtt_tag4/;"	d
stbtt_tag4	./imstb_truetype.h	/^#define stbtt_tag4(/;"	d
stbtt_uint16	./imstb_truetype.h	/^   typedef unsigned short  stbtt_uint16;$/;"	t	typeref:typename:unsigned short
stbtt_uint32	./imstb_truetype.h	/^   typedef unsigned int    stbtt_uint32;$/;"	t	typeref:typename:unsigned int
stbtt_uint8	./imstb_truetype.h	/^   typedef unsigned char   stbtt_uint8;$/;"	t	typeref:typename:unsigned char
stbtt_vertex	./imstb_truetype.h	/^   } stbtt_vertex;$/;"	t	typeref:struct:__anon97bae1980708
stbtt_vertex_type	./imstb_truetype.h	/^   #define stbtt_vertex_type /;"	d
stencilPixelFormat	./backends/imgui_impl_metal.mm	/^@property (nonatomic, assign) MTLPixelFormat stencilPixelFormat;$/;"	p	interface:FramebufferDescriptor
stride	./imstb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anon97bae1980808	typeref:typename:int
stride_in_bytes	./imstb_truetype.h	/^   int   stride_in_bytes;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
subrs	./imstb_truetype.h	/^   stbtt__buf subrs;                  \/\/ private charstring subroutines index$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
svg	./imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
svg	./misc/freetype/imgui_freetype.cpp	/^    std::unique_ptr<lunasvg::Document> svg = nullptr;$/;"	m	struct:LunasvgPortState	typeref:typename:std::unique_ptr<lunasvg::Document>	file:
swap	./imgui.h	/^    inline void         swap(ImVector<T>& rhs)              { int rhs_size = rhs.Size; rhs.Size /;"	f	struct:ImVector	typeref:typename:void
swap	./imgui_internal.h	/^    void    swap(ImChunkStream<T>& rhs) { rhs.Buf.swap(Buf); }$/;"	f	struct:ImChunkStream	typeref:typename:void
sy	./imstb_truetype.h	/^   float sy;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
t0	./imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon97bae1980308	typeref:typename:float
t1	./imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon97bae1980308	typeref:typename:float
touchesBegan:withEvent:	./examples/example_apple_metal/main.mm	/^-(void)touchesBegan:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event      { [self updateIO/;"	m	implementation:AppViewController
touchesCancelled:withEvent:	./examples/example_apple_metal/main.mm	/^-(void)touchesCancelled:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event  { [self updateIO/;"	m	implementation:AppViewController
touchesEnded:withEvent:	./examples/example_apple_metal/main.mm	/^-(void)touchesEnded:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event      { [self updateIO/;"	m	implementation:AppViewController
touchesMoved:withEvent:	./examples/example_apple_metal/main.mm	/^-(void)touchesMoved:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event      { [self updateIO/;"	m	implementation:AppViewController
ttBYTE	./imstb_truetype.h	/^#define ttBYTE(/;"	d
ttCHAR	./imstb_truetype.h	/^#define ttCHAR(/;"	d
ttFixed	./imstb_truetype.h	/^#define ttFixed(/;"	d
ttLONG	./imstb_truetype.h	/^static stbtt_int32 ttLONG(stbtt_uint8 *p)    { return (p[0]<<24) + (p[1]<<16) + (p[2]<<8) + p[3]/;"	f	typeref:typename:stbtt_int32
ttSHORT	./imstb_truetype.h	/^static stbtt_int16 ttSHORT(stbtt_uint8 *p)   { return p[0]*256 + p[1]; }$/;"	f	typeref:typename:stbtt_int16
ttULONG	./imstb_truetype.h	/^static stbtt_uint32 ttULONG(stbtt_uint8 *p)  { return (p[0]<<24) + (p[1]<<16) + (p[2]<<8) + p[3]/;"	f	typeref:typename:stbtt_uint32
ttUSHORT	./imstb_truetype.h	/^static stbtt_uint16 ttUSHORT(stbtt_uint8 *p) { return p[0]*256 + p[1]; }$/;"	f	typeref:typename:stbtt_uint16
type	./imstb_truetype.h	/^      unsigned char type,padding;$/;"	m	struct:__anon97bae1980708	typeref:typename:unsigned char
uSynergyBool	./examples/libs/usynergy/uSynergy.h	/^typedef int			uSynergyBool;$/;"	t	typeref:typename:int
uSynergyClipboardCallback	./examples/libs/usynergy/uSynergy.h	/^typedef void		(*uSynergyClipboardCallback)(uSynergyCookie cookie, enum uSynergyClipboardFormat f/;"	t	typeref:typename:void (*)(uSynergyCookie cookie,enum uSynergyClipboardFormat format,const uint8_t * data,uint32_t size)
uSynergyClipboardFormat	./examples/libs/usynergy/uSynergy.h	/^enum uSynergyClipboardFormat$/;"	g
uSynergyConnectFunc	./examples/libs/usynergy/uSynergy.h	/^typedef uSynergyBool (*uSynergyConnectFunc)(uSynergyCookie cookie);$/;"	t	typeref:typename:uSynergyBool (*)(uSynergyCookie cookie)
uSynergyContext	./examples/libs/usynergy/uSynergy.h	/^} uSynergyContext;$/;"	t	typeref:struct:__anon23b8519a0208
uSynergyCookie	./examples/libs/usynergy/uSynergy.h	/^typedef struct { int ignored; } *					uSynergyCookie;$/;"	t	typeref:struct:__anon23b8519a0108 *
uSynergyGetTimeFunc	./examples/libs/usynergy/uSynergy.h	/^typedef uint32_t	(*uSynergyGetTimeFunc)();$/;"	t	typeref:typename:uint32_t (*)()
uSynergyInit	./examples/libs/usynergy/uSynergy.c	/^void uSynergyInit(uSynergyContext *context)$/;"	f	typeref:typename:void
uSynergyJoystickCallback	./examples/libs/usynergy/uSynergy.h	/^typedef void		(*uSynergyJoystickCallback)(uSynergyCookie cookie, uint8_t joyNum, uint16_t button/;"	t	typeref:typename:void (*)(uSynergyCookie cookie,uint8_t joyNum,uint16_t buttons,int8_t leftStickX,int8_t leftStickY,int8_t rightStickX,int8_t rightStickY)
uSynergyKeyboardCallback	./examples/libs/usynergy/uSynergy.h	/^typedef void		(*uSynergyKeyboardCallback)(uSynergyCookie cookie, uint16_t key, uint16_t modifier/;"	t	typeref:typename:void (*)(uSynergyCookie cookie,uint16_t key,uint16_t modifiers,uSynergyBool down,uSynergyBool repeat)
uSynergyMouseCallback	./examples/libs/usynergy/uSynergy.h	/^typedef void		(*uSynergyMouseCallback)(uSynergyCookie cookie, uint16_t x, uint16_t y, int16_t wh/;"	t	typeref:typename:void (*)(uSynergyCookie cookie,uint16_t x,uint16_t y,int16_t wheelX,int16_t wheelY,uSynergyBool buttonLeft,uSynergyBool buttonRight,uSynergyBool buttonMiddle)
uSynergyReceiveFunc	./examples/libs/usynergy/uSynergy.h	/^typedef uSynergyBool (*uSynergyReceiveFunc)(uSynergyCookie cookie, uint8_t *buffer, int maxLengt/;"	t	typeref:typename:uSynergyBool (*)(uSynergyCookie cookie,uint8_t * buffer,int maxLength,int * outLength)
uSynergyScreenActiveCallback	./examples/libs/usynergy/uSynergy.h	/^typedef void		(*uSynergyScreenActiveCallback)(uSynergyCookie cookie, uSynergyBool active);$/;"	t	typeref:typename:void (*)(uSynergyCookie cookie,uSynergyBool active)
uSynergySendClipboard	./examples/libs/usynergy/uSynergy.c	/^void uSynergySendClipboard(uSynergyContext *context, const char *text)$/;"	f	typeref:typename:void
uSynergySendFunc	./examples/libs/usynergy/uSynergy.h	/^typedef uSynergyBool (*uSynergySendFunc)(uSynergyCookie cookie, const uint8_t *buffer, int lengt/;"	t	typeref:typename:uSynergyBool (*)(uSynergyCookie cookie,const uint8_t * buffer,int length)
uSynergySleepFunc	./examples/libs/usynergy/uSynergy.h	/^typedef void		(*uSynergySleepFunc)(uSynergyCookie cookie, int timeMs);$/;"	t	typeref:typename:void (*)(uSynergyCookie cookie,int timeMs)
uSynergyTraceFunc	./examples/libs/usynergy/uSynergy.h	/^typedef void		(*uSynergyTraceFunc)(uSynergyCookie cookie, const char *text);$/;"	t	typeref:typename:void (*)(uSynergyCookie cookie,const char * text)
uSynergyUpdate	./examples/libs/usynergy/uSynergy.c	/^void uSynergyUpdate(uSynergyContext *context)$/;"	f	typeref:typename:void
undo_char	./imstb_textedit.h	/^   IMSTB_TEXTEDIT_CHARTYPE  undo_char[IMSTB_TEXTEDIT_UNDOCHARCOUNT];$/;"	m	struct:__anond05b37a10208	typeref:typename:IMSTB_TEXTEDIT_CHARTYPE[]
undo_char_point	./imstb_textedit.h	/^   int undo_char_point, redo_char_point;$/;"	m	struct:__anond05b37a10208	typeref:typename:int
undo_point	./imstb_textedit.h	/^   short undo_point, redo_point;$/;"	m	struct:__anond05b37a10208	typeref:typename:short
undo_rec	./imstb_textedit.h	/^   StbUndoRecord          undo_rec [IMSTB_TEXTEDIT_UNDOSTATECOUNT];$/;"	m	struct:__anond05b37a10208	typeref:typename:StbUndoRecord[]
undostate	./imstb_textedit.h	/^   StbUndoState undostate;$/;"	m	struct:__anond05b37a10308	typeref:typename:StbUndoState
unicodeCharacterQueue	./examples/example_android_opengl3/android/app/src/main/java/MainActivity.kt	/^    private var unicodeCharacterQueue: LinkedBlockingQueue<Int> = LinkedBlockingQueue()$/;"	v	class:imgui.example.android.MainActivity
unmarkText	./backends/imgui_impl_osx.mm	/^{$/;"	m	implementation:KeyEventResponder
updateAndDrawDemoView	./examples/example_apple_opengl2/main.mm	/^{$/;"	m	implementation:AppView
updateIOWithTouchEvent:	./examples/example_apple_metal/main.mm	/^{$/;"	m	implementation:AppViewController
updateImePosWithView:	./backends/imgui_impl_osx.mm	/^{$/;"	m	implementation:KeyEventResponder
user_allocator_context	./imstb_truetype.h	/^   void *user_allocator_context;$/;"	m	struct:stbtt_pack_context	typeref:typename:void *
userdata	./imstb_truetype.h	/^   void           * userdata;$/;"	m	struct:stbtt_fontinfo	typeref:typename:void *
uv	./backends/imgui_impl_allegro5.cpp	/^    ImVec2          uv;$/;"	m	struct:ImDrawVertAllegro	typeref:typename:ImVec2	file:
uv	./backends/imgui_impl_dx9.cpp	/^    float    uv[2];$/;"	m	struct:CUSTOMVERTEX	typeref:typename:float[2]	file:
uv	./imgui.h	/^    ImVec2  uv;$/;"	m	struct:ImDrawVert	typeref:typename:ImVec2
v_oversample	./imstb_truetype.h	/^   unsigned char h_oversample, v_oversample; \/\/ don't set these, they're used internally$/;"	m	struct:__anon97bae1980508	typeref:typename:unsigned char
v_oversample	./imstb_truetype.h	/^   unsigned int   h_oversample, v_oversample;$/;"	m	struct:stbtt_pack_context	typeref:typename:unsigned int
va_copy	./imgui.cpp	/^#define va_copy(/;"	d	file:
va_copy	./imgui.cpp	/^#define va_copy(dest, src) __builtin_va_copy(/;"	d	file:
val_f	./imgui.h	/^    union       { int val_i; float val_f; void* val_p; };$/;"	m	union:ImGuiStoragePair::__anond8fdef13010a	typeref:typename:float
val_i	./imgui.h	/^    union       { int val_i; float val_f; void* val_p; };$/;"	m	union:ImGuiStoragePair::__anond8fdef13010a	typeref:typename:int
val_p	./imgui.h	/^    union       { int val_i; float val_f; void* val_p; };$/;"	m	union:ImGuiStoragePair::__anond8fdef13010a	typeref:typename:void *
validAttributesForMarkedText	./backends/imgui_impl_osx.mm	/^{$/;"	m	implementation:KeyEventResponder
value_type	./imgui.h	/^    typedef T                   value_type;$/;"	t	struct:ImVector	typeref:typename:T
version	./backends/imgui_impl_opengl3_loader.h	/^static struct { int major, minor; } version;$/;"	v	typeref:struct:__anone6efc55b0208
viewDidLoad	./examples/example_apple_metal/main.mm	/^{$/;"	m	implementation:AppViewController
viewDidMoveToWindow	./backends/imgui_impl_osx.mm	/^{$/;"	m	implementation:KeyEventResponder
viewWillAppear	./examples/example_apple_metal/main.mm	/^{$/;"	m	implementation:AppViewController
vsnprintf	./imgui.cpp	/^#define vsnprintf _vsnprintf$/;"	d	file:
vsnprintf	./imgui_demo.cpp	/^#define vsnprintf   _vsnprintf$/;"	d	file:
w	./imgui.h	/^    float                                                     x, y, z, w;$/;"	m	struct:ImVec4	typeref:typename:float
w	./imstb_rectpack.h	/^   stbrp_coord    w, h;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
w	./imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect	typeref:typename:int
w	./imstb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anon97bae1980808	typeref:typename:int
was_packed	./imstb_rectpack.h	/^   int            was_packed;  \/\/ non-zero if valid packing$/;"	m	struct:stbrp_rect	typeref:typename:int
was_packed	./imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect	typeref:typename:int
wgl_get_proc_address	./backends/imgui_impl_opengl3_loader.h	/^static GL3WglGetProcAddr wgl_get_proc_address;$/;"	v	typeref:typename:GL3WglGetProcAddr
wgpuDevice	./backends/imgui_impl_wgpu.cpp	/^    WGPUDevice              wgpuDevice = nullptr;$/;"	m	struct:ImGui_ImplWGPU_Data	typeref:typename:WGPUDevice	file:
wgpu_device	./examples/example_glfw_wgpu/main.cpp	/^static WGPUDevice        wgpu_device = nullptr;$/;"	v	typeref:typename:WGPUDevice	file:
wgpu_error_callback	./examples/example_glfw_wgpu/main.cpp	/^static void wgpu_error_callback(WGPUErrorType error_type, const char* message, void*)$/;"	f	typeref:typename:void	file:
wgpu_instance	./examples/example_glfw_wgpu/main.cpp	/^static WGPUInstance      wgpu_instance = nullptr;$/;"	v	typeref:typename:WGPUInstance	file:
wgpu_preferred_fmt	./examples/example_glfw_wgpu/main.cpp	/^static WGPUTextureFormat wgpu_preferred_fmt = WGPUTextureFormat_RGBA8Unorm;$/;"	v	typeref:typename:WGPUTextureFormat	file:
wgpu_surface	./examples/example_glfw_wgpu/main.cpp	/^static WGPUSurface       wgpu_surface = nullptr;$/;"	v	typeref:typename:WGPUSurface	file:
wgpu_swap_chain	./examples/example_glfw_wgpu/main.cpp	/^static WGPUSwapChain     wgpu_swap_chain = nullptr;$/;"	v	typeref:typename:WGPUSwapChain	file:
wgpu_swap_chain_height	./examples/example_glfw_wgpu/main.cpp	/^static int               wgpu_swap_chain_height = 720;$/;"	v	typeref:typename:int	file:
wgpu_swap_chain_width	./examples/example_glfw_wgpu/main.cpp	/^static int               wgpu_swap_chain_width = 1280;$/;"	v	typeref:typename:int	file:
where	./imstb_textedit.h	/^   IMSTB_TEXTEDIT_POSITIONTYPE  where;$/;"	m	struct:__anond05b37a10108	typeref:typename:IMSTB_TEXTEDIT_POSITIONTYPE
width	./examples/libs/glfw/include/GLFW/glfw3.h	/^    int width;$/;"	m	struct:GLFWimage	typeref:typename:int
width	./examples/libs/glfw/include/GLFW/glfw3.h	/^    int width;$/;"	m	struct:GLFWvidmode	typeref:typename:int
width	./imstb_rectpack.h	/^   int width;$/;"	m	struct:stbrp_context	typeref:typename:int
width	./imstb_truetype.h	/^   int   width;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
width	./imstb_truetype.h	/^   int width,height;$/;"	m	struct:__anon97bae1981108	typeref:typename:int
window	./examples/example_apple_metal/main.mm	/^@property (nonatomic, strong) NSWindow *window;$/;"	p	interface:AppDelegate
window	./examples/example_apple_metal/main.mm	/^@property (strong, nonatomic) UIWindow *window;$/;"	p	interface:AppDelegate
window	./examples/example_apple_opengl2/main.mm	/^@property (nonatomic, readonly) NSWindow* window;$/;"	p	interface:AppDelegate
window	./examples/example_apple_opengl2/main.mm	/^{$/;"	m	implementation:AppDelegate
windowWillClose:	./examples/example_apple_metal/main.mm	/^{$/;"	m	implementation:AppViewController
x	./imgui.h	/^    float                                                     x, y, z, w;$/;"	m	struct:ImVec4	typeref:typename:float
x	./imgui.h	/^    float                                   x, y;$/;"	m	struct:ImVec2	typeref:typename:float
x	./imgui_internal.h	/^    float   x;$/;"	m	struct:ImVec1	typeref:typename:float
x	./imgui_internal.h	/^    short   x, y;$/;"	m	struct:ImVec2ih	typeref:typename:short
x	./imstb_rectpack.h	/^   int x,y;$/;"	m	struct:__anon804ea3c30308	typeref:typename:int
x	./imstb_rectpack.h	/^   stbrp_coord    x, y;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
x	./imstb_rectpack.h	/^   stbrp_coord  x,y;$/;"	m	struct:stbrp_node	typeref:typename:stbrp_coord
x	./imstb_textedit.h	/^   float x,y;    \/\/ position of n'th character$/;"	m	struct:__anond05b37a10508	typeref:typename:float
x	./imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon97bae1980708	typeref:typename:stbtt_vertex_type
x	./imstb_truetype.h	/^   float x, y;$/;"	m	struct:__anon97bae1980f08	typeref:typename:float
x	./imstb_truetype.h	/^   float x,y;$/;"	m	struct:__anon97bae1981008	typeref:typename:float
x	./imstb_truetype.h	/^   int x,dx;$/;"	m	struct:stbtt__active_edge	typeref:typename:int
x	./imstb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anon97bae1981108	typeref:typename:int
x	./imstb_truetype.h	/^   stbrp_coord x,y;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
x	./imstb_truetype.h	/^   unsigned char x;$/;"	m	struct:__anon97bae1981208	typeref:typename:unsigned char
x0	./imstb_textedit.h	/^   float x0,x1;             \/\/ starting x location, end x location (allows for align=right, et/;"	m	struct:__anond05b37a10408	typeref:typename:float
x0	./imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	typeref:typename:float
x0	./imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon97bae1980308	typeref:typename:float
x0	./imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon97bae1980208	typeref:typename:unsigned short
x0	./imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon97bae1980408	typeref:typename:unsigned short
x1	./imstb_textedit.h	/^   float x0,x1;             \/\/ starting x location, end x location (allows for align=right, et/;"	m	struct:__anond05b37a10408	typeref:typename:float
x1	./imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	typeref:typename:float
x1	./imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon97bae1980308	typeref:typename:float
x1	./imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon97bae1980208	typeref:typename:unsigned short
x1	./imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon97bae1980408	typeref:typename:unsigned short
xadvance	./imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon97bae1980208	typeref:typename:float
xadvance	./imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon97bae1980408	typeref:typename:float
xoff	./imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon97bae1980208	typeref:typename:float
xoff	./imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon97bae1980408	typeref:typename:float
xoff2	./imstb_truetype.h	/^   float xoff2,yoff2;$/;"	m	struct:__anon97bae1980408	typeref:typename:float
y	./imgui.h	/^    float                                                     x, y, z, w;$/;"	m	struct:ImVec4	typeref:typename:float
y	./imgui.h	/^    float                                   x, y;$/;"	m	struct:ImVec2	typeref:typename:float
y	./imgui_internal.h	/^    short   x, y;$/;"	m	struct:ImVec2ih	typeref:typename:short
y	./imstb_rectpack.h	/^   int x,y;$/;"	m	struct:__anon804ea3c30308	typeref:typename:int
y	./imstb_rectpack.h	/^   stbrp_coord    x, y;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
y	./imstb_rectpack.h	/^   stbrp_coord  x,y;$/;"	m	struct:stbrp_node	typeref:typename:stbrp_coord
y	./imstb_textedit.h	/^   float x,y;    \/\/ position of n'th character$/;"	m	struct:__anond05b37a10508	typeref:typename:float
y	./imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon97bae1980708	typeref:typename:stbtt_vertex_type
y	./imstb_truetype.h	/^   float x, y;$/;"	m	struct:__anon97bae1980f08	typeref:typename:float
y	./imstb_truetype.h	/^   float x,y;$/;"	m	struct:__anon97bae1981008	typeref:typename:float
y	./imstb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anon97bae1981108	typeref:typename:int
y	./imstb_truetype.h	/^   stbrp_coord x,y;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
y0	./imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	typeref:typename:float
y0	./imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon97bae1980308	typeref:typename:float
y0	./imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon97bae1980208	typeref:typename:unsigned short
y0	./imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon97bae1980408	typeref:typename:unsigned short
y1	./imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	typeref:typename:float
y1	./imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon97bae1980308	typeref:typename:float
y1	./imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon97bae1980208	typeref:typename:unsigned short
y1	./imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon97bae1980408	typeref:typename:unsigned short
ymax	./imstb_textedit.h	/^   float ymin,ymax;         \/\/ height of row above and below baseline$/;"	m	struct:__anond05b37a10408	typeref:typename:float
ymin	./imstb_textedit.h	/^   float ymin,ymax;         \/\/ height of row above and below baseline$/;"	m	struct:__anond05b37a10408	typeref:typename:float
yoff	./imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon97bae1980208	typeref:typename:float
yoff	./imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon97bae1980408	typeref:typename:float
yoff2	./imstb_truetype.h	/^   float xoff2,yoff2;$/;"	m	struct:__anon97bae1980408	typeref:typename:float
z	./imgui.h	/^    float                                                     x, y, z, w;$/;"	m	struct:ImVec4	typeref:typename:float
~ExampleAppConsole	./imgui_demo.cpp	/^    ~ExampleAppConsole()$/;"	f	struct:ExampleAppConsole	file:
~FreeTypeFont	./misc/freetype/imgui_freetype.cpp	/^        ~FreeTypeFont()         { CloseFont(); }$/;"	f	struct:__anon21d590df0111::FreeTypeFont	file:
~ImDrawList	./imgui.h	/^    ~ImDrawList() { _ClearFreeMemory(); }$/;"	f	struct:ImDrawList
~ImDrawListSplitter	./imgui.h	/^    inline ~ImDrawListSplitter() { ClearFreeMemory(); }$/;"	f	struct:ImDrawListSplitter
~ImFont	./imgui_draw.cpp	/^ImFont::~ImFont()$/;"	f	class:ImFont
~ImFontAtlas	./imgui_draw.cpp	/^ImFontAtlas::~ImFontAtlas()$/;"	f	class:ImFontAtlas
~ImGuiListClipper	./imgui.cpp	/^ImGuiListClipper::~ImGuiListClipper()$/;"	f	class:ImGuiListClipper
~ImGuiTable	./imgui_internal.h	/^    ~ImGuiTable()               { IM_FREE(RawData); }$/;"	f	struct:ImGuiTable
~ImGuiViewportP	./imgui_internal.h	/^    ~ImGuiViewportP()   { if (BgFgDrawLists[0]) IM_DELETE(BgFgDrawLists[0]); if (BgFgDrawLists[1/;"	f	struct:ImGuiViewportP
~ImGuiWindow	./imgui.cpp	/^ImGuiWindow::~ImGuiWindow()$/;"	f	class:ImGuiWindow
~ImPool	./imgui_internal.h	/^    ~ImPool()   { Clear(); }$/;"	f	struct:ImPool
~ImVector	./imgui.h	/^    inline ~ImVector()                                      { if (Data) IM_FREE(Data); } \/\/ Im/;"	f	struct:ImVector
